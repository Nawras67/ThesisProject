
#if !defined(__ORTHANC_FILE__)
#  define __ORTHANC_FILE__ __FILE__
#endif
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OrthancDatabasePlugin.proto

#include "OrthancDatabasePlugin.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AddAttachment_Request_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddAttachment_Response_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddLabel_Request_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddLabel_Response_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClearChanges_Request_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClearChanges_Response_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClearExportedResources_Request_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClearExportedResources_Response_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClearMainDicomTags_Request_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClearMainDicomTags_Response_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Close_Request_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Close_Response_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Commit_Request_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Commit_Response_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateInstance_Request_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateInstance_Response_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DatabaseConstraint_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_DatabaseRequest_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_DatabaseResponse_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteAttachment_Request_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeleteAttachment_Response_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteMetadata_Request_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteMetadata_Response_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteResource_Request_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DeleteResource_Response_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteResource_Response_Resource_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExportedResource_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FileInfo_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FinalizeTransaction_Request_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FinalizeTransaction_Response_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FlushToDisk_Request_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FlushToDisk_Response_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetAllMetadata_Request_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetAllMetadata_Response_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetAllMetadata_Response_Metadata_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetAllPublicIds_Request_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetAllPublicIds_Response_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetAllPublicIdsWithLimits_Request_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetAllPublicIdsWithLimits_Response_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetChanges_Request_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetChanges_Response_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetChildrenInternalId_Request_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetChildrenInternalId_Response_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetChildrenMetadata_Request_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetChildrenMetadata_Response_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetChildrenPublicId_Request_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetChildrenPublicId_Response_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetExportedResources_Request_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetExportedResources_Response_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetLastChange_Request_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetLastChange_Response_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetLastChangeIndex_Request_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetLastChangeIndex_Response_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetLastExportedResource_Request_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetLastExportedResource_Response_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetMainDicomTags_Request_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetMainDicomTags_Response_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetMainDicomTags_Response_Tag_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetPublicId_Request_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetPublicId_Response_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetResourceType_Request_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetResourceType_Response_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetResourcesCount_Request_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetResourcesCount_Response_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetSystemInformation_Request_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetSystemInformation_Response_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetTotalCompressedSize_Request_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetTotalCompressedSize_Response_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetTotalUncompressedSize_Request_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetTotalUncompressedSize_Response_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IncrementGlobalProperty_Request_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IncrementGlobalProperty_Response_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IsDiskSizeAbove_Request_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IsDiskSizeAbove_Response_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IsProtectedPatient_Request_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IsProtectedPatient_Response_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListAvailableAttachments_Request_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListAvailableAttachments_Response_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListLabels_Request_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListLabels_Response_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogChange_Request_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogChange_Response_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogExportedResource_Request_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogExportedResource_Response_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LookupAttachment_Request_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LookupAttachment_Response_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LookupGlobalProperty_Request_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LookupGlobalProperty_Response_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LookupMetadata_Request_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LookupMetadata_Response_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LookupParent_Request_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LookupParent_Response_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LookupResource_Request_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LookupResource_Response_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LookupResourceAndParent_Request_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LookupResourceAndParent_Response_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LookupResources_Request_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LookupResources_Response_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MeasureLatency_Request_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MeasureLatency_Response_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Open_Request_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Open_Request_IdentifierTag_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Open_Response_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoveLabel_Request_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoveLabel_Response_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Rollback_Request_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Rollback_Response_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SelectPatientToRecycle_Request_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SelectPatientToRecycle_Response_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SelectPatientToRecycleWithAvoid_Request_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SelectPatientToRecycleWithAvoid_Response_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerIndexChange_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetGlobalProperty_Request_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetGlobalProperty_Response_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetMetadata_Request_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetMetadata_Response_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetProtectedPatient_Request_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetProtectedPatient_Response_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SetResourcesContent_Request_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetResourcesContent_Request_Metadata_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetResourcesContent_Request_Tag_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetResourcesContent_Response_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StartTransaction_Request_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StartTransaction_Response_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<50> scc_info_TransactionRequest_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<50> scc_info_TransactionResponse_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateAndGetStatistics_Request_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateAndGetStatistics_Response_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Upgrade_Request_OrthancDatabasePlugin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Upgrade_Response_OrthancDatabasePlugin_2eproto;
namespace Orthanc {
namespace DatabasePluginMessages {
class FileInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FileInfo> _instance;
} _FileInfo_default_instance_;
class ServerIndexChangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerIndexChange> _instance;
} _ServerIndexChange_default_instance_;
class ExportedResourceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExportedResource> _instance;
} _ExportedResource_default_instance_;
class DatabaseConstraintDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DatabaseConstraint> _instance;
} _DatabaseConstraint_default_instance_;
class GetSystemInformation_RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetSystemInformation_Request> _instance;
} _GetSystemInformation_Request_default_instance_;
class GetSystemInformation_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetSystemInformation_Response> _instance;
} _GetSystemInformation_Response_default_instance_;
class GetSystemInformationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetSystemInformation> _instance;
} _GetSystemInformation_default_instance_;
class Open_Request_IdentifierTagDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Open_Request_IdentifierTag> _instance;
} _Open_Request_IdentifierTag_default_instance_;
class Open_RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Open_Request> _instance;
} _Open_Request_default_instance_;
class Open_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Open_Response> _instance;
} _Open_Response_default_instance_;
class OpenDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Open> _instance;
} _Open_default_instance_;
class Close_RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Close_Request> _instance;
} _Close_Request_default_instance_;
class Close_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Close_Response> _instance;
} _Close_Response_default_instance_;
class CloseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Close> _instance;
} _Close_default_instance_;
class FlushToDisk_RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FlushToDisk_Request> _instance;
} _FlushToDisk_Request_default_instance_;
class FlushToDisk_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FlushToDisk_Response> _instance;
} _FlushToDisk_Response_default_instance_;
class FlushToDiskDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FlushToDisk> _instance;
} _FlushToDisk_default_instance_;
class StartTransaction_RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StartTransaction_Request> _instance;
} _StartTransaction_Request_default_instance_;
class StartTransaction_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StartTransaction_Response> _instance;
} _StartTransaction_Response_default_instance_;
class StartTransactionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StartTransaction> _instance;
} _StartTransaction_default_instance_;
class Upgrade_RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Upgrade_Request> _instance;
} _Upgrade_Request_default_instance_;
class Upgrade_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Upgrade_Response> _instance;
} _Upgrade_Response_default_instance_;
class UpgradeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Upgrade> _instance;
} _Upgrade_default_instance_;
class FinalizeTransaction_RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FinalizeTransaction_Request> _instance;
} _FinalizeTransaction_Request_default_instance_;
class FinalizeTransaction_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FinalizeTransaction_Response> _instance;
} _FinalizeTransaction_Response_default_instance_;
class FinalizeTransactionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FinalizeTransaction> _instance;
} _FinalizeTransaction_default_instance_;
class MeasureLatency_RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MeasureLatency_Request> _instance;
} _MeasureLatency_Request_default_instance_;
class MeasureLatency_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MeasureLatency_Response> _instance;
} _MeasureLatency_Response_default_instance_;
class MeasureLatencyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MeasureLatency> _instance;
} _MeasureLatency_default_instance_;
class DatabaseRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DatabaseRequest> _instance;
} _DatabaseRequest_default_instance_;
class DatabaseResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DatabaseResponse> _instance;
} _DatabaseResponse_default_instance_;
class Rollback_RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Rollback_Request> _instance;
} _Rollback_Request_default_instance_;
class Rollback_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Rollback_Response> _instance;
} _Rollback_Response_default_instance_;
class RollbackDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Rollback> _instance;
} _Rollback_default_instance_;
class Commit_RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Commit_Request> _instance;
} _Commit_Request_default_instance_;
class Commit_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Commit_Response> _instance;
} _Commit_Response_default_instance_;
class CommitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Commit> _instance;
} _Commit_default_instance_;
class AddAttachment_RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddAttachment_Request> _instance;
} _AddAttachment_Request_default_instance_;
class AddAttachment_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddAttachment_Response> _instance;
} _AddAttachment_Response_default_instance_;
class AddAttachmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddAttachment> _instance;
} _AddAttachment_default_instance_;
class ClearChanges_RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClearChanges_Request> _instance;
} _ClearChanges_Request_default_instance_;
class ClearChanges_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClearChanges_Response> _instance;
} _ClearChanges_Response_default_instance_;
class ClearChangesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClearChanges> _instance;
} _ClearChanges_default_instance_;
class ClearExportedResources_RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClearExportedResources_Request> _instance;
} _ClearExportedResources_Request_default_instance_;
class ClearExportedResources_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClearExportedResources_Response> _instance;
} _ClearExportedResources_Response_default_instance_;
class ClearExportedResourcesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClearExportedResources> _instance;
} _ClearExportedResources_default_instance_;
class DeleteAttachment_RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteAttachment_Request> _instance;
} _DeleteAttachment_Request_default_instance_;
class DeleteAttachment_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteAttachment_Response> _instance;
} _DeleteAttachment_Response_default_instance_;
class DeleteAttachmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteAttachment> _instance;
} _DeleteAttachment_default_instance_;
class DeleteMetadata_RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteMetadata_Request> _instance;
} _DeleteMetadata_Request_default_instance_;
class DeleteMetadata_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteMetadata_Response> _instance;
} _DeleteMetadata_Response_default_instance_;
class DeleteMetadataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteMetadata> _instance;
} _DeleteMetadata_default_instance_;
class DeleteResource_RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteResource_Request> _instance;
} _DeleteResource_Request_default_instance_;
class DeleteResource_Response_ResourceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteResource_Response_Resource> _instance;
} _DeleteResource_Response_Resource_default_instance_;
class DeleteResource_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteResource_Response> _instance;
} _DeleteResource_Response_default_instance_;
class DeleteResourceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteResource> _instance;
} _DeleteResource_default_instance_;
class GetAllMetadata_RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAllMetadata_Request> _instance;
} _GetAllMetadata_Request_default_instance_;
class GetAllMetadata_Response_MetadataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAllMetadata_Response_Metadata> _instance;
} _GetAllMetadata_Response_Metadata_default_instance_;
class GetAllMetadata_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAllMetadata_Response> _instance;
} _GetAllMetadata_Response_default_instance_;
class GetAllMetadataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAllMetadata> _instance;
} _GetAllMetadata_default_instance_;
class GetAllPublicIds_RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAllPublicIds_Request> _instance;
} _GetAllPublicIds_Request_default_instance_;
class GetAllPublicIds_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAllPublicIds_Response> _instance;
} _GetAllPublicIds_Response_default_instance_;
class GetAllPublicIdsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAllPublicIds> _instance;
} _GetAllPublicIds_default_instance_;
class GetAllPublicIdsWithLimits_RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAllPublicIdsWithLimits_Request> _instance;
} _GetAllPublicIdsWithLimits_Request_default_instance_;
class GetAllPublicIdsWithLimits_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAllPublicIdsWithLimits_Response> _instance;
} _GetAllPublicIdsWithLimits_Response_default_instance_;
class GetAllPublicIdsWithLimitsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAllPublicIdsWithLimits> _instance;
} _GetAllPublicIdsWithLimits_default_instance_;
class GetChanges_RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetChanges_Request> _instance;
} _GetChanges_Request_default_instance_;
class GetChanges_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetChanges_Response> _instance;
} _GetChanges_Response_default_instance_;
class GetChangesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetChanges> _instance;
} _GetChanges_default_instance_;
class GetChildrenInternalId_RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetChildrenInternalId_Request> _instance;
} _GetChildrenInternalId_Request_default_instance_;
class GetChildrenInternalId_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetChildrenInternalId_Response> _instance;
} _GetChildrenInternalId_Response_default_instance_;
class GetChildrenInternalIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetChildrenInternalId> _instance;
} _GetChildrenInternalId_default_instance_;
class GetChildrenPublicId_RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetChildrenPublicId_Request> _instance;
} _GetChildrenPublicId_Request_default_instance_;
class GetChildrenPublicId_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetChildrenPublicId_Response> _instance;
} _GetChildrenPublicId_Response_default_instance_;
class GetChildrenPublicIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetChildrenPublicId> _instance;
} _GetChildrenPublicId_default_instance_;
class GetExportedResources_RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetExportedResources_Request> _instance;
} _GetExportedResources_Request_default_instance_;
class GetExportedResources_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetExportedResources_Response> _instance;
} _GetExportedResources_Response_default_instance_;
class GetExportedResourcesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetExportedResources> _instance;
} _GetExportedResources_default_instance_;
class GetLastChange_RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetLastChange_Request> _instance;
} _GetLastChange_Request_default_instance_;
class GetLastChange_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetLastChange_Response> _instance;
} _GetLastChange_Response_default_instance_;
class GetLastChangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetLastChange> _instance;
} _GetLastChange_default_instance_;
class GetLastExportedResource_RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetLastExportedResource_Request> _instance;
} _GetLastExportedResource_Request_default_instance_;
class GetLastExportedResource_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetLastExportedResource_Response> _instance;
} _GetLastExportedResource_Response_default_instance_;
class GetLastExportedResourceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetLastExportedResource> _instance;
} _GetLastExportedResource_default_instance_;
class GetMainDicomTags_RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetMainDicomTags_Request> _instance;
} _GetMainDicomTags_Request_default_instance_;
class GetMainDicomTags_Response_TagDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetMainDicomTags_Response_Tag> _instance;
} _GetMainDicomTags_Response_Tag_default_instance_;
class GetMainDicomTags_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetMainDicomTags_Response> _instance;
} _GetMainDicomTags_Response_default_instance_;
class GetMainDicomTagsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetMainDicomTags> _instance;
} _GetMainDicomTags_default_instance_;
class GetPublicId_RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetPublicId_Request> _instance;
} _GetPublicId_Request_default_instance_;
class GetPublicId_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetPublicId_Response> _instance;
} _GetPublicId_Response_default_instance_;
class GetPublicIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetPublicId> _instance;
} _GetPublicId_default_instance_;
class GetResourcesCount_RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetResourcesCount_Request> _instance;
} _GetResourcesCount_Request_default_instance_;
class GetResourcesCount_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetResourcesCount_Response> _instance;
} _GetResourcesCount_Response_default_instance_;
class GetResourcesCountDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetResourcesCount> _instance;
} _GetResourcesCount_default_instance_;
class GetResourceType_RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetResourceType_Request> _instance;
} _GetResourceType_Request_default_instance_;
class GetResourceType_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetResourceType_Response> _instance;
} _GetResourceType_Response_default_instance_;
class GetResourceTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetResourceType> _instance;
} _GetResourceType_default_instance_;
class GetTotalCompressedSize_RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetTotalCompressedSize_Request> _instance;
} _GetTotalCompressedSize_Request_default_instance_;
class GetTotalCompressedSize_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetTotalCompressedSize_Response> _instance;
} _GetTotalCompressedSize_Response_default_instance_;
class GetTotalCompressedSizeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetTotalCompressedSize> _instance;
} _GetTotalCompressedSize_default_instance_;
class GetTotalUncompressedSize_RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetTotalUncompressedSize_Request> _instance;
} _GetTotalUncompressedSize_Request_default_instance_;
class GetTotalUncompressedSize_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetTotalUncompressedSize_Response> _instance;
} _GetTotalUncompressedSize_Response_default_instance_;
class GetTotalUncompressedSizeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetTotalUncompressedSize> _instance;
} _GetTotalUncompressedSize_default_instance_;
class IsProtectedPatient_RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IsProtectedPatient_Request> _instance;
} _IsProtectedPatient_Request_default_instance_;
class IsProtectedPatient_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IsProtectedPatient_Response> _instance;
} _IsProtectedPatient_Response_default_instance_;
class IsProtectedPatientDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IsProtectedPatient> _instance;
} _IsProtectedPatient_default_instance_;
class ListAvailableAttachments_RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListAvailableAttachments_Request> _instance;
} _ListAvailableAttachments_Request_default_instance_;
class ListAvailableAttachments_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListAvailableAttachments_Response> _instance;
} _ListAvailableAttachments_Response_default_instance_;
class ListAvailableAttachmentsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListAvailableAttachments> _instance;
} _ListAvailableAttachments_default_instance_;
class LogChange_RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogChange_Request> _instance;
} _LogChange_Request_default_instance_;
class LogChange_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogChange_Response> _instance;
} _LogChange_Response_default_instance_;
class LogChangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogChange> _instance;
} _LogChange_default_instance_;
class LogExportedResource_RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogExportedResource_Request> _instance;
} _LogExportedResource_Request_default_instance_;
class LogExportedResource_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogExportedResource_Response> _instance;
} _LogExportedResource_Response_default_instance_;
class LogExportedResourceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogExportedResource> _instance;
} _LogExportedResource_default_instance_;
class LookupAttachment_RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LookupAttachment_Request> _instance;
} _LookupAttachment_Request_default_instance_;
class LookupAttachment_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LookupAttachment_Response> _instance;
} _LookupAttachment_Response_default_instance_;
class LookupAttachmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LookupAttachment> _instance;
} _LookupAttachment_default_instance_;
class LookupGlobalProperty_RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LookupGlobalProperty_Request> _instance;
} _LookupGlobalProperty_Request_default_instance_;
class LookupGlobalProperty_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LookupGlobalProperty_Response> _instance;
} _LookupGlobalProperty_Response_default_instance_;
class LookupGlobalPropertyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LookupGlobalProperty> _instance;
} _LookupGlobalProperty_default_instance_;
class LookupMetadata_RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LookupMetadata_Request> _instance;
} _LookupMetadata_Request_default_instance_;
class LookupMetadata_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LookupMetadata_Response> _instance;
} _LookupMetadata_Response_default_instance_;
class LookupMetadataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LookupMetadata> _instance;
} _LookupMetadata_default_instance_;
class LookupParent_RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LookupParent_Request> _instance;
} _LookupParent_Request_default_instance_;
class LookupParent_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LookupParent_Response> _instance;
} _LookupParent_Response_default_instance_;
class LookupParentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LookupParent> _instance;
} _LookupParent_default_instance_;
class LookupResource_RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LookupResource_Request> _instance;
} _LookupResource_Request_default_instance_;
class LookupResource_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LookupResource_Response> _instance;
} _LookupResource_Response_default_instance_;
class LookupResourceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LookupResource> _instance;
} _LookupResource_default_instance_;
class SelectPatientToRecycle_RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SelectPatientToRecycle_Request> _instance;
} _SelectPatientToRecycle_Request_default_instance_;
class SelectPatientToRecycle_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SelectPatientToRecycle_Response> _instance;
} _SelectPatientToRecycle_Response_default_instance_;
class SelectPatientToRecycleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SelectPatientToRecycle> _instance;
} _SelectPatientToRecycle_default_instance_;
class SelectPatientToRecycleWithAvoid_RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SelectPatientToRecycleWithAvoid_Request> _instance;
} _SelectPatientToRecycleWithAvoid_Request_default_instance_;
class SelectPatientToRecycleWithAvoid_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SelectPatientToRecycleWithAvoid_Response> _instance;
} _SelectPatientToRecycleWithAvoid_Response_default_instance_;
class SelectPatientToRecycleWithAvoidDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SelectPatientToRecycleWithAvoid> _instance;
} _SelectPatientToRecycleWithAvoid_default_instance_;
class SetGlobalProperty_RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetGlobalProperty_Request> _instance;
} _SetGlobalProperty_Request_default_instance_;
class SetGlobalProperty_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetGlobalProperty_Response> _instance;
} _SetGlobalProperty_Response_default_instance_;
class SetGlobalPropertyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetGlobalProperty> _instance;
} _SetGlobalProperty_default_instance_;
class IncrementGlobalProperty_RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IncrementGlobalProperty_Request> _instance;
} _IncrementGlobalProperty_Request_default_instance_;
class IncrementGlobalProperty_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IncrementGlobalProperty_Response> _instance;
} _IncrementGlobalProperty_Response_default_instance_;
class IncrementGlobalPropertyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IncrementGlobalProperty> _instance;
} _IncrementGlobalProperty_default_instance_;
class UpdateAndGetStatistics_RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateAndGetStatistics_Request> _instance;
} _UpdateAndGetStatistics_Request_default_instance_;
class UpdateAndGetStatistics_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateAndGetStatistics_Response> _instance;
} _UpdateAndGetStatistics_Response_default_instance_;
class UpdateAndGetStatisticsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateAndGetStatistics> _instance;
} _UpdateAndGetStatistics_default_instance_;
class ClearMainDicomTags_RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClearMainDicomTags_Request> _instance;
} _ClearMainDicomTags_Request_default_instance_;
class ClearMainDicomTags_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClearMainDicomTags_Response> _instance;
} _ClearMainDicomTags_Response_default_instance_;
class ClearMainDicomTagsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClearMainDicomTags> _instance;
} _ClearMainDicomTags_default_instance_;
class SetMetadata_RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetMetadata_Request> _instance;
} _SetMetadata_Request_default_instance_;
class SetMetadata_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetMetadata_Response> _instance;
} _SetMetadata_Response_default_instance_;
class SetMetadataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetMetadata> _instance;
} _SetMetadata_default_instance_;
class SetProtectedPatient_RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetProtectedPatient_Request> _instance;
} _SetProtectedPatient_Request_default_instance_;
class SetProtectedPatient_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetProtectedPatient_Response> _instance;
} _SetProtectedPatient_Response_default_instance_;
class SetProtectedPatientDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetProtectedPatient> _instance;
} _SetProtectedPatient_default_instance_;
class IsDiskSizeAbove_RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IsDiskSizeAbove_Request> _instance;
} _IsDiskSizeAbove_Request_default_instance_;
class IsDiskSizeAbove_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IsDiskSizeAbove_Response> _instance;
} _IsDiskSizeAbove_Response_default_instance_;
class IsDiskSizeAboveDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IsDiskSizeAbove> _instance;
} _IsDiskSizeAbove_default_instance_;
class LookupResources_RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LookupResources_Request> _instance;
} _LookupResources_Request_default_instance_;
class LookupResources_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LookupResources_Response> _instance;
} _LookupResources_Response_default_instance_;
class LookupResourcesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LookupResources> _instance;
} _LookupResources_default_instance_;
class CreateInstance_RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateInstance_Request> _instance;
} _CreateInstance_Request_default_instance_;
class CreateInstance_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateInstance_Response> _instance;
} _CreateInstance_Response_default_instance_;
class CreateInstanceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateInstance> _instance;
} _CreateInstance_default_instance_;
class SetResourcesContent_Request_TagDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetResourcesContent_Request_Tag> _instance;
} _SetResourcesContent_Request_Tag_default_instance_;
class SetResourcesContent_Request_MetadataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetResourcesContent_Request_Metadata> _instance;
} _SetResourcesContent_Request_Metadata_default_instance_;
class SetResourcesContent_RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetResourcesContent_Request> _instance;
} _SetResourcesContent_Request_default_instance_;
class SetResourcesContent_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetResourcesContent_Response> _instance;
} _SetResourcesContent_Response_default_instance_;
class SetResourcesContentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetResourcesContent> _instance;
} _SetResourcesContent_default_instance_;
class GetChildrenMetadata_RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetChildrenMetadata_Request> _instance;
} _GetChildrenMetadata_Request_default_instance_;
class GetChildrenMetadata_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetChildrenMetadata_Response> _instance;
} _GetChildrenMetadata_Response_default_instance_;
class GetChildrenMetadataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetChildrenMetadata> _instance;
} _GetChildrenMetadata_default_instance_;
class GetLastChangeIndex_RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetLastChangeIndex_Request> _instance;
} _GetLastChangeIndex_Request_default_instance_;
class GetLastChangeIndex_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetLastChangeIndex_Response> _instance;
} _GetLastChangeIndex_Response_default_instance_;
class GetLastChangeIndexDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetLastChangeIndex> _instance;
} _GetLastChangeIndex_default_instance_;
class LookupResourceAndParent_RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LookupResourceAndParent_Request> _instance;
} _LookupResourceAndParent_Request_default_instance_;
class LookupResourceAndParent_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LookupResourceAndParent_Response> _instance;
} _LookupResourceAndParent_Response_default_instance_;
class LookupResourceAndParentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LookupResourceAndParent> _instance;
} _LookupResourceAndParent_default_instance_;
class AddLabel_RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddLabel_Request> _instance;
} _AddLabel_Request_default_instance_;
class AddLabel_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddLabel_Response> _instance;
} _AddLabel_Response_default_instance_;
class AddLabelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddLabel> _instance;
} _AddLabel_default_instance_;
class RemoveLabel_RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoveLabel_Request> _instance;
} _RemoveLabel_Request_default_instance_;
class RemoveLabel_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoveLabel_Response> _instance;
} _RemoveLabel_Response_default_instance_;
class RemoveLabelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoveLabel> _instance;
} _RemoveLabel_default_instance_;
class ListLabels_RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListLabels_Request> _instance;
} _ListLabels_Request_default_instance_;
class ListLabels_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListLabels_Response> _instance;
} _ListLabels_Response_default_instance_;
class ListLabelsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListLabels> _instance;
} _ListLabels_default_instance_;
class TransactionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransactionRequest> _instance;
} _TransactionRequest_default_instance_;
class TransactionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransactionResponse> _instance;
} _TransactionResponse_default_instance_;
class RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Request> _instance;
} _Request_default_instance_;
class ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Response> _instance;
} _Response_default_instance_;
}  // namespace DatabasePluginMessages
}  // namespace Orthanc
static void InitDefaultsscc_info_AddAttachment_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_AddAttachment_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::AddAttachment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::AddAttachment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddAttachment_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AddAttachment_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_AddAttachment_Request_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_AddAttachment_Request_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::AddAttachment_Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::AddAttachment_Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AddAttachment_Request_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AddAttachment_Request_OrthancDatabasePlugin_2eproto}, {
      &scc_info_FileInfo_OrthancDatabasePlugin_2eproto.base,}};

static void InitDefaultsscc_info_AddAttachment_Response_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_AddAttachment_Response_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::AddAttachment_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::AddAttachment_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddAttachment_Response_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AddAttachment_Response_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_AddLabel_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_AddLabel_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::AddLabel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::AddLabel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddLabel_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AddLabel_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_AddLabel_Request_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_AddLabel_Request_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::AddLabel_Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::AddLabel_Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddLabel_Request_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AddLabel_Request_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_AddLabel_Response_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_AddLabel_Response_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::AddLabel_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::AddLabel_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddLabel_Response_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AddLabel_Response_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_ClearChanges_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_ClearChanges_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::ClearChanges();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::ClearChanges::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClearChanges_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClearChanges_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_ClearChanges_Request_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_ClearChanges_Request_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::ClearChanges_Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::ClearChanges_Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClearChanges_Request_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClearChanges_Request_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_ClearChanges_Response_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_ClearChanges_Response_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::ClearChanges_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::ClearChanges_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClearChanges_Response_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClearChanges_Response_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_ClearExportedResources_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_ClearExportedResources_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::ClearExportedResources();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::ClearExportedResources::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClearExportedResources_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClearExportedResources_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_ClearExportedResources_Request_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_ClearExportedResources_Request_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::ClearExportedResources_Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::ClearExportedResources_Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClearExportedResources_Request_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClearExportedResources_Request_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_ClearExportedResources_Response_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_ClearExportedResources_Response_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::ClearExportedResources_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::ClearExportedResources_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClearExportedResources_Response_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClearExportedResources_Response_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_ClearMainDicomTags_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_ClearMainDicomTags_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::ClearMainDicomTags();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::ClearMainDicomTags::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClearMainDicomTags_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClearMainDicomTags_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_ClearMainDicomTags_Request_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_ClearMainDicomTags_Request_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::ClearMainDicomTags_Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::ClearMainDicomTags_Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClearMainDicomTags_Request_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClearMainDicomTags_Request_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_ClearMainDicomTags_Response_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_ClearMainDicomTags_Response_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::ClearMainDicomTags_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::ClearMainDicomTags_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClearMainDicomTags_Response_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClearMainDicomTags_Response_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_Close_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_Close_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::Close();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::Close::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Close_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Close_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_Close_Request_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_Close_Request_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::Close_Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::Close_Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Close_Request_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Close_Request_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_Close_Response_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_Close_Response_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::Close_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::Close_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Close_Response_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Close_Response_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_Commit_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_Commit_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::Commit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::Commit::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Commit_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Commit_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_Commit_Request_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_Commit_Request_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::Commit_Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::Commit_Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Commit_Request_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Commit_Request_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_Commit_Response_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_Commit_Response_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::Commit_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::Commit_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Commit_Response_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Commit_Response_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_CreateInstance_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_CreateInstance_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::CreateInstance();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::CreateInstance::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateInstance_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateInstance_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_CreateInstance_Request_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_CreateInstance_Request_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::CreateInstance_Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::CreateInstance_Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateInstance_Request_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateInstance_Request_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_CreateInstance_Response_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_CreateInstance_Response_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::CreateInstance_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::CreateInstance_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateInstance_Response_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateInstance_Response_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_DatabaseConstraint_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_DatabaseConstraint_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::DatabaseConstraint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::DatabaseConstraint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DatabaseConstraint_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DatabaseConstraint_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_DatabaseRequest_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_DatabaseRequest_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::DatabaseRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::DatabaseRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_DatabaseRequest_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 8, 0, InitDefaultsscc_info_DatabaseRequest_OrthancDatabasePlugin_2eproto}, {
      &scc_info_GetSystemInformation_Request_OrthancDatabasePlugin_2eproto.base,
      &scc_info_Open_Request_OrthancDatabasePlugin_2eproto.base,
      &scc_info_Close_Request_OrthancDatabasePlugin_2eproto.base,
      &scc_info_FlushToDisk_Request_OrthancDatabasePlugin_2eproto.base,
      &scc_info_StartTransaction_Request_OrthancDatabasePlugin_2eproto.base,
      &scc_info_Upgrade_Request_OrthancDatabasePlugin_2eproto.base,
      &scc_info_FinalizeTransaction_Request_OrthancDatabasePlugin_2eproto.base,
      &scc_info_MeasureLatency_Request_OrthancDatabasePlugin_2eproto.base,}};

static void InitDefaultsscc_info_DatabaseResponse_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_DatabaseResponse_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::DatabaseResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::DatabaseResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_DatabaseResponse_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 8, 0, InitDefaultsscc_info_DatabaseResponse_OrthancDatabasePlugin_2eproto}, {
      &scc_info_GetSystemInformation_Response_OrthancDatabasePlugin_2eproto.base,
      &scc_info_Open_Response_OrthancDatabasePlugin_2eproto.base,
      &scc_info_Close_Response_OrthancDatabasePlugin_2eproto.base,
      &scc_info_FlushToDisk_Response_OrthancDatabasePlugin_2eproto.base,
      &scc_info_StartTransaction_Response_OrthancDatabasePlugin_2eproto.base,
      &scc_info_Upgrade_Response_OrthancDatabasePlugin_2eproto.base,
      &scc_info_FinalizeTransaction_Response_OrthancDatabasePlugin_2eproto.base,
      &scc_info_MeasureLatency_Response_OrthancDatabasePlugin_2eproto.base,}};

static void InitDefaultsscc_info_DeleteAttachment_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_DeleteAttachment_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::DeleteAttachment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::DeleteAttachment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteAttachment_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteAttachment_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_DeleteAttachment_Request_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_DeleteAttachment_Request_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::DeleteAttachment_Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::DeleteAttachment_Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteAttachment_Request_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteAttachment_Request_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_DeleteAttachment_Response_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_DeleteAttachment_Response_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::DeleteAttachment_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::DeleteAttachment_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeleteAttachment_Response_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeleteAttachment_Response_OrthancDatabasePlugin_2eproto}, {
      &scc_info_FileInfo_OrthancDatabasePlugin_2eproto.base,}};

static void InitDefaultsscc_info_DeleteMetadata_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_DeleteMetadata_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::DeleteMetadata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::DeleteMetadata::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteMetadata_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteMetadata_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_DeleteMetadata_Request_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_DeleteMetadata_Request_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::DeleteMetadata_Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::DeleteMetadata_Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteMetadata_Request_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteMetadata_Request_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_DeleteMetadata_Response_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_DeleteMetadata_Response_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::DeleteMetadata_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::DeleteMetadata_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteMetadata_Response_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteMetadata_Response_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_DeleteResource_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_DeleteResource_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::DeleteResource();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::DeleteResource::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteResource_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteResource_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_DeleteResource_Request_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_DeleteResource_Request_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::DeleteResource_Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::DeleteResource_Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteResource_Request_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteResource_Request_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_DeleteResource_Response_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_DeleteResource_Response_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::DeleteResource_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::DeleteResource_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DeleteResource_Response_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DeleteResource_Response_OrthancDatabasePlugin_2eproto}, {
      &scc_info_FileInfo_OrthancDatabasePlugin_2eproto.base,
      &scc_info_DeleteResource_Response_Resource_OrthancDatabasePlugin_2eproto.base,}};

static void InitDefaultsscc_info_DeleteResource_Response_Resource_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_DeleteResource_Response_Resource_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::DeleteResource_Response_Resource();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::DeleteResource_Response_Resource::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteResource_Response_Resource_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteResource_Response_Resource_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_ExportedResource_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_ExportedResource_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::ExportedResource();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::ExportedResource::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExportedResource_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ExportedResource_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_FileInfo_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_FileInfo_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::FileInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::FileInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FileInfo_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FileInfo_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_FinalizeTransaction_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_FinalizeTransaction_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::FinalizeTransaction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::FinalizeTransaction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FinalizeTransaction_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FinalizeTransaction_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_FinalizeTransaction_Request_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_FinalizeTransaction_Request_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::FinalizeTransaction_Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::FinalizeTransaction_Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FinalizeTransaction_Request_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FinalizeTransaction_Request_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_FinalizeTransaction_Response_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_FinalizeTransaction_Response_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::FinalizeTransaction_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::FinalizeTransaction_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FinalizeTransaction_Response_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FinalizeTransaction_Response_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_FlushToDisk_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_FlushToDisk_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::FlushToDisk();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::FlushToDisk::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FlushToDisk_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FlushToDisk_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_FlushToDisk_Request_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_FlushToDisk_Request_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::FlushToDisk_Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::FlushToDisk_Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FlushToDisk_Request_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FlushToDisk_Request_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_FlushToDisk_Response_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_FlushToDisk_Response_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::FlushToDisk_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::FlushToDisk_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FlushToDisk_Response_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FlushToDisk_Response_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_GetAllMetadata_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_GetAllMetadata_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::GetAllMetadata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::GetAllMetadata::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetAllMetadata_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetAllMetadata_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_GetAllMetadata_Request_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_GetAllMetadata_Request_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::GetAllMetadata_Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::GetAllMetadata_Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetAllMetadata_Request_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetAllMetadata_Request_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_GetAllMetadata_Response_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_GetAllMetadata_Response_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::GetAllMetadata_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::GetAllMetadata_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetAllMetadata_Response_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetAllMetadata_Response_OrthancDatabasePlugin_2eproto}, {
      &scc_info_GetAllMetadata_Response_Metadata_OrthancDatabasePlugin_2eproto.base,}};

static void InitDefaultsscc_info_GetAllMetadata_Response_Metadata_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_GetAllMetadata_Response_Metadata_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::GetAllMetadata_Response_Metadata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::GetAllMetadata_Response_Metadata::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetAllMetadata_Response_Metadata_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetAllMetadata_Response_Metadata_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_GetAllPublicIds_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_GetAllPublicIds_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::GetAllPublicIds();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::GetAllPublicIds::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetAllPublicIds_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetAllPublicIds_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_GetAllPublicIds_Request_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_GetAllPublicIds_Request_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::GetAllPublicIds_Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::GetAllPublicIds_Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetAllPublicIds_Request_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetAllPublicIds_Request_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_GetAllPublicIds_Response_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_GetAllPublicIds_Response_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::GetAllPublicIds_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::GetAllPublicIds_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetAllPublicIds_Response_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetAllPublicIds_Response_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_GetAllPublicIdsWithLimits_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_GetAllPublicIdsWithLimits_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetAllPublicIdsWithLimits_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetAllPublicIdsWithLimits_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_GetAllPublicIdsWithLimits_Request_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_GetAllPublicIdsWithLimits_Request_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits_Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits_Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetAllPublicIdsWithLimits_Request_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetAllPublicIdsWithLimits_Request_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_GetAllPublicIdsWithLimits_Response_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_GetAllPublicIdsWithLimits_Response_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetAllPublicIdsWithLimits_Response_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetAllPublicIdsWithLimits_Response_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_GetChanges_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_GetChanges_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::GetChanges();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::GetChanges::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetChanges_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetChanges_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_GetChanges_Request_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_GetChanges_Request_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::GetChanges_Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::GetChanges_Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetChanges_Request_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetChanges_Request_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_GetChanges_Response_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_GetChanges_Response_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::GetChanges_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::GetChanges_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetChanges_Response_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetChanges_Response_OrthancDatabasePlugin_2eproto}, {
      &scc_info_ServerIndexChange_OrthancDatabasePlugin_2eproto.base,}};

static void InitDefaultsscc_info_GetChildrenInternalId_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_GetChildrenInternalId_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::GetChildrenInternalId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::GetChildrenInternalId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetChildrenInternalId_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetChildrenInternalId_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_GetChildrenInternalId_Request_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_GetChildrenInternalId_Request_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::GetChildrenInternalId_Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::GetChildrenInternalId_Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetChildrenInternalId_Request_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetChildrenInternalId_Request_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_GetChildrenInternalId_Response_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_GetChildrenInternalId_Response_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::GetChildrenInternalId_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::GetChildrenInternalId_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetChildrenInternalId_Response_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetChildrenInternalId_Response_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_GetChildrenMetadata_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_GetChildrenMetadata_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::GetChildrenMetadata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::GetChildrenMetadata::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetChildrenMetadata_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetChildrenMetadata_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_GetChildrenMetadata_Request_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_GetChildrenMetadata_Request_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::GetChildrenMetadata_Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::GetChildrenMetadata_Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetChildrenMetadata_Request_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetChildrenMetadata_Request_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_GetChildrenMetadata_Response_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_GetChildrenMetadata_Response_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::GetChildrenMetadata_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::GetChildrenMetadata_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetChildrenMetadata_Response_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetChildrenMetadata_Response_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_GetChildrenPublicId_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_GetChildrenPublicId_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::GetChildrenPublicId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::GetChildrenPublicId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetChildrenPublicId_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetChildrenPublicId_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_GetChildrenPublicId_Request_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_GetChildrenPublicId_Request_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::GetChildrenPublicId_Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::GetChildrenPublicId_Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetChildrenPublicId_Request_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetChildrenPublicId_Request_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_GetChildrenPublicId_Response_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_GetChildrenPublicId_Response_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::GetChildrenPublicId_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::GetChildrenPublicId_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetChildrenPublicId_Response_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetChildrenPublicId_Response_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_GetExportedResources_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_GetExportedResources_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::GetExportedResources();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::GetExportedResources::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetExportedResources_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetExportedResources_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_GetExportedResources_Request_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_GetExportedResources_Request_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::GetExportedResources_Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::GetExportedResources_Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetExportedResources_Request_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetExportedResources_Request_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_GetExportedResources_Response_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_GetExportedResources_Response_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::GetExportedResources_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::GetExportedResources_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetExportedResources_Response_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetExportedResources_Response_OrthancDatabasePlugin_2eproto}, {
      &scc_info_ExportedResource_OrthancDatabasePlugin_2eproto.base,}};

static void InitDefaultsscc_info_GetLastChange_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_GetLastChange_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::GetLastChange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::GetLastChange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetLastChange_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetLastChange_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_GetLastChange_Request_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_GetLastChange_Request_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::GetLastChange_Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::GetLastChange_Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetLastChange_Request_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetLastChange_Request_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_GetLastChange_Response_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_GetLastChange_Response_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::GetLastChange_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::GetLastChange_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetLastChange_Response_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetLastChange_Response_OrthancDatabasePlugin_2eproto}, {
      &scc_info_ServerIndexChange_OrthancDatabasePlugin_2eproto.base,}};

static void InitDefaultsscc_info_GetLastChangeIndex_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_GetLastChangeIndex_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::GetLastChangeIndex();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::GetLastChangeIndex::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetLastChangeIndex_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetLastChangeIndex_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_GetLastChangeIndex_Request_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_GetLastChangeIndex_Request_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::GetLastChangeIndex_Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::GetLastChangeIndex_Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetLastChangeIndex_Request_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetLastChangeIndex_Request_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_GetLastChangeIndex_Response_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_GetLastChangeIndex_Response_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::GetLastChangeIndex_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::GetLastChangeIndex_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetLastChangeIndex_Response_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetLastChangeIndex_Response_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_GetLastExportedResource_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_GetLastExportedResource_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::GetLastExportedResource();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::GetLastExportedResource::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetLastExportedResource_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetLastExportedResource_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_GetLastExportedResource_Request_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_GetLastExportedResource_Request_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::GetLastExportedResource_Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::GetLastExportedResource_Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetLastExportedResource_Request_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetLastExportedResource_Request_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_GetLastExportedResource_Response_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_GetLastExportedResource_Response_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::GetLastExportedResource_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::GetLastExportedResource_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetLastExportedResource_Response_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetLastExportedResource_Response_OrthancDatabasePlugin_2eproto}, {
      &scc_info_ExportedResource_OrthancDatabasePlugin_2eproto.base,}};

static void InitDefaultsscc_info_GetMainDicomTags_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_GetMainDicomTags_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::GetMainDicomTags();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::GetMainDicomTags::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetMainDicomTags_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetMainDicomTags_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_GetMainDicomTags_Request_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_GetMainDicomTags_Request_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetMainDicomTags_Request_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetMainDicomTags_Request_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_GetMainDicomTags_Response_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_GetMainDicomTags_Response_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetMainDicomTags_Response_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetMainDicomTags_Response_OrthancDatabasePlugin_2eproto}, {
      &scc_info_GetMainDicomTags_Response_Tag_OrthancDatabasePlugin_2eproto.base,}};

static void InitDefaultsscc_info_GetMainDicomTags_Response_Tag_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_GetMainDicomTags_Response_Tag_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Response_Tag();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Response_Tag::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetMainDicomTags_Response_Tag_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetMainDicomTags_Response_Tag_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_GetPublicId_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_GetPublicId_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::GetPublicId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::GetPublicId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetPublicId_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetPublicId_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_GetPublicId_Request_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_GetPublicId_Request_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::GetPublicId_Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::GetPublicId_Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetPublicId_Request_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetPublicId_Request_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_GetPublicId_Response_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_GetPublicId_Response_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::GetPublicId_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::GetPublicId_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetPublicId_Response_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetPublicId_Response_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_GetResourceType_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_GetResourceType_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::GetResourceType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::GetResourceType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetResourceType_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetResourceType_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_GetResourceType_Request_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_GetResourceType_Request_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::GetResourceType_Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::GetResourceType_Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetResourceType_Request_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetResourceType_Request_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_GetResourceType_Response_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_GetResourceType_Response_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::GetResourceType_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::GetResourceType_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetResourceType_Response_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetResourceType_Response_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_GetResourcesCount_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_GetResourcesCount_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::GetResourcesCount();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::GetResourcesCount::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetResourcesCount_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetResourcesCount_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_GetResourcesCount_Request_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_GetResourcesCount_Request_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::GetResourcesCount_Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::GetResourcesCount_Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetResourcesCount_Request_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetResourcesCount_Request_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_GetResourcesCount_Response_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_GetResourcesCount_Response_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::GetResourcesCount_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::GetResourcesCount_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetResourcesCount_Response_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetResourcesCount_Response_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_GetSystemInformation_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_GetSystemInformation_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::GetSystemInformation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::GetSystemInformation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetSystemInformation_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetSystemInformation_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_GetSystemInformation_Request_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_GetSystemInformation_Request_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::GetSystemInformation_Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::GetSystemInformation_Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetSystemInformation_Request_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetSystemInformation_Request_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_GetSystemInformation_Response_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_GetSystemInformation_Response_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::GetSystemInformation_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::GetSystemInformation_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetSystemInformation_Response_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetSystemInformation_Response_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_GetTotalCompressedSize_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_GetTotalCompressedSize_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::GetTotalCompressedSize();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::GetTotalCompressedSize::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetTotalCompressedSize_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetTotalCompressedSize_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_GetTotalCompressedSize_Request_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_GetTotalCompressedSize_Request_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::GetTotalCompressedSize_Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::GetTotalCompressedSize_Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetTotalCompressedSize_Request_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetTotalCompressedSize_Request_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_GetTotalCompressedSize_Response_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_GetTotalCompressedSize_Response_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::GetTotalCompressedSize_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::GetTotalCompressedSize_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetTotalCompressedSize_Response_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetTotalCompressedSize_Response_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_GetTotalUncompressedSize_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_GetTotalUncompressedSize_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetTotalUncompressedSize_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetTotalUncompressedSize_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_GetTotalUncompressedSize_Request_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_GetTotalUncompressedSize_Request_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize_Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize_Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetTotalUncompressedSize_Request_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetTotalUncompressedSize_Request_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_GetTotalUncompressedSize_Response_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_GetTotalUncompressedSize_Response_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetTotalUncompressedSize_Response_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetTotalUncompressedSize_Response_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_IncrementGlobalProperty_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_IncrementGlobalProperty_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::IncrementGlobalProperty();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::IncrementGlobalProperty::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IncrementGlobalProperty_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IncrementGlobalProperty_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_IncrementGlobalProperty_Request_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_IncrementGlobalProperty_Request_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::IncrementGlobalProperty_Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::IncrementGlobalProperty_Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IncrementGlobalProperty_Request_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IncrementGlobalProperty_Request_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_IncrementGlobalProperty_Response_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_IncrementGlobalProperty_Response_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::IncrementGlobalProperty_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::IncrementGlobalProperty_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IncrementGlobalProperty_Response_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IncrementGlobalProperty_Response_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_IsDiskSizeAbove_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_IsDiskSizeAbove_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::IsDiskSizeAbove();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::IsDiskSizeAbove::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IsDiskSizeAbove_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IsDiskSizeAbove_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_IsDiskSizeAbove_Request_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_IsDiskSizeAbove_Request_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::IsDiskSizeAbove_Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::IsDiskSizeAbove_Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IsDiskSizeAbove_Request_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IsDiskSizeAbove_Request_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_IsDiskSizeAbove_Response_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_IsDiskSizeAbove_Response_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::IsDiskSizeAbove_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::IsDiskSizeAbove_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IsDiskSizeAbove_Response_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IsDiskSizeAbove_Response_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_IsProtectedPatient_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_IsProtectedPatient_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::IsProtectedPatient();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::IsProtectedPatient::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IsProtectedPatient_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IsProtectedPatient_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_IsProtectedPatient_Request_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_IsProtectedPatient_Request_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::IsProtectedPatient_Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::IsProtectedPatient_Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IsProtectedPatient_Request_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IsProtectedPatient_Request_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_IsProtectedPatient_Response_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_IsProtectedPatient_Response_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::IsProtectedPatient_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::IsProtectedPatient_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IsProtectedPatient_Response_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IsProtectedPatient_Response_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_ListAvailableAttachments_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_ListAvailableAttachments_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::ListAvailableAttachments();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::ListAvailableAttachments::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListAvailableAttachments_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListAvailableAttachments_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_ListAvailableAttachments_Request_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_ListAvailableAttachments_Request_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::ListAvailableAttachments_Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::ListAvailableAttachments_Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListAvailableAttachments_Request_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListAvailableAttachments_Request_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_ListAvailableAttachments_Response_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_ListAvailableAttachments_Response_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::ListAvailableAttachments_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::ListAvailableAttachments_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListAvailableAttachments_Response_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListAvailableAttachments_Response_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_ListLabels_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_ListLabels_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::ListLabels();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::ListLabels::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListLabels_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListLabels_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_ListLabels_Request_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_ListLabels_Request_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::ListLabels_Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::ListLabels_Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListLabels_Request_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListLabels_Request_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_ListLabels_Response_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_ListLabels_Response_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::ListLabels_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::ListLabels_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListLabels_Response_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListLabels_Response_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_LogChange_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_LogChange_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::LogChange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::LogChange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogChange_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LogChange_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_LogChange_Request_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_LogChange_Request_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::LogChange_Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::LogChange_Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogChange_Request_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LogChange_Request_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_LogChange_Response_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_LogChange_Response_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::LogChange_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::LogChange_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogChange_Response_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LogChange_Response_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_LogExportedResource_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_LogExportedResource_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::LogExportedResource();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::LogExportedResource::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogExportedResource_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LogExportedResource_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_LogExportedResource_Request_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_LogExportedResource_Request_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::LogExportedResource_Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::LogExportedResource_Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogExportedResource_Request_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LogExportedResource_Request_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_LogExportedResource_Response_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_LogExportedResource_Response_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::LogExportedResource_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::LogExportedResource_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogExportedResource_Response_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LogExportedResource_Response_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_LookupAttachment_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_LookupAttachment_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::LookupAttachment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::LookupAttachment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LookupAttachment_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LookupAttachment_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_LookupAttachment_Request_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_LookupAttachment_Request_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::LookupAttachment_Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::LookupAttachment_Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LookupAttachment_Request_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LookupAttachment_Request_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_LookupAttachment_Response_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_LookupAttachment_Response_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::LookupAttachment_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::LookupAttachment_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LookupAttachment_Response_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LookupAttachment_Response_OrthancDatabasePlugin_2eproto}, {
      &scc_info_FileInfo_OrthancDatabasePlugin_2eproto.base,}};

static void InitDefaultsscc_info_LookupGlobalProperty_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_LookupGlobalProperty_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::LookupGlobalProperty();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::LookupGlobalProperty::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LookupGlobalProperty_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LookupGlobalProperty_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_LookupGlobalProperty_Request_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_LookupGlobalProperty_Request_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::LookupGlobalProperty_Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::LookupGlobalProperty_Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LookupGlobalProperty_Request_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LookupGlobalProperty_Request_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_LookupGlobalProperty_Response_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_LookupGlobalProperty_Response_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::LookupGlobalProperty_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::LookupGlobalProperty_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LookupGlobalProperty_Response_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LookupGlobalProperty_Response_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_LookupMetadata_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_LookupMetadata_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::LookupMetadata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::LookupMetadata::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LookupMetadata_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LookupMetadata_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_LookupMetadata_Request_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_LookupMetadata_Request_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::LookupMetadata_Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::LookupMetadata_Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LookupMetadata_Request_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LookupMetadata_Request_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_LookupMetadata_Response_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_LookupMetadata_Response_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::LookupMetadata_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::LookupMetadata_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LookupMetadata_Response_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LookupMetadata_Response_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_LookupParent_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_LookupParent_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::LookupParent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::LookupParent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LookupParent_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LookupParent_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_LookupParent_Request_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_LookupParent_Request_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::LookupParent_Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::LookupParent_Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LookupParent_Request_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LookupParent_Request_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_LookupParent_Response_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_LookupParent_Response_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::LookupParent_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::LookupParent_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LookupParent_Response_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LookupParent_Response_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_LookupResource_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_LookupResource_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::LookupResource();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::LookupResource::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LookupResource_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LookupResource_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_LookupResource_Request_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_LookupResource_Request_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::LookupResource_Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::LookupResource_Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LookupResource_Request_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LookupResource_Request_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_LookupResource_Response_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_LookupResource_Response_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::LookupResource_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::LookupResource_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LookupResource_Response_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LookupResource_Response_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_LookupResourceAndParent_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_LookupResourceAndParent_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::LookupResourceAndParent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::LookupResourceAndParent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LookupResourceAndParent_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LookupResourceAndParent_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_LookupResourceAndParent_Request_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_LookupResourceAndParent_Request_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::LookupResourceAndParent_Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::LookupResourceAndParent_Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LookupResourceAndParent_Request_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LookupResourceAndParent_Request_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_LookupResourceAndParent_Response_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_LookupResourceAndParent_Response_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::LookupResourceAndParent_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::LookupResourceAndParent_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LookupResourceAndParent_Response_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LookupResourceAndParent_Response_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_LookupResources_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_LookupResources_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::LookupResources();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::LookupResources::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LookupResources_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LookupResources_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_LookupResources_Request_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_LookupResources_Request_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::LookupResources_Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::LookupResources_Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LookupResources_Request_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LookupResources_Request_OrthancDatabasePlugin_2eproto}, {
      &scc_info_DatabaseConstraint_OrthancDatabasePlugin_2eproto.base,}};

static void InitDefaultsscc_info_LookupResources_Response_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_LookupResources_Response_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::LookupResources_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::LookupResources_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LookupResources_Response_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LookupResources_Response_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_MeasureLatency_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_MeasureLatency_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::MeasureLatency();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::MeasureLatency::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MeasureLatency_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MeasureLatency_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_MeasureLatency_Request_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_MeasureLatency_Request_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::MeasureLatency_Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::MeasureLatency_Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MeasureLatency_Request_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MeasureLatency_Request_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_MeasureLatency_Response_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_MeasureLatency_Response_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::MeasureLatency_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::MeasureLatency_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MeasureLatency_Response_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MeasureLatency_Response_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_Open_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_Open_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::Open();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::Open::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Open_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Open_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_Open_Request_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_Open_Request_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::Open_Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::Open_Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Open_Request_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Open_Request_OrthancDatabasePlugin_2eproto}, {
      &scc_info_Open_Request_IdentifierTag_OrthancDatabasePlugin_2eproto.base,}};

static void InitDefaultsscc_info_Open_Request_IdentifierTag_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_Open_Request_IdentifierTag_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::Open_Request_IdentifierTag();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::Open_Request_IdentifierTag::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Open_Request_IdentifierTag_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Open_Request_IdentifierTag_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_Open_Response_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_Open_Response_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::Open_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::Open_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Open_Response_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Open_Response_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_RemoveLabel_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_RemoveLabel_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::RemoveLabel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::RemoveLabel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoveLabel_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RemoveLabel_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_RemoveLabel_Request_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_RemoveLabel_Request_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::RemoveLabel_Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::RemoveLabel_Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoveLabel_Request_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RemoveLabel_Request_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_RemoveLabel_Response_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_RemoveLabel_Response_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::RemoveLabel_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::RemoveLabel_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoveLabel_Response_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RemoveLabel_Response_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_Request_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_Request_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Request_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Request_OrthancDatabasePlugin_2eproto}, {
      &scc_info_DatabaseRequest_OrthancDatabasePlugin_2eproto.base,
      &scc_info_TransactionRequest_OrthancDatabasePlugin_2eproto.base,}};

static void InitDefaultsscc_info_Response_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_Response_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Response_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Response_OrthancDatabasePlugin_2eproto}, {
      &scc_info_DatabaseResponse_OrthancDatabasePlugin_2eproto.base,
      &scc_info_TransactionResponse_OrthancDatabasePlugin_2eproto.base,}};

static void InitDefaultsscc_info_Rollback_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_Rollback_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::Rollback();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::Rollback::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Rollback_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Rollback_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_Rollback_Request_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_Rollback_Request_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::Rollback_Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::Rollback_Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Rollback_Request_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Rollback_Request_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_Rollback_Response_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_Rollback_Response_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::Rollback_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::Rollback_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Rollback_Response_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Rollback_Response_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_SelectPatientToRecycle_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_SelectPatientToRecycle_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::SelectPatientToRecycle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::SelectPatientToRecycle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SelectPatientToRecycle_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SelectPatientToRecycle_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_SelectPatientToRecycle_Request_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_SelectPatientToRecycle_Request_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::SelectPatientToRecycle_Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::SelectPatientToRecycle_Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SelectPatientToRecycle_Request_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SelectPatientToRecycle_Request_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_SelectPatientToRecycle_Response_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_SelectPatientToRecycle_Response_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::SelectPatientToRecycle_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::SelectPatientToRecycle_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SelectPatientToRecycle_Response_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SelectPatientToRecycle_Response_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_SelectPatientToRecycleWithAvoid_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_SelectPatientToRecycleWithAvoid_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SelectPatientToRecycleWithAvoid_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SelectPatientToRecycleWithAvoid_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_SelectPatientToRecycleWithAvoid_Request_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_SelectPatientToRecycleWithAvoid_Request_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid_Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid_Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SelectPatientToRecycleWithAvoid_Request_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SelectPatientToRecycleWithAvoid_Request_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_SelectPatientToRecycleWithAvoid_Response_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_SelectPatientToRecycleWithAvoid_Response_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SelectPatientToRecycleWithAvoid_Response_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SelectPatientToRecycleWithAvoid_Response_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_ServerIndexChange_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_ServerIndexChange_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::ServerIndexChange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::ServerIndexChange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerIndexChange_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ServerIndexChange_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_SetGlobalProperty_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_SetGlobalProperty_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::SetGlobalProperty();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::SetGlobalProperty::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetGlobalProperty_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetGlobalProperty_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_SetGlobalProperty_Request_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_SetGlobalProperty_Request_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::SetGlobalProperty_Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::SetGlobalProperty_Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetGlobalProperty_Request_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetGlobalProperty_Request_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_SetGlobalProperty_Response_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_SetGlobalProperty_Response_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::SetGlobalProperty_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::SetGlobalProperty_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetGlobalProperty_Response_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetGlobalProperty_Response_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_SetMetadata_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_SetMetadata_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::SetMetadata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::SetMetadata::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetMetadata_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetMetadata_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_SetMetadata_Request_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_SetMetadata_Request_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::SetMetadata_Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::SetMetadata_Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetMetadata_Request_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetMetadata_Request_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_SetMetadata_Response_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_SetMetadata_Response_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::SetMetadata_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::SetMetadata_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetMetadata_Response_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetMetadata_Response_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_SetProtectedPatient_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_SetProtectedPatient_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::SetProtectedPatient();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::SetProtectedPatient::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetProtectedPatient_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetProtectedPatient_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_SetProtectedPatient_Request_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_SetProtectedPatient_Request_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::SetProtectedPatient_Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::SetProtectedPatient_Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetProtectedPatient_Request_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetProtectedPatient_Request_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_SetProtectedPatient_Response_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_SetProtectedPatient_Response_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::SetProtectedPatient_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::SetProtectedPatient_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetProtectedPatient_Response_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetProtectedPatient_Response_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_SetResourcesContent_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_SetResourcesContent_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::SetResourcesContent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::SetResourcesContent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetResourcesContent_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetResourcesContent_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_SetResourcesContent_Request_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_SetResourcesContent_Request_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::SetResourcesContent_Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::SetResourcesContent_Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SetResourcesContent_Request_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SetResourcesContent_Request_OrthancDatabasePlugin_2eproto}, {
      &scc_info_SetResourcesContent_Request_Tag_OrthancDatabasePlugin_2eproto.base,
      &scc_info_SetResourcesContent_Request_Metadata_OrthancDatabasePlugin_2eproto.base,}};

static void InitDefaultsscc_info_SetResourcesContent_Request_Metadata_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_SetResourcesContent_Request_Metadata_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::SetResourcesContent_Request_Metadata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::SetResourcesContent_Request_Metadata::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetResourcesContent_Request_Metadata_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetResourcesContent_Request_Metadata_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_SetResourcesContent_Request_Tag_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_SetResourcesContent_Request_Tag_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::SetResourcesContent_Request_Tag();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::SetResourcesContent_Request_Tag::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetResourcesContent_Request_Tag_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetResourcesContent_Request_Tag_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_SetResourcesContent_Response_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_SetResourcesContent_Response_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::SetResourcesContent_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::SetResourcesContent_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetResourcesContent_Response_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetResourcesContent_Response_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_StartTransaction_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_StartTransaction_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::StartTransaction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::StartTransaction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StartTransaction_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StartTransaction_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_StartTransaction_Request_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_StartTransaction_Request_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::StartTransaction_Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::StartTransaction_Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StartTransaction_Request_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StartTransaction_Request_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_StartTransaction_Response_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_StartTransaction_Response_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::StartTransaction_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::StartTransaction_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StartTransaction_Response_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StartTransaction_Response_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_TransactionRequest_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_TransactionRequest_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::TransactionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::TransactionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<50> scc_info_TransactionRequest_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 50, 0, InitDefaultsscc_info_TransactionRequest_OrthancDatabasePlugin_2eproto}, {
      &scc_info_Rollback_Request_OrthancDatabasePlugin_2eproto.base,
      &scc_info_Commit_Request_OrthancDatabasePlugin_2eproto.base,
      &scc_info_AddAttachment_Request_OrthancDatabasePlugin_2eproto.base,
      &scc_info_ClearChanges_Request_OrthancDatabasePlugin_2eproto.base,
      &scc_info_ClearExportedResources_Request_OrthancDatabasePlugin_2eproto.base,
      &scc_info_DeleteAttachment_Request_OrthancDatabasePlugin_2eproto.base,
      &scc_info_DeleteMetadata_Request_OrthancDatabasePlugin_2eproto.base,
      &scc_info_DeleteResource_Request_OrthancDatabasePlugin_2eproto.base,
      &scc_info_GetAllMetadata_Request_OrthancDatabasePlugin_2eproto.base,
      &scc_info_GetAllPublicIds_Request_OrthancDatabasePlugin_2eproto.base,
      &scc_info_GetAllPublicIdsWithLimits_Request_OrthancDatabasePlugin_2eproto.base,
      &scc_info_GetChanges_Request_OrthancDatabasePlugin_2eproto.base,
      &scc_info_GetChildrenInternalId_Request_OrthancDatabasePlugin_2eproto.base,
      &scc_info_GetChildrenPublicId_Request_OrthancDatabasePlugin_2eproto.base,
      &scc_info_GetExportedResources_Request_OrthancDatabasePlugin_2eproto.base,
      &scc_info_GetLastChange_Request_OrthancDatabasePlugin_2eproto.base,
      &scc_info_GetLastExportedResource_Request_OrthancDatabasePlugin_2eproto.base,
      &scc_info_GetMainDicomTags_Request_OrthancDatabasePlugin_2eproto.base,
      &scc_info_GetPublicId_Request_OrthancDatabasePlugin_2eproto.base,
      &scc_info_GetResourcesCount_Request_OrthancDatabasePlugin_2eproto.base,
      &scc_info_GetResourceType_Request_OrthancDatabasePlugin_2eproto.base,
      &scc_info_GetTotalCompressedSize_Request_OrthancDatabasePlugin_2eproto.base,
      &scc_info_GetTotalUncompressedSize_Request_OrthancDatabasePlugin_2eproto.base,
      &scc_info_IsProtectedPatient_Request_OrthancDatabasePlugin_2eproto.base,
      &scc_info_ListAvailableAttachments_Request_OrthancDatabasePlugin_2eproto.base,
      &scc_info_LogChange_Request_OrthancDatabasePlugin_2eproto.base,
      &scc_info_LogExportedResource_Request_OrthancDatabasePlugin_2eproto.base,
      &scc_info_LookupAttachment_Request_OrthancDatabasePlugin_2eproto.base,
      &scc_info_LookupGlobalProperty_Request_OrthancDatabasePlugin_2eproto.base,
      &scc_info_LookupMetadata_Request_OrthancDatabasePlugin_2eproto.base,
      &scc_info_LookupParent_Request_OrthancDatabasePlugin_2eproto.base,
      &scc_info_LookupResource_Request_OrthancDatabasePlugin_2eproto.base,
      &scc_info_SelectPatientToRecycle_Request_OrthancDatabasePlugin_2eproto.base,
      &scc_info_SelectPatientToRecycleWithAvoid_Request_OrthancDatabasePlugin_2eproto.base,
      &scc_info_SetGlobalProperty_Request_OrthancDatabasePlugin_2eproto.base,
      &scc_info_ClearMainDicomTags_Request_OrthancDatabasePlugin_2eproto.base,
      &scc_info_SetMetadata_Request_OrthancDatabasePlugin_2eproto.base,
      &scc_info_SetProtectedPatient_Request_OrthancDatabasePlugin_2eproto.base,
      &scc_info_IsDiskSizeAbove_Request_OrthancDatabasePlugin_2eproto.base,
      &scc_info_LookupResources_Request_OrthancDatabasePlugin_2eproto.base,
      &scc_info_CreateInstance_Request_OrthancDatabasePlugin_2eproto.base,
      &scc_info_SetResourcesContent_Request_OrthancDatabasePlugin_2eproto.base,
      &scc_info_GetChildrenMetadata_Request_OrthancDatabasePlugin_2eproto.base,
      &scc_info_GetLastChangeIndex_Request_OrthancDatabasePlugin_2eproto.base,
      &scc_info_LookupResourceAndParent_Request_OrthancDatabasePlugin_2eproto.base,
      &scc_info_AddLabel_Request_OrthancDatabasePlugin_2eproto.base,
      &scc_info_RemoveLabel_Request_OrthancDatabasePlugin_2eproto.base,
      &scc_info_ListLabels_Request_OrthancDatabasePlugin_2eproto.base,
      &scc_info_IncrementGlobalProperty_Request_OrthancDatabasePlugin_2eproto.base,
      &scc_info_UpdateAndGetStatistics_Request_OrthancDatabasePlugin_2eproto.base,}};

static void InitDefaultsscc_info_TransactionResponse_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_TransactionResponse_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::TransactionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::TransactionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<50> scc_info_TransactionResponse_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 50, 0, InitDefaultsscc_info_TransactionResponse_OrthancDatabasePlugin_2eproto}, {
      &scc_info_Rollback_Response_OrthancDatabasePlugin_2eproto.base,
      &scc_info_Commit_Response_OrthancDatabasePlugin_2eproto.base,
      &scc_info_AddAttachment_Response_OrthancDatabasePlugin_2eproto.base,
      &scc_info_ClearChanges_Response_OrthancDatabasePlugin_2eproto.base,
      &scc_info_ClearExportedResources_Response_OrthancDatabasePlugin_2eproto.base,
      &scc_info_DeleteAttachment_Response_OrthancDatabasePlugin_2eproto.base,
      &scc_info_DeleteMetadata_Response_OrthancDatabasePlugin_2eproto.base,
      &scc_info_DeleteResource_Response_OrthancDatabasePlugin_2eproto.base,
      &scc_info_GetAllMetadata_Response_OrthancDatabasePlugin_2eproto.base,
      &scc_info_GetAllPublicIds_Response_OrthancDatabasePlugin_2eproto.base,
      &scc_info_GetAllPublicIdsWithLimits_Response_OrthancDatabasePlugin_2eproto.base,
      &scc_info_GetChanges_Response_OrthancDatabasePlugin_2eproto.base,
      &scc_info_GetChildrenInternalId_Response_OrthancDatabasePlugin_2eproto.base,
      &scc_info_GetChildrenPublicId_Response_OrthancDatabasePlugin_2eproto.base,
      &scc_info_GetExportedResources_Response_OrthancDatabasePlugin_2eproto.base,
      &scc_info_GetLastChange_Response_OrthancDatabasePlugin_2eproto.base,
      &scc_info_GetLastExportedResource_Response_OrthancDatabasePlugin_2eproto.base,
      &scc_info_GetMainDicomTags_Response_OrthancDatabasePlugin_2eproto.base,
      &scc_info_GetPublicId_Response_OrthancDatabasePlugin_2eproto.base,
      &scc_info_GetResourcesCount_Response_OrthancDatabasePlugin_2eproto.base,
      &scc_info_GetResourceType_Response_OrthancDatabasePlugin_2eproto.base,
      &scc_info_GetTotalCompressedSize_Response_OrthancDatabasePlugin_2eproto.base,
      &scc_info_GetTotalUncompressedSize_Response_OrthancDatabasePlugin_2eproto.base,
      &scc_info_IsProtectedPatient_Response_OrthancDatabasePlugin_2eproto.base,
      &scc_info_ListAvailableAttachments_Response_OrthancDatabasePlugin_2eproto.base,
      &scc_info_LogChange_Response_OrthancDatabasePlugin_2eproto.base,
      &scc_info_LogExportedResource_Response_OrthancDatabasePlugin_2eproto.base,
      &scc_info_LookupAttachment_Response_OrthancDatabasePlugin_2eproto.base,
      &scc_info_LookupGlobalProperty_Response_OrthancDatabasePlugin_2eproto.base,
      &scc_info_LookupMetadata_Response_OrthancDatabasePlugin_2eproto.base,
      &scc_info_LookupParent_Response_OrthancDatabasePlugin_2eproto.base,
      &scc_info_LookupResource_Response_OrthancDatabasePlugin_2eproto.base,
      &scc_info_SelectPatientToRecycle_Response_OrthancDatabasePlugin_2eproto.base,
      &scc_info_SelectPatientToRecycleWithAvoid_Response_OrthancDatabasePlugin_2eproto.base,
      &scc_info_SetGlobalProperty_Response_OrthancDatabasePlugin_2eproto.base,
      &scc_info_ClearMainDicomTags_Response_OrthancDatabasePlugin_2eproto.base,
      &scc_info_SetMetadata_Response_OrthancDatabasePlugin_2eproto.base,
      &scc_info_SetProtectedPatient_Response_OrthancDatabasePlugin_2eproto.base,
      &scc_info_IsDiskSizeAbove_Response_OrthancDatabasePlugin_2eproto.base,
      &scc_info_LookupResources_Response_OrthancDatabasePlugin_2eproto.base,
      &scc_info_CreateInstance_Response_OrthancDatabasePlugin_2eproto.base,
      &scc_info_SetResourcesContent_Response_OrthancDatabasePlugin_2eproto.base,
      &scc_info_GetChildrenMetadata_Response_OrthancDatabasePlugin_2eproto.base,
      &scc_info_GetLastChangeIndex_Response_OrthancDatabasePlugin_2eproto.base,
      &scc_info_LookupResourceAndParent_Response_OrthancDatabasePlugin_2eproto.base,
      &scc_info_AddLabel_Response_OrthancDatabasePlugin_2eproto.base,
      &scc_info_RemoveLabel_Response_OrthancDatabasePlugin_2eproto.base,
      &scc_info_ListLabels_Response_OrthancDatabasePlugin_2eproto.base,
      &scc_info_IncrementGlobalProperty_Response_OrthancDatabasePlugin_2eproto.base,
      &scc_info_UpdateAndGetStatistics_Response_OrthancDatabasePlugin_2eproto.base,}};

static void InitDefaultsscc_info_UpdateAndGetStatistics_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_UpdateAndGetStatistics_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateAndGetStatistics_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UpdateAndGetStatistics_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_UpdateAndGetStatistics_Request_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_UpdateAndGetStatistics_Request_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics_Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics_Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateAndGetStatistics_Request_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UpdateAndGetStatistics_Request_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_UpdateAndGetStatistics_Response_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_UpdateAndGetStatistics_Response_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateAndGetStatistics_Response_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UpdateAndGetStatistics_Response_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_Upgrade_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_Upgrade_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::Upgrade();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::Upgrade::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Upgrade_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Upgrade_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_Upgrade_Request_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_Upgrade_Request_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::Upgrade_Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::Upgrade_Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Upgrade_Request_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Upgrade_Request_OrthancDatabasePlugin_2eproto}, {}};

static void InitDefaultsscc_info_Upgrade_Response_OrthancDatabasePlugin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Orthanc::DatabasePluginMessages::_Upgrade_Response_default_instance_;
    new (ptr) ::Orthanc::DatabasePluginMessages::Upgrade_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Orthanc::DatabasePluginMessages::Upgrade_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Upgrade_Response_OrthancDatabasePlugin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Upgrade_Response_OrthancDatabasePlugin_2eproto}, {}};

namespace Orthanc {
namespace DatabasePluginMessages {
bool ResourceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ResourceType_strings[4] = {};

static const char ResourceType_names[] =
  "RESOURCE_INSTANCE"
  "RESOURCE_PATIENT"
  "RESOURCE_SERIES"
  "RESOURCE_STUDY";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ResourceType_entries[] = {
  { {ResourceType_names + 0, 17}, 3 },
  { {ResourceType_names + 17, 16}, 0 },
  { {ResourceType_names + 33, 15}, 2 },
  { {ResourceType_names + 48, 14}, 1 },
};

static const int ResourceType_entries_by_number[] = {
  1, // 0 -> RESOURCE_PATIENT
  3, // 1 -> RESOURCE_STUDY
  2, // 2 -> RESOURCE_SERIES
  0, // 3 -> RESOURCE_INSTANCE
};

const std::string& ResourceType_Name(
    ResourceType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ResourceType_entries,
          ResourceType_entries_by_number,
          4, ResourceType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ResourceType_entries,
      ResourceType_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ResourceType_strings[idx].get();
}
bool ResourceType_Parse(
    const std::string& name, ResourceType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ResourceType_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<ResourceType>(int_value);
  }
  return success;
}
bool ConstraintType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ConstraintType_strings[5] = {};

static const char ConstraintType_names[] =
  "CONSTRAINT_EQUAL"
  "CONSTRAINT_GREATER_OR_EQUAL"
  "CONSTRAINT_LIST"
  "CONSTRAINT_SMALLER_OR_EQUAL"
  "CONSTRAINT_WILDCARD";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ConstraintType_entries[] = {
  { {ConstraintType_names + 0, 16}, 0 },
  { {ConstraintType_names + 16, 27}, 2 },
  { {ConstraintType_names + 43, 15}, 4 },
  { {ConstraintType_names + 58, 27}, 1 },
  { {ConstraintType_names + 85, 19}, 3 },
};

static const int ConstraintType_entries_by_number[] = {
  0, // 0 -> CONSTRAINT_EQUAL
  3, // 1 -> CONSTRAINT_SMALLER_OR_EQUAL
  1, // 2 -> CONSTRAINT_GREATER_OR_EQUAL
  4, // 3 -> CONSTRAINT_WILDCARD
  2, // 4 -> CONSTRAINT_LIST
};

const std::string& ConstraintType_Name(
    ConstraintType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ConstraintType_entries,
          ConstraintType_entries_by_number,
          5, ConstraintType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ConstraintType_entries,
      ConstraintType_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ConstraintType_strings[idx].get();
}
bool ConstraintType_Parse(
    const std::string& name, ConstraintType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ConstraintType_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<ConstraintType>(int_value);
  }
  return success;
}
bool LabelsConstraintType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> LabelsConstraintType_strings[3] = {};

static const char LabelsConstraintType_names[] =
  "LABELS_CONSTRAINT_ALL"
  "LABELS_CONSTRAINT_ANY"
  "LABELS_CONSTRAINT_NONE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry LabelsConstraintType_entries[] = {
  { {LabelsConstraintType_names + 0, 21}, 0 },
  { {LabelsConstraintType_names + 21, 21}, 1 },
  { {LabelsConstraintType_names + 42, 22}, 2 },
};

static const int LabelsConstraintType_entries_by_number[] = {
  0, // 0 -> LABELS_CONSTRAINT_ALL
  1, // 1 -> LABELS_CONSTRAINT_ANY
  2, // 2 -> LABELS_CONSTRAINT_NONE
};

const std::string& LabelsConstraintType_Name(
    LabelsConstraintType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          LabelsConstraintType_entries,
          LabelsConstraintType_entries_by_number,
          3, LabelsConstraintType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      LabelsConstraintType_entries,
      LabelsConstraintType_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     LabelsConstraintType_strings[idx].get();
}
bool LabelsConstraintType_Parse(
    const std::string& name, LabelsConstraintType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      LabelsConstraintType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<LabelsConstraintType>(int_value);
  }
  return success;
}
bool DatabaseOperation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DatabaseOperation_strings[8] = {};

static const char DatabaseOperation_names[] =
  "OPERATION_CLOSE"
  "OPERATION_FINALIZE_TRANSACTION"
  "OPERATION_FLUSH_TO_DISK"
  "OPERATION_GET_SYSTEM_INFORMATION"
  "OPERATION_MEASURE_LATENCY"
  "OPERATION_OPEN"
  "OPERATION_START_TRANSACTION"
  "OPERATION_UPGRADE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DatabaseOperation_entries[] = {
  { {DatabaseOperation_names + 0, 15}, 2 },
  { {DatabaseOperation_names + 15, 30}, 6 },
  { {DatabaseOperation_names + 45, 23}, 3 },
  { {DatabaseOperation_names + 68, 32}, 0 },
  { {DatabaseOperation_names + 100, 25}, 7 },
  { {DatabaseOperation_names + 125, 14}, 1 },
  { {DatabaseOperation_names + 139, 27}, 4 },
  { {DatabaseOperation_names + 166, 17}, 5 },
};

static const int DatabaseOperation_entries_by_number[] = {
  3, // 0 -> OPERATION_GET_SYSTEM_INFORMATION
  5, // 1 -> OPERATION_OPEN
  0, // 2 -> OPERATION_CLOSE
  2, // 3 -> OPERATION_FLUSH_TO_DISK
  6, // 4 -> OPERATION_START_TRANSACTION
  7, // 5 -> OPERATION_UPGRADE
  1, // 6 -> OPERATION_FINALIZE_TRANSACTION
  4, // 7 -> OPERATION_MEASURE_LATENCY
};

const std::string& DatabaseOperation_Name(
    DatabaseOperation value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DatabaseOperation_entries,
          DatabaseOperation_entries_by_number,
          8, DatabaseOperation_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DatabaseOperation_entries,
      DatabaseOperation_entries_by_number,
      8, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DatabaseOperation_strings[idx].get();
}
bool DatabaseOperation_Parse(
    const std::string& name, DatabaseOperation* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DatabaseOperation_entries, 8, name, &int_value);
  if (success) {
    *value = static_cast<DatabaseOperation>(int_value);
  }
  return success;
}
bool TransactionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TransactionType_strings[2] = {};

static const char TransactionType_names[] =
  "TRANSACTION_READ_ONLY"
  "TRANSACTION_READ_WRITE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry TransactionType_entries[] = {
  { {TransactionType_names + 0, 21}, 0 },
  { {TransactionType_names + 21, 22}, 1 },
};

static const int TransactionType_entries_by_number[] = {
  0, // 0 -> TRANSACTION_READ_ONLY
  1, // 1 -> TRANSACTION_READ_WRITE
};

const std::string& TransactionType_Name(
    TransactionType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          TransactionType_entries,
          TransactionType_entries_by_number,
          2, TransactionType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      TransactionType_entries,
      TransactionType_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     TransactionType_strings[idx].get();
}
bool TransactionType_Parse(
    const std::string& name, TransactionType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      TransactionType_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<TransactionType>(int_value);
  }
  return success;
}
bool TransactionOperation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TransactionOperation_strings[50] = {};

static const char TransactionOperation_names[] =
  "OPERATION_ADD_ATTACHMENT"
  "OPERATION_ADD_LABEL"
  "OPERATION_CLEAR_CHANGES"
  "OPERATION_CLEAR_EXPORTED_RESOURCES"
  "OPERATION_CLEAR_MAIN_DICOM_TAGS"
  "OPERATION_COMMIT"
  "OPERATION_CREATE_INSTANCE"
  "OPERATION_DELETE_ATTACHMENT"
  "OPERATION_DELETE_METADATA"
  "OPERATION_DELETE_RESOURCE"
  "OPERATION_GET_ALL_METADATA"
  "OPERATION_GET_ALL_PUBLIC_IDS"
  "OPERATION_GET_ALL_PUBLIC_IDS_WITH_LIMITS"
  "OPERATION_GET_CHANGES"
  "OPERATION_GET_CHILDREN_INTERNAL_ID"
  "OPERATION_GET_CHILDREN_METADATA"
  "OPERATION_GET_CHILDREN_PUBLIC_ID"
  "OPERATION_GET_EXPORTED_RESOURCES"
  "OPERATION_GET_LAST_CHANGE"
  "OPERATION_GET_LAST_CHANGE_INDEX"
  "OPERATION_GET_LAST_EXPORTED_RESOURCE"
  "OPERATION_GET_MAIN_DICOM_TAGS"
  "OPERATION_GET_PUBLIC_ID"
  "OPERATION_GET_RESOURCES_COUNT"
  "OPERATION_GET_RESOURCE_TYPE"
  "OPERATION_GET_TOTAL_COMPRESSED_SIZE"
  "OPERATION_GET_TOTAL_UNCOMPRESSED_SIZE"
  "OPERATION_INCREMENT_GLOBAL_PROPERTY"
  "OPERATION_IS_DISK_SIZE_ABOVE"
  "OPERATION_IS_PROTECTED_PATIENT"
  "OPERATION_LIST_AVAILABLE_ATTACHMENTS"
  "OPERATION_LIST_LABELS"
  "OPERATION_LOG_CHANGE"
  "OPERATION_LOG_EXPORTED_RESOURCE"
  "OPERATION_LOOKUP_ATTACHMENT"
  "OPERATION_LOOKUP_GLOBAL_PROPERTY"
  "OPERATION_LOOKUP_METADATA"
  "OPERATION_LOOKUP_PARENT"
  "OPERATION_LOOKUP_RESOURCE"
  "OPERATION_LOOKUP_RESOURCES"
  "OPERATION_LOOKUP_RESOURCE_AND_PARENT"
  "OPERATION_REMOVE_LABEL"
  "OPERATION_ROLLBACK"
  "OPERATION_SELECT_PATIENT_TO_RECYCLE"
  "OPERATION_SELECT_PATIENT_TO_RECYCLE_WITH_AVOID"
  "OPERATION_SET_GLOBAL_PROPERTY"
  "OPERATION_SET_METADATA"
  "OPERATION_SET_PROTECTED_PATIENT"
  "OPERATION_SET_RESOURCES_CONTENT"
  "OPERATION_UPDATE_AND_GET_STATISTICS";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry TransactionOperation_entries[] = {
  { {TransactionOperation_names + 0, 24}, 2 },
  { {TransactionOperation_names + 24, 19}, 45 },
  { {TransactionOperation_names + 43, 23}, 3 },
  { {TransactionOperation_names + 66, 34}, 4 },
  { {TransactionOperation_names + 100, 31}, 35 },
  { {TransactionOperation_names + 131, 16}, 1 },
  { {TransactionOperation_names + 147, 25}, 40 },
  { {TransactionOperation_names + 172, 27}, 5 },
  { {TransactionOperation_names + 199, 25}, 6 },
  { {TransactionOperation_names + 224, 25}, 7 },
  { {TransactionOperation_names + 249, 26}, 8 },
  { {TransactionOperation_names + 275, 28}, 9 },
  { {TransactionOperation_names + 303, 40}, 10 },
  { {TransactionOperation_names + 343, 21}, 11 },
  { {TransactionOperation_names + 364, 34}, 12 },
  { {TransactionOperation_names + 398, 31}, 42 },
  { {TransactionOperation_names + 429, 32}, 13 },
  { {TransactionOperation_names + 461, 32}, 14 },
  { {TransactionOperation_names + 493, 25}, 15 },
  { {TransactionOperation_names + 518, 31}, 43 },
  { {TransactionOperation_names + 549, 36}, 16 },
  { {TransactionOperation_names + 585, 29}, 17 },
  { {TransactionOperation_names + 614, 23}, 18 },
  { {TransactionOperation_names + 637, 29}, 19 },
  { {TransactionOperation_names + 666, 27}, 20 },
  { {TransactionOperation_names + 693, 35}, 21 },
  { {TransactionOperation_names + 728, 37}, 22 },
  { {TransactionOperation_names + 765, 35}, 48 },
  { {TransactionOperation_names + 800, 28}, 38 },
  { {TransactionOperation_names + 828, 30}, 23 },
  { {TransactionOperation_names + 858, 36}, 24 },
  { {TransactionOperation_names + 894, 21}, 47 },
  { {TransactionOperation_names + 915, 20}, 25 },
  { {TransactionOperation_names + 935, 31}, 26 },
  { {TransactionOperation_names + 966, 27}, 27 },
  { {TransactionOperation_names + 993, 32}, 28 },
  { {TransactionOperation_names + 1025, 25}, 29 },
  { {TransactionOperation_names + 1050, 23}, 30 },
  { {TransactionOperation_names + 1073, 25}, 31 },
  { {TransactionOperation_names + 1098, 26}, 39 },
  { {TransactionOperation_names + 1124, 36}, 44 },
  { {TransactionOperation_names + 1160, 22}, 46 },
  { {TransactionOperation_names + 1182, 18}, 0 },
  { {TransactionOperation_names + 1200, 35}, 32 },
  { {TransactionOperation_names + 1235, 46}, 33 },
  { {TransactionOperation_names + 1281, 29}, 34 },
  { {TransactionOperation_names + 1310, 22}, 36 },
  { {TransactionOperation_names + 1332, 31}, 37 },
  { {TransactionOperation_names + 1363, 31}, 41 },
  { {TransactionOperation_names + 1394, 35}, 49 },
};

static const int TransactionOperation_entries_by_number[] = {
  42, // 0 -> OPERATION_ROLLBACK
  5, // 1 -> OPERATION_COMMIT
  0, // 2 -> OPERATION_ADD_ATTACHMENT
  2, // 3 -> OPERATION_CLEAR_CHANGES
  3, // 4 -> OPERATION_CLEAR_EXPORTED_RESOURCES
  7, // 5 -> OPERATION_DELETE_ATTACHMENT
  8, // 6 -> OPERATION_DELETE_METADATA
  9, // 7 -> OPERATION_DELETE_RESOURCE
  10, // 8 -> OPERATION_GET_ALL_METADATA
  11, // 9 -> OPERATION_GET_ALL_PUBLIC_IDS
  12, // 10 -> OPERATION_GET_ALL_PUBLIC_IDS_WITH_LIMITS
  13, // 11 -> OPERATION_GET_CHANGES
  14, // 12 -> OPERATION_GET_CHILDREN_INTERNAL_ID
  16, // 13 -> OPERATION_GET_CHILDREN_PUBLIC_ID
  17, // 14 -> OPERATION_GET_EXPORTED_RESOURCES
  18, // 15 -> OPERATION_GET_LAST_CHANGE
  20, // 16 -> OPERATION_GET_LAST_EXPORTED_RESOURCE
  21, // 17 -> OPERATION_GET_MAIN_DICOM_TAGS
  22, // 18 -> OPERATION_GET_PUBLIC_ID
  23, // 19 -> OPERATION_GET_RESOURCES_COUNT
  24, // 20 -> OPERATION_GET_RESOURCE_TYPE
  25, // 21 -> OPERATION_GET_TOTAL_COMPRESSED_SIZE
  26, // 22 -> OPERATION_GET_TOTAL_UNCOMPRESSED_SIZE
  29, // 23 -> OPERATION_IS_PROTECTED_PATIENT
  30, // 24 -> OPERATION_LIST_AVAILABLE_ATTACHMENTS
  32, // 25 -> OPERATION_LOG_CHANGE
  33, // 26 -> OPERATION_LOG_EXPORTED_RESOURCE
  34, // 27 -> OPERATION_LOOKUP_ATTACHMENT
  35, // 28 -> OPERATION_LOOKUP_GLOBAL_PROPERTY
  36, // 29 -> OPERATION_LOOKUP_METADATA
  37, // 30 -> OPERATION_LOOKUP_PARENT
  38, // 31 -> OPERATION_LOOKUP_RESOURCE
  43, // 32 -> OPERATION_SELECT_PATIENT_TO_RECYCLE
  44, // 33 -> OPERATION_SELECT_PATIENT_TO_RECYCLE_WITH_AVOID
  45, // 34 -> OPERATION_SET_GLOBAL_PROPERTY
  4, // 35 -> OPERATION_CLEAR_MAIN_DICOM_TAGS
  46, // 36 -> OPERATION_SET_METADATA
  47, // 37 -> OPERATION_SET_PROTECTED_PATIENT
  28, // 38 -> OPERATION_IS_DISK_SIZE_ABOVE
  39, // 39 -> OPERATION_LOOKUP_RESOURCES
  6, // 40 -> OPERATION_CREATE_INSTANCE
  48, // 41 -> OPERATION_SET_RESOURCES_CONTENT
  15, // 42 -> OPERATION_GET_CHILDREN_METADATA
  19, // 43 -> OPERATION_GET_LAST_CHANGE_INDEX
  40, // 44 -> OPERATION_LOOKUP_RESOURCE_AND_PARENT
  1, // 45 -> OPERATION_ADD_LABEL
  41, // 46 -> OPERATION_REMOVE_LABEL
  31, // 47 -> OPERATION_LIST_LABELS
  27, // 48 -> OPERATION_INCREMENT_GLOBAL_PROPERTY
  49, // 49 -> OPERATION_UPDATE_AND_GET_STATISTICS
};

const std::string& TransactionOperation_Name(
    TransactionOperation value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          TransactionOperation_entries,
          TransactionOperation_entries_by_number,
          50, TransactionOperation_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      TransactionOperation_entries,
      TransactionOperation_entries_by_number,
      50, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     TransactionOperation_strings[idx].get();
}
bool TransactionOperation_Parse(
    const std::string& name, TransactionOperation* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      TransactionOperation_entries, 50, name, &int_value);
  if (success) {
    *value = static_cast<TransactionOperation>(int_value);
  }
  return success;
}
bool RequestType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> RequestType_strings[2] = {};

static const char RequestType_names[] =
  "REQUEST_DATABASE"
  "REQUEST_TRANSACTION";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry RequestType_entries[] = {
  { {RequestType_names + 0, 16}, 0 },
  { {RequestType_names + 16, 19}, 1 },
};

static const int RequestType_entries_by_number[] = {
  0, // 0 -> REQUEST_DATABASE
  1, // 1 -> REQUEST_TRANSACTION
};

const std::string& RequestType_Name(
    RequestType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          RequestType_entries,
          RequestType_entries_by_number,
          2, RequestType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      RequestType_entries,
      RequestType_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     RequestType_strings[idx].get();
}
bool RequestType_Parse(
    const std::string& name, RequestType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      RequestType_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<RequestType>(int_value);
  }
  return success;
}

// ===================================================================

void FileInfo::InitAsDefaultInstance() {
}
class FileInfo::_Internal {
 public:
};

FileInfo::FileInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.FileInfo)
}
FileInfo::FileInfo(const FileInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uuid().empty()) {
    uuid_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_uuid(),
      GetArena());
  }
  uncompressed_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uncompressed_hash().empty()) {
    uncompressed_hash_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_uncompressed_hash(),
      GetArena());
  }
  compressed_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_compressed_hash().empty()) {
    compressed_hash_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_compressed_hash(),
      GetArena());
  }
  ::memcpy(&uncompressed_size_, &from.uncompressed_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&compressed_size_) -
    reinterpret_cast<char*>(&uncompressed_size_)) + sizeof(compressed_size_));
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.FileInfo)
}

void FileInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FileInfo_OrthancDatabasePlugin_2eproto.base);
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uncompressed_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  compressed_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uncompressed_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&compressed_size_) -
      reinterpret_cast<char*>(&uncompressed_size_)) + sizeof(compressed_size_));
}

FileInfo::~FileInfo() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.FileInfo)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void FileInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uncompressed_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  compressed_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FileInfo::ArenaDtor(void* object) {
  FileInfo* _this = reinterpret_cast< FileInfo* >(object);
  (void)_this;
}
void FileInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FileInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FileInfo& FileInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FileInfo_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void FileInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.FileInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  uncompressed_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  compressed_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&uncompressed_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&compressed_size_) -
      reinterpret_cast<char*>(&uncompressed_size_)) + sizeof(compressed_size_));
  _internal_metadata_.Clear<std::string>();
}

const char* FileInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 content_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          content_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 uncompressed_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          uncompressed_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string uncompressed_hash = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_uncompressed_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 compression_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          compression_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 compressed_size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          compressed_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string compressed_hash = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_compressed_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FileInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.FileInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uuid = 1;
  if (this->uuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Orthanc.DatabasePluginMessages.FileInfo.uuid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uuid(), target);
  }

  // int32 content_type = 2;
  if (this->content_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_content_type(), target);
  }

  // uint64 uncompressed_size = 3;
  if (this->uncompressed_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_uncompressed_size(), target);
  }

  // string uncompressed_hash = 4;
  if (this->uncompressed_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uncompressed_hash().data(), static_cast<int>(this->_internal_uncompressed_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Orthanc.DatabasePluginMessages.FileInfo.uncompressed_hash");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_uncompressed_hash(), target);
  }

  // int32 compression_type = 5;
  if (this->compression_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_compression_type(), target);
  }

  // uint64 compressed_size = 6;
  if (this->compressed_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_compressed_size(), target);
  }

  // string compressed_hash = 7;
  if (this->compressed_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_compressed_hash().data(), static_cast<int>(this->_internal_compressed_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Orthanc.DatabasePluginMessages.FileInfo.compressed_hash");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_compressed_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.FileInfo)
  return target;
}

size_t FileInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.FileInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uuid = 1;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uuid());
  }

  // string uncompressed_hash = 4;
  if (this->uncompressed_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uncompressed_hash());
  }

  // string compressed_hash = 7;
  if (this->compressed_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_compressed_hash());
  }

  // uint64 uncompressed_size = 3;
  if (this->uncompressed_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_uncompressed_size());
  }

  // int32 content_type = 2;
  if (this->content_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_content_type());
  }

  // int32 compression_type = 5;
  if (this->compression_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_compression_type());
  }

  // uint64 compressed_size = 6;
  if (this->compressed_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_compressed_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FileInfo*>(
      &from));
}

void FileInfo::MergeFrom(const FileInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.FileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uuid().size() > 0) {
    _internal_set_uuid(from._internal_uuid());
  }
  if (from.uncompressed_hash().size() > 0) {
    _internal_set_uncompressed_hash(from._internal_uncompressed_hash());
  }
  if (from.compressed_hash().size() > 0) {
    _internal_set_compressed_hash(from._internal_compressed_hash());
  }
  if (from.uncompressed_size() != 0) {
    _internal_set_uncompressed_size(from._internal_uncompressed_size());
  }
  if (from.content_type() != 0) {
    _internal_set_content_type(from._internal_content_type());
  }
  if (from.compression_type() != 0) {
    _internal_set_compression_type(from._internal_compression_type());
  }
  if (from.compressed_size() != 0) {
    _internal_set_compressed_size(from._internal_compressed_size());
  }
}

void FileInfo::CopyFrom(const FileInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.FileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileInfo::IsInitialized() const {
  return true;
}

void FileInfo::InternalSwap(FileInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  uuid_.Swap(&other->uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  uncompressed_hash_.Swap(&other->uncompressed_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  compressed_hash_.Swap(&other->compressed_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FileInfo, compressed_size_)
      + sizeof(FileInfo::compressed_size_)
      - PROTOBUF_FIELD_OFFSET(FileInfo, uncompressed_size_)>(
          reinterpret_cast<char*>(&uncompressed_size_),
          reinterpret_cast<char*>(&other->uncompressed_size_));
}

std::string FileInfo::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.FileInfo";
}


// ===================================================================

void ServerIndexChange::InitAsDefaultInstance() {
}
class ServerIndexChange::_Internal {
 public:
};

ServerIndexChange::ServerIndexChange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.ServerIndexChange)
}
ServerIndexChange::ServerIndexChange(const ServerIndexChange& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  public_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_public_id().empty()) {
    public_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_public_id(),
      GetArena());
  }
  date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_date().empty()) {
    date_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_date(),
      GetArena());
  }
  ::memcpy(&seq_, &from.seq_,
    static_cast<size_t>(reinterpret_cast<char*>(&resource_type_) -
    reinterpret_cast<char*>(&seq_)) + sizeof(resource_type_));
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.ServerIndexChange)
}

void ServerIndexChange::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerIndexChange_OrthancDatabasePlugin_2eproto.base);
  public_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&seq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resource_type_) -
      reinterpret_cast<char*>(&seq_)) + sizeof(resource_type_));
}

ServerIndexChange::~ServerIndexChange() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.ServerIndexChange)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ServerIndexChange::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  public_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServerIndexChange::ArenaDtor(void* object) {
  ServerIndexChange* _this = reinterpret_cast< ServerIndexChange* >(object);
  (void)_this;
}
void ServerIndexChange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerIndexChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerIndexChange& ServerIndexChange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerIndexChange_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void ServerIndexChange::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.ServerIndexChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  public_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&seq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resource_type_) -
      reinterpret_cast<char*>(&seq_)) + sizeof(resource_type_));
  _internal_metadata_.Clear<std::string>();
}

const char* ServerIndexChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 seq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 change_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          change_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.ResourceType resource_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_resource_type(static_cast<::Orthanc::DatabasePluginMessages::ResourceType>(val));
        } else goto handle_unusual;
        continue;
      // string public_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_public_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string date = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerIndexChange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.ServerIndexChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 seq = 1;
  if (this->seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_seq(), target);
  }

  // int32 change_type = 2;
  if (this->change_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_change_type(), target);
  }

  // .Orthanc.DatabasePluginMessages.ResourceType resource_type = 3;
  if (this->resource_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_resource_type(), target);
  }

  // string public_id = 4;
  if (this->public_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_public_id().data(), static_cast<int>(this->_internal_public_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Orthanc.DatabasePluginMessages.ServerIndexChange.public_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_public_id(), target);
  }

  // string date = 5;
  if (this->date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_date().data(), static_cast<int>(this->_internal_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Orthanc.DatabasePluginMessages.ServerIndexChange.date");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_date(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.ServerIndexChange)
  return target;
}

size_t ServerIndexChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.ServerIndexChange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string public_id = 4;
  if (this->public_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_public_id());
  }

  // string date = 5;
  if (this->date().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_date());
  }

  // int64 seq = 1;
  if (this->seq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_seq());
  }

  // int32 change_type = 2;
  if (this->change_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_change_type());
  }

  // .Orthanc.DatabasePluginMessages.ResourceType resource_type = 3;
  if (this->resource_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_resource_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerIndexChange::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ServerIndexChange*>(
      &from));
}

void ServerIndexChange::MergeFrom(const ServerIndexChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.ServerIndexChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.public_id().size() > 0) {
    _internal_set_public_id(from._internal_public_id());
  }
  if (from.date().size() > 0) {
    _internal_set_date(from._internal_date());
  }
  if (from.seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
  if (from.change_type() != 0) {
    _internal_set_change_type(from._internal_change_type());
  }
  if (from.resource_type() != 0) {
    _internal_set_resource_type(from._internal_resource_type());
  }
}

void ServerIndexChange::CopyFrom(const ServerIndexChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.ServerIndexChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerIndexChange::IsInitialized() const {
  return true;
}

void ServerIndexChange::InternalSwap(ServerIndexChange* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  public_id_.Swap(&other->public_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  date_.Swap(&other->date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerIndexChange, resource_type_)
      + sizeof(ServerIndexChange::resource_type_)
      - PROTOBUF_FIELD_OFFSET(ServerIndexChange, seq_)>(
          reinterpret_cast<char*>(&seq_),
          reinterpret_cast<char*>(&other->seq_));
}

std::string ServerIndexChange::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.ServerIndexChange";
}


// ===================================================================

void ExportedResource::InitAsDefaultInstance() {
}
class ExportedResource::_Internal {
 public:
};

ExportedResource::ExportedResource(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.ExportedResource)
}
ExportedResource::ExportedResource(const ExportedResource& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  public_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_public_id().empty()) {
    public_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_public_id(),
      GetArena());
  }
  modality_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_modality().empty()) {
    modality_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_modality(),
      GetArena());
  }
  date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_date().empty()) {
    date_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_date(),
      GetArena());
  }
  patient_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_patient_id().empty()) {
    patient_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_patient_id(),
      GetArena());
  }
  study_instance_uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_study_instance_uid().empty()) {
    study_instance_uid_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_study_instance_uid(),
      GetArena());
  }
  series_instance_uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_series_instance_uid().empty()) {
    series_instance_uid_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_series_instance_uid(),
      GetArena());
  }
  sop_instance_uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sop_instance_uid().empty()) {
    sop_instance_uid_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sop_instance_uid(),
      GetArena());
  }
  ::memcpy(&seq_, &from.seq_,
    static_cast<size_t>(reinterpret_cast<char*>(&resource_type_) -
    reinterpret_cast<char*>(&seq_)) + sizeof(resource_type_));
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.ExportedResource)
}

void ExportedResource::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ExportedResource_OrthancDatabasePlugin_2eproto.base);
  public_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modality_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  patient_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  study_instance_uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  series_instance_uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sop_instance_uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&seq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resource_type_) -
      reinterpret_cast<char*>(&seq_)) + sizeof(resource_type_));
}

ExportedResource::~ExportedResource() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.ExportedResource)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ExportedResource::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  public_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modality_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  patient_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  study_instance_uid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  series_instance_uid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sop_instance_uid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ExportedResource::ArenaDtor(void* object) {
  ExportedResource* _this = reinterpret_cast< ExportedResource* >(object);
  (void)_this;
}
void ExportedResource::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExportedResource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExportedResource& ExportedResource::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExportedResource_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void ExportedResource::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.ExportedResource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  public_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  modality_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  patient_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  study_instance_uid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  series_instance_uid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sop_instance_uid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&seq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resource_type_) -
      reinterpret_cast<char*>(&seq_)) + sizeof(resource_type_));
  _internal_metadata_.Clear<std::string>();
}

const char* ExportedResource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 seq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.ResourceType resource_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_resource_type(static_cast<::Orthanc::DatabasePluginMessages::ResourceType>(val));
        } else goto handle_unusual;
        continue;
      // string public_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_public_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string modality = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_modality();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string date = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string patient_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_patient_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string study_instance_uid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_study_instance_uid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string series_instance_uid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_series_instance_uid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sop_instance_uid = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_sop_instance_uid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExportedResource::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.ExportedResource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 seq = 1;
  if (this->seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_seq(), target);
  }

  // .Orthanc.DatabasePluginMessages.ResourceType resource_type = 2;
  if (this->resource_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_resource_type(), target);
  }

  // string public_id = 3;
  if (this->public_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_public_id().data(), static_cast<int>(this->_internal_public_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Orthanc.DatabasePluginMessages.ExportedResource.public_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_public_id(), target);
  }

  // string modality = 4;
  if (this->modality().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_modality().data(), static_cast<int>(this->_internal_modality().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Orthanc.DatabasePluginMessages.ExportedResource.modality");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_modality(), target);
  }

  // string date = 5;
  if (this->date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_date().data(), static_cast<int>(this->_internal_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Orthanc.DatabasePluginMessages.ExportedResource.date");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_date(), target);
  }

  // string patient_id = 6;
  if (this->patient_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_patient_id().data(), static_cast<int>(this->_internal_patient_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Orthanc.DatabasePluginMessages.ExportedResource.patient_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_patient_id(), target);
  }

  // string study_instance_uid = 7;
  if (this->study_instance_uid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_study_instance_uid().data(), static_cast<int>(this->_internal_study_instance_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Orthanc.DatabasePluginMessages.ExportedResource.study_instance_uid");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_study_instance_uid(), target);
  }

  // string series_instance_uid = 8;
  if (this->series_instance_uid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_series_instance_uid().data(), static_cast<int>(this->_internal_series_instance_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Orthanc.DatabasePluginMessages.ExportedResource.series_instance_uid");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_series_instance_uid(), target);
  }

  // string sop_instance_uid = 9;
  if (this->sop_instance_uid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sop_instance_uid().data(), static_cast<int>(this->_internal_sop_instance_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Orthanc.DatabasePluginMessages.ExportedResource.sop_instance_uid");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_sop_instance_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.ExportedResource)
  return target;
}

size_t ExportedResource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.ExportedResource)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string public_id = 3;
  if (this->public_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_public_id());
  }

  // string modality = 4;
  if (this->modality().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_modality());
  }

  // string date = 5;
  if (this->date().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_date());
  }

  // string patient_id = 6;
  if (this->patient_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_patient_id());
  }

  // string study_instance_uid = 7;
  if (this->study_instance_uid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_study_instance_uid());
  }

  // string series_instance_uid = 8;
  if (this->series_instance_uid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_series_instance_uid());
  }

  // string sop_instance_uid = 9;
  if (this->sop_instance_uid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sop_instance_uid());
  }

  // int64 seq = 1;
  if (this->seq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_seq());
  }

  // .Orthanc.DatabasePluginMessages.ResourceType resource_type = 2;
  if (this->resource_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_resource_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExportedResource::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ExportedResource*>(
      &from));
}

void ExportedResource::MergeFrom(const ExportedResource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.ExportedResource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.public_id().size() > 0) {
    _internal_set_public_id(from._internal_public_id());
  }
  if (from.modality().size() > 0) {
    _internal_set_modality(from._internal_modality());
  }
  if (from.date().size() > 0) {
    _internal_set_date(from._internal_date());
  }
  if (from.patient_id().size() > 0) {
    _internal_set_patient_id(from._internal_patient_id());
  }
  if (from.study_instance_uid().size() > 0) {
    _internal_set_study_instance_uid(from._internal_study_instance_uid());
  }
  if (from.series_instance_uid().size() > 0) {
    _internal_set_series_instance_uid(from._internal_series_instance_uid());
  }
  if (from.sop_instance_uid().size() > 0) {
    _internal_set_sop_instance_uid(from._internal_sop_instance_uid());
  }
  if (from.seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
  if (from.resource_type() != 0) {
    _internal_set_resource_type(from._internal_resource_type());
  }
}

void ExportedResource::CopyFrom(const ExportedResource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.ExportedResource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExportedResource::IsInitialized() const {
  return true;
}

void ExportedResource::InternalSwap(ExportedResource* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  public_id_.Swap(&other->public_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  modality_.Swap(&other->modality_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  date_.Swap(&other->date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  patient_id_.Swap(&other->patient_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  study_instance_uid_.Swap(&other->study_instance_uid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  series_instance_uid_.Swap(&other->series_instance_uid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sop_instance_uid_.Swap(&other->sop_instance_uid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExportedResource, resource_type_)
      + sizeof(ExportedResource::resource_type_)
      - PROTOBUF_FIELD_OFFSET(ExportedResource, seq_)>(
          reinterpret_cast<char*>(&seq_),
          reinterpret_cast<char*>(&other->seq_));
}

std::string ExportedResource::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.ExportedResource";
}


// ===================================================================

void DatabaseConstraint::InitAsDefaultInstance() {
}
class DatabaseConstraint::_Internal {
 public:
};

DatabaseConstraint::DatabaseConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.DatabaseConstraint)
}
DatabaseConstraint::DatabaseConstraint(const DatabaseConstraint& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&level_, &from.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&level_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.DatabaseConstraint)
}

void DatabaseConstraint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DatabaseConstraint_OrthancDatabasePlugin_2eproto.base);
  ::memset(&level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&level_)) + sizeof(type_));
}

DatabaseConstraint::~DatabaseConstraint() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.DatabaseConstraint)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DatabaseConstraint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DatabaseConstraint::ArenaDtor(void* object) {
  DatabaseConstraint* _this = reinterpret_cast< DatabaseConstraint* >(object);
  (void)_this;
}
void DatabaseConstraint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DatabaseConstraint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DatabaseConstraint& DatabaseConstraint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DatabaseConstraint_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void DatabaseConstraint::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.DatabaseConstraint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  ::memset(&level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&level_)) + sizeof(type_));
  _internal_metadata_.Clear<std::string>();
}

const char* DatabaseConstraint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Orthanc.DatabasePluginMessages.ResourceType level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_level(static_cast<::Orthanc::DatabasePluginMessages::ResourceType>(val));
        } else goto handle_unusual;
        continue;
      // uint32 tag_group = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          tag_group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tag_element = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          tag_element_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_identifier_tag = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          is_identifier_tag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_case_sensitive = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          is_case_sensitive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_mandatory = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          is_mandatory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.ConstraintType type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::Orthanc::DatabasePluginMessages::ConstraintType>(val));
        } else goto handle_unusual;
        continue;
      // repeated string values = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_values();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DatabaseConstraint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.DatabaseConstraint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Orthanc.DatabasePluginMessages.ResourceType level = 1;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_level(), target);
  }

  // uint32 tag_group = 2;
  if (this->tag_group() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_tag_group(), target);
  }

  // uint32 tag_element = 3;
  if (this->tag_element() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_tag_element(), target);
  }

  // bool is_identifier_tag = 4;
  if (this->is_identifier_tag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_identifier_tag(), target);
  }

  // bool is_case_sensitive = 5;
  if (this->is_case_sensitive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_case_sensitive(), target);
  }

  // bool is_mandatory = 6;
  if (this->is_mandatory() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_mandatory(), target);
  }

  // .Orthanc.DatabasePluginMessages.ConstraintType type = 7;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_type(), target);
  }

  // repeated string values = 8;
  for (int i = 0, n = this->_internal_values_size(); i < n; i++) {
    const auto& s = this->_internal_values(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Orthanc.DatabasePluginMessages.DatabaseConstraint.values");
    target = stream->WriteString(8, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.DatabaseConstraint)
  return target;
}

size_t DatabaseConstraint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.DatabaseConstraint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string values = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(values_.size());
  for (int i = 0, n = values_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      values_.Get(i));
  }

  // .Orthanc.DatabasePluginMessages.ResourceType level = 1;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_level());
  }

  // uint32 tag_group = 2;
  if (this->tag_group() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tag_group());
  }

  // uint32 tag_element = 3;
  if (this->tag_element() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tag_element());
  }

  // bool is_identifier_tag = 4;
  if (this->is_identifier_tag() != 0) {
    total_size += 1 + 1;
  }

  // bool is_case_sensitive = 5;
  if (this->is_case_sensitive() != 0) {
    total_size += 1 + 1;
  }

  // bool is_mandatory = 6;
  if (this->is_mandatory() != 0) {
    total_size += 1 + 1;
  }

  // .Orthanc.DatabasePluginMessages.ConstraintType type = 7;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DatabaseConstraint::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DatabaseConstraint*>(
      &from));
}

void DatabaseConstraint::MergeFrom(const DatabaseConstraint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.DatabaseConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
  if (from.tag_group() != 0) {
    _internal_set_tag_group(from._internal_tag_group());
  }
  if (from.tag_element() != 0) {
    _internal_set_tag_element(from._internal_tag_element());
  }
  if (from.is_identifier_tag() != 0) {
    _internal_set_is_identifier_tag(from._internal_is_identifier_tag());
  }
  if (from.is_case_sensitive() != 0) {
    _internal_set_is_case_sensitive(from._internal_is_case_sensitive());
  }
  if (from.is_mandatory() != 0) {
    _internal_set_is_mandatory(from._internal_is_mandatory());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void DatabaseConstraint::CopyFrom(const DatabaseConstraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.DatabaseConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatabaseConstraint::IsInitialized() const {
  return true;
}

void DatabaseConstraint::InternalSwap(DatabaseConstraint* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DatabaseConstraint, type_)
      + sizeof(DatabaseConstraint::type_)
      - PROTOBUF_FIELD_OFFSET(DatabaseConstraint, level_)>(
          reinterpret_cast<char*>(&level_),
          reinterpret_cast<char*>(&other->level_));
}

std::string DatabaseConstraint::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.DatabaseConstraint";
}


// ===================================================================

void GetSystemInformation_Request::InitAsDefaultInstance() {
}
class GetSystemInformation_Request::_Internal {
 public:
};

GetSystemInformation_Request::GetSystemInformation_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.GetSystemInformation.Request)
}
GetSystemInformation_Request::GetSystemInformation_Request(const GetSystemInformation_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.GetSystemInformation.Request)
}

void GetSystemInformation_Request::SharedCtor() {
}

GetSystemInformation_Request::~GetSystemInformation_Request() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.GetSystemInformation.Request)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GetSystemInformation_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetSystemInformation_Request::ArenaDtor(void* object) {
  GetSystemInformation_Request* _this = reinterpret_cast< GetSystemInformation_Request* >(object);
  (void)_this;
}
void GetSystemInformation_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetSystemInformation_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetSystemInformation_Request& GetSystemInformation_Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetSystemInformation_Request_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void GetSystemInformation_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.GetSystemInformation.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* GetSystemInformation_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetSystemInformation_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.GetSystemInformation.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.GetSystemInformation.Request)
  return target;
}

size_t GetSystemInformation_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.GetSystemInformation.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSystemInformation_Request::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetSystemInformation_Request*>(
      &from));
}

void GetSystemInformation_Request::MergeFrom(const GetSystemInformation_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.GetSystemInformation.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetSystemInformation_Request::CopyFrom(const GetSystemInformation_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.GetSystemInformation.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSystemInformation_Request::IsInitialized() const {
  return true;
}

void GetSystemInformation_Request::InternalSwap(GetSystemInformation_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string GetSystemInformation_Request::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.GetSystemInformation.Request";
}


// ===================================================================

void GetSystemInformation_Response::InitAsDefaultInstance() {
}
class GetSystemInformation_Response::_Internal {
 public:
};

GetSystemInformation_Response::GetSystemInformation_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.GetSystemInformation.Response)
}
GetSystemInformation_Response::GetSystemInformation_Response(const GetSystemInformation_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&database_version_, &from.database_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&has_measure_latency_) -
    reinterpret_cast<char*>(&database_version_)) + sizeof(has_measure_latency_));
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.GetSystemInformation.Response)
}

void GetSystemInformation_Response::SharedCtor() {
  ::memset(&database_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_measure_latency_) -
      reinterpret_cast<char*>(&database_version_)) + sizeof(has_measure_latency_));
}

GetSystemInformation_Response::~GetSystemInformation_Response() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.GetSystemInformation.Response)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GetSystemInformation_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetSystemInformation_Response::ArenaDtor(void* object) {
  GetSystemInformation_Response* _this = reinterpret_cast< GetSystemInformation_Response* >(object);
  (void)_this;
}
void GetSystemInformation_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetSystemInformation_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetSystemInformation_Response& GetSystemInformation_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetSystemInformation_Response_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void GetSystemInformation_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.GetSystemInformation.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&database_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_measure_latency_) -
      reinterpret_cast<char*>(&database_version_)) + sizeof(has_measure_latency_));
  _internal_metadata_.Clear<std::string>();
}

const char* GetSystemInformation_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 database_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          database_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool supports_flush_to_disk = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          supports_flush_to_disk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool supports_revisions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          supports_revisions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool supports_labels = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          supports_labels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool supports_increment_global_property = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          supports_increment_global_property_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool has_update_and_get_statistics = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          has_update_and_get_statistics_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool has_measure_latency = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          has_measure_latency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetSystemInformation_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.GetSystemInformation.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 database_version = 1;
  if (this->database_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_database_version(), target);
  }

  // bool supports_flush_to_disk = 2;
  if (this->supports_flush_to_disk() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_supports_flush_to_disk(), target);
  }

  // bool supports_revisions = 3;
  if (this->supports_revisions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_supports_revisions(), target);
  }

  // bool supports_labels = 4;
  if (this->supports_labels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_supports_labels(), target);
  }

  // bool supports_increment_global_property = 5;
  if (this->supports_increment_global_property() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_supports_increment_global_property(), target);
  }

  // bool has_update_and_get_statistics = 6;
  if (this->has_update_and_get_statistics() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_has_update_and_get_statistics(), target);
  }

  // bool has_measure_latency = 7;
  if (this->has_measure_latency() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_has_measure_latency(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.GetSystemInformation.Response)
  return target;
}

size_t GetSystemInformation_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.GetSystemInformation.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 database_version = 1;
  if (this->database_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_database_version());
  }

  // bool supports_flush_to_disk = 2;
  if (this->supports_flush_to_disk() != 0) {
    total_size += 1 + 1;
  }

  // bool supports_revisions = 3;
  if (this->supports_revisions() != 0) {
    total_size += 1 + 1;
  }

  // bool supports_labels = 4;
  if (this->supports_labels() != 0) {
    total_size += 1 + 1;
  }

  // bool supports_increment_global_property = 5;
  if (this->supports_increment_global_property() != 0) {
    total_size += 1 + 1;
  }

  // bool has_update_and_get_statistics = 6;
  if (this->has_update_and_get_statistics() != 0) {
    total_size += 1 + 1;
  }

  // bool has_measure_latency = 7;
  if (this->has_measure_latency() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSystemInformation_Response::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetSystemInformation_Response*>(
      &from));
}

void GetSystemInformation_Response::MergeFrom(const GetSystemInformation_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.GetSystemInformation.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.database_version() != 0) {
    _internal_set_database_version(from._internal_database_version());
  }
  if (from.supports_flush_to_disk() != 0) {
    _internal_set_supports_flush_to_disk(from._internal_supports_flush_to_disk());
  }
  if (from.supports_revisions() != 0) {
    _internal_set_supports_revisions(from._internal_supports_revisions());
  }
  if (from.supports_labels() != 0) {
    _internal_set_supports_labels(from._internal_supports_labels());
  }
  if (from.supports_increment_global_property() != 0) {
    _internal_set_supports_increment_global_property(from._internal_supports_increment_global_property());
  }
  if (from.has_update_and_get_statistics() != 0) {
    _internal_set_has_update_and_get_statistics(from._internal_has_update_and_get_statistics());
  }
  if (from.has_measure_latency() != 0) {
    _internal_set_has_measure_latency(from._internal_has_measure_latency());
  }
}

void GetSystemInformation_Response::CopyFrom(const GetSystemInformation_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.GetSystemInformation.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSystemInformation_Response::IsInitialized() const {
  return true;
}

void GetSystemInformation_Response::InternalSwap(GetSystemInformation_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetSystemInformation_Response, has_measure_latency_)
      + sizeof(GetSystemInformation_Response::has_measure_latency_)
      - PROTOBUF_FIELD_OFFSET(GetSystemInformation_Response, database_version_)>(
          reinterpret_cast<char*>(&database_version_),
          reinterpret_cast<char*>(&other->database_version_));
}

std::string GetSystemInformation_Response::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.GetSystemInformation.Response";
}


// ===================================================================

void GetSystemInformation::InitAsDefaultInstance() {
}
class GetSystemInformation::_Internal {
 public:
};

GetSystemInformation::GetSystemInformation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.GetSystemInformation)
}
GetSystemInformation::GetSystemInformation(const GetSystemInformation& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.GetSystemInformation)
}

void GetSystemInformation::SharedCtor() {
}

GetSystemInformation::~GetSystemInformation() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.GetSystemInformation)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GetSystemInformation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetSystemInformation::ArenaDtor(void* object) {
  GetSystemInformation* _this = reinterpret_cast< GetSystemInformation* >(object);
  (void)_this;
}
void GetSystemInformation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetSystemInformation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetSystemInformation& GetSystemInformation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetSystemInformation_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void GetSystemInformation::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.GetSystemInformation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* GetSystemInformation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetSystemInformation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.GetSystemInformation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.GetSystemInformation)
  return target;
}

size_t GetSystemInformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.GetSystemInformation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSystemInformation::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetSystemInformation*>(
      &from));
}

void GetSystemInformation::MergeFrom(const GetSystemInformation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.GetSystemInformation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetSystemInformation::CopyFrom(const GetSystemInformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.GetSystemInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSystemInformation::IsInitialized() const {
  return true;
}

void GetSystemInformation::InternalSwap(GetSystemInformation* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string GetSystemInformation::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.GetSystemInformation";
}


// ===================================================================

void Open_Request_IdentifierTag::InitAsDefaultInstance() {
}
class Open_Request_IdentifierTag::_Internal {
 public:
};

Open_Request_IdentifierTag::Open_Request_IdentifierTag(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.Open.Request.IdentifierTag)
}
Open_Request_IdentifierTag::Open_Request_IdentifierTag(const Open_Request_IdentifierTag& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  ::memcpy(&level_, &from.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&element_) -
    reinterpret_cast<char*>(&level_)) + sizeof(element_));
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.Open.Request.IdentifierTag)
}

void Open_Request_IdentifierTag::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Open_Request_IdentifierTag_OrthancDatabasePlugin_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&element_) -
      reinterpret_cast<char*>(&level_)) + sizeof(element_));
}

Open_Request_IdentifierTag::~Open_Request_IdentifierTag() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.Open.Request.IdentifierTag)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Open_Request_IdentifierTag::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Open_Request_IdentifierTag::ArenaDtor(void* object) {
  Open_Request_IdentifierTag* _this = reinterpret_cast< Open_Request_IdentifierTag* >(object);
  (void)_this;
}
void Open_Request_IdentifierTag::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Open_Request_IdentifierTag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Open_Request_IdentifierTag& Open_Request_IdentifierTag::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Open_Request_IdentifierTag_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void Open_Request_IdentifierTag::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.Open.Request.IdentifierTag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&element_) -
      reinterpret_cast<char*>(&level_)) + sizeof(element_));
  _internal_metadata_.Clear<std::string>();
}

const char* Open_Request_IdentifierTag::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Orthanc.DatabasePluginMessages.ResourceType level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_level(static_cast<::Orthanc::DatabasePluginMessages::ResourceType>(val));
        } else goto handle_unusual;
        continue;
      // uint32 group = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 element = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          element_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Open_Request_IdentifierTag::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.Open.Request.IdentifierTag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Orthanc.DatabasePluginMessages.ResourceType level = 1;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_level(), target);
  }

  // uint32 group = 2;
  if (this->group() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_group(), target);
  }

  // uint32 element = 3;
  if (this->element() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_element(), target);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Orthanc.DatabasePluginMessages.Open.Request.IdentifierTag.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.Open.Request.IdentifierTag)
  return target;
}

size_t Open_Request_IdentifierTag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.Open.Request.IdentifierTag)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .Orthanc.DatabasePluginMessages.ResourceType level = 1;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_level());
  }

  // uint32 group = 2;
  if (this->group() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_group());
  }

  // uint32 element = 3;
  if (this->element() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_element());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Open_Request_IdentifierTag::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Open_Request_IdentifierTag*>(
      &from));
}

void Open_Request_IdentifierTag::MergeFrom(const Open_Request_IdentifierTag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.Open.Request.IdentifierTag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
  if (from.group() != 0) {
    _internal_set_group(from._internal_group());
  }
  if (from.element() != 0) {
    _internal_set_element(from._internal_element());
  }
}

void Open_Request_IdentifierTag::CopyFrom(const Open_Request_IdentifierTag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.Open.Request.IdentifierTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Open_Request_IdentifierTag::IsInitialized() const {
  return true;
}

void Open_Request_IdentifierTag::InternalSwap(Open_Request_IdentifierTag* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Open_Request_IdentifierTag, element_)
      + sizeof(Open_Request_IdentifierTag::element_)
      - PROTOBUF_FIELD_OFFSET(Open_Request_IdentifierTag, level_)>(
          reinterpret_cast<char*>(&level_),
          reinterpret_cast<char*>(&other->level_));
}

std::string Open_Request_IdentifierTag::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.Open.Request.IdentifierTag";
}


// ===================================================================

void Open_Request::InitAsDefaultInstance() {
}
class Open_Request::_Internal {
 public:
};

Open_Request::Open_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  identifier_tags_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.Open.Request)
}
Open_Request::Open_Request(const Open_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      identifier_tags_(from.identifier_tags_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.Open.Request)
}

void Open_Request::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Open_Request_OrthancDatabasePlugin_2eproto.base);
}

Open_Request::~Open_Request() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.Open.Request)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Open_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Open_Request::ArenaDtor(void* object) {
  Open_Request* _this = reinterpret_cast< Open_Request* >(object);
  (void)_this;
}
void Open_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Open_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Open_Request& Open_Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Open_Request_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void Open_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.Open.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  identifier_tags_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Open_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Orthanc.DatabasePluginMessages.Open.Request.IdentifierTag identifier_tags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_identifier_tags(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Open_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.Open.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Orthanc.DatabasePluginMessages.Open.Request.IdentifierTag identifier_tags = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_identifier_tags_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_identifier_tags(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.Open.Request)
  return target;
}

size_t Open_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.Open.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Orthanc.DatabasePluginMessages.Open.Request.IdentifierTag identifier_tags = 1;
  total_size += 1UL * this->_internal_identifier_tags_size();
  for (const auto& msg : this->identifier_tags_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Open_Request::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Open_Request*>(
      &from));
}

void Open_Request::MergeFrom(const Open_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.Open.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  identifier_tags_.MergeFrom(from.identifier_tags_);
}

void Open_Request::CopyFrom(const Open_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.Open.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Open_Request::IsInitialized() const {
  return true;
}

void Open_Request::InternalSwap(Open_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  identifier_tags_.InternalSwap(&other->identifier_tags_);
}

std::string Open_Request::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.Open.Request";
}


// ===================================================================

void Open_Response::InitAsDefaultInstance() {
}
class Open_Response::_Internal {
 public:
};

Open_Response::Open_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.Open.Response)
}
Open_Response::Open_Response(const Open_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.Open.Response)
}

void Open_Response::SharedCtor() {
}

Open_Response::~Open_Response() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.Open.Response)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Open_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Open_Response::ArenaDtor(void* object) {
  Open_Response* _this = reinterpret_cast< Open_Response* >(object);
  (void)_this;
}
void Open_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Open_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Open_Response& Open_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Open_Response_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void Open_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.Open.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* Open_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Open_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.Open.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.Open.Response)
  return target;
}

size_t Open_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.Open.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Open_Response::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Open_Response*>(
      &from));
}

void Open_Response::MergeFrom(const Open_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.Open.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Open_Response::CopyFrom(const Open_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.Open.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Open_Response::IsInitialized() const {
  return true;
}

void Open_Response::InternalSwap(Open_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string Open_Response::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.Open.Response";
}


// ===================================================================

void Open::InitAsDefaultInstance() {
}
class Open::_Internal {
 public:
};

Open::Open(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.Open)
}
Open::Open(const Open& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.Open)
}

void Open::SharedCtor() {
}

Open::~Open() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.Open)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Open::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Open::ArenaDtor(void* object) {
  Open* _this = reinterpret_cast< Open* >(object);
  (void)_this;
}
void Open::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Open::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Open& Open::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Open_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void Open::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.Open)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* Open::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Open::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.Open)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.Open)
  return target;
}

size_t Open::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.Open)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Open::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Open*>(
      &from));
}

void Open::MergeFrom(const Open& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.Open)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Open::CopyFrom(const Open& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.Open)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Open::IsInitialized() const {
  return true;
}

void Open::InternalSwap(Open* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string Open::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.Open";
}


// ===================================================================

void Close_Request::InitAsDefaultInstance() {
}
class Close_Request::_Internal {
 public:
};

Close_Request::Close_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.Close.Request)
}
Close_Request::Close_Request(const Close_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.Close.Request)
}

void Close_Request::SharedCtor() {
}

Close_Request::~Close_Request() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.Close.Request)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Close_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Close_Request::ArenaDtor(void* object) {
  Close_Request* _this = reinterpret_cast< Close_Request* >(object);
  (void)_this;
}
void Close_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Close_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Close_Request& Close_Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Close_Request_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void Close_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.Close.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* Close_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Close_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.Close.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.Close.Request)
  return target;
}

size_t Close_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.Close.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Close_Request::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Close_Request*>(
      &from));
}

void Close_Request::MergeFrom(const Close_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.Close.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Close_Request::CopyFrom(const Close_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.Close.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Close_Request::IsInitialized() const {
  return true;
}

void Close_Request::InternalSwap(Close_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string Close_Request::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.Close.Request";
}


// ===================================================================

void Close_Response::InitAsDefaultInstance() {
}
class Close_Response::_Internal {
 public:
};

Close_Response::Close_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.Close.Response)
}
Close_Response::Close_Response(const Close_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.Close.Response)
}

void Close_Response::SharedCtor() {
}

Close_Response::~Close_Response() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.Close.Response)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Close_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Close_Response::ArenaDtor(void* object) {
  Close_Response* _this = reinterpret_cast< Close_Response* >(object);
  (void)_this;
}
void Close_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Close_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Close_Response& Close_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Close_Response_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void Close_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.Close.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* Close_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Close_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.Close.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.Close.Response)
  return target;
}

size_t Close_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.Close.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Close_Response::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Close_Response*>(
      &from));
}

void Close_Response::MergeFrom(const Close_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.Close.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Close_Response::CopyFrom(const Close_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.Close.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Close_Response::IsInitialized() const {
  return true;
}

void Close_Response::InternalSwap(Close_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string Close_Response::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.Close.Response";
}


// ===================================================================

void Close::InitAsDefaultInstance() {
}
class Close::_Internal {
 public:
};

Close::Close(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.Close)
}
Close::Close(const Close& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.Close)
}

void Close::SharedCtor() {
}

Close::~Close() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.Close)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Close::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Close::ArenaDtor(void* object) {
  Close* _this = reinterpret_cast< Close* >(object);
  (void)_this;
}
void Close::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Close::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Close& Close::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Close_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void Close::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.Close)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* Close::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Close::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.Close)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.Close)
  return target;
}

size_t Close::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.Close)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Close::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Close*>(
      &from));
}

void Close::MergeFrom(const Close& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.Close)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Close::CopyFrom(const Close& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.Close)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Close::IsInitialized() const {
  return true;
}

void Close::InternalSwap(Close* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string Close::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.Close";
}


// ===================================================================

void FlushToDisk_Request::InitAsDefaultInstance() {
}
class FlushToDisk_Request::_Internal {
 public:
};

FlushToDisk_Request::FlushToDisk_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.FlushToDisk.Request)
}
FlushToDisk_Request::FlushToDisk_Request(const FlushToDisk_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.FlushToDisk.Request)
}

void FlushToDisk_Request::SharedCtor() {
}

FlushToDisk_Request::~FlushToDisk_Request() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.FlushToDisk.Request)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void FlushToDisk_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FlushToDisk_Request::ArenaDtor(void* object) {
  FlushToDisk_Request* _this = reinterpret_cast< FlushToDisk_Request* >(object);
  (void)_this;
}
void FlushToDisk_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FlushToDisk_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FlushToDisk_Request& FlushToDisk_Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FlushToDisk_Request_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void FlushToDisk_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.FlushToDisk.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* FlushToDisk_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FlushToDisk_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.FlushToDisk.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.FlushToDisk.Request)
  return target;
}

size_t FlushToDisk_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.FlushToDisk.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlushToDisk_Request::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FlushToDisk_Request*>(
      &from));
}

void FlushToDisk_Request::MergeFrom(const FlushToDisk_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.FlushToDisk.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void FlushToDisk_Request::CopyFrom(const FlushToDisk_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.FlushToDisk.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlushToDisk_Request::IsInitialized() const {
  return true;
}

void FlushToDisk_Request::InternalSwap(FlushToDisk_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string FlushToDisk_Request::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.FlushToDisk.Request";
}


// ===================================================================

void FlushToDisk_Response::InitAsDefaultInstance() {
}
class FlushToDisk_Response::_Internal {
 public:
};

FlushToDisk_Response::FlushToDisk_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.FlushToDisk.Response)
}
FlushToDisk_Response::FlushToDisk_Response(const FlushToDisk_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.FlushToDisk.Response)
}

void FlushToDisk_Response::SharedCtor() {
}

FlushToDisk_Response::~FlushToDisk_Response() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.FlushToDisk.Response)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void FlushToDisk_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FlushToDisk_Response::ArenaDtor(void* object) {
  FlushToDisk_Response* _this = reinterpret_cast< FlushToDisk_Response* >(object);
  (void)_this;
}
void FlushToDisk_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FlushToDisk_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FlushToDisk_Response& FlushToDisk_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FlushToDisk_Response_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void FlushToDisk_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.FlushToDisk.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* FlushToDisk_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FlushToDisk_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.FlushToDisk.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.FlushToDisk.Response)
  return target;
}

size_t FlushToDisk_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.FlushToDisk.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlushToDisk_Response::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FlushToDisk_Response*>(
      &from));
}

void FlushToDisk_Response::MergeFrom(const FlushToDisk_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.FlushToDisk.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void FlushToDisk_Response::CopyFrom(const FlushToDisk_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.FlushToDisk.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlushToDisk_Response::IsInitialized() const {
  return true;
}

void FlushToDisk_Response::InternalSwap(FlushToDisk_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string FlushToDisk_Response::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.FlushToDisk.Response";
}


// ===================================================================

void FlushToDisk::InitAsDefaultInstance() {
}
class FlushToDisk::_Internal {
 public:
};

FlushToDisk::FlushToDisk(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.FlushToDisk)
}
FlushToDisk::FlushToDisk(const FlushToDisk& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.FlushToDisk)
}

void FlushToDisk::SharedCtor() {
}

FlushToDisk::~FlushToDisk() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.FlushToDisk)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void FlushToDisk::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FlushToDisk::ArenaDtor(void* object) {
  FlushToDisk* _this = reinterpret_cast< FlushToDisk* >(object);
  (void)_this;
}
void FlushToDisk::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FlushToDisk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FlushToDisk& FlushToDisk::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FlushToDisk_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void FlushToDisk::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.FlushToDisk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* FlushToDisk::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FlushToDisk::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.FlushToDisk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.FlushToDisk)
  return target;
}

size_t FlushToDisk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.FlushToDisk)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlushToDisk::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FlushToDisk*>(
      &from));
}

void FlushToDisk::MergeFrom(const FlushToDisk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.FlushToDisk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void FlushToDisk::CopyFrom(const FlushToDisk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.FlushToDisk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlushToDisk::IsInitialized() const {
  return true;
}

void FlushToDisk::InternalSwap(FlushToDisk* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string FlushToDisk::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.FlushToDisk";
}


// ===================================================================

void StartTransaction_Request::InitAsDefaultInstance() {
}
class StartTransaction_Request::_Internal {
 public:
};

StartTransaction_Request::StartTransaction_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.StartTransaction.Request)
}
StartTransaction_Request::StartTransaction_Request(const StartTransaction_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.StartTransaction.Request)
}

void StartTransaction_Request::SharedCtor() {
  type_ = 0;
}

StartTransaction_Request::~StartTransaction_Request() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.StartTransaction.Request)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void StartTransaction_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StartTransaction_Request::ArenaDtor(void* object) {
  StartTransaction_Request* _this = reinterpret_cast< StartTransaction_Request* >(object);
  (void)_this;
}
void StartTransaction_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartTransaction_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartTransaction_Request& StartTransaction_Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StartTransaction_Request_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void StartTransaction_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.StartTransaction.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* StartTransaction_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Orthanc.DatabasePluginMessages.TransactionType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::Orthanc::DatabasePluginMessages::TransactionType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartTransaction_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.StartTransaction.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Orthanc.DatabasePluginMessages.TransactionType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.StartTransaction.Request)
  return target;
}

size_t StartTransaction_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.StartTransaction.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Orthanc.DatabasePluginMessages.TransactionType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartTransaction_Request::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const StartTransaction_Request*>(
      &from));
}

void StartTransaction_Request::MergeFrom(const StartTransaction_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.StartTransaction.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void StartTransaction_Request::CopyFrom(const StartTransaction_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.StartTransaction.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartTransaction_Request::IsInitialized() const {
  return true;
}

void StartTransaction_Request::InternalSwap(StartTransaction_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(type_, other->type_);
}

std::string StartTransaction_Request::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.StartTransaction.Request";
}


// ===================================================================

void StartTransaction_Response::InitAsDefaultInstance() {
}
class StartTransaction_Response::_Internal {
 public:
};

StartTransaction_Response::StartTransaction_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.StartTransaction.Response)
}
StartTransaction_Response::StartTransaction_Response(const StartTransaction_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  transaction_ = from.transaction_;
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.StartTransaction.Response)
}

void StartTransaction_Response::SharedCtor() {
  transaction_ = PROTOBUF_LONGLONG(0);
}

StartTransaction_Response::~StartTransaction_Response() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.StartTransaction.Response)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void StartTransaction_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StartTransaction_Response::ArenaDtor(void* object) {
  StartTransaction_Response* _this = reinterpret_cast< StartTransaction_Response* >(object);
  (void)_this;
}
void StartTransaction_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartTransaction_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartTransaction_Response& StartTransaction_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StartTransaction_Response_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void StartTransaction_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.StartTransaction.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transaction_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<std::string>();
}

const char* StartTransaction_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // sfixed64 transaction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          transaction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartTransaction_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.StartTransaction.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sfixed64 transaction = 1;
  if (this->transaction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed64ToArray(1, this->_internal_transaction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.StartTransaction.Response)
  return target;
}

size_t StartTransaction_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.StartTransaction.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sfixed64 transaction = 1;
  if (this->transaction() != 0) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartTransaction_Response::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const StartTransaction_Response*>(
      &from));
}

void StartTransaction_Response::MergeFrom(const StartTransaction_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.StartTransaction.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.transaction() != 0) {
    _internal_set_transaction(from._internal_transaction());
  }
}

void StartTransaction_Response::CopyFrom(const StartTransaction_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.StartTransaction.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartTransaction_Response::IsInitialized() const {
  return true;
}

void StartTransaction_Response::InternalSwap(StartTransaction_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(transaction_, other->transaction_);
}

std::string StartTransaction_Response::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.StartTransaction.Response";
}


// ===================================================================

void StartTransaction::InitAsDefaultInstance() {
}
class StartTransaction::_Internal {
 public:
};

StartTransaction::StartTransaction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.StartTransaction)
}
StartTransaction::StartTransaction(const StartTransaction& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.StartTransaction)
}

void StartTransaction::SharedCtor() {
}

StartTransaction::~StartTransaction() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.StartTransaction)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void StartTransaction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StartTransaction::ArenaDtor(void* object) {
  StartTransaction* _this = reinterpret_cast< StartTransaction* >(object);
  (void)_this;
}
void StartTransaction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartTransaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartTransaction& StartTransaction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StartTransaction_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void StartTransaction::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.StartTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* StartTransaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartTransaction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.StartTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.StartTransaction)
  return target;
}

size_t StartTransaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.StartTransaction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartTransaction::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const StartTransaction*>(
      &from));
}

void StartTransaction::MergeFrom(const StartTransaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.StartTransaction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void StartTransaction::CopyFrom(const StartTransaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.StartTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartTransaction::IsInitialized() const {
  return true;
}

void StartTransaction::InternalSwap(StartTransaction* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string StartTransaction::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.StartTransaction";
}


// ===================================================================

void Upgrade_Request::InitAsDefaultInstance() {
}
class Upgrade_Request::_Internal {
 public:
};

Upgrade_Request::Upgrade_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.Upgrade.Request)
}
Upgrade_Request::Upgrade_Request(const Upgrade_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&storage_area_, &from.storage_area_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_version_) -
    reinterpret_cast<char*>(&storage_area_)) + sizeof(target_version_));
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.Upgrade.Request)
}

void Upgrade_Request::SharedCtor() {
  ::memset(&storage_area_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_version_) -
      reinterpret_cast<char*>(&storage_area_)) + sizeof(target_version_));
}

Upgrade_Request::~Upgrade_Request() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.Upgrade.Request)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Upgrade_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Upgrade_Request::ArenaDtor(void* object) {
  Upgrade_Request* _this = reinterpret_cast< Upgrade_Request* >(object);
  (void)_this;
}
void Upgrade_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Upgrade_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Upgrade_Request& Upgrade_Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Upgrade_Request_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void Upgrade_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.Upgrade.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&storage_area_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_version_) -
      reinterpret_cast<char*>(&storage_area_)) + sizeof(target_version_));
  _internal_metadata_.Clear<std::string>();
}

const char* Upgrade_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 target_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          target_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sfixed64 storage_area = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          storage_area_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int64);
        } else goto handle_unusual;
        continue;
      // sfixed64 transaction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          transaction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Upgrade_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.Upgrade.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 target_version = 1;
  if (this->target_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_target_version(), target);
  }

  // sfixed64 storage_area = 2;
  if (this->storage_area() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed64ToArray(2, this->_internal_storage_area(), target);
  }

  // sfixed64 transaction = 3;
  if (this->transaction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed64ToArray(3, this->_internal_transaction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.Upgrade.Request)
  return target;
}

size_t Upgrade_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.Upgrade.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sfixed64 storage_area = 2;
  if (this->storage_area() != 0) {
    total_size += 1 + 8;
  }

  // sfixed64 transaction = 3;
  if (this->transaction() != 0) {
    total_size += 1 + 8;
  }

  // uint32 target_version = 1;
  if (this->target_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_target_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Upgrade_Request::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Upgrade_Request*>(
      &from));
}

void Upgrade_Request::MergeFrom(const Upgrade_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.Upgrade.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.storage_area() != 0) {
    _internal_set_storage_area(from._internal_storage_area());
  }
  if (from.transaction() != 0) {
    _internal_set_transaction(from._internal_transaction());
  }
  if (from.target_version() != 0) {
    _internal_set_target_version(from._internal_target_version());
  }
}

void Upgrade_Request::CopyFrom(const Upgrade_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.Upgrade.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Upgrade_Request::IsInitialized() const {
  return true;
}

void Upgrade_Request::InternalSwap(Upgrade_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Upgrade_Request, target_version_)
      + sizeof(Upgrade_Request::target_version_)
      - PROTOBUF_FIELD_OFFSET(Upgrade_Request, storage_area_)>(
          reinterpret_cast<char*>(&storage_area_),
          reinterpret_cast<char*>(&other->storage_area_));
}

std::string Upgrade_Request::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.Upgrade.Request";
}


// ===================================================================

void Upgrade_Response::InitAsDefaultInstance() {
}
class Upgrade_Response::_Internal {
 public:
};

Upgrade_Response::Upgrade_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.Upgrade.Response)
}
Upgrade_Response::Upgrade_Response(const Upgrade_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.Upgrade.Response)
}

void Upgrade_Response::SharedCtor() {
}

Upgrade_Response::~Upgrade_Response() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.Upgrade.Response)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Upgrade_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Upgrade_Response::ArenaDtor(void* object) {
  Upgrade_Response* _this = reinterpret_cast< Upgrade_Response* >(object);
  (void)_this;
}
void Upgrade_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Upgrade_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Upgrade_Response& Upgrade_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Upgrade_Response_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void Upgrade_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.Upgrade.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* Upgrade_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Upgrade_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.Upgrade.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.Upgrade.Response)
  return target;
}

size_t Upgrade_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.Upgrade.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Upgrade_Response::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Upgrade_Response*>(
      &from));
}

void Upgrade_Response::MergeFrom(const Upgrade_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.Upgrade.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Upgrade_Response::CopyFrom(const Upgrade_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.Upgrade.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Upgrade_Response::IsInitialized() const {
  return true;
}

void Upgrade_Response::InternalSwap(Upgrade_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string Upgrade_Response::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.Upgrade.Response";
}


// ===================================================================

void Upgrade::InitAsDefaultInstance() {
}
class Upgrade::_Internal {
 public:
};

Upgrade::Upgrade(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.Upgrade)
}
Upgrade::Upgrade(const Upgrade& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.Upgrade)
}

void Upgrade::SharedCtor() {
}

Upgrade::~Upgrade() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.Upgrade)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Upgrade::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Upgrade::ArenaDtor(void* object) {
  Upgrade* _this = reinterpret_cast< Upgrade* >(object);
  (void)_this;
}
void Upgrade::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Upgrade::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Upgrade& Upgrade::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Upgrade_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void Upgrade::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.Upgrade)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* Upgrade::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Upgrade::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.Upgrade)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.Upgrade)
  return target;
}

size_t Upgrade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.Upgrade)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Upgrade::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Upgrade*>(
      &from));
}

void Upgrade::MergeFrom(const Upgrade& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.Upgrade)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Upgrade::CopyFrom(const Upgrade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.Upgrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Upgrade::IsInitialized() const {
  return true;
}

void Upgrade::InternalSwap(Upgrade* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string Upgrade::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.Upgrade";
}


// ===================================================================

void FinalizeTransaction_Request::InitAsDefaultInstance() {
}
class FinalizeTransaction_Request::_Internal {
 public:
};

FinalizeTransaction_Request::FinalizeTransaction_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.FinalizeTransaction.Request)
}
FinalizeTransaction_Request::FinalizeTransaction_Request(const FinalizeTransaction_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  transaction_ = from.transaction_;
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.FinalizeTransaction.Request)
}

void FinalizeTransaction_Request::SharedCtor() {
  transaction_ = PROTOBUF_LONGLONG(0);
}

FinalizeTransaction_Request::~FinalizeTransaction_Request() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.FinalizeTransaction.Request)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void FinalizeTransaction_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FinalizeTransaction_Request::ArenaDtor(void* object) {
  FinalizeTransaction_Request* _this = reinterpret_cast< FinalizeTransaction_Request* >(object);
  (void)_this;
}
void FinalizeTransaction_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FinalizeTransaction_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FinalizeTransaction_Request& FinalizeTransaction_Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FinalizeTransaction_Request_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void FinalizeTransaction_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.FinalizeTransaction.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transaction_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<std::string>();
}

const char* FinalizeTransaction_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // sfixed64 transaction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          transaction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FinalizeTransaction_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.FinalizeTransaction.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sfixed64 transaction = 1;
  if (this->transaction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed64ToArray(1, this->_internal_transaction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.FinalizeTransaction.Request)
  return target;
}

size_t FinalizeTransaction_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.FinalizeTransaction.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sfixed64 transaction = 1;
  if (this->transaction() != 0) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FinalizeTransaction_Request::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FinalizeTransaction_Request*>(
      &from));
}

void FinalizeTransaction_Request::MergeFrom(const FinalizeTransaction_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.FinalizeTransaction.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.transaction() != 0) {
    _internal_set_transaction(from._internal_transaction());
  }
}

void FinalizeTransaction_Request::CopyFrom(const FinalizeTransaction_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.FinalizeTransaction.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FinalizeTransaction_Request::IsInitialized() const {
  return true;
}

void FinalizeTransaction_Request::InternalSwap(FinalizeTransaction_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(transaction_, other->transaction_);
}

std::string FinalizeTransaction_Request::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.FinalizeTransaction.Request";
}


// ===================================================================

void FinalizeTransaction_Response::InitAsDefaultInstance() {
}
class FinalizeTransaction_Response::_Internal {
 public:
};

FinalizeTransaction_Response::FinalizeTransaction_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.FinalizeTransaction.Response)
}
FinalizeTransaction_Response::FinalizeTransaction_Response(const FinalizeTransaction_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.FinalizeTransaction.Response)
}

void FinalizeTransaction_Response::SharedCtor() {
}

FinalizeTransaction_Response::~FinalizeTransaction_Response() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.FinalizeTransaction.Response)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void FinalizeTransaction_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FinalizeTransaction_Response::ArenaDtor(void* object) {
  FinalizeTransaction_Response* _this = reinterpret_cast< FinalizeTransaction_Response* >(object);
  (void)_this;
}
void FinalizeTransaction_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FinalizeTransaction_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FinalizeTransaction_Response& FinalizeTransaction_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FinalizeTransaction_Response_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void FinalizeTransaction_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.FinalizeTransaction.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* FinalizeTransaction_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FinalizeTransaction_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.FinalizeTransaction.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.FinalizeTransaction.Response)
  return target;
}

size_t FinalizeTransaction_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.FinalizeTransaction.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FinalizeTransaction_Response::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FinalizeTransaction_Response*>(
      &from));
}

void FinalizeTransaction_Response::MergeFrom(const FinalizeTransaction_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.FinalizeTransaction.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void FinalizeTransaction_Response::CopyFrom(const FinalizeTransaction_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.FinalizeTransaction.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FinalizeTransaction_Response::IsInitialized() const {
  return true;
}

void FinalizeTransaction_Response::InternalSwap(FinalizeTransaction_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string FinalizeTransaction_Response::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.FinalizeTransaction.Response";
}


// ===================================================================

void FinalizeTransaction::InitAsDefaultInstance() {
}
class FinalizeTransaction::_Internal {
 public:
};

FinalizeTransaction::FinalizeTransaction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.FinalizeTransaction)
}
FinalizeTransaction::FinalizeTransaction(const FinalizeTransaction& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.FinalizeTransaction)
}

void FinalizeTransaction::SharedCtor() {
}

FinalizeTransaction::~FinalizeTransaction() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.FinalizeTransaction)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void FinalizeTransaction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FinalizeTransaction::ArenaDtor(void* object) {
  FinalizeTransaction* _this = reinterpret_cast< FinalizeTransaction* >(object);
  (void)_this;
}
void FinalizeTransaction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FinalizeTransaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FinalizeTransaction& FinalizeTransaction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FinalizeTransaction_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void FinalizeTransaction::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.FinalizeTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* FinalizeTransaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FinalizeTransaction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.FinalizeTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.FinalizeTransaction)
  return target;
}

size_t FinalizeTransaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.FinalizeTransaction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FinalizeTransaction::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FinalizeTransaction*>(
      &from));
}

void FinalizeTransaction::MergeFrom(const FinalizeTransaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.FinalizeTransaction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void FinalizeTransaction::CopyFrom(const FinalizeTransaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.FinalizeTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FinalizeTransaction::IsInitialized() const {
  return true;
}

void FinalizeTransaction::InternalSwap(FinalizeTransaction* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string FinalizeTransaction::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.FinalizeTransaction";
}


// ===================================================================

void MeasureLatency_Request::InitAsDefaultInstance() {
}
class MeasureLatency_Request::_Internal {
 public:
};

MeasureLatency_Request::MeasureLatency_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.MeasureLatency.Request)
}
MeasureLatency_Request::MeasureLatency_Request(const MeasureLatency_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.MeasureLatency.Request)
}

void MeasureLatency_Request::SharedCtor() {
}

MeasureLatency_Request::~MeasureLatency_Request() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.MeasureLatency.Request)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void MeasureLatency_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MeasureLatency_Request::ArenaDtor(void* object) {
  MeasureLatency_Request* _this = reinterpret_cast< MeasureLatency_Request* >(object);
  (void)_this;
}
void MeasureLatency_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MeasureLatency_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MeasureLatency_Request& MeasureLatency_Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MeasureLatency_Request_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void MeasureLatency_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.MeasureLatency.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* MeasureLatency_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MeasureLatency_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.MeasureLatency.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.MeasureLatency.Request)
  return target;
}

size_t MeasureLatency_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.MeasureLatency.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MeasureLatency_Request::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MeasureLatency_Request*>(
      &from));
}

void MeasureLatency_Request::MergeFrom(const MeasureLatency_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.MeasureLatency.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MeasureLatency_Request::CopyFrom(const MeasureLatency_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.MeasureLatency.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeasureLatency_Request::IsInitialized() const {
  return true;
}

void MeasureLatency_Request::InternalSwap(MeasureLatency_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string MeasureLatency_Request::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.MeasureLatency.Request";
}


// ===================================================================

void MeasureLatency_Response::InitAsDefaultInstance() {
}
class MeasureLatency_Response::_Internal {
 public:
};

MeasureLatency_Response::MeasureLatency_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.MeasureLatency.Response)
}
MeasureLatency_Response::MeasureLatency_Response(const MeasureLatency_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  latency_us_ = from.latency_us_;
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.MeasureLatency.Response)
}

void MeasureLatency_Response::SharedCtor() {
  latency_us_ = PROTOBUF_LONGLONG(0);
}

MeasureLatency_Response::~MeasureLatency_Response() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.MeasureLatency.Response)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void MeasureLatency_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MeasureLatency_Response::ArenaDtor(void* object) {
  MeasureLatency_Response* _this = reinterpret_cast< MeasureLatency_Response* >(object);
  (void)_this;
}
void MeasureLatency_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MeasureLatency_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MeasureLatency_Response& MeasureLatency_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MeasureLatency_Response_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void MeasureLatency_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.MeasureLatency.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  latency_us_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<std::string>();
}

const char* MeasureLatency_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 latency_us = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          latency_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MeasureLatency_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.MeasureLatency.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 latency_us = 1;
  if (this->latency_us() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_latency_us(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.MeasureLatency.Response)
  return target;
}

size_t MeasureLatency_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.MeasureLatency.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 latency_us = 1;
  if (this->latency_us() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_latency_us());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MeasureLatency_Response::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MeasureLatency_Response*>(
      &from));
}

void MeasureLatency_Response::MergeFrom(const MeasureLatency_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.MeasureLatency.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.latency_us() != 0) {
    _internal_set_latency_us(from._internal_latency_us());
  }
}

void MeasureLatency_Response::CopyFrom(const MeasureLatency_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.MeasureLatency.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeasureLatency_Response::IsInitialized() const {
  return true;
}

void MeasureLatency_Response::InternalSwap(MeasureLatency_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(latency_us_, other->latency_us_);
}

std::string MeasureLatency_Response::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.MeasureLatency.Response";
}


// ===================================================================

void MeasureLatency::InitAsDefaultInstance() {
}
class MeasureLatency::_Internal {
 public:
};

MeasureLatency::MeasureLatency(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.MeasureLatency)
}
MeasureLatency::MeasureLatency(const MeasureLatency& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.MeasureLatency)
}

void MeasureLatency::SharedCtor() {
}

MeasureLatency::~MeasureLatency() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.MeasureLatency)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void MeasureLatency::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MeasureLatency::ArenaDtor(void* object) {
  MeasureLatency* _this = reinterpret_cast< MeasureLatency* >(object);
  (void)_this;
}
void MeasureLatency::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MeasureLatency::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MeasureLatency& MeasureLatency::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MeasureLatency_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void MeasureLatency::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.MeasureLatency)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* MeasureLatency::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MeasureLatency::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.MeasureLatency)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.MeasureLatency)
  return target;
}

size_t MeasureLatency::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.MeasureLatency)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MeasureLatency::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MeasureLatency*>(
      &from));
}

void MeasureLatency::MergeFrom(const MeasureLatency& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.MeasureLatency)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MeasureLatency::CopyFrom(const MeasureLatency& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.MeasureLatency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeasureLatency::IsInitialized() const {
  return true;
}

void MeasureLatency::InternalSwap(MeasureLatency* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string MeasureLatency::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.MeasureLatency";
}


// ===================================================================

void DatabaseRequest::InitAsDefaultInstance() {
  ::Orthanc::DatabasePluginMessages::_DatabaseRequest_default_instance_._instance.get_mutable()->get_system_information_ = const_cast< ::Orthanc::DatabasePluginMessages::GetSystemInformation_Request*>(
      ::Orthanc::DatabasePluginMessages::GetSystemInformation_Request::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_DatabaseRequest_default_instance_._instance.get_mutable()->open_ = const_cast< ::Orthanc::DatabasePluginMessages::Open_Request*>(
      ::Orthanc::DatabasePluginMessages::Open_Request::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_DatabaseRequest_default_instance_._instance.get_mutable()->close_ = const_cast< ::Orthanc::DatabasePluginMessages::Close_Request*>(
      ::Orthanc::DatabasePluginMessages::Close_Request::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_DatabaseRequest_default_instance_._instance.get_mutable()->flush_to_disk_ = const_cast< ::Orthanc::DatabasePluginMessages::FlushToDisk_Request*>(
      ::Orthanc::DatabasePluginMessages::FlushToDisk_Request::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_DatabaseRequest_default_instance_._instance.get_mutable()->start_transaction_ = const_cast< ::Orthanc::DatabasePluginMessages::StartTransaction_Request*>(
      ::Orthanc::DatabasePluginMessages::StartTransaction_Request::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_DatabaseRequest_default_instance_._instance.get_mutable()->upgrade_ = const_cast< ::Orthanc::DatabasePluginMessages::Upgrade_Request*>(
      ::Orthanc::DatabasePluginMessages::Upgrade_Request::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_DatabaseRequest_default_instance_._instance.get_mutable()->finalize_transaction_ = const_cast< ::Orthanc::DatabasePluginMessages::FinalizeTransaction_Request*>(
      ::Orthanc::DatabasePluginMessages::FinalizeTransaction_Request::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_DatabaseRequest_default_instance_._instance.get_mutable()->measure_latency_ = const_cast< ::Orthanc::DatabasePluginMessages::MeasureLatency_Request*>(
      ::Orthanc::DatabasePluginMessages::MeasureLatency_Request::internal_default_instance());
}
class DatabaseRequest::_Internal {
 public:
  static const ::Orthanc::DatabasePluginMessages::GetSystemInformation_Request& get_system_information(const DatabaseRequest* msg);
  static const ::Orthanc::DatabasePluginMessages::Open_Request& open(const DatabaseRequest* msg);
  static const ::Orthanc::DatabasePluginMessages::Close_Request& close(const DatabaseRequest* msg);
  static const ::Orthanc::DatabasePluginMessages::FlushToDisk_Request& flush_to_disk(const DatabaseRequest* msg);
  static const ::Orthanc::DatabasePluginMessages::StartTransaction_Request& start_transaction(const DatabaseRequest* msg);
  static const ::Orthanc::DatabasePluginMessages::Upgrade_Request& upgrade(const DatabaseRequest* msg);
  static const ::Orthanc::DatabasePluginMessages::FinalizeTransaction_Request& finalize_transaction(const DatabaseRequest* msg);
  static const ::Orthanc::DatabasePluginMessages::MeasureLatency_Request& measure_latency(const DatabaseRequest* msg);
};

const ::Orthanc::DatabasePluginMessages::GetSystemInformation_Request&
DatabaseRequest::_Internal::get_system_information(const DatabaseRequest* msg) {
  return *msg->get_system_information_;
}
const ::Orthanc::DatabasePluginMessages::Open_Request&
DatabaseRequest::_Internal::open(const DatabaseRequest* msg) {
  return *msg->open_;
}
const ::Orthanc::DatabasePluginMessages::Close_Request&
DatabaseRequest::_Internal::close(const DatabaseRequest* msg) {
  return *msg->close_;
}
const ::Orthanc::DatabasePluginMessages::FlushToDisk_Request&
DatabaseRequest::_Internal::flush_to_disk(const DatabaseRequest* msg) {
  return *msg->flush_to_disk_;
}
const ::Orthanc::DatabasePluginMessages::StartTransaction_Request&
DatabaseRequest::_Internal::start_transaction(const DatabaseRequest* msg) {
  return *msg->start_transaction_;
}
const ::Orthanc::DatabasePluginMessages::Upgrade_Request&
DatabaseRequest::_Internal::upgrade(const DatabaseRequest* msg) {
  return *msg->upgrade_;
}
const ::Orthanc::DatabasePluginMessages::FinalizeTransaction_Request&
DatabaseRequest::_Internal::finalize_transaction(const DatabaseRequest* msg) {
  return *msg->finalize_transaction_;
}
const ::Orthanc::DatabasePluginMessages::MeasureLatency_Request&
DatabaseRequest::_Internal::measure_latency(const DatabaseRequest* msg) {
  return *msg->measure_latency_;
}
DatabaseRequest::DatabaseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.DatabaseRequest)
}
DatabaseRequest::DatabaseRequest(const DatabaseRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_get_system_information()) {
    get_system_information_ = new ::Orthanc::DatabasePluginMessages::GetSystemInformation_Request(*from.get_system_information_);
  } else {
    get_system_information_ = nullptr;
  }
  if (from._internal_has_open()) {
    open_ = new ::Orthanc::DatabasePluginMessages::Open_Request(*from.open_);
  } else {
    open_ = nullptr;
  }
  if (from._internal_has_close()) {
    close_ = new ::Orthanc::DatabasePluginMessages::Close_Request(*from.close_);
  } else {
    close_ = nullptr;
  }
  if (from._internal_has_flush_to_disk()) {
    flush_to_disk_ = new ::Orthanc::DatabasePluginMessages::FlushToDisk_Request(*from.flush_to_disk_);
  } else {
    flush_to_disk_ = nullptr;
  }
  if (from._internal_has_start_transaction()) {
    start_transaction_ = new ::Orthanc::DatabasePluginMessages::StartTransaction_Request(*from.start_transaction_);
  } else {
    start_transaction_ = nullptr;
  }
  if (from._internal_has_upgrade()) {
    upgrade_ = new ::Orthanc::DatabasePluginMessages::Upgrade_Request(*from.upgrade_);
  } else {
    upgrade_ = nullptr;
  }
  if (from._internal_has_finalize_transaction()) {
    finalize_transaction_ = new ::Orthanc::DatabasePluginMessages::FinalizeTransaction_Request(*from.finalize_transaction_);
  } else {
    finalize_transaction_ = nullptr;
  }
  if (from._internal_has_measure_latency()) {
    measure_latency_ = new ::Orthanc::DatabasePluginMessages::MeasureLatency_Request(*from.measure_latency_);
  } else {
    measure_latency_ = nullptr;
  }
  ::memcpy(&database_, &from.database_,
    static_cast<size_t>(reinterpret_cast<char*>(&operation_) -
    reinterpret_cast<char*>(&database_)) + sizeof(operation_));
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.DatabaseRequest)
}

void DatabaseRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DatabaseRequest_OrthancDatabasePlugin_2eproto.base);
  ::memset(&get_system_information_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&operation_) -
      reinterpret_cast<char*>(&get_system_information_)) + sizeof(operation_));
}

DatabaseRequest::~DatabaseRequest() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.DatabaseRequest)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DatabaseRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete get_system_information_;
  if (this != internal_default_instance()) delete open_;
  if (this != internal_default_instance()) delete close_;
  if (this != internal_default_instance()) delete flush_to_disk_;
  if (this != internal_default_instance()) delete start_transaction_;
  if (this != internal_default_instance()) delete upgrade_;
  if (this != internal_default_instance()) delete finalize_transaction_;
  if (this != internal_default_instance()) delete measure_latency_;
}

void DatabaseRequest::ArenaDtor(void* object) {
  DatabaseRequest* _this = reinterpret_cast< DatabaseRequest* >(object);
  (void)_this;
}
void DatabaseRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DatabaseRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DatabaseRequest& DatabaseRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DatabaseRequest_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void DatabaseRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.DatabaseRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && get_system_information_ != nullptr) {
    delete get_system_information_;
  }
  get_system_information_ = nullptr;
  if (GetArena() == nullptr && open_ != nullptr) {
    delete open_;
  }
  open_ = nullptr;
  if (GetArena() == nullptr && close_ != nullptr) {
    delete close_;
  }
  close_ = nullptr;
  if (GetArena() == nullptr && flush_to_disk_ != nullptr) {
    delete flush_to_disk_;
  }
  flush_to_disk_ = nullptr;
  if (GetArena() == nullptr && start_transaction_ != nullptr) {
    delete start_transaction_;
  }
  start_transaction_ = nullptr;
  if (GetArena() == nullptr && upgrade_ != nullptr) {
    delete upgrade_;
  }
  upgrade_ = nullptr;
  if (GetArena() == nullptr && finalize_transaction_ != nullptr) {
    delete finalize_transaction_;
  }
  finalize_transaction_ = nullptr;
  if (GetArena() == nullptr && measure_latency_ != nullptr) {
    delete measure_latency_;
  }
  measure_latency_ = nullptr;
  ::memset(&database_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&operation_) -
      reinterpret_cast<char*>(&database_)) + sizeof(operation_));
  _internal_metadata_.Clear<std::string>();
}

const char* DatabaseRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // sfixed64 database = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          database_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int64);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.DatabaseOperation operation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_operation(static_cast<::Orthanc::DatabasePluginMessages::DatabaseOperation>(val));
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.GetSystemInformation.Request get_system_information = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_system_information(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.Open.Request open = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_open(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.Close.Request close = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_close(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.FlushToDisk.Request flush_to_disk = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_flush_to_disk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.StartTransaction.Request start_transaction = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.Upgrade.Request upgrade = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_upgrade(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.FinalizeTransaction.Request finalize_transaction = 106;
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_finalize_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.MeasureLatency.Request measure_latency = 107;
      case 107:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_measure_latency(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DatabaseRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.DatabaseRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sfixed64 database = 1;
  if (this->database() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed64ToArray(1, this->_internal_database(), target);
  }

  // .Orthanc.DatabasePluginMessages.DatabaseOperation operation = 2;
  if (this->operation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_operation(), target);
  }

  // .Orthanc.DatabasePluginMessages.GetSystemInformation.Request get_system_information = 100;
  if (this->has_get_system_information()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        100, _Internal::get_system_information(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.Open.Request open = 101;
  if (this->has_open()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        101, _Internal::open(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.Close.Request close = 102;
  if (this->has_close()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        102, _Internal::close(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.FlushToDisk.Request flush_to_disk = 103;
  if (this->has_flush_to_disk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        103, _Internal::flush_to_disk(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.StartTransaction.Request start_transaction = 104;
  if (this->has_start_transaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        104, _Internal::start_transaction(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.Upgrade.Request upgrade = 105;
  if (this->has_upgrade()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        105, _Internal::upgrade(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.FinalizeTransaction.Request finalize_transaction = 106;
  if (this->has_finalize_transaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        106, _Internal::finalize_transaction(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.MeasureLatency.Request measure_latency = 107;
  if (this->has_measure_latency()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        107, _Internal::measure_latency(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.DatabaseRequest)
  return target;
}

size_t DatabaseRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.DatabaseRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Orthanc.DatabasePluginMessages.GetSystemInformation.Request get_system_information = 100;
  if (this->has_get_system_information()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *get_system_information_);
  }

  // .Orthanc.DatabasePluginMessages.Open.Request open = 101;
  if (this->has_open()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *open_);
  }

  // .Orthanc.DatabasePluginMessages.Close.Request close = 102;
  if (this->has_close()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *close_);
  }

  // .Orthanc.DatabasePluginMessages.FlushToDisk.Request flush_to_disk = 103;
  if (this->has_flush_to_disk()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *flush_to_disk_);
  }

  // .Orthanc.DatabasePluginMessages.StartTransaction.Request start_transaction = 104;
  if (this->has_start_transaction()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_transaction_);
  }

  // .Orthanc.DatabasePluginMessages.Upgrade.Request upgrade = 105;
  if (this->has_upgrade()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *upgrade_);
  }

  // .Orthanc.DatabasePluginMessages.FinalizeTransaction.Request finalize_transaction = 106;
  if (this->has_finalize_transaction()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *finalize_transaction_);
  }

  // .Orthanc.DatabasePluginMessages.MeasureLatency.Request measure_latency = 107;
  if (this->has_measure_latency()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *measure_latency_);
  }

  // sfixed64 database = 1;
  if (this->database() != 0) {
    total_size += 1 + 8;
  }

  // .Orthanc.DatabasePluginMessages.DatabaseOperation operation = 2;
  if (this->operation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_operation());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DatabaseRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DatabaseRequest*>(
      &from));
}

void DatabaseRequest::MergeFrom(const DatabaseRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.DatabaseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_get_system_information()) {
    _internal_mutable_get_system_information()->::Orthanc::DatabasePluginMessages::GetSystemInformation_Request::MergeFrom(from._internal_get_system_information());
  }
  if (from.has_open()) {
    _internal_mutable_open()->::Orthanc::DatabasePluginMessages::Open_Request::MergeFrom(from._internal_open());
  }
  if (from.has_close()) {
    _internal_mutable_close()->::Orthanc::DatabasePluginMessages::Close_Request::MergeFrom(from._internal_close());
  }
  if (from.has_flush_to_disk()) {
    _internal_mutable_flush_to_disk()->::Orthanc::DatabasePluginMessages::FlushToDisk_Request::MergeFrom(from._internal_flush_to_disk());
  }
  if (from.has_start_transaction()) {
    _internal_mutable_start_transaction()->::Orthanc::DatabasePluginMessages::StartTransaction_Request::MergeFrom(from._internal_start_transaction());
  }
  if (from.has_upgrade()) {
    _internal_mutable_upgrade()->::Orthanc::DatabasePluginMessages::Upgrade_Request::MergeFrom(from._internal_upgrade());
  }
  if (from.has_finalize_transaction()) {
    _internal_mutable_finalize_transaction()->::Orthanc::DatabasePluginMessages::FinalizeTransaction_Request::MergeFrom(from._internal_finalize_transaction());
  }
  if (from.has_measure_latency()) {
    _internal_mutable_measure_latency()->::Orthanc::DatabasePluginMessages::MeasureLatency_Request::MergeFrom(from._internal_measure_latency());
  }
  if (from.database() != 0) {
    _internal_set_database(from._internal_database());
  }
  if (from.operation() != 0) {
    _internal_set_operation(from._internal_operation());
  }
}

void DatabaseRequest::CopyFrom(const DatabaseRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.DatabaseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatabaseRequest::IsInitialized() const {
  return true;
}

void DatabaseRequest::InternalSwap(DatabaseRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DatabaseRequest, operation_)
      + sizeof(DatabaseRequest::operation_)
      - PROTOBUF_FIELD_OFFSET(DatabaseRequest, get_system_information_)>(
          reinterpret_cast<char*>(&get_system_information_),
          reinterpret_cast<char*>(&other->get_system_information_));
}

std::string DatabaseRequest::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.DatabaseRequest";
}


// ===================================================================

void DatabaseResponse::InitAsDefaultInstance() {
  ::Orthanc::DatabasePluginMessages::_DatabaseResponse_default_instance_._instance.get_mutable()->get_system_information_ = const_cast< ::Orthanc::DatabasePluginMessages::GetSystemInformation_Response*>(
      ::Orthanc::DatabasePluginMessages::GetSystemInformation_Response::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_DatabaseResponse_default_instance_._instance.get_mutable()->open_ = const_cast< ::Orthanc::DatabasePluginMessages::Open_Response*>(
      ::Orthanc::DatabasePluginMessages::Open_Response::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_DatabaseResponse_default_instance_._instance.get_mutable()->close_ = const_cast< ::Orthanc::DatabasePluginMessages::Close_Response*>(
      ::Orthanc::DatabasePluginMessages::Close_Response::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_DatabaseResponse_default_instance_._instance.get_mutable()->flush_to_disk_ = const_cast< ::Orthanc::DatabasePluginMessages::FlushToDisk_Response*>(
      ::Orthanc::DatabasePluginMessages::FlushToDisk_Response::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_DatabaseResponse_default_instance_._instance.get_mutable()->start_transaction_ = const_cast< ::Orthanc::DatabasePluginMessages::StartTransaction_Response*>(
      ::Orthanc::DatabasePluginMessages::StartTransaction_Response::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_DatabaseResponse_default_instance_._instance.get_mutable()->upgrade_ = const_cast< ::Orthanc::DatabasePluginMessages::Upgrade_Response*>(
      ::Orthanc::DatabasePluginMessages::Upgrade_Response::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_DatabaseResponse_default_instance_._instance.get_mutable()->finalize_transaction_ = const_cast< ::Orthanc::DatabasePluginMessages::FinalizeTransaction_Response*>(
      ::Orthanc::DatabasePluginMessages::FinalizeTransaction_Response::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_DatabaseResponse_default_instance_._instance.get_mutable()->measure_latency_ = const_cast< ::Orthanc::DatabasePluginMessages::MeasureLatency_Response*>(
      ::Orthanc::DatabasePluginMessages::MeasureLatency_Response::internal_default_instance());
}
class DatabaseResponse::_Internal {
 public:
  static const ::Orthanc::DatabasePluginMessages::GetSystemInformation_Response& get_system_information(const DatabaseResponse* msg);
  static const ::Orthanc::DatabasePluginMessages::Open_Response& open(const DatabaseResponse* msg);
  static const ::Orthanc::DatabasePluginMessages::Close_Response& close(const DatabaseResponse* msg);
  static const ::Orthanc::DatabasePluginMessages::FlushToDisk_Response& flush_to_disk(const DatabaseResponse* msg);
  static const ::Orthanc::DatabasePluginMessages::StartTransaction_Response& start_transaction(const DatabaseResponse* msg);
  static const ::Orthanc::DatabasePluginMessages::Upgrade_Response& upgrade(const DatabaseResponse* msg);
  static const ::Orthanc::DatabasePluginMessages::FinalizeTransaction_Response& finalize_transaction(const DatabaseResponse* msg);
  static const ::Orthanc::DatabasePluginMessages::MeasureLatency_Response& measure_latency(const DatabaseResponse* msg);
};

const ::Orthanc::DatabasePluginMessages::GetSystemInformation_Response&
DatabaseResponse::_Internal::get_system_information(const DatabaseResponse* msg) {
  return *msg->get_system_information_;
}
const ::Orthanc::DatabasePluginMessages::Open_Response&
DatabaseResponse::_Internal::open(const DatabaseResponse* msg) {
  return *msg->open_;
}
const ::Orthanc::DatabasePluginMessages::Close_Response&
DatabaseResponse::_Internal::close(const DatabaseResponse* msg) {
  return *msg->close_;
}
const ::Orthanc::DatabasePluginMessages::FlushToDisk_Response&
DatabaseResponse::_Internal::flush_to_disk(const DatabaseResponse* msg) {
  return *msg->flush_to_disk_;
}
const ::Orthanc::DatabasePluginMessages::StartTransaction_Response&
DatabaseResponse::_Internal::start_transaction(const DatabaseResponse* msg) {
  return *msg->start_transaction_;
}
const ::Orthanc::DatabasePluginMessages::Upgrade_Response&
DatabaseResponse::_Internal::upgrade(const DatabaseResponse* msg) {
  return *msg->upgrade_;
}
const ::Orthanc::DatabasePluginMessages::FinalizeTransaction_Response&
DatabaseResponse::_Internal::finalize_transaction(const DatabaseResponse* msg) {
  return *msg->finalize_transaction_;
}
const ::Orthanc::DatabasePluginMessages::MeasureLatency_Response&
DatabaseResponse::_Internal::measure_latency(const DatabaseResponse* msg) {
  return *msg->measure_latency_;
}
DatabaseResponse::DatabaseResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.DatabaseResponse)
}
DatabaseResponse::DatabaseResponse(const DatabaseResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_get_system_information()) {
    get_system_information_ = new ::Orthanc::DatabasePluginMessages::GetSystemInformation_Response(*from.get_system_information_);
  } else {
    get_system_information_ = nullptr;
  }
  if (from._internal_has_open()) {
    open_ = new ::Orthanc::DatabasePluginMessages::Open_Response(*from.open_);
  } else {
    open_ = nullptr;
  }
  if (from._internal_has_close()) {
    close_ = new ::Orthanc::DatabasePluginMessages::Close_Response(*from.close_);
  } else {
    close_ = nullptr;
  }
  if (from._internal_has_flush_to_disk()) {
    flush_to_disk_ = new ::Orthanc::DatabasePluginMessages::FlushToDisk_Response(*from.flush_to_disk_);
  } else {
    flush_to_disk_ = nullptr;
  }
  if (from._internal_has_start_transaction()) {
    start_transaction_ = new ::Orthanc::DatabasePluginMessages::StartTransaction_Response(*from.start_transaction_);
  } else {
    start_transaction_ = nullptr;
  }
  if (from._internal_has_upgrade()) {
    upgrade_ = new ::Orthanc::DatabasePluginMessages::Upgrade_Response(*from.upgrade_);
  } else {
    upgrade_ = nullptr;
  }
  if (from._internal_has_finalize_transaction()) {
    finalize_transaction_ = new ::Orthanc::DatabasePluginMessages::FinalizeTransaction_Response(*from.finalize_transaction_);
  } else {
    finalize_transaction_ = nullptr;
  }
  if (from._internal_has_measure_latency()) {
    measure_latency_ = new ::Orthanc::DatabasePluginMessages::MeasureLatency_Response(*from.measure_latency_);
  } else {
    measure_latency_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.DatabaseResponse)
}

void DatabaseResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DatabaseResponse_OrthancDatabasePlugin_2eproto.base);
  ::memset(&get_system_information_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&measure_latency_) -
      reinterpret_cast<char*>(&get_system_information_)) + sizeof(measure_latency_));
}

DatabaseResponse::~DatabaseResponse() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.DatabaseResponse)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DatabaseResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete get_system_information_;
  if (this != internal_default_instance()) delete open_;
  if (this != internal_default_instance()) delete close_;
  if (this != internal_default_instance()) delete flush_to_disk_;
  if (this != internal_default_instance()) delete start_transaction_;
  if (this != internal_default_instance()) delete upgrade_;
  if (this != internal_default_instance()) delete finalize_transaction_;
  if (this != internal_default_instance()) delete measure_latency_;
}

void DatabaseResponse::ArenaDtor(void* object) {
  DatabaseResponse* _this = reinterpret_cast< DatabaseResponse* >(object);
  (void)_this;
}
void DatabaseResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DatabaseResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DatabaseResponse& DatabaseResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DatabaseResponse_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void DatabaseResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.DatabaseResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && get_system_information_ != nullptr) {
    delete get_system_information_;
  }
  get_system_information_ = nullptr;
  if (GetArena() == nullptr && open_ != nullptr) {
    delete open_;
  }
  open_ = nullptr;
  if (GetArena() == nullptr && close_ != nullptr) {
    delete close_;
  }
  close_ = nullptr;
  if (GetArena() == nullptr && flush_to_disk_ != nullptr) {
    delete flush_to_disk_;
  }
  flush_to_disk_ = nullptr;
  if (GetArena() == nullptr && start_transaction_ != nullptr) {
    delete start_transaction_;
  }
  start_transaction_ = nullptr;
  if (GetArena() == nullptr && upgrade_ != nullptr) {
    delete upgrade_;
  }
  upgrade_ = nullptr;
  if (GetArena() == nullptr && finalize_transaction_ != nullptr) {
    delete finalize_transaction_;
  }
  finalize_transaction_ = nullptr;
  if (GetArena() == nullptr && measure_latency_ != nullptr) {
    delete measure_latency_;
  }
  measure_latency_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* DatabaseResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Orthanc.DatabasePluginMessages.GetSystemInformation.Response get_system_information = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_system_information(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.Open.Response open = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_open(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.Close.Response close = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_close(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.FlushToDisk.Response flush_to_disk = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_flush_to_disk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.StartTransaction.Response start_transaction = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.Upgrade.Response upgrade = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_upgrade(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.FinalizeTransaction.Response finalize_transaction = 106;
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_finalize_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.MeasureLatency.Response measure_latency = 107;
      case 107:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_measure_latency(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DatabaseResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.DatabaseResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Orthanc.DatabasePluginMessages.GetSystemInformation.Response get_system_information = 100;
  if (this->has_get_system_information()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        100, _Internal::get_system_information(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.Open.Response open = 101;
  if (this->has_open()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        101, _Internal::open(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.Close.Response close = 102;
  if (this->has_close()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        102, _Internal::close(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.FlushToDisk.Response flush_to_disk = 103;
  if (this->has_flush_to_disk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        103, _Internal::flush_to_disk(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.StartTransaction.Response start_transaction = 104;
  if (this->has_start_transaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        104, _Internal::start_transaction(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.Upgrade.Response upgrade = 105;
  if (this->has_upgrade()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        105, _Internal::upgrade(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.FinalizeTransaction.Response finalize_transaction = 106;
  if (this->has_finalize_transaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        106, _Internal::finalize_transaction(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.MeasureLatency.Response measure_latency = 107;
  if (this->has_measure_latency()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        107, _Internal::measure_latency(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.DatabaseResponse)
  return target;
}

size_t DatabaseResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.DatabaseResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Orthanc.DatabasePluginMessages.GetSystemInformation.Response get_system_information = 100;
  if (this->has_get_system_information()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *get_system_information_);
  }

  // .Orthanc.DatabasePluginMessages.Open.Response open = 101;
  if (this->has_open()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *open_);
  }

  // .Orthanc.DatabasePluginMessages.Close.Response close = 102;
  if (this->has_close()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *close_);
  }

  // .Orthanc.DatabasePluginMessages.FlushToDisk.Response flush_to_disk = 103;
  if (this->has_flush_to_disk()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *flush_to_disk_);
  }

  // .Orthanc.DatabasePluginMessages.StartTransaction.Response start_transaction = 104;
  if (this->has_start_transaction()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_transaction_);
  }

  // .Orthanc.DatabasePluginMessages.Upgrade.Response upgrade = 105;
  if (this->has_upgrade()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *upgrade_);
  }

  // .Orthanc.DatabasePluginMessages.FinalizeTransaction.Response finalize_transaction = 106;
  if (this->has_finalize_transaction()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *finalize_transaction_);
  }

  // .Orthanc.DatabasePluginMessages.MeasureLatency.Response measure_latency = 107;
  if (this->has_measure_latency()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *measure_latency_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DatabaseResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DatabaseResponse*>(
      &from));
}

void DatabaseResponse::MergeFrom(const DatabaseResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.DatabaseResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_get_system_information()) {
    _internal_mutable_get_system_information()->::Orthanc::DatabasePluginMessages::GetSystemInformation_Response::MergeFrom(from._internal_get_system_information());
  }
  if (from.has_open()) {
    _internal_mutable_open()->::Orthanc::DatabasePluginMessages::Open_Response::MergeFrom(from._internal_open());
  }
  if (from.has_close()) {
    _internal_mutable_close()->::Orthanc::DatabasePluginMessages::Close_Response::MergeFrom(from._internal_close());
  }
  if (from.has_flush_to_disk()) {
    _internal_mutable_flush_to_disk()->::Orthanc::DatabasePluginMessages::FlushToDisk_Response::MergeFrom(from._internal_flush_to_disk());
  }
  if (from.has_start_transaction()) {
    _internal_mutable_start_transaction()->::Orthanc::DatabasePluginMessages::StartTransaction_Response::MergeFrom(from._internal_start_transaction());
  }
  if (from.has_upgrade()) {
    _internal_mutable_upgrade()->::Orthanc::DatabasePluginMessages::Upgrade_Response::MergeFrom(from._internal_upgrade());
  }
  if (from.has_finalize_transaction()) {
    _internal_mutable_finalize_transaction()->::Orthanc::DatabasePluginMessages::FinalizeTransaction_Response::MergeFrom(from._internal_finalize_transaction());
  }
  if (from.has_measure_latency()) {
    _internal_mutable_measure_latency()->::Orthanc::DatabasePluginMessages::MeasureLatency_Response::MergeFrom(from._internal_measure_latency());
  }
}

void DatabaseResponse::CopyFrom(const DatabaseResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.DatabaseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatabaseResponse::IsInitialized() const {
  return true;
}

void DatabaseResponse::InternalSwap(DatabaseResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DatabaseResponse, measure_latency_)
      + sizeof(DatabaseResponse::measure_latency_)
      - PROTOBUF_FIELD_OFFSET(DatabaseResponse, get_system_information_)>(
          reinterpret_cast<char*>(&get_system_information_),
          reinterpret_cast<char*>(&other->get_system_information_));
}

std::string DatabaseResponse::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.DatabaseResponse";
}


// ===================================================================

void Rollback_Request::InitAsDefaultInstance() {
}
class Rollback_Request::_Internal {
 public:
};

Rollback_Request::Rollback_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.Rollback.Request)
}
Rollback_Request::Rollback_Request(const Rollback_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.Rollback.Request)
}

void Rollback_Request::SharedCtor() {
}

Rollback_Request::~Rollback_Request() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.Rollback.Request)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Rollback_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Rollback_Request::ArenaDtor(void* object) {
  Rollback_Request* _this = reinterpret_cast< Rollback_Request* >(object);
  (void)_this;
}
void Rollback_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Rollback_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rollback_Request& Rollback_Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Rollback_Request_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void Rollback_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.Rollback.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* Rollback_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Rollback_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.Rollback.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.Rollback.Request)
  return target;
}

size_t Rollback_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.Rollback.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rollback_Request::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Rollback_Request*>(
      &from));
}

void Rollback_Request::MergeFrom(const Rollback_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.Rollback.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Rollback_Request::CopyFrom(const Rollback_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.Rollback.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rollback_Request::IsInitialized() const {
  return true;
}

void Rollback_Request::InternalSwap(Rollback_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string Rollback_Request::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.Rollback.Request";
}


// ===================================================================

void Rollback_Response::InitAsDefaultInstance() {
}
class Rollback_Response::_Internal {
 public:
};

Rollback_Response::Rollback_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.Rollback.Response)
}
Rollback_Response::Rollback_Response(const Rollback_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.Rollback.Response)
}

void Rollback_Response::SharedCtor() {
}

Rollback_Response::~Rollback_Response() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.Rollback.Response)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Rollback_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Rollback_Response::ArenaDtor(void* object) {
  Rollback_Response* _this = reinterpret_cast< Rollback_Response* >(object);
  (void)_this;
}
void Rollback_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Rollback_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rollback_Response& Rollback_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Rollback_Response_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void Rollback_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.Rollback.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* Rollback_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Rollback_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.Rollback.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.Rollback.Response)
  return target;
}

size_t Rollback_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.Rollback.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rollback_Response::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Rollback_Response*>(
      &from));
}

void Rollback_Response::MergeFrom(const Rollback_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.Rollback.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Rollback_Response::CopyFrom(const Rollback_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.Rollback.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rollback_Response::IsInitialized() const {
  return true;
}

void Rollback_Response::InternalSwap(Rollback_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string Rollback_Response::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.Rollback.Response";
}


// ===================================================================

void Rollback::InitAsDefaultInstance() {
}
class Rollback::_Internal {
 public:
};

Rollback::Rollback(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.Rollback)
}
Rollback::Rollback(const Rollback& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.Rollback)
}

void Rollback::SharedCtor() {
}

Rollback::~Rollback() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.Rollback)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Rollback::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Rollback::ArenaDtor(void* object) {
  Rollback* _this = reinterpret_cast< Rollback* >(object);
  (void)_this;
}
void Rollback::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Rollback::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rollback& Rollback::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Rollback_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void Rollback::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.Rollback)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* Rollback::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Rollback::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.Rollback)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.Rollback)
  return target;
}

size_t Rollback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.Rollback)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rollback::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Rollback*>(
      &from));
}

void Rollback::MergeFrom(const Rollback& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.Rollback)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Rollback::CopyFrom(const Rollback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.Rollback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rollback::IsInitialized() const {
  return true;
}

void Rollback::InternalSwap(Rollback* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string Rollback::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.Rollback";
}


// ===================================================================

void Commit_Request::InitAsDefaultInstance() {
}
class Commit_Request::_Internal {
 public:
};

Commit_Request::Commit_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.Commit.Request)
}
Commit_Request::Commit_Request(const Commit_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  file_size_delta_ = from.file_size_delta_;
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.Commit.Request)
}

void Commit_Request::SharedCtor() {
  file_size_delta_ = PROTOBUF_LONGLONG(0);
}

Commit_Request::~Commit_Request() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.Commit.Request)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Commit_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Commit_Request::ArenaDtor(void* object) {
  Commit_Request* _this = reinterpret_cast< Commit_Request* >(object);
  (void)_this;
}
void Commit_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Commit_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Commit_Request& Commit_Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Commit_Request_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void Commit_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.Commit.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_size_delta_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<std::string>();
}

const char* Commit_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 file_size_delta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          file_size_delta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Commit_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.Commit.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 file_size_delta = 1;
  if (this->file_size_delta() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_file_size_delta(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.Commit.Request)
  return target;
}

size_t Commit_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.Commit.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 file_size_delta = 1;
  if (this->file_size_delta() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_file_size_delta());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Commit_Request::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Commit_Request*>(
      &from));
}

void Commit_Request::MergeFrom(const Commit_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.Commit.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.file_size_delta() != 0) {
    _internal_set_file_size_delta(from._internal_file_size_delta());
  }
}

void Commit_Request::CopyFrom(const Commit_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.Commit.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Commit_Request::IsInitialized() const {
  return true;
}

void Commit_Request::InternalSwap(Commit_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(file_size_delta_, other->file_size_delta_);
}

std::string Commit_Request::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.Commit.Request";
}


// ===================================================================

void Commit_Response::InitAsDefaultInstance() {
}
class Commit_Response::_Internal {
 public:
};

Commit_Response::Commit_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.Commit.Response)
}
Commit_Response::Commit_Response(const Commit_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.Commit.Response)
}

void Commit_Response::SharedCtor() {
}

Commit_Response::~Commit_Response() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.Commit.Response)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Commit_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Commit_Response::ArenaDtor(void* object) {
  Commit_Response* _this = reinterpret_cast< Commit_Response* >(object);
  (void)_this;
}
void Commit_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Commit_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Commit_Response& Commit_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Commit_Response_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void Commit_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.Commit.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* Commit_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Commit_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.Commit.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.Commit.Response)
  return target;
}

size_t Commit_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.Commit.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Commit_Response::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Commit_Response*>(
      &from));
}

void Commit_Response::MergeFrom(const Commit_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.Commit.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Commit_Response::CopyFrom(const Commit_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.Commit.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Commit_Response::IsInitialized() const {
  return true;
}

void Commit_Response::InternalSwap(Commit_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string Commit_Response::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.Commit.Response";
}


// ===================================================================

void Commit::InitAsDefaultInstance() {
}
class Commit::_Internal {
 public:
};

Commit::Commit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.Commit)
}
Commit::Commit(const Commit& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.Commit)
}

void Commit::SharedCtor() {
}

Commit::~Commit() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.Commit)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Commit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Commit::ArenaDtor(void* object) {
  Commit* _this = reinterpret_cast< Commit* >(object);
  (void)_this;
}
void Commit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Commit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Commit& Commit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Commit_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void Commit::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.Commit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* Commit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Commit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.Commit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.Commit)
  return target;
}

size_t Commit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.Commit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Commit::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Commit*>(
      &from));
}

void Commit::MergeFrom(const Commit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.Commit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Commit::CopyFrom(const Commit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.Commit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Commit::IsInitialized() const {
  return true;
}

void Commit::InternalSwap(Commit* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string Commit::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.Commit";
}


// ===================================================================

void AddAttachment_Request::InitAsDefaultInstance() {
  ::Orthanc::DatabasePluginMessages::_AddAttachment_Request_default_instance_._instance.get_mutable()->attachment_ = const_cast< ::Orthanc::DatabasePluginMessages::FileInfo*>(
      ::Orthanc::DatabasePluginMessages::FileInfo::internal_default_instance());
}
class AddAttachment_Request::_Internal {
 public:
  static const ::Orthanc::DatabasePluginMessages::FileInfo& attachment(const AddAttachment_Request* msg);
};

const ::Orthanc::DatabasePluginMessages::FileInfo&
AddAttachment_Request::_Internal::attachment(const AddAttachment_Request* msg) {
  return *msg->attachment_;
}
AddAttachment_Request::AddAttachment_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.AddAttachment.Request)
}
AddAttachment_Request::AddAttachment_Request(const AddAttachment_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_attachment()) {
    attachment_ = new ::Orthanc::DatabasePluginMessages::FileInfo(*from.attachment_);
  } else {
    attachment_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&revision_) -
    reinterpret_cast<char*>(&id_)) + sizeof(revision_));
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.AddAttachment.Request)
}

void AddAttachment_Request::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddAttachment_Request_OrthancDatabasePlugin_2eproto.base);
  ::memset(&attachment_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&revision_) -
      reinterpret_cast<char*>(&attachment_)) + sizeof(revision_));
}

AddAttachment_Request::~AddAttachment_Request() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.AddAttachment.Request)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void AddAttachment_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete attachment_;
}

void AddAttachment_Request::ArenaDtor(void* object) {
  AddAttachment_Request* _this = reinterpret_cast< AddAttachment_Request* >(object);
  (void)_this;
}
void AddAttachment_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddAttachment_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddAttachment_Request& AddAttachment_Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddAttachment_Request_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void AddAttachment_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.AddAttachment.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && attachment_ != nullptr) {
    delete attachment_;
  }
  attachment_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&revision_) -
      reinterpret_cast<char*>(&id_)) + sizeof(revision_));
  _internal_metadata_.Clear<std::string>();
}

const char* AddAttachment_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.FileInfo attachment = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_attachment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 revision = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          revision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddAttachment_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.AddAttachment.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // .Orthanc.DatabasePluginMessages.FileInfo attachment = 2;
  if (this->has_attachment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::attachment(this), target, stream);
  }

  // int64 revision = 3;
  if (this->revision() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_revision(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.AddAttachment.Request)
  return target;
}

size_t AddAttachment_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.AddAttachment.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Orthanc.DatabasePluginMessages.FileInfo attachment = 2;
  if (this->has_attachment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attachment_);
  }

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // int64 revision = 3;
  if (this->revision() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_revision());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddAttachment_Request::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AddAttachment_Request*>(
      &from));
}

void AddAttachment_Request::MergeFrom(const AddAttachment_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.AddAttachment.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_attachment()) {
    _internal_mutable_attachment()->::Orthanc::DatabasePluginMessages::FileInfo::MergeFrom(from._internal_attachment());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.revision() != 0) {
    _internal_set_revision(from._internal_revision());
  }
}

void AddAttachment_Request::CopyFrom(const AddAttachment_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.AddAttachment.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddAttachment_Request::IsInitialized() const {
  return true;
}

void AddAttachment_Request::InternalSwap(AddAttachment_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddAttachment_Request, revision_)
      + sizeof(AddAttachment_Request::revision_)
      - PROTOBUF_FIELD_OFFSET(AddAttachment_Request, attachment_)>(
          reinterpret_cast<char*>(&attachment_),
          reinterpret_cast<char*>(&other->attachment_));
}

std::string AddAttachment_Request::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.AddAttachment.Request";
}


// ===================================================================

void AddAttachment_Response::InitAsDefaultInstance() {
}
class AddAttachment_Response::_Internal {
 public:
};

AddAttachment_Response::AddAttachment_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.AddAttachment.Response)
}
AddAttachment_Response::AddAttachment_Response(const AddAttachment_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.AddAttachment.Response)
}

void AddAttachment_Response::SharedCtor() {
}

AddAttachment_Response::~AddAttachment_Response() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.AddAttachment.Response)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void AddAttachment_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AddAttachment_Response::ArenaDtor(void* object) {
  AddAttachment_Response* _this = reinterpret_cast< AddAttachment_Response* >(object);
  (void)_this;
}
void AddAttachment_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddAttachment_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddAttachment_Response& AddAttachment_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddAttachment_Response_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void AddAttachment_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.AddAttachment.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* AddAttachment_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddAttachment_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.AddAttachment.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.AddAttachment.Response)
  return target;
}

size_t AddAttachment_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.AddAttachment.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddAttachment_Response::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AddAttachment_Response*>(
      &from));
}

void AddAttachment_Response::MergeFrom(const AddAttachment_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.AddAttachment.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AddAttachment_Response::CopyFrom(const AddAttachment_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.AddAttachment.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddAttachment_Response::IsInitialized() const {
  return true;
}

void AddAttachment_Response::InternalSwap(AddAttachment_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string AddAttachment_Response::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.AddAttachment.Response";
}


// ===================================================================

void AddAttachment::InitAsDefaultInstance() {
}
class AddAttachment::_Internal {
 public:
};

AddAttachment::AddAttachment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.AddAttachment)
}
AddAttachment::AddAttachment(const AddAttachment& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.AddAttachment)
}

void AddAttachment::SharedCtor() {
}

AddAttachment::~AddAttachment() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.AddAttachment)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void AddAttachment::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AddAttachment::ArenaDtor(void* object) {
  AddAttachment* _this = reinterpret_cast< AddAttachment* >(object);
  (void)_this;
}
void AddAttachment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddAttachment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddAttachment& AddAttachment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddAttachment_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void AddAttachment::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.AddAttachment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* AddAttachment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddAttachment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.AddAttachment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.AddAttachment)
  return target;
}

size_t AddAttachment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.AddAttachment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddAttachment::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AddAttachment*>(
      &from));
}

void AddAttachment::MergeFrom(const AddAttachment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.AddAttachment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AddAttachment::CopyFrom(const AddAttachment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.AddAttachment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddAttachment::IsInitialized() const {
  return true;
}

void AddAttachment::InternalSwap(AddAttachment* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string AddAttachment::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.AddAttachment";
}


// ===================================================================

void ClearChanges_Request::InitAsDefaultInstance() {
}
class ClearChanges_Request::_Internal {
 public:
};

ClearChanges_Request::ClearChanges_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.ClearChanges.Request)
}
ClearChanges_Request::ClearChanges_Request(const ClearChanges_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.ClearChanges.Request)
}

void ClearChanges_Request::SharedCtor() {
}

ClearChanges_Request::~ClearChanges_Request() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.ClearChanges.Request)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ClearChanges_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ClearChanges_Request::ArenaDtor(void* object) {
  ClearChanges_Request* _this = reinterpret_cast< ClearChanges_Request* >(object);
  (void)_this;
}
void ClearChanges_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClearChanges_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClearChanges_Request& ClearChanges_Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClearChanges_Request_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void ClearChanges_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.ClearChanges.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* ClearChanges_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClearChanges_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.ClearChanges.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.ClearChanges.Request)
  return target;
}

size_t ClearChanges_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.ClearChanges.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClearChanges_Request::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ClearChanges_Request*>(
      &from));
}

void ClearChanges_Request::MergeFrom(const ClearChanges_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.ClearChanges.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ClearChanges_Request::CopyFrom(const ClearChanges_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.ClearChanges.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearChanges_Request::IsInitialized() const {
  return true;
}

void ClearChanges_Request::InternalSwap(ClearChanges_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string ClearChanges_Request::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.ClearChanges.Request";
}


// ===================================================================

void ClearChanges_Response::InitAsDefaultInstance() {
}
class ClearChanges_Response::_Internal {
 public:
};

ClearChanges_Response::ClearChanges_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.ClearChanges.Response)
}
ClearChanges_Response::ClearChanges_Response(const ClearChanges_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.ClearChanges.Response)
}

void ClearChanges_Response::SharedCtor() {
}

ClearChanges_Response::~ClearChanges_Response() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.ClearChanges.Response)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ClearChanges_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ClearChanges_Response::ArenaDtor(void* object) {
  ClearChanges_Response* _this = reinterpret_cast< ClearChanges_Response* >(object);
  (void)_this;
}
void ClearChanges_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClearChanges_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClearChanges_Response& ClearChanges_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClearChanges_Response_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void ClearChanges_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.ClearChanges.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* ClearChanges_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClearChanges_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.ClearChanges.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.ClearChanges.Response)
  return target;
}

size_t ClearChanges_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.ClearChanges.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClearChanges_Response::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ClearChanges_Response*>(
      &from));
}

void ClearChanges_Response::MergeFrom(const ClearChanges_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.ClearChanges.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ClearChanges_Response::CopyFrom(const ClearChanges_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.ClearChanges.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearChanges_Response::IsInitialized() const {
  return true;
}

void ClearChanges_Response::InternalSwap(ClearChanges_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string ClearChanges_Response::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.ClearChanges.Response";
}


// ===================================================================

void ClearChanges::InitAsDefaultInstance() {
}
class ClearChanges::_Internal {
 public:
};

ClearChanges::ClearChanges(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.ClearChanges)
}
ClearChanges::ClearChanges(const ClearChanges& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.ClearChanges)
}

void ClearChanges::SharedCtor() {
}

ClearChanges::~ClearChanges() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.ClearChanges)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ClearChanges::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ClearChanges::ArenaDtor(void* object) {
  ClearChanges* _this = reinterpret_cast< ClearChanges* >(object);
  (void)_this;
}
void ClearChanges::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClearChanges::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClearChanges& ClearChanges::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClearChanges_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void ClearChanges::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.ClearChanges)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* ClearChanges::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClearChanges::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.ClearChanges)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.ClearChanges)
  return target;
}

size_t ClearChanges::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.ClearChanges)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClearChanges::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ClearChanges*>(
      &from));
}

void ClearChanges::MergeFrom(const ClearChanges& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.ClearChanges)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ClearChanges::CopyFrom(const ClearChanges& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.ClearChanges)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearChanges::IsInitialized() const {
  return true;
}

void ClearChanges::InternalSwap(ClearChanges* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string ClearChanges::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.ClearChanges";
}


// ===================================================================

void ClearExportedResources_Request::InitAsDefaultInstance() {
}
class ClearExportedResources_Request::_Internal {
 public:
};

ClearExportedResources_Request::ClearExportedResources_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.ClearExportedResources.Request)
}
ClearExportedResources_Request::ClearExportedResources_Request(const ClearExportedResources_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.ClearExportedResources.Request)
}

void ClearExportedResources_Request::SharedCtor() {
}

ClearExportedResources_Request::~ClearExportedResources_Request() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.ClearExportedResources.Request)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ClearExportedResources_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ClearExportedResources_Request::ArenaDtor(void* object) {
  ClearExportedResources_Request* _this = reinterpret_cast< ClearExportedResources_Request* >(object);
  (void)_this;
}
void ClearExportedResources_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClearExportedResources_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClearExportedResources_Request& ClearExportedResources_Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClearExportedResources_Request_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void ClearExportedResources_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.ClearExportedResources.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* ClearExportedResources_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClearExportedResources_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.ClearExportedResources.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.ClearExportedResources.Request)
  return target;
}

size_t ClearExportedResources_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.ClearExportedResources.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClearExportedResources_Request::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ClearExportedResources_Request*>(
      &from));
}

void ClearExportedResources_Request::MergeFrom(const ClearExportedResources_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.ClearExportedResources.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ClearExportedResources_Request::CopyFrom(const ClearExportedResources_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.ClearExportedResources.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearExportedResources_Request::IsInitialized() const {
  return true;
}

void ClearExportedResources_Request::InternalSwap(ClearExportedResources_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string ClearExportedResources_Request::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.ClearExportedResources.Request";
}


// ===================================================================

void ClearExportedResources_Response::InitAsDefaultInstance() {
}
class ClearExportedResources_Response::_Internal {
 public:
};

ClearExportedResources_Response::ClearExportedResources_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.ClearExportedResources.Response)
}
ClearExportedResources_Response::ClearExportedResources_Response(const ClearExportedResources_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.ClearExportedResources.Response)
}

void ClearExportedResources_Response::SharedCtor() {
}

ClearExportedResources_Response::~ClearExportedResources_Response() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.ClearExportedResources.Response)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ClearExportedResources_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ClearExportedResources_Response::ArenaDtor(void* object) {
  ClearExportedResources_Response* _this = reinterpret_cast< ClearExportedResources_Response* >(object);
  (void)_this;
}
void ClearExportedResources_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClearExportedResources_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClearExportedResources_Response& ClearExportedResources_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClearExportedResources_Response_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void ClearExportedResources_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.ClearExportedResources.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* ClearExportedResources_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClearExportedResources_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.ClearExportedResources.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.ClearExportedResources.Response)
  return target;
}

size_t ClearExportedResources_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.ClearExportedResources.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClearExportedResources_Response::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ClearExportedResources_Response*>(
      &from));
}

void ClearExportedResources_Response::MergeFrom(const ClearExportedResources_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.ClearExportedResources.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ClearExportedResources_Response::CopyFrom(const ClearExportedResources_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.ClearExportedResources.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearExportedResources_Response::IsInitialized() const {
  return true;
}

void ClearExportedResources_Response::InternalSwap(ClearExportedResources_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string ClearExportedResources_Response::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.ClearExportedResources.Response";
}


// ===================================================================

void ClearExportedResources::InitAsDefaultInstance() {
}
class ClearExportedResources::_Internal {
 public:
};

ClearExportedResources::ClearExportedResources(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.ClearExportedResources)
}
ClearExportedResources::ClearExportedResources(const ClearExportedResources& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.ClearExportedResources)
}

void ClearExportedResources::SharedCtor() {
}

ClearExportedResources::~ClearExportedResources() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.ClearExportedResources)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ClearExportedResources::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ClearExportedResources::ArenaDtor(void* object) {
  ClearExportedResources* _this = reinterpret_cast< ClearExportedResources* >(object);
  (void)_this;
}
void ClearExportedResources::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClearExportedResources::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClearExportedResources& ClearExportedResources::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClearExportedResources_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void ClearExportedResources::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.ClearExportedResources)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* ClearExportedResources::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClearExportedResources::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.ClearExportedResources)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.ClearExportedResources)
  return target;
}

size_t ClearExportedResources::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.ClearExportedResources)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClearExportedResources::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ClearExportedResources*>(
      &from));
}

void ClearExportedResources::MergeFrom(const ClearExportedResources& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.ClearExportedResources)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ClearExportedResources::CopyFrom(const ClearExportedResources& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.ClearExportedResources)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearExportedResources::IsInitialized() const {
  return true;
}

void ClearExportedResources::InternalSwap(ClearExportedResources* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string ClearExportedResources::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.ClearExportedResources";
}


// ===================================================================

void DeleteAttachment_Request::InitAsDefaultInstance() {
}
class DeleteAttachment_Request::_Internal {
 public:
};

DeleteAttachment_Request::DeleteAttachment_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.DeleteAttachment.Request)
}
DeleteAttachment_Request::DeleteAttachment_Request(const DeleteAttachment_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.DeleteAttachment.Request)
}

void DeleteAttachment_Request::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
}

DeleteAttachment_Request::~DeleteAttachment_Request() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.DeleteAttachment.Request)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DeleteAttachment_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeleteAttachment_Request::ArenaDtor(void* object) {
  DeleteAttachment_Request* _this = reinterpret_cast< DeleteAttachment_Request* >(object);
  (void)_this;
}
void DeleteAttachment_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteAttachment_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteAttachment_Request& DeleteAttachment_Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteAttachment_Request_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void DeleteAttachment_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.DeleteAttachment.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
  _internal_metadata_.Clear<std::string>();
}

const char* DeleteAttachment_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteAttachment_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.DeleteAttachment.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.DeleteAttachment.Request)
  return target;
}

size_t DeleteAttachment_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.DeleteAttachment.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteAttachment_Request::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeleteAttachment_Request*>(
      &from));
}

void DeleteAttachment_Request::MergeFrom(const DeleteAttachment_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.DeleteAttachment.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void DeleteAttachment_Request::CopyFrom(const DeleteAttachment_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.DeleteAttachment.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteAttachment_Request::IsInitialized() const {
  return true;
}

void DeleteAttachment_Request::InternalSwap(DeleteAttachment_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeleteAttachment_Request, type_)
      + sizeof(DeleteAttachment_Request::type_)
      - PROTOBUF_FIELD_OFFSET(DeleteAttachment_Request, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

std::string DeleteAttachment_Request::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.DeleteAttachment.Request";
}


// ===================================================================

void DeleteAttachment_Response::InitAsDefaultInstance() {
  ::Orthanc::DatabasePluginMessages::_DeleteAttachment_Response_default_instance_._instance.get_mutable()->deleted_attachment_ = const_cast< ::Orthanc::DatabasePluginMessages::FileInfo*>(
      ::Orthanc::DatabasePluginMessages::FileInfo::internal_default_instance());
}
class DeleteAttachment_Response::_Internal {
 public:
  static const ::Orthanc::DatabasePluginMessages::FileInfo& deleted_attachment(const DeleteAttachment_Response* msg);
};

const ::Orthanc::DatabasePluginMessages::FileInfo&
DeleteAttachment_Response::_Internal::deleted_attachment(const DeleteAttachment_Response* msg) {
  return *msg->deleted_attachment_;
}
DeleteAttachment_Response::DeleteAttachment_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.DeleteAttachment.Response)
}
DeleteAttachment_Response::DeleteAttachment_Response(const DeleteAttachment_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_deleted_attachment()) {
    deleted_attachment_ = new ::Orthanc::DatabasePluginMessages::FileInfo(*from.deleted_attachment_);
  } else {
    deleted_attachment_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.DeleteAttachment.Response)
}

void DeleteAttachment_Response::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteAttachment_Response_OrthancDatabasePlugin_2eproto.base);
  deleted_attachment_ = nullptr;
}

DeleteAttachment_Response::~DeleteAttachment_Response() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.DeleteAttachment.Response)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DeleteAttachment_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete deleted_attachment_;
}

void DeleteAttachment_Response::ArenaDtor(void* object) {
  DeleteAttachment_Response* _this = reinterpret_cast< DeleteAttachment_Response* >(object);
  (void)_this;
}
void DeleteAttachment_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteAttachment_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteAttachment_Response& DeleteAttachment_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteAttachment_Response_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void DeleteAttachment_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.DeleteAttachment.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && deleted_attachment_ != nullptr) {
    delete deleted_attachment_;
  }
  deleted_attachment_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* DeleteAttachment_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Orthanc.DatabasePluginMessages.FileInfo deleted_attachment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_deleted_attachment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteAttachment_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.DeleteAttachment.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Orthanc.DatabasePluginMessages.FileInfo deleted_attachment = 1;
  if (this->has_deleted_attachment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::deleted_attachment(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.DeleteAttachment.Response)
  return target;
}

size_t DeleteAttachment_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.DeleteAttachment.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Orthanc.DatabasePluginMessages.FileInfo deleted_attachment = 1;
  if (this->has_deleted_attachment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *deleted_attachment_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteAttachment_Response::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeleteAttachment_Response*>(
      &from));
}

void DeleteAttachment_Response::MergeFrom(const DeleteAttachment_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.DeleteAttachment.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_deleted_attachment()) {
    _internal_mutable_deleted_attachment()->::Orthanc::DatabasePluginMessages::FileInfo::MergeFrom(from._internal_deleted_attachment());
  }
}

void DeleteAttachment_Response::CopyFrom(const DeleteAttachment_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.DeleteAttachment.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteAttachment_Response::IsInitialized() const {
  return true;
}

void DeleteAttachment_Response::InternalSwap(DeleteAttachment_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(deleted_attachment_, other->deleted_attachment_);
}

std::string DeleteAttachment_Response::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.DeleteAttachment.Response";
}


// ===================================================================

void DeleteAttachment::InitAsDefaultInstance() {
}
class DeleteAttachment::_Internal {
 public:
};

DeleteAttachment::DeleteAttachment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.DeleteAttachment)
}
DeleteAttachment::DeleteAttachment(const DeleteAttachment& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.DeleteAttachment)
}

void DeleteAttachment::SharedCtor() {
}

DeleteAttachment::~DeleteAttachment() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.DeleteAttachment)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DeleteAttachment::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeleteAttachment::ArenaDtor(void* object) {
  DeleteAttachment* _this = reinterpret_cast< DeleteAttachment* >(object);
  (void)_this;
}
void DeleteAttachment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteAttachment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteAttachment& DeleteAttachment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteAttachment_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void DeleteAttachment::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.DeleteAttachment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* DeleteAttachment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteAttachment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.DeleteAttachment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.DeleteAttachment)
  return target;
}

size_t DeleteAttachment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.DeleteAttachment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteAttachment::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeleteAttachment*>(
      &from));
}

void DeleteAttachment::MergeFrom(const DeleteAttachment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.DeleteAttachment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeleteAttachment::CopyFrom(const DeleteAttachment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.DeleteAttachment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteAttachment::IsInitialized() const {
  return true;
}

void DeleteAttachment::InternalSwap(DeleteAttachment* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string DeleteAttachment::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.DeleteAttachment";
}


// ===================================================================

void DeleteMetadata_Request::InitAsDefaultInstance() {
}
class DeleteMetadata_Request::_Internal {
 public:
};

DeleteMetadata_Request::DeleteMetadata_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.DeleteMetadata.Request)
}
DeleteMetadata_Request::DeleteMetadata_Request(const DeleteMetadata_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.DeleteMetadata.Request)
}

void DeleteMetadata_Request::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
}

DeleteMetadata_Request::~DeleteMetadata_Request() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.DeleteMetadata.Request)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DeleteMetadata_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeleteMetadata_Request::ArenaDtor(void* object) {
  DeleteMetadata_Request* _this = reinterpret_cast< DeleteMetadata_Request* >(object);
  (void)_this;
}
void DeleteMetadata_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteMetadata_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteMetadata_Request& DeleteMetadata_Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteMetadata_Request_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void DeleteMetadata_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.DeleteMetadata.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
  _internal_metadata_.Clear<std::string>();
}

const char* DeleteMetadata_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteMetadata_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.DeleteMetadata.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.DeleteMetadata.Request)
  return target;
}

size_t DeleteMetadata_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.DeleteMetadata.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteMetadata_Request::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeleteMetadata_Request*>(
      &from));
}

void DeleteMetadata_Request::MergeFrom(const DeleteMetadata_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.DeleteMetadata.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void DeleteMetadata_Request::CopyFrom(const DeleteMetadata_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.DeleteMetadata.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteMetadata_Request::IsInitialized() const {
  return true;
}

void DeleteMetadata_Request::InternalSwap(DeleteMetadata_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeleteMetadata_Request, type_)
      + sizeof(DeleteMetadata_Request::type_)
      - PROTOBUF_FIELD_OFFSET(DeleteMetadata_Request, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

std::string DeleteMetadata_Request::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.DeleteMetadata.Request";
}


// ===================================================================

void DeleteMetadata_Response::InitAsDefaultInstance() {
}
class DeleteMetadata_Response::_Internal {
 public:
};

DeleteMetadata_Response::DeleteMetadata_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.DeleteMetadata.Response)
}
DeleteMetadata_Response::DeleteMetadata_Response(const DeleteMetadata_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.DeleteMetadata.Response)
}

void DeleteMetadata_Response::SharedCtor() {
}

DeleteMetadata_Response::~DeleteMetadata_Response() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.DeleteMetadata.Response)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DeleteMetadata_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeleteMetadata_Response::ArenaDtor(void* object) {
  DeleteMetadata_Response* _this = reinterpret_cast< DeleteMetadata_Response* >(object);
  (void)_this;
}
void DeleteMetadata_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteMetadata_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteMetadata_Response& DeleteMetadata_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteMetadata_Response_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void DeleteMetadata_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.DeleteMetadata.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* DeleteMetadata_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteMetadata_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.DeleteMetadata.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.DeleteMetadata.Response)
  return target;
}

size_t DeleteMetadata_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.DeleteMetadata.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteMetadata_Response::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeleteMetadata_Response*>(
      &from));
}

void DeleteMetadata_Response::MergeFrom(const DeleteMetadata_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.DeleteMetadata.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeleteMetadata_Response::CopyFrom(const DeleteMetadata_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.DeleteMetadata.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteMetadata_Response::IsInitialized() const {
  return true;
}

void DeleteMetadata_Response::InternalSwap(DeleteMetadata_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string DeleteMetadata_Response::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.DeleteMetadata.Response";
}


// ===================================================================

void DeleteMetadata::InitAsDefaultInstance() {
}
class DeleteMetadata::_Internal {
 public:
};

DeleteMetadata::DeleteMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.DeleteMetadata)
}
DeleteMetadata::DeleteMetadata(const DeleteMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.DeleteMetadata)
}

void DeleteMetadata::SharedCtor() {
}

DeleteMetadata::~DeleteMetadata() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.DeleteMetadata)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DeleteMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeleteMetadata::ArenaDtor(void* object) {
  DeleteMetadata* _this = reinterpret_cast< DeleteMetadata* >(object);
  (void)_this;
}
void DeleteMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteMetadata& DeleteMetadata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteMetadata_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void DeleteMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.DeleteMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* DeleteMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteMetadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.DeleteMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.DeleteMetadata)
  return target;
}

size_t DeleteMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.DeleteMetadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteMetadata::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeleteMetadata*>(
      &from));
}

void DeleteMetadata::MergeFrom(const DeleteMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.DeleteMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeleteMetadata::CopyFrom(const DeleteMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.DeleteMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteMetadata::IsInitialized() const {
  return true;
}

void DeleteMetadata::InternalSwap(DeleteMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string DeleteMetadata::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.DeleteMetadata";
}


// ===================================================================

void DeleteResource_Request::InitAsDefaultInstance() {
}
class DeleteResource_Request::_Internal {
 public:
};

DeleteResource_Request::DeleteResource_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.DeleteResource.Request)
}
DeleteResource_Request::DeleteResource_Request(const DeleteResource_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.DeleteResource.Request)
}

void DeleteResource_Request::SharedCtor() {
  id_ = PROTOBUF_LONGLONG(0);
}

DeleteResource_Request::~DeleteResource_Request() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.DeleteResource.Request)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DeleteResource_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeleteResource_Request::ArenaDtor(void* object) {
  DeleteResource_Request* _this = reinterpret_cast< DeleteResource_Request* >(object);
  (void)_this;
}
void DeleteResource_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteResource_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteResource_Request& DeleteResource_Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteResource_Request_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void DeleteResource_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.DeleteResource.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<std::string>();
}

const char* DeleteResource_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteResource_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.DeleteResource.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.DeleteResource.Request)
  return target;
}

size_t DeleteResource_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.DeleteResource.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteResource_Request::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeleteResource_Request*>(
      &from));
}

void DeleteResource_Request::MergeFrom(const DeleteResource_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.DeleteResource.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void DeleteResource_Request::CopyFrom(const DeleteResource_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.DeleteResource.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteResource_Request::IsInitialized() const {
  return true;
}

void DeleteResource_Request::InternalSwap(DeleteResource_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(id_, other->id_);
}

std::string DeleteResource_Request::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.DeleteResource.Request";
}


// ===================================================================

void DeleteResource_Response_Resource::InitAsDefaultInstance() {
}
class DeleteResource_Response_Resource::_Internal {
 public:
};

DeleteResource_Response_Resource::DeleteResource_Response_Resource(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.DeleteResource.Response.Resource)
}
DeleteResource_Response_Resource::DeleteResource_Response_Resource(const DeleteResource_Response_Resource& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  public_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_public_id().empty()) {
    public_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_public_id(),
      GetArena());
  }
  level_ = from.level_;
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.DeleteResource.Response.Resource)
}

void DeleteResource_Response_Resource::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteResource_Response_Resource_OrthancDatabasePlugin_2eproto.base);
  public_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  level_ = 0;
}

DeleteResource_Response_Resource::~DeleteResource_Response_Resource() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.DeleteResource.Response.Resource)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DeleteResource_Response_Resource::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  public_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteResource_Response_Resource::ArenaDtor(void* object) {
  DeleteResource_Response_Resource* _this = reinterpret_cast< DeleteResource_Response_Resource* >(object);
  (void)_this;
}
void DeleteResource_Response_Resource::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteResource_Response_Resource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteResource_Response_Resource& DeleteResource_Response_Resource::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteResource_Response_Resource_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void DeleteResource_Response_Resource::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.DeleteResource.Response.Resource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  public_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  level_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* DeleteResource_Response_Resource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Orthanc.DatabasePluginMessages.ResourceType level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_level(static_cast<::Orthanc::DatabasePluginMessages::ResourceType>(val));
        } else goto handle_unusual;
        continue;
      // string public_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_public_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteResource_Response_Resource::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.DeleteResource.Response.Resource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Orthanc.DatabasePluginMessages.ResourceType level = 1;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_level(), target);
  }

  // string public_id = 2;
  if (this->public_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_public_id().data(), static_cast<int>(this->_internal_public_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Orthanc.DatabasePluginMessages.DeleteResource.Response.Resource.public_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_public_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.DeleteResource.Response.Resource)
  return target;
}

size_t DeleteResource_Response_Resource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.DeleteResource.Response.Resource)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string public_id = 2;
  if (this->public_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_public_id());
  }

  // .Orthanc.DatabasePluginMessages.ResourceType level = 1;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteResource_Response_Resource::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeleteResource_Response_Resource*>(
      &from));
}

void DeleteResource_Response_Resource::MergeFrom(const DeleteResource_Response_Resource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.DeleteResource.Response.Resource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.public_id().size() > 0) {
    _internal_set_public_id(from._internal_public_id());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
}

void DeleteResource_Response_Resource::CopyFrom(const DeleteResource_Response_Resource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.DeleteResource.Response.Resource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteResource_Response_Resource::IsInitialized() const {
  return true;
}

void DeleteResource_Response_Resource::InternalSwap(DeleteResource_Response_Resource* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  public_id_.Swap(&other->public_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(level_, other->level_);
}

std::string DeleteResource_Response_Resource::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.DeleteResource.Response.Resource";
}


// ===================================================================

void DeleteResource_Response::InitAsDefaultInstance() {
  ::Orthanc::DatabasePluginMessages::_DeleteResource_Response_default_instance_._instance.get_mutable()->remaining_ancestor_ = const_cast< ::Orthanc::DatabasePluginMessages::DeleteResource_Response_Resource*>(
      ::Orthanc::DatabasePluginMessages::DeleteResource_Response_Resource::internal_default_instance());
}
class DeleteResource_Response::_Internal {
 public:
  static const ::Orthanc::DatabasePluginMessages::DeleteResource_Response_Resource& remaining_ancestor(const DeleteResource_Response* msg);
};

const ::Orthanc::DatabasePluginMessages::DeleteResource_Response_Resource&
DeleteResource_Response::_Internal::remaining_ancestor(const DeleteResource_Response* msg) {
  return *msg->remaining_ancestor_;
}
DeleteResource_Response::DeleteResource_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  deleted_attachments_(arena),
  deleted_resources_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.DeleteResource.Response)
}
DeleteResource_Response::DeleteResource_Response(const DeleteResource_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      deleted_attachments_(from.deleted_attachments_),
      deleted_resources_(from.deleted_resources_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_remaining_ancestor()) {
    remaining_ancestor_ = new ::Orthanc::DatabasePluginMessages::DeleteResource_Response_Resource(*from.remaining_ancestor_);
  } else {
    remaining_ancestor_ = nullptr;
  }
  is_remaining_ancestor_ = from.is_remaining_ancestor_;
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.DeleteResource.Response)
}

void DeleteResource_Response::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteResource_Response_OrthancDatabasePlugin_2eproto.base);
  ::memset(&remaining_ancestor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_remaining_ancestor_) -
      reinterpret_cast<char*>(&remaining_ancestor_)) + sizeof(is_remaining_ancestor_));
}

DeleteResource_Response::~DeleteResource_Response() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.DeleteResource.Response)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DeleteResource_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete remaining_ancestor_;
}

void DeleteResource_Response::ArenaDtor(void* object) {
  DeleteResource_Response* _this = reinterpret_cast< DeleteResource_Response* >(object);
  (void)_this;
}
void DeleteResource_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteResource_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteResource_Response& DeleteResource_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteResource_Response_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void DeleteResource_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.DeleteResource.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deleted_attachments_.Clear();
  deleted_resources_.Clear();
  if (GetArena() == nullptr && remaining_ancestor_ != nullptr) {
    delete remaining_ancestor_;
  }
  remaining_ancestor_ = nullptr;
  is_remaining_ancestor_ = false;
  _internal_metadata_.Clear<std::string>();
}

const char* DeleteResource_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Orthanc.DatabasePluginMessages.FileInfo deleted_attachments = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_deleted_attachments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .Orthanc.DatabasePluginMessages.DeleteResource.Response.Resource deleted_resources = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_deleted_resources(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // bool is_remaining_ancestor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_remaining_ancestor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.DeleteResource.Response.Resource remaining_ancestor = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_remaining_ancestor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteResource_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.DeleteResource.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Orthanc.DatabasePluginMessages.FileInfo deleted_attachments = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_deleted_attachments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_deleted_attachments(i), target, stream);
  }

  // repeated .Orthanc.DatabasePluginMessages.DeleteResource.Response.Resource deleted_resources = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_deleted_resources_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_deleted_resources(i), target, stream);
  }

  // bool is_remaining_ancestor = 3;
  if (this->is_remaining_ancestor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_remaining_ancestor(), target);
  }

  // .Orthanc.DatabasePluginMessages.DeleteResource.Response.Resource remaining_ancestor = 4;
  if (this->has_remaining_ancestor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::remaining_ancestor(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.DeleteResource.Response)
  return target;
}

size_t DeleteResource_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.DeleteResource.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Orthanc.DatabasePluginMessages.FileInfo deleted_attachments = 1;
  total_size += 1UL * this->_internal_deleted_attachments_size();
  for (const auto& msg : this->deleted_attachments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Orthanc.DatabasePluginMessages.DeleteResource.Response.Resource deleted_resources = 2;
  total_size += 1UL * this->_internal_deleted_resources_size();
  for (const auto& msg : this->deleted_resources_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .Orthanc.DatabasePluginMessages.DeleteResource.Response.Resource remaining_ancestor = 4;
  if (this->has_remaining_ancestor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *remaining_ancestor_);
  }

  // bool is_remaining_ancestor = 3;
  if (this->is_remaining_ancestor() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteResource_Response::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeleteResource_Response*>(
      &from));
}

void DeleteResource_Response::MergeFrom(const DeleteResource_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.DeleteResource.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  deleted_attachments_.MergeFrom(from.deleted_attachments_);
  deleted_resources_.MergeFrom(from.deleted_resources_);
  if (from.has_remaining_ancestor()) {
    _internal_mutable_remaining_ancestor()->::Orthanc::DatabasePluginMessages::DeleteResource_Response_Resource::MergeFrom(from._internal_remaining_ancestor());
  }
  if (from.is_remaining_ancestor() != 0) {
    _internal_set_is_remaining_ancestor(from._internal_is_remaining_ancestor());
  }
}

void DeleteResource_Response::CopyFrom(const DeleteResource_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.DeleteResource.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteResource_Response::IsInitialized() const {
  return true;
}

void DeleteResource_Response::InternalSwap(DeleteResource_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  deleted_attachments_.InternalSwap(&other->deleted_attachments_);
  deleted_resources_.InternalSwap(&other->deleted_resources_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeleteResource_Response, is_remaining_ancestor_)
      + sizeof(DeleteResource_Response::is_remaining_ancestor_)
      - PROTOBUF_FIELD_OFFSET(DeleteResource_Response, remaining_ancestor_)>(
          reinterpret_cast<char*>(&remaining_ancestor_),
          reinterpret_cast<char*>(&other->remaining_ancestor_));
}

std::string DeleteResource_Response::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.DeleteResource.Response";
}


// ===================================================================

void DeleteResource::InitAsDefaultInstance() {
}
class DeleteResource::_Internal {
 public:
};

DeleteResource::DeleteResource(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.DeleteResource)
}
DeleteResource::DeleteResource(const DeleteResource& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.DeleteResource)
}

void DeleteResource::SharedCtor() {
}

DeleteResource::~DeleteResource() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.DeleteResource)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DeleteResource::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeleteResource::ArenaDtor(void* object) {
  DeleteResource* _this = reinterpret_cast< DeleteResource* >(object);
  (void)_this;
}
void DeleteResource::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteResource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteResource& DeleteResource::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteResource_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void DeleteResource::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.DeleteResource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* DeleteResource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteResource::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.DeleteResource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.DeleteResource)
  return target;
}

size_t DeleteResource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.DeleteResource)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteResource::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeleteResource*>(
      &from));
}

void DeleteResource::MergeFrom(const DeleteResource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.DeleteResource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeleteResource::CopyFrom(const DeleteResource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.DeleteResource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteResource::IsInitialized() const {
  return true;
}

void DeleteResource::InternalSwap(DeleteResource* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string DeleteResource::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.DeleteResource";
}


// ===================================================================

void GetAllMetadata_Request::InitAsDefaultInstance() {
}
class GetAllMetadata_Request::_Internal {
 public:
};

GetAllMetadata_Request::GetAllMetadata_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.GetAllMetadata.Request)
}
GetAllMetadata_Request::GetAllMetadata_Request(const GetAllMetadata_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.GetAllMetadata.Request)
}

void GetAllMetadata_Request::SharedCtor() {
  id_ = PROTOBUF_LONGLONG(0);
}

GetAllMetadata_Request::~GetAllMetadata_Request() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.GetAllMetadata.Request)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GetAllMetadata_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetAllMetadata_Request::ArenaDtor(void* object) {
  GetAllMetadata_Request* _this = reinterpret_cast< GetAllMetadata_Request* >(object);
  (void)_this;
}
void GetAllMetadata_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetAllMetadata_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAllMetadata_Request& GetAllMetadata_Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAllMetadata_Request_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void GetAllMetadata_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.GetAllMetadata.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<std::string>();
}

const char* GetAllMetadata_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAllMetadata_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.GetAllMetadata.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.GetAllMetadata.Request)
  return target;
}

size_t GetAllMetadata_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.GetAllMetadata.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAllMetadata_Request::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetAllMetadata_Request*>(
      &from));
}

void GetAllMetadata_Request::MergeFrom(const GetAllMetadata_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.GetAllMetadata.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void GetAllMetadata_Request::CopyFrom(const GetAllMetadata_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.GetAllMetadata.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAllMetadata_Request::IsInitialized() const {
  return true;
}

void GetAllMetadata_Request::InternalSwap(GetAllMetadata_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(id_, other->id_);
}

std::string GetAllMetadata_Request::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.GetAllMetadata.Request";
}


// ===================================================================

void GetAllMetadata_Response_Metadata::InitAsDefaultInstance() {
}
class GetAllMetadata_Response_Metadata::_Internal {
 public:
};

GetAllMetadata_Response_Metadata::GetAllMetadata_Response_Metadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.GetAllMetadata.Response.Metadata)
}
GetAllMetadata_Response_Metadata::GetAllMetadata_Response_Metadata(const GetAllMetadata_Response_Metadata& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.GetAllMetadata.Response.Metadata)
}

void GetAllMetadata_Response_Metadata::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetAllMetadata_Response_Metadata_OrthancDatabasePlugin_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

GetAllMetadata_Response_Metadata::~GetAllMetadata_Response_Metadata() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.GetAllMetadata.Response.Metadata)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GetAllMetadata_Response_Metadata::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetAllMetadata_Response_Metadata::ArenaDtor(void* object) {
  GetAllMetadata_Response_Metadata* _this = reinterpret_cast< GetAllMetadata_Response_Metadata* >(object);
  (void)_this;
}
void GetAllMetadata_Response_Metadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetAllMetadata_Response_Metadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAllMetadata_Response_Metadata& GetAllMetadata_Response_Metadata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAllMetadata_Response_Metadata_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void GetAllMetadata_Response_Metadata::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.GetAllMetadata.Response.Metadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* GetAllMetadata_Response_Metadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAllMetadata_Response_Metadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.GetAllMetadata.Response.Metadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Orthanc.DatabasePluginMessages.GetAllMetadata.Response.Metadata.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.GetAllMetadata.Response.Metadata)
  return target;
}

size_t GetAllMetadata_Response_Metadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.GetAllMetadata.Response.Metadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAllMetadata_Response_Metadata::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetAllMetadata_Response_Metadata*>(
      &from));
}

void GetAllMetadata_Response_Metadata::MergeFrom(const GetAllMetadata_Response_Metadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.GetAllMetadata.Response.Metadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void GetAllMetadata_Response_Metadata::CopyFrom(const GetAllMetadata_Response_Metadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.GetAllMetadata.Response.Metadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAllMetadata_Response_Metadata::IsInitialized() const {
  return true;
}

void GetAllMetadata_Response_Metadata::InternalSwap(GetAllMetadata_Response_Metadata* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
}

std::string GetAllMetadata_Response_Metadata::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.GetAllMetadata.Response.Metadata";
}


// ===================================================================

void GetAllMetadata_Response::InitAsDefaultInstance() {
}
class GetAllMetadata_Response::_Internal {
 public:
};

GetAllMetadata_Response::GetAllMetadata_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.GetAllMetadata.Response)
}
GetAllMetadata_Response::GetAllMetadata_Response(const GetAllMetadata_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      metadata_(from.metadata_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.GetAllMetadata.Response)
}

void GetAllMetadata_Response::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetAllMetadata_Response_OrthancDatabasePlugin_2eproto.base);
}

GetAllMetadata_Response::~GetAllMetadata_Response() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.GetAllMetadata.Response)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GetAllMetadata_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetAllMetadata_Response::ArenaDtor(void* object) {
  GetAllMetadata_Response* _this = reinterpret_cast< GetAllMetadata_Response* >(object);
  (void)_this;
}
void GetAllMetadata_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetAllMetadata_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAllMetadata_Response& GetAllMetadata_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAllMetadata_Response_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void GetAllMetadata_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.GetAllMetadata.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadata_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GetAllMetadata_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Orthanc.DatabasePluginMessages.GetAllMetadata.Response.Metadata metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metadata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAllMetadata_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.GetAllMetadata.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Orthanc.DatabasePluginMessages.GetAllMetadata.Response.Metadata metadata = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_metadata_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_metadata(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.GetAllMetadata.Response)
  return target;
}

size_t GetAllMetadata_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.GetAllMetadata.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Orthanc.DatabasePluginMessages.GetAllMetadata.Response.Metadata metadata = 1;
  total_size += 1UL * this->_internal_metadata_size();
  for (const auto& msg : this->metadata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAllMetadata_Response::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetAllMetadata_Response*>(
      &from));
}

void GetAllMetadata_Response::MergeFrom(const GetAllMetadata_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.GetAllMetadata.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metadata_.MergeFrom(from.metadata_);
}

void GetAllMetadata_Response::CopyFrom(const GetAllMetadata_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.GetAllMetadata.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAllMetadata_Response::IsInitialized() const {
  return true;
}

void GetAllMetadata_Response::InternalSwap(GetAllMetadata_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  metadata_.InternalSwap(&other->metadata_);
}

std::string GetAllMetadata_Response::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.GetAllMetadata.Response";
}


// ===================================================================

void GetAllMetadata::InitAsDefaultInstance() {
}
class GetAllMetadata::_Internal {
 public:
};

GetAllMetadata::GetAllMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.GetAllMetadata)
}
GetAllMetadata::GetAllMetadata(const GetAllMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.GetAllMetadata)
}

void GetAllMetadata::SharedCtor() {
}

GetAllMetadata::~GetAllMetadata() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.GetAllMetadata)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GetAllMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetAllMetadata::ArenaDtor(void* object) {
  GetAllMetadata* _this = reinterpret_cast< GetAllMetadata* >(object);
  (void)_this;
}
void GetAllMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetAllMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAllMetadata& GetAllMetadata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAllMetadata_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void GetAllMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.GetAllMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* GetAllMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAllMetadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.GetAllMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.GetAllMetadata)
  return target;
}

size_t GetAllMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.GetAllMetadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAllMetadata::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetAllMetadata*>(
      &from));
}

void GetAllMetadata::MergeFrom(const GetAllMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.GetAllMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetAllMetadata::CopyFrom(const GetAllMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.GetAllMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAllMetadata::IsInitialized() const {
  return true;
}

void GetAllMetadata::InternalSwap(GetAllMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string GetAllMetadata::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.GetAllMetadata";
}


// ===================================================================

void GetAllPublicIds_Request::InitAsDefaultInstance() {
}
class GetAllPublicIds_Request::_Internal {
 public:
};

GetAllPublicIds_Request::GetAllPublicIds_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.GetAllPublicIds.Request)
}
GetAllPublicIds_Request::GetAllPublicIds_Request(const GetAllPublicIds_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  resource_type_ = from.resource_type_;
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.GetAllPublicIds.Request)
}

void GetAllPublicIds_Request::SharedCtor() {
  resource_type_ = 0;
}

GetAllPublicIds_Request::~GetAllPublicIds_Request() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.GetAllPublicIds.Request)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GetAllPublicIds_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetAllPublicIds_Request::ArenaDtor(void* object) {
  GetAllPublicIds_Request* _this = reinterpret_cast< GetAllPublicIds_Request* >(object);
  (void)_this;
}
void GetAllPublicIds_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetAllPublicIds_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAllPublicIds_Request& GetAllPublicIds_Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAllPublicIds_Request_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void GetAllPublicIds_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.GetAllPublicIds.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resource_type_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* GetAllPublicIds_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Orthanc.DatabasePluginMessages.ResourceType resource_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_resource_type(static_cast<::Orthanc::DatabasePluginMessages::ResourceType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAllPublicIds_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.GetAllPublicIds.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Orthanc.DatabasePluginMessages.ResourceType resource_type = 1;
  if (this->resource_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_resource_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.GetAllPublicIds.Request)
  return target;
}

size_t GetAllPublicIds_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.GetAllPublicIds.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Orthanc.DatabasePluginMessages.ResourceType resource_type = 1;
  if (this->resource_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_resource_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAllPublicIds_Request::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetAllPublicIds_Request*>(
      &from));
}

void GetAllPublicIds_Request::MergeFrom(const GetAllPublicIds_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.GetAllPublicIds.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.resource_type() != 0) {
    _internal_set_resource_type(from._internal_resource_type());
  }
}

void GetAllPublicIds_Request::CopyFrom(const GetAllPublicIds_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.GetAllPublicIds.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAllPublicIds_Request::IsInitialized() const {
  return true;
}

void GetAllPublicIds_Request::InternalSwap(GetAllPublicIds_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(resource_type_, other->resource_type_);
}

std::string GetAllPublicIds_Request::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.GetAllPublicIds.Request";
}


// ===================================================================

void GetAllPublicIds_Response::InitAsDefaultInstance() {
}
class GetAllPublicIds_Response::_Internal {
 public:
};

GetAllPublicIds_Response::GetAllPublicIds_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.GetAllPublicIds.Response)
}
GetAllPublicIds_Response::GetAllPublicIds_Response(const GetAllPublicIds_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.GetAllPublicIds.Response)
}

void GetAllPublicIds_Response::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetAllPublicIds_Response_OrthancDatabasePlugin_2eproto.base);
}

GetAllPublicIds_Response::~GetAllPublicIds_Response() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.GetAllPublicIds.Response)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GetAllPublicIds_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetAllPublicIds_Response::ArenaDtor(void* object) {
  GetAllPublicIds_Response* _this = reinterpret_cast< GetAllPublicIds_Response* >(object);
  (void)_this;
}
void GetAllPublicIds_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetAllPublicIds_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAllPublicIds_Response& GetAllPublicIds_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAllPublicIds_Response_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void GetAllPublicIds_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.GetAllPublicIds.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GetAllPublicIds_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAllPublicIds_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.GetAllPublicIds.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string ids = 1;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Orthanc.DatabasePluginMessages.GetAllPublicIds.Response.ids");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.GetAllPublicIds.Response)
  return target;
}

size_t GetAllPublicIds_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.GetAllPublicIds.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ids_.size());
  for (int i = 0, n = ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ids_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAllPublicIds_Response::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetAllPublicIds_Response*>(
      &from));
}

void GetAllPublicIds_Response::MergeFrom(const GetAllPublicIds_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.GetAllPublicIds.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
}

void GetAllPublicIds_Response::CopyFrom(const GetAllPublicIds_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.GetAllPublicIds.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAllPublicIds_Response::IsInitialized() const {
  return true;
}

void GetAllPublicIds_Response::InternalSwap(GetAllPublicIds_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
}

std::string GetAllPublicIds_Response::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.GetAllPublicIds.Response";
}


// ===================================================================

void GetAllPublicIds::InitAsDefaultInstance() {
}
class GetAllPublicIds::_Internal {
 public:
};

GetAllPublicIds::GetAllPublicIds(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.GetAllPublicIds)
}
GetAllPublicIds::GetAllPublicIds(const GetAllPublicIds& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.GetAllPublicIds)
}

void GetAllPublicIds::SharedCtor() {
}

GetAllPublicIds::~GetAllPublicIds() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.GetAllPublicIds)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GetAllPublicIds::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetAllPublicIds::ArenaDtor(void* object) {
  GetAllPublicIds* _this = reinterpret_cast< GetAllPublicIds* >(object);
  (void)_this;
}
void GetAllPublicIds::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetAllPublicIds::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAllPublicIds& GetAllPublicIds::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAllPublicIds_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void GetAllPublicIds::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.GetAllPublicIds)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* GetAllPublicIds::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAllPublicIds::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.GetAllPublicIds)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.GetAllPublicIds)
  return target;
}

size_t GetAllPublicIds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.GetAllPublicIds)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAllPublicIds::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetAllPublicIds*>(
      &from));
}

void GetAllPublicIds::MergeFrom(const GetAllPublicIds& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.GetAllPublicIds)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetAllPublicIds::CopyFrom(const GetAllPublicIds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.GetAllPublicIds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAllPublicIds::IsInitialized() const {
  return true;
}

void GetAllPublicIds::InternalSwap(GetAllPublicIds* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string GetAllPublicIds::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.GetAllPublicIds";
}


// ===================================================================

void GetAllPublicIdsWithLimits_Request::InitAsDefaultInstance() {
}
class GetAllPublicIdsWithLimits_Request::_Internal {
 public:
};

GetAllPublicIdsWithLimits_Request::GetAllPublicIdsWithLimits_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.GetAllPublicIdsWithLimits.Request)
}
GetAllPublicIdsWithLimits_Request::GetAllPublicIdsWithLimits_Request(const GetAllPublicIdsWithLimits_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&since_, &from.since_,
    static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&since_)) + sizeof(limit_));
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.GetAllPublicIdsWithLimits.Request)
}

void GetAllPublicIdsWithLimits_Request::SharedCtor() {
  ::memset(&since_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&since_)) + sizeof(limit_));
}

GetAllPublicIdsWithLimits_Request::~GetAllPublicIdsWithLimits_Request() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.GetAllPublicIdsWithLimits.Request)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GetAllPublicIdsWithLimits_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetAllPublicIdsWithLimits_Request::ArenaDtor(void* object) {
  GetAllPublicIdsWithLimits_Request* _this = reinterpret_cast< GetAllPublicIdsWithLimits_Request* >(object);
  (void)_this;
}
void GetAllPublicIdsWithLimits_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetAllPublicIdsWithLimits_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAllPublicIdsWithLimits_Request& GetAllPublicIdsWithLimits_Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAllPublicIdsWithLimits_Request_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void GetAllPublicIdsWithLimits_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.GetAllPublicIdsWithLimits.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&since_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&since_)) + sizeof(limit_));
  _internal_metadata_.Clear<std::string>();
}

const char* GetAllPublicIdsWithLimits_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Orthanc.DatabasePluginMessages.ResourceType resource_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_resource_type(static_cast<::Orthanc::DatabasePluginMessages::ResourceType>(val));
        } else goto handle_unusual;
        continue;
      // int64 since = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          since_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAllPublicIdsWithLimits_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.GetAllPublicIdsWithLimits.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Orthanc.DatabasePluginMessages.ResourceType resource_type = 1;
  if (this->resource_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_resource_type(), target);
  }

  // int64 since = 2;
  if (this->since() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_since(), target);
  }

  // uint32 limit = 3;
  if (this->limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.GetAllPublicIdsWithLimits.Request)
  return target;
}

size_t GetAllPublicIdsWithLimits_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.GetAllPublicIdsWithLimits.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 since = 2;
  if (this->since() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_since());
  }

  // .Orthanc.DatabasePluginMessages.ResourceType resource_type = 1;
  if (this->resource_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_resource_type());
  }

  // uint32 limit = 3;
  if (this->limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAllPublicIdsWithLimits_Request::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetAllPublicIdsWithLimits_Request*>(
      &from));
}

void GetAllPublicIdsWithLimits_Request::MergeFrom(const GetAllPublicIdsWithLimits_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.GetAllPublicIdsWithLimits.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.since() != 0) {
    _internal_set_since(from._internal_since());
  }
  if (from.resource_type() != 0) {
    _internal_set_resource_type(from._internal_resource_type());
  }
  if (from.limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
}

void GetAllPublicIdsWithLimits_Request::CopyFrom(const GetAllPublicIdsWithLimits_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.GetAllPublicIdsWithLimits.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAllPublicIdsWithLimits_Request::IsInitialized() const {
  return true;
}

void GetAllPublicIdsWithLimits_Request::InternalSwap(GetAllPublicIdsWithLimits_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetAllPublicIdsWithLimits_Request, limit_)
      + sizeof(GetAllPublicIdsWithLimits_Request::limit_)
      - PROTOBUF_FIELD_OFFSET(GetAllPublicIdsWithLimits_Request, since_)>(
          reinterpret_cast<char*>(&since_),
          reinterpret_cast<char*>(&other->since_));
}

std::string GetAllPublicIdsWithLimits_Request::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.GetAllPublicIdsWithLimits.Request";
}


// ===================================================================

void GetAllPublicIdsWithLimits_Response::InitAsDefaultInstance() {
}
class GetAllPublicIdsWithLimits_Response::_Internal {
 public:
};

GetAllPublicIdsWithLimits_Response::GetAllPublicIdsWithLimits_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.GetAllPublicIdsWithLimits.Response)
}
GetAllPublicIdsWithLimits_Response::GetAllPublicIdsWithLimits_Response(const GetAllPublicIdsWithLimits_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.GetAllPublicIdsWithLimits.Response)
}

void GetAllPublicIdsWithLimits_Response::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetAllPublicIdsWithLimits_Response_OrthancDatabasePlugin_2eproto.base);
}

GetAllPublicIdsWithLimits_Response::~GetAllPublicIdsWithLimits_Response() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.GetAllPublicIdsWithLimits.Response)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GetAllPublicIdsWithLimits_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetAllPublicIdsWithLimits_Response::ArenaDtor(void* object) {
  GetAllPublicIdsWithLimits_Response* _this = reinterpret_cast< GetAllPublicIdsWithLimits_Response* >(object);
  (void)_this;
}
void GetAllPublicIdsWithLimits_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetAllPublicIdsWithLimits_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAllPublicIdsWithLimits_Response& GetAllPublicIdsWithLimits_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAllPublicIdsWithLimits_Response_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void GetAllPublicIdsWithLimits_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.GetAllPublicIdsWithLimits.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GetAllPublicIdsWithLimits_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAllPublicIdsWithLimits_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.GetAllPublicIdsWithLimits.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string ids = 1;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Orthanc.DatabasePluginMessages.GetAllPublicIdsWithLimits.Response.ids");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.GetAllPublicIdsWithLimits.Response)
  return target;
}

size_t GetAllPublicIdsWithLimits_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.GetAllPublicIdsWithLimits.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ids_.size());
  for (int i = 0, n = ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ids_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAllPublicIdsWithLimits_Response::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetAllPublicIdsWithLimits_Response*>(
      &from));
}

void GetAllPublicIdsWithLimits_Response::MergeFrom(const GetAllPublicIdsWithLimits_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.GetAllPublicIdsWithLimits.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
}

void GetAllPublicIdsWithLimits_Response::CopyFrom(const GetAllPublicIdsWithLimits_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.GetAllPublicIdsWithLimits.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAllPublicIdsWithLimits_Response::IsInitialized() const {
  return true;
}

void GetAllPublicIdsWithLimits_Response::InternalSwap(GetAllPublicIdsWithLimits_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
}

std::string GetAllPublicIdsWithLimits_Response::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.GetAllPublicIdsWithLimits.Response";
}


// ===================================================================

void GetAllPublicIdsWithLimits::InitAsDefaultInstance() {
}
class GetAllPublicIdsWithLimits::_Internal {
 public:
};

GetAllPublicIdsWithLimits::GetAllPublicIdsWithLimits(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.GetAllPublicIdsWithLimits)
}
GetAllPublicIdsWithLimits::GetAllPublicIdsWithLimits(const GetAllPublicIdsWithLimits& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.GetAllPublicIdsWithLimits)
}

void GetAllPublicIdsWithLimits::SharedCtor() {
}

GetAllPublicIdsWithLimits::~GetAllPublicIdsWithLimits() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.GetAllPublicIdsWithLimits)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GetAllPublicIdsWithLimits::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetAllPublicIdsWithLimits::ArenaDtor(void* object) {
  GetAllPublicIdsWithLimits* _this = reinterpret_cast< GetAllPublicIdsWithLimits* >(object);
  (void)_this;
}
void GetAllPublicIdsWithLimits::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetAllPublicIdsWithLimits::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAllPublicIdsWithLimits& GetAllPublicIdsWithLimits::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAllPublicIdsWithLimits_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void GetAllPublicIdsWithLimits::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.GetAllPublicIdsWithLimits)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* GetAllPublicIdsWithLimits::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAllPublicIdsWithLimits::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.GetAllPublicIdsWithLimits)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.GetAllPublicIdsWithLimits)
  return target;
}

size_t GetAllPublicIdsWithLimits::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.GetAllPublicIdsWithLimits)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAllPublicIdsWithLimits::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetAllPublicIdsWithLimits*>(
      &from));
}

void GetAllPublicIdsWithLimits::MergeFrom(const GetAllPublicIdsWithLimits& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.GetAllPublicIdsWithLimits)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetAllPublicIdsWithLimits::CopyFrom(const GetAllPublicIdsWithLimits& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.GetAllPublicIdsWithLimits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAllPublicIdsWithLimits::IsInitialized() const {
  return true;
}

void GetAllPublicIdsWithLimits::InternalSwap(GetAllPublicIdsWithLimits* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string GetAllPublicIdsWithLimits::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.GetAllPublicIdsWithLimits";
}


// ===================================================================

void GetChanges_Request::InitAsDefaultInstance() {
}
class GetChanges_Request::_Internal {
 public:
};

GetChanges_Request::GetChanges_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.GetChanges.Request)
}
GetChanges_Request::GetChanges_Request(const GetChanges_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&since_, &from.since_,
    static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&since_)) + sizeof(limit_));
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.GetChanges.Request)
}

void GetChanges_Request::SharedCtor() {
  ::memset(&since_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&since_)) + sizeof(limit_));
}

GetChanges_Request::~GetChanges_Request() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.GetChanges.Request)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GetChanges_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetChanges_Request::ArenaDtor(void* object) {
  GetChanges_Request* _this = reinterpret_cast< GetChanges_Request* >(object);
  (void)_this;
}
void GetChanges_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetChanges_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetChanges_Request& GetChanges_Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetChanges_Request_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void GetChanges_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.GetChanges.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&since_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&since_)) + sizeof(limit_));
  _internal_metadata_.Clear<std::string>();
}

const char* GetChanges_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 since = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          since_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetChanges_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.GetChanges.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 since = 1;
  if (this->since() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_since(), target);
  }

  // uint32 limit = 2;
  if (this->limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.GetChanges.Request)
  return target;
}

size_t GetChanges_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.GetChanges.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 since = 1;
  if (this->since() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_since());
  }

  // uint32 limit = 2;
  if (this->limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetChanges_Request::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetChanges_Request*>(
      &from));
}

void GetChanges_Request::MergeFrom(const GetChanges_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.GetChanges.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.since() != 0) {
    _internal_set_since(from._internal_since());
  }
  if (from.limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
}

void GetChanges_Request::CopyFrom(const GetChanges_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.GetChanges.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChanges_Request::IsInitialized() const {
  return true;
}

void GetChanges_Request::InternalSwap(GetChanges_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetChanges_Request, limit_)
      + sizeof(GetChanges_Request::limit_)
      - PROTOBUF_FIELD_OFFSET(GetChanges_Request, since_)>(
          reinterpret_cast<char*>(&since_),
          reinterpret_cast<char*>(&other->since_));
}

std::string GetChanges_Request::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.GetChanges.Request";
}


// ===================================================================

void GetChanges_Response::InitAsDefaultInstance() {
}
class GetChanges_Response::_Internal {
 public:
};

GetChanges_Response::GetChanges_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  changes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.GetChanges.Response)
}
GetChanges_Response::GetChanges_Response(const GetChanges_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      changes_(from.changes_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  done_ = from.done_;
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.GetChanges.Response)
}

void GetChanges_Response::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetChanges_Response_OrthancDatabasePlugin_2eproto.base);
  done_ = false;
}

GetChanges_Response::~GetChanges_Response() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.GetChanges.Response)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GetChanges_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetChanges_Response::ArenaDtor(void* object) {
  GetChanges_Response* _this = reinterpret_cast< GetChanges_Response* >(object);
  (void)_this;
}
void GetChanges_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetChanges_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetChanges_Response& GetChanges_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetChanges_Response_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void GetChanges_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.GetChanges.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  changes_.Clear();
  done_ = false;
  _internal_metadata_.Clear<std::string>();
}

const char* GetChanges_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Orthanc.DatabasePluginMessages.ServerIndexChange changes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_changes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // bool done = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          done_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetChanges_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.GetChanges.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Orthanc.DatabasePluginMessages.ServerIndexChange changes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_changes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_changes(i), target, stream);
  }

  // bool done = 2;
  if (this->done() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_done(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.GetChanges.Response)
  return target;
}

size_t GetChanges_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.GetChanges.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Orthanc.DatabasePluginMessages.ServerIndexChange changes = 1;
  total_size += 1UL * this->_internal_changes_size();
  for (const auto& msg : this->changes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool done = 2;
  if (this->done() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetChanges_Response::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetChanges_Response*>(
      &from));
}

void GetChanges_Response::MergeFrom(const GetChanges_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.GetChanges.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  changes_.MergeFrom(from.changes_);
  if (from.done() != 0) {
    _internal_set_done(from._internal_done());
  }
}

void GetChanges_Response::CopyFrom(const GetChanges_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.GetChanges.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChanges_Response::IsInitialized() const {
  return true;
}

void GetChanges_Response::InternalSwap(GetChanges_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  changes_.InternalSwap(&other->changes_);
  swap(done_, other->done_);
}

std::string GetChanges_Response::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.GetChanges.Response";
}


// ===================================================================

void GetChanges::InitAsDefaultInstance() {
}
class GetChanges::_Internal {
 public:
};

GetChanges::GetChanges(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.GetChanges)
}
GetChanges::GetChanges(const GetChanges& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.GetChanges)
}

void GetChanges::SharedCtor() {
}

GetChanges::~GetChanges() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.GetChanges)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GetChanges::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetChanges::ArenaDtor(void* object) {
  GetChanges* _this = reinterpret_cast< GetChanges* >(object);
  (void)_this;
}
void GetChanges::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetChanges::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetChanges& GetChanges::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetChanges_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void GetChanges::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.GetChanges)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* GetChanges::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetChanges::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.GetChanges)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.GetChanges)
  return target;
}

size_t GetChanges::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.GetChanges)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetChanges::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetChanges*>(
      &from));
}

void GetChanges::MergeFrom(const GetChanges& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.GetChanges)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetChanges::CopyFrom(const GetChanges& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.GetChanges)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChanges::IsInitialized() const {
  return true;
}

void GetChanges::InternalSwap(GetChanges* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string GetChanges::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.GetChanges";
}


// ===================================================================

void GetChildrenInternalId_Request::InitAsDefaultInstance() {
}
class GetChildrenInternalId_Request::_Internal {
 public:
};

GetChildrenInternalId_Request::GetChildrenInternalId_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.GetChildrenInternalId.Request)
}
GetChildrenInternalId_Request::GetChildrenInternalId_Request(const GetChildrenInternalId_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.GetChildrenInternalId.Request)
}

void GetChildrenInternalId_Request::SharedCtor() {
  id_ = PROTOBUF_LONGLONG(0);
}

GetChildrenInternalId_Request::~GetChildrenInternalId_Request() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.GetChildrenInternalId.Request)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GetChildrenInternalId_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetChildrenInternalId_Request::ArenaDtor(void* object) {
  GetChildrenInternalId_Request* _this = reinterpret_cast< GetChildrenInternalId_Request* >(object);
  (void)_this;
}
void GetChildrenInternalId_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetChildrenInternalId_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetChildrenInternalId_Request& GetChildrenInternalId_Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetChildrenInternalId_Request_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void GetChildrenInternalId_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.GetChildrenInternalId.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<std::string>();
}

const char* GetChildrenInternalId_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetChildrenInternalId_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.GetChildrenInternalId.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.GetChildrenInternalId.Request)
  return target;
}

size_t GetChildrenInternalId_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.GetChildrenInternalId.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetChildrenInternalId_Request::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetChildrenInternalId_Request*>(
      &from));
}

void GetChildrenInternalId_Request::MergeFrom(const GetChildrenInternalId_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.GetChildrenInternalId.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void GetChildrenInternalId_Request::CopyFrom(const GetChildrenInternalId_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.GetChildrenInternalId.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChildrenInternalId_Request::IsInitialized() const {
  return true;
}

void GetChildrenInternalId_Request::InternalSwap(GetChildrenInternalId_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(id_, other->id_);
}

std::string GetChildrenInternalId_Request::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.GetChildrenInternalId.Request";
}


// ===================================================================

void GetChildrenInternalId_Response::InitAsDefaultInstance() {
}
class GetChildrenInternalId_Response::_Internal {
 public:
};

GetChildrenInternalId_Response::GetChildrenInternalId_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.GetChildrenInternalId.Response)
}
GetChildrenInternalId_Response::GetChildrenInternalId_Response(const GetChildrenInternalId_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.GetChildrenInternalId.Response)
}

void GetChildrenInternalId_Response::SharedCtor() {
}

GetChildrenInternalId_Response::~GetChildrenInternalId_Response() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.GetChildrenInternalId.Response)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GetChildrenInternalId_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetChildrenInternalId_Response::ArenaDtor(void* object) {
  GetChildrenInternalId_Response* _this = reinterpret_cast< GetChildrenInternalId_Response* >(object);
  (void)_this;
}
void GetChildrenInternalId_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetChildrenInternalId_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetChildrenInternalId_Response& GetChildrenInternalId_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetChildrenInternalId_Response_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void GetChildrenInternalId_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.GetChildrenInternalId.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GetChildrenInternalId_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int64 ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetChildrenInternalId_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.GetChildrenInternalId.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 ids = 1;
  {
    int byte_size = _ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_ids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.GetChildrenInternalId.Response)
  return target;
}

size_t GetChildrenInternalId_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.GetChildrenInternalId.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 ids = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetChildrenInternalId_Response::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetChildrenInternalId_Response*>(
      &from));
}

void GetChildrenInternalId_Response::MergeFrom(const GetChildrenInternalId_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.GetChildrenInternalId.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
}

void GetChildrenInternalId_Response::CopyFrom(const GetChildrenInternalId_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.GetChildrenInternalId.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChildrenInternalId_Response::IsInitialized() const {
  return true;
}

void GetChildrenInternalId_Response::InternalSwap(GetChildrenInternalId_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
}

std::string GetChildrenInternalId_Response::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.GetChildrenInternalId.Response";
}


// ===================================================================

void GetChildrenInternalId::InitAsDefaultInstance() {
}
class GetChildrenInternalId::_Internal {
 public:
};

GetChildrenInternalId::GetChildrenInternalId(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.GetChildrenInternalId)
}
GetChildrenInternalId::GetChildrenInternalId(const GetChildrenInternalId& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.GetChildrenInternalId)
}

void GetChildrenInternalId::SharedCtor() {
}

GetChildrenInternalId::~GetChildrenInternalId() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.GetChildrenInternalId)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GetChildrenInternalId::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetChildrenInternalId::ArenaDtor(void* object) {
  GetChildrenInternalId* _this = reinterpret_cast< GetChildrenInternalId* >(object);
  (void)_this;
}
void GetChildrenInternalId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetChildrenInternalId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetChildrenInternalId& GetChildrenInternalId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetChildrenInternalId_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void GetChildrenInternalId::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.GetChildrenInternalId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* GetChildrenInternalId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetChildrenInternalId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.GetChildrenInternalId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.GetChildrenInternalId)
  return target;
}

size_t GetChildrenInternalId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.GetChildrenInternalId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetChildrenInternalId::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetChildrenInternalId*>(
      &from));
}

void GetChildrenInternalId::MergeFrom(const GetChildrenInternalId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.GetChildrenInternalId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetChildrenInternalId::CopyFrom(const GetChildrenInternalId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.GetChildrenInternalId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChildrenInternalId::IsInitialized() const {
  return true;
}

void GetChildrenInternalId::InternalSwap(GetChildrenInternalId* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string GetChildrenInternalId::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.GetChildrenInternalId";
}


// ===================================================================

void GetChildrenPublicId_Request::InitAsDefaultInstance() {
}
class GetChildrenPublicId_Request::_Internal {
 public:
};

GetChildrenPublicId_Request::GetChildrenPublicId_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.GetChildrenPublicId.Request)
}
GetChildrenPublicId_Request::GetChildrenPublicId_Request(const GetChildrenPublicId_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.GetChildrenPublicId.Request)
}

void GetChildrenPublicId_Request::SharedCtor() {
  id_ = PROTOBUF_LONGLONG(0);
}

GetChildrenPublicId_Request::~GetChildrenPublicId_Request() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.GetChildrenPublicId.Request)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GetChildrenPublicId_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetChildrenPublicId_Request::ArenaDtor(void* object) {
  GetChildrenPublicId_Request* _this = reinterpret_cast< GetChildrenPublicId_Request* >(object);
  (void)_this;
}
void GetChildrenPublicId_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetChildrenPublicId_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetChildrenPublicId_Request& GetChildrenPublicId_Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetChildrenPublicId_Request_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void GetChildrenPublicId_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.GetChildrenPublicId.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<std::string>();
}

const char* GetChildrenPublicId_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetChildrenPublicId_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.GetChildrenPublicId.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.GetChildrenPublicId.Request)
  return target;
}

size_t GetChildrenPublicId_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.GetChildrenPublicId.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetChildrenPublicId_Request::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetChildrenPublicId_Request*>(
      &from));
}

void GetChildrenPublicId_Request::MergeFrom(const GetChildrenPublicId_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.GetChildrenPublicId.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void GetChildrenPublicId_Request::CopyFrom(const GetChildrenPublicId_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.GetChildrenPublicId.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChildrenPublicId_Request::IsInitialized() const {
  return true;
}

void GetChildrenPublicId_Request::InternalSwap(GetChildrenPublicId_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(id_, other->id_);
}

std::string GetChildrenPublicId_Request::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.GetChildrenPublicId.Request";
}


// ===================================================================

void GetChildrenPublicId_Response::InitAsDefaultInstance() {
}
class GetChildrenPublicId_Response::_Internal {
 public:
};

GetChildrenPublicId_Response::GetChildrenPublicId_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.GetChildrenPublicId.Response)
}
GetChildrenPublicId_Response::GetChildrenPublicId_Response(const GetChildrenPublicId_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.GetChildrenPublicId.Response)
}

void GetChildrenPublicId_Response::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetChildrenPublicId_Response_OrthancDatabasePlugin_2eproto.base);
}

GetChildrenPublicId_Response::~GetChildrenPublicId_Response() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.GetChildrenPublicId.Response)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GetChildrenPublicId_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetChildrenPublicId_Response::ArenaDtor(void* object) {
  GetChildrenPublicId_Response* _this = reinterpret_cast< GetChildrenPublicId_Response* >(object);
  (void)_this;
}
void GetChildrenPublicId_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetChildrenPublicId_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetChildrenPublicId_Response& GetChildrenPublicId_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetChildrenPublicId_Response_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void GetChildrenPublicId_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.GetChildrenPublicId.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GetChildrenPublicId_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetChildrenPublicId_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.GetChildrenPublicId.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string ids = 1;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Orthanc.DatabasePluginMessages.GetChildrenPublicId.Response.ids");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.GetChildrenPublicId.Response)
  return target;
}

size_t GetChildrenPublicId_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.GetChildrenPublicId.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ids_.size());
  for (int i = 0, n = ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ids_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetChildrenPublicId_Response::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetChildrenPublicId_Response*>(
      &from));
}

void GetChildrenPublicId_Response::MergeFrom(const GetChildrenPublicId_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.GetChildrenPublicId.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
}

void GetChildrenPublicId_Response::CopyFrom(const GetChildrenPublicId_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.GetChildrenPublicId.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChildrenPublicId_Response::IsInitialized() const {
  return true;
}

void GetChildrenPublicId_Response::InternalSwap(GetChildrenPublicId_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
}

std::string GetChildrenPublicId_Response::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.GetChildrenPublicId.Response";
}


// ===================================================================

void GetChildrenPublicId::InitAsDefaultInstance() {
}
class GetChildrenPublicId::_Internal {
 public:
};

GetChildrenPublicId::GetChildrenPublicId(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.GetChildrenPublicId)
}
GetChildrenPublicId::GetChildrenPublicId(const GetChildrenPublicId& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.GetChildrenPublicId)
}

void GetChildrenPublicId::SharedCtor() {
}

GetChildrenPublicId::~GetChildrenPublicId() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.GetChildrenPublicId)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GetChildrenPublicId::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetChildrenPublicId::ArenaDtor(void* object) {
  GetChildrenPublicId* _this = reinterpret_cast< GetChildrenPublicId* >(object);
  (void)_this;
}
void GetChildrenPublicId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetChildrenPublicId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetChildrenPublicId& GetChildrenPublicId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetChildrenPublicId_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void GetChildrenPublicId::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.GetChildrenPublicId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* GetChildrenPublicId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetChildrenPublicId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.GetChildrenPublicId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.GetChildrenPublicId)
  return target;
}

size_t GetChildrenPublicId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.GetChildrenPublicId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetChildrenPublicId::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetChildrenPublicId*>(
      &from));
}

void GetChildrenPublicId::MergeFrom(const GetChildrenPublicId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.GetChildrenPublicId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetChildrenPublicId::CopyFrom(const GetChildrenPublicId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.GetChildrenPublicId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChildrenPublicId::IsInitialized() const {
  return true;
}

void GetChildrenPublicId::InternalSwap(GetChildrenPublicId* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string GetChildrenPublicId::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.GetChildrenPublicId";
}


// ===================================================================

void GetExportedResources_Request::InitAsDefaultInstance() {
}
class GetExportedResources_Request::_Internal {
 public:
};

GetExportedResources_Request::GetExportedResources_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.GetExportedResources.Request)
}
GetExportedResources_Request::GetExportedResources_Request(const GetExportedResources_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&since_, &from.since_,
    static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&since_)) + sizeof(limit_));
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.GetExportedResources.Request)
}

void GetExportedResources_Request::SharedCtor() {
  ::memset(&since_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&since_)) + sizeof(limit_));
}

GetExportedResources_Request::~GetExportedResources_Request() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.GetExportedResources.Request)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GetExportedResources_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetExportedResources_Request::ArenaDtor(void* object) {
  GetExportedResources_Request* _this = reinterpret_cast< GetExportedResources_Request* >(object);
  (void)_this;
}
void GetExportedResources_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetExportedResources_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetExportedResources_Request& GetExportedResources_Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetExportedResources_Request_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void GetExportedResources_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.GetExportedResources.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&since_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&since_)) + sizeof(limit_));
  _internal_metadata_.Clear<std::string>();
}

const char* GetExportedResources_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 since = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          since_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetExportedResources_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.GetExportedResources.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 since = 1;
  if (this->since() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_since(), target);
  }

  // uint32 limit = 2;
  if (this->limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.GetExportedResources.Request)
  return target;
}

size_t GetExportedResources_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.GetExportedResources.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 since = 1;
  if (this->since() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_since());
  }

  // uint32 limit = 2;
  if (this->limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetExportedResources_Request::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetExportedResources_Request*>(
      &from));
}

void GetExportedResources_Request::MergeFrom(const GetExportedResources_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.GetExportedResources.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.since() != 0) {
    _internal_set_since(from._internal_since());
  }
  if (from.limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
}

void GetExportedResources_Request::CopyFrom(const GetExportedResources_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.GetExportedResources.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetExportedResources_Request::IsInitialized() const {
  return true;
}

void GetExportedResources_Request::InternalSwap(GetExportedResources_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetExportedResources_Request, limit_)
      + sizeof(GetExportedResources_Request::limit_)
      - PROTOBUF_FIELD_OFFSET(GetExportedResources_Request, since_)>(
          reinterpret_cast<char*>(&since_),
          reinterpret_cast<char*>(&other->since_));
}

std::string GetExportedResources_Request::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.GetExportedResources.Request";
}


// ===================================================================

void GetExportedResources_Response::InitAsDefaultInstance() {
}
class GetExportedResources_Response::_Internal {
 public:
};

GetExportedResources_Response::GetExportedResources_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  resources_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.GetExportedResources.Response)
}
GetExportedResources_Response::GetExportedResources_Response(const GetExportedResources_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      resources_(from.resources_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  done_ = from.done_;
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.GetExportedResources.Response)
}

void GetExportedResources_Response::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetExportedResources_Response_OrthancDatabasePlugin_2eproto.base);
  done_ = false;
}

GetExportedResources_Response::~GetExportedResources_Response() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.GetExportedResources.Response)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GetExportedResources_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetExportedResources_Response::ArenaDtor(void* object) {
  GetExportedResources_Response* _this = reinterpret_cast< GetExportedResources_Response* >(object);
  (void)_this;
}
void GetExportedResources_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetExportedResources_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetExportedResources_Response& GetExportedResources_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetExportedResources_Response_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void GetExportedResources_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.GetExportedResources.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resources_.Clear();
  done_ = false;
  _internal_metadata_.Clear<std::string>();
}

const char* GetExportedResources_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Orthanc.DatabasePluginMessages.ExportedResource resources = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_resources(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // bool done = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          done_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetExportedResources_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.GetExportedResources.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Orthanc.DatabasePluginMessages.ExportedResource resources = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_resources_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_resources(i), target, stream);
  }

  // bool done = 2;
  if (this->done() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_done(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.GetExportedResources.Response)
  return target;
}

size_t GetExportedResources_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.GetExportedResources.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Orthanc.DatabasePluginMessages.ExportedResource resources = 1;
  total_size += 1UL * this->_internal_resources_size();
  for (const auto& msg : this->resources_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool done = 2;
  if (this->done() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetExportedResources_Response::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetExportedResources_Response*>(
      &from));
}

void GetExportedResources_Response::MergeFrom(const GetExportedResources_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.GetExportedResources.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  resources_.MergeFrom(from.resources_);
  if (from.done() != 0) {
    _internal_set_done(from._internal_done());
  }
}

void GetExportedResources_Response::CopyFrom(const GetExportedResources_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.GetExportedResources.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetExportedResources_Response::IsInitialized() const {
  return true;
}

void GetExportedResources_Response::InternalSwap(GetExportedResources_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  resources_.InternalSwap(&other->resources_);
  swap(done_, other->done_);
}

std::string GetExportedResources_Response::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.GetExportedResources.Response";
}


// ===================================================================

void GetExportedResources::InitAsDefaultInstance() {
}
class GetExportedResources::_Internal {
 public:
};

GetExportedResources::GetExportedResources(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.GetExportedResources)
}
GetExportedResources::GetExportedResources(const GetExportedResources& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.GetExportedResources)
}

void GetExportedResources::SharedCtor() {
}

GetExportedResources::~GetExportedResources() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.GetExportedResources)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GetExportedResources::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetExportedResources::ArenaDtor(void* object) {
  GetExportedResources* _this = reinterpret_cast< GetExportedResources* >(object);
  (void)_this;
}
void GetExportedResources::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetExportedResources::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetExportedResources& GetExportedResources::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetExportedResources_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void GetExportedResources::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.GetExportedResources)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* GetExportedResources::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetExportedResources::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.GetExportedResources)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.GetExportedResources)
  return target;
}

size_t GetExportedResources::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.GetExportedResources)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetExportedResources::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetExportedResources*>(
      &from));
}

void GetExportedResources::MergeFrom(const GetExportedResources& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.GetExportedResources)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetExportedResources::CopyFrom(const GetExportedResources& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.GetExportedResources)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetExportedResources::IsInitialized() const {
  return true;
}

void GetExportedResources::InternalSwap(GetExportedResources* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string GetExportedResources::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.GetExportedResources";
}


// ===================================================================

void GetLastChange_Request::InitAsDefaultInstance() {
}
class GetLastChange_Request::_Internal {
 public:
};

GetLastChange_Request::GetLastChange_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.GetLastChange.Request)
}
GetLastChange_Request::GetLastChange_Request(const GetLastChange_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.GetLastChange.Request)
}

void GetLastChange_Request::SharedCtor() {
}

GetLastChange_Request::~GetLastChange_Request() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.GetLastChange.Request)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GetLastChange_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetLastChange_Request::ArenaDtor(void* object) {
  GetLastChange_Request* _this = reinterpret_cast< GetLastChange_Request* >(object);
  (void)_this;
}
void GetLastChange_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetLastChange_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetLastChange_Request& GetLastChange_Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetLastChange_Request_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void GetLastChange_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.GetLastChange.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* GetLastChange_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLastChange_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.GetLastChange.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.GetLastChange.Request)
  return target;
}

size_t GetLastChange_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.GetLastChange.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLastChange_Request::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetLastChange_Request*>(
      &from));
}

void GetLastChange_Request::MergeFrom(const GetLastChange_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.GetLastChange.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetLastChange_Request::CopyFrom(const GetLastChange_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.GetLastChange.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLastChange_Request::IsInitialized() const {
  return true;
}

void GetLastChange_Request::InternalSwap(GetLastChange_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string GetLastChange_Request::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.GetLastChange.Request";
}


// ===================================================================

void GetLastChange_Response::InitAsDefaultInstance() {
  ::Orthanc::DatabasePluginMessages::_GetLastChange_Response_default_instance_._instance.get_mutable()->change_ = const_cast< ::Orthanc::DatabasePluginMessages::ServerIndexChange*>(
      ::Orthanc::DatabasePluginMessages::ServerIndexChange::internal_default_instance());
}
class GetLastChange_Response::_Internal {
 public:
  static const ::Orthanc::DatabasePluginMessages::ServerIndexChange& change(const GetLastChange_Response* msg);
};

const ::Orthanc::DatabasePluginMessages::ServerIndexChange&
GetLastChange_Response::_Internal::change(const GetLastChange_Response* msg) {
  return *msg->change_;
}
GetLastChange_Response::GetLastChange_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.GetLastChange.Response)
}
GetLastChange_Response::GetLastChange_Response(const GetLastChange_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_change()) {
    change_ = new ::Orthanc::DatabasePluginMessages::ServerIndexChange(*from.change_);
  } else {
    change_ = nullptr;
  }
  found_ = from.found_;
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.GetLastChange.Response)
}

void GetLastChange_Response::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetLastChange_Response_OrthancDatabasePlugin_2eproto.base);
  ::memset(&change_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&found_) -
      reinterpret_cast<char*>(&change_)) + sizeof(found_));
}

GetLastChange_Response::~GetLastChange_Response() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.GetLastChange.Response)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GetLastChange_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete change_;
}

void GetLastChange_Response::ArenaDtor(void* object) {
  GetLastChange_Response* _this = reinterpret_cast< GetLastChange_Response* >(object);
  (void)_this;
}
void GetLastChange_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetLastChange_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetLastChange_Response& GetLastChange_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetLastChange_Response_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void GetLastChange_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.GetLastChange.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && change_ != nullptr) {
    delete change_;
  }
  change_ = nullptr;
  found_ = false;
  _internal_metadata_.Clear<std::string>();
}

const char* GetLastChange_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool found = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          found_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.ServerIndexChange change = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_change(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLastChange_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.GetLastChange.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool found = 1;
  if (this->found() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_found(), target);
  }

  // .Orthanc.DatabasePluginMessages.ServerIndexChange change = 2;
  if (this->has_change()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::change(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.GetLastChange.Response)
  return target;
}

size_t GetLastChange_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.GetLastChange.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Orthanc.DatabasePluginMessages.ServerIndexChange change = 2;
  if (this->has_change()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *change_);
  }

  // bool found = 1;
  if (this->found() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLastChange_Response::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetLastChange_Response*>(
      &from));
}

void GetLastChange_Response::MergeFrom(const GetLastChange_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.GetLastChange.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_change()) {
    _internal_mutable_change()->::Orthanc::DatabasePluginMessages::ServerIndexChange::MergeFrom(from._internal_change());
  }
  if (from.found() != 0) {
    _internal_set_found(from._internal_found());
  }
}

void GetLastChange_Response::CopyFrom(const GetLastChange_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.GetLastChange.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLastChange_Response::IsInitialized() const {
  return true;
}

void GetLastChange_Response::InternalSwap(GetLastChange_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetLastChange_Response, found_)
      + sizeof(GetLastChange_Response::found_)
      - PROTOBUF_FIELD_OFFSET(GetLastChange_Response, change_)>(
          reinterpret_cast<char*>(&change_),
          reinterpret_cast<char*>(&other->change_));
}

std::string GetLastChange_Response::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.GetLastChange.Response";
}


// ===================================================================

void GetLastChange::InitAsDefaultInstance() {
}
class GetLastChange::_Internal {
 public:
};

GetLastChange::GetLastChange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.GetLastChange)
}
GetLastChange::GetLastChange(const GetLastChange& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.GetLastChange)
}

void GetLastChange::SharedCtor() {
}

GetLastChange::~GetLastChange() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.GetLastChange)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GetLastChange::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetLastChange::ArenaDtor(void* object) {
  GetLastChange* _this = reinterpret_cast< GetLastChange* >(object);
  (void)_this;
}
void GetLastChange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetLastChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetLastChange& GetLastChange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetLastChange_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void GetLastChange::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.GetLastChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* GetLastChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLastChange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.GetLastChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.GetLastChange)
  return target;
}

size_t GetLastChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.GetLastChange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLastChange::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetLastChange*>(
      &from));
}

void GetLastChange::MergeFrom(const GetLastChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.GetLastChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetLastChange::CopyFrom(const GetLastChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.GetLastChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLastChange::IsInitialized() const {
  return true;
}

void GetLastChange::InternalSwap(GetLastChange* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string GetLastChange::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.GetLastChange";
}


// ===================================================================

void GetLastExportedResource_Request::InitAsDefaultInstance() {
}
class GetLastExportedResource_Request::_Internal {
 public:
};

GetLastExportedResource_Request::GetLastExportedResource_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.GetLastExportedResource.Request)
}
GetLastExportedResource_Request::GetLastExportedResource_Request(const GetLastExportedResource_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.GetLastExportedResource.Request)
}

void GetLastExportedResource_Request::SharedCtor() {
}

GetLastExportedResource_Request::~GetLastExportedResource_Request() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.GetLastExportedResource.Request)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GetLastExportedResource_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetLastExportedResource_Request::ArenaDtor(void* object) {
  GetLastExportedResource_Request* _this = reinterpret_cast< GetLastExportedResource_Request* >(object);
  (void)_this;
}
void GetLastExportedResource_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetLastExportedResource_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetLastExportedResource_Request& GetLastExportedResource_Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetLastExportedResource_Request_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void GetLastExportedResource_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.GetLastExportedResource.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* GetLastExportedResource_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLastExportedResource_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.GetLastExportedResource.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.GetLastExportedResource.Request)
  return target;
}

size_t GetLastExportedResource_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.GetLastExportedResource.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLastExportedResource_Request::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetLastExportedResource_Request*>(
      &from));
}

void GetLastExportedResource_Request::MergeFrom(const GetLastExportedResource_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.GetLastExportedResource.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetLastExportedResource_Request::CopyFrom(const GetLastExportedResource_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.GetLastExportedResource.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLastExportedResource_Request::IsInitialized() const {
  return true;
}

void GetLastExportedResource_Request::InternalSwap(GetLastExportedResource_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string GetLastExportedResource_Request::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.GetLastExportedResource.Request";
}


// ===================================================================

void GetLastExportedResource_Response::InitAsDefaultInstance() {
  ::Orthanc::DatabasePluginMessages::_GetLastExportedResource_Response_default_instance_._instance.get_mutable()->resource_ = const_cast< ::Orthanc::DatabasePluginMessages::ExportedResource*>(
      ::Orthanc::DatabasePluginMessages::ExportedResource::internal_default_instance());
}
class GetLastExportedResource_Response::_Internal {
 public:
  static const ::Orthanc::DatabasePluginMessages::ExportedResource& resource(const GetLastExportedResource_Response* msg);
};

const ::Orthanc::DatabasePluginMessages::ExportedResource&
GetLastExportedResource_Response::_Internal::resource(const GetLastExportedResource_Response* msg) {
  return *msg->resource_;
}
GetLastExportedResource_Response::GetLastExportedResource_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.GetLastExportedResource.Response)
}
GetLastExportedResource_Response::GetLastExportedResource_Response(const GetLastExportedResource_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_resource()) {
    resource_ = new ::Orthanc::DatabasePluginMessages::ExportedResource(*from.resource_);
  } else {
    resource_ = nullptr;
  }
  found_ = from.found_;
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.GetLastExportedResource.Response)
}

void GetLastExportedResource_Response::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetLastExportedResource_Response_OrthancDatabasePlugin_2eproto.base);
  ::memset(&resource_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&found_) -
      reinterpret_cast<char*>(&resource_)) + sizeof(found_));
}

GetLastExportedResource_Response::~GetLastExportedResource_Response() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.GetLastExportedResource.Response)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GetLastExportedResource_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete resource_;
}

void GetLastExportedResource_Response::ArenaDtor(void* object) {
  GetLastExportedResource_Response* _this = reinterpret_cast< GetLastExportedResource_Response* >(object);
  (void)_this;
}
void GetLastExportedResource_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetLastExportedResource_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetLastExportedResource_Response& GetLastExportedResource_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetLastExportedResource_Response_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void GetLastExportedResource_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.GetLastExportedResource.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && resource_ != nullptr) {
    delete resource_;
  }
  resource_ = nullptr;
  found_ = false;
  _internal_metadata_.Clear<std::string>();
}

const char* GetLastExportedResource_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool found = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          found_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.ExportedResource resource = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_resource(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLastExportedResource_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.GetLastExportedResource.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool found = 1;
  if (this->found() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_found(), target);
  }

  // .Orthanc.DatabasePluginMessages.ExportedResource resource = 2;
  if (this->has_resource()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::resource(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.GetLastExportedResource.Response)
  return target;
}

size_t GetLastExportedResource_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.GetLastExportedResource.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Orthanc.DatabasePluginMessages.ExportedResource resource = 2;
  if (this->has_resource()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *resource_);
  }

  // bool found = 1;
  if (this->found() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLastExportedResource_Response::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetLastExportedResource_Response*>(
      &from));
}

void GetLastExportedResource_Response::MergeFrom(const GetLastExportedResource_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.GetLastExportedResource.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_resource()) {
    _internal_mutable_resource()->::Orthanc::DatabasePluginMessages::ExportedResource::MergeFrom(from._internal_resource());
  }
  if (from.found() != 0) {
    _internal_set_found(from._internal_found());
  }
}

void GetLastExportedResource_Response::CopyFrom(const GetLastExportedResource_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.GetLastExportedResource.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLastExportedResource_Response::IsInitialized() const {
  return true;
}

void GetLastExportedResource_Response::InternalSwap(GetLastExportedResource_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetLastExportedResource_Response, found_)
      + sizeof(GetLastExportedResource_Response::found_)
      - PROTOBUF_FIELD_OFFSET(GetLastExportedResource_Response, resource_)>(
          reinterpret_cast<char*>(&resource_),
          reinterpret_cast<char*>(&other->resource_));
}

std::string GetLastExportedResource_Response::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.GetLastExportedResource.Response";
}


// ===================================================================

void GetLastExportedResource::InitAsDefaultInstance() {
}
class GetLastExportedResource::_Internal {
 public:
};

GetLastExportedResource::GetLastExportedResource(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.GetLastExportedResource)
}
GetLastExportedResource::GetLastExportedResource(const GetLastExportedResource& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.GetLastExportedResource)
}

void GetLastExportedResource::SharedCtor() {
}

GetLastExportedResource::~GetLastExportedResource() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.GetLastExportedResource)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GetLastExportedResource::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetLastExportedResource::ArenaDtor(void* object) {
  GetLastExportedResource* _this = reinterpret_cast< GetLastExportedResource* >(object);
  (void)_this;
}
void GetLastExportedResource::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetLastExportedResource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetLastExportedResource& GetLastExportedResource::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetLastExportedResource_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void GetLastExportedResource::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.GetLastExportedResource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* GetLastExportedResource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLastExportedResource::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.GetLastExportedResource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.GetLastExportedResource)
  return target;
}

size_t GetLastExportedResource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.GetLastExportedResource)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLastExportedResource::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetLastExportedResource*>(
      &from));
}

void GetLastExportedResource::MergeFrom(const GetLastExportedResource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.GetLastExportedResource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetLastExportedResource::CopyFrom(const GetLastExportedResource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.GetLastExportedResource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLastExportedResource::IsInitialized() const {
  return true;
}

void GetLastExportedResource::InternalSwap(GetLastExportedResource* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string GetLastExportedResource::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.GetLastExportedResource";
}


// ===================================================================

void GetMainDicomTags_Request::InitAsDefaultInstance() {
}
class GetMainDicomTags_Request::_Internal {
 public:
};

GetMainDicomTags_Request::GetMainDicomTags_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.GetMainDicomTags.Request)
}
GetMainDicomTags_Request::GetMainDicomTags_Request(const GetMainDicomTags_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.GetMainDicomTags.Request)
}

void GetMainDicomTags_Request::SharedCtor() {
  id_ = PROTOBUF_LONGLONG(0);
}

GetMainDicomTags_Request::~GetMainDicomTags_Request() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.GetMainDicomTags.Request)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GetMainDicomTags_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetMainDicomTags_Request::ArenaDtor(void* object) {
  GetMainDicomTags_Request* _this = reinterpret_cast< GetMainDicomTags_Request* >(object);
  (void)_this;
}
void GetMainDicomTags_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetMainDicomTags_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetMainDicomTags_Request& GetMainDicomTags_Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetMainDicomTags_Request_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void GetMainDicomTags_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.GetMainDicomTags.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<std::string>();
}

const char* GetMainDicomTags_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetMainDicomTags_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.GetMainDicomTags.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.GetMainDicomTags.Request)
  return target;
}

size_t GetMainDicomTags_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.GetMainDicomTags.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMainDicomTags_Request::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetMainDicomTags_Request*>(
      &from));
}

void GetMainDicomTags_Request::MergeFrom(const GetMainDicomTags_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.GetMainDicomTags.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void GetMainDicomTags_Request::CopyFrom(const GetMainDicomTags_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.GetMainDicomTags.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMainDicomTags_Request::IsInitialized() const {
  return true;
}

void GetMainDicomTags_Request::InternalSwap(GetMainDicomTags_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(id_, other->id_);
}

std::string GetMainDicomTags_Request::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.GetMainDicomTags.Request";
}


// ===================================================================

void GetMainDicomTags_Response_Tag::InitAsDefaultInstance() {
}
class GetMainDicomTags_Response_Tag::_Internal {
 public:
};

GetMainDicomTags_Response_Tag::GetMainDicomTags_Response_Tag(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.GetMainDicomTags.Response.Tag)
}
GetMainDicomTags_Response_Tag::GetMainDicomTags_Response_Tag(const GetMainDicomTags_Response_Tag& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  ::memcpy(&group_, &from.group_,
    static_cast<size_t>(reinterpret_cast<char*>(&element_) -
    reinterpret_cast<char*>(&group_)) + sizeof(element_));
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.GetMainDicomTags.Response.Tag)
}

void GetMainDicomTags_Response_Tag::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetMainDicomTags_Response_Tag_OrthancDatabasePlugin_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&group_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&element_) -
      reinterpret_cast<char*>(&group_)) + sizeof(element_));
}

GetMainDicomTags_Response_Tag::~GetMainDicomTags_Response_Tag() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.GetMainDicomTags.Response.Tag)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GetMainDicomTags_Response_Tag::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetMainDicomTags_Response_Tag::ArenaDtor(void* object) {
  GetMainDicomTags_Response_Tag* _this = reinterpret_cast< GetMainDicomTags_Response_Tag* >(object);
  (void)_this;
}
void GetMainDicomTags_Response_Tag::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetMainDicomTags_Response_Tag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetMainDicomTags_Response_Tag& GetMainDicomTags_Response_Tag::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetMainDicomTags_Response_Tag_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void GetMainDicomTags_Response_Tag::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.GetMainDicomTags.Response.Tag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&group_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&element_) -
      reinterpret_cast<char*>(&group_)) + sizeof(element_));
  _internal_metadata_.Clear<std::string>();
}

const char* GetMainDicomTags_Response_Tag::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 group = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 element = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          element_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetMainDicomTags_Response_Tag::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.GetMainDicomTags.Response.Tag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 group = 1;
  if (this->group() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_group(), target);
  }

  // uint32 element = 2;
  if (this->element() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_element(), target);
  }

  // string value = 3;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Orthanc.DatabasePluginMessages.GetMainDicomTags.Response.Tag.value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.GetMainDicomTags.Response.Tag)
  return target;
}

size_t GetMainDicomTags_Response_Tag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.GetMainDicomTags.Response.Tag)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // uint32 group = 1;
  if (this->group() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_group());
  }

  // uint32 element = 2;
  if (this->element() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_element());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMainDicomTags_Response_Tag::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetMainDicomTags_Response_Tag*>(
      &from));
}

void GetMainDicomTags_Response_Tag::MergeFrom(const GetMainDicomTags_Response_Tag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.GetMainDicomTags.Response.Tag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.group() != 0) {
    _internal_set_group(from._internal_group());
  }
  if (from.element() != 0) {
    _internal_set_element(from._internal_element());
  }
}

void GetMainDicomTags_Response_Tag::CopyFrom(const GetMainDicomTags_Response_Tag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.GetMainDicomTags.Response.Tag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMainDicomTags_Response_Tag::IsInitialized() const {
  return true;
}

void GetMainDicomTags_Response_Tag::InternalSwap(GetMainDicomTags_Response_Tag* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetMainDicomTags_Response_Tag, element_)
      + sizeof(GetMainDicomTags_Response_Tag::element_)
      - PROTOBUF_FIELD_OFFSET(GetMainDicomTags_Response_Tag, group_)>(
          reinterpret_cast<char*>(&group_),
          reinterpret_cast<char*>(&other->group_));
}

std::string GetMainDicomTags_Response_Tag::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.GetMainDicomTags.Response.Tag";
}


// ===================================================================

void GetMainDicomTags_Response::InitAsDefaultInstance() {
}
class GetMainDicomTags_Response::_Internal {
 public:
};

GetMainDicomTags_Response::GetMainDicomTags_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  tags_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.GetMainDicomTags.Response)
}
GetMainDicomTags_Response::GetMainDicomTags_Response(const GetMainDicomTags_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.GetMainDicomTags.Response)
}

void GetMainDicomTags_Response::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetMainDicomTags_Response_OrthancDatabasePlugin_2eproto.base);
}

GetMainDicomTags_Response::~GetMainDicomTags_Response() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.GetMainDicomTags.Response)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GetMainDicomTags_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetMainDicomTags_Response::ArenaDtor(void* object) {
  GetMainDicomTags_Response* _this = reinterpret_cast< GetMainDicomTags_Response* >(object);
  (void)_this;
}
void GetMainDicomTags_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetMainDicomTags_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetMainDicomTags_Response& GetMainDicomTags_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetMainDicomTags_Response_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void GetMainDicomTags_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.GetMainDicomTags.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GetMainDicomTags_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Orthanc.DatabasePluginMessages.GetMainDicomTags.Response.Tag tags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tags(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetMainDicomTags_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.GetMainDicomTags.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Orthanc.DatabasePluginMessages.GetMainDicomTags.Response.Tag tags = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tags_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_tags(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.GetMainDicomTags.Response)
  return target;
}

size_t GetMainDicomTags_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.GetMainDicomTags.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Orthanc.DatabasePluginMessages.GetMainDicomTags.Response.Tag tags = 1;
  total_size += 1UL * this->_internal_tags_size();
  for (const auto& msg : this->tags_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMainDicomTags_Response::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetMainDicomTags_Response*>(
      &from));
}

void GetMainDicomTags_Response::MergeFrom(const GetMainDicomTags_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.GetMainDicomTags.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
}

void GetMainDicomTags_Response::CopyFrom(const GetMainDicomTags_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.GetMainDicomTags.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMainDicomTags_Response::IsInitialized() const {
  return true;
}

void GetMainDicomTags_Response::InternalSwap(GetMainDicomTags_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  tags_.InternalSwap(&other->tags_);
}

std::string GetMainDicomTags_Response::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.GetMainDicomTags.Response";
}


// ===================================================================

void GetMainDicomTags::InitAsDefaultInstance() {
}
class GetMainDicomTags::_Internal {
 public:
};

GetMainDicomTags::GetMainDicomTags(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.GetMainDicomTags)
}
GetMainDicomTags::GetMainDicomTags(const GetMainDicomTags& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.GetMainDicomTags)
}

void GetMainDicomTags::SharedCtor() {
}

GetMainDicomTags::~GetMainDicomTags() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.GetMainDicomTags)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GetMainDicomTags::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetMainDicomTags::ArenaDtor(void* object) {
  GetMainDicomTags* _this = reinterpret_cast< GetMainDicomTags* >(object);
  (void)_this;
}
void GetMainDicomTags::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetMainDicomTags::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetMainDicomTags& GetMainDicomTags::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetMainDicomTags_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void GetMainDicomTags::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.GetMainDicomTags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* GetMainDicomTags::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetMainDicomTags::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.GetMainDicomTags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.GetMainDicomTags)
  return target;
}

size_t GetMainDicomTags::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.GetMainDicomTags)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMainDicomTags::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetMainDicomTags*>(
      &from));
}

void GetMainDicomTags::MergeFrom(const GetMainDicomTags& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.GetMainDicomTags)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetMainDicomTags::CopyFrom(const GetMainDicomTags& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.GetMainDicomTags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMainDicomTags::IsInitialized() const {
  return true;
}

void GetMainDicomTags::InternalSwap(GetMainDicomTags* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string GetMainDicomTags::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.GetMainDicomTags";
}


// ===================================================================

void GetPublicId_Request::InitAsDefaultInstance() {
}
class GetPublicId_Request::_Internal {
 public:
};

GetPublicId_Request::GetPublicId_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.GetPublicId.Request)
}
GetPublicId_Request::GetPublicId_Request(const GetPublicId_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.GetPublicId.Request)
}

void GetPublicId_Request::SharedCtor() {
  id_ = PROTOBUF_LONGLONG(0);
}

GetPublicId_Request::~GetPublicId_Request() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.GetPublicId.Request)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GetPublicId_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetPublicId_Request::ArenaDtor(void* object) {
  GetPublicId_Request* _this = reinterpret_cast< GetPublicId_Request* >(object);
  (void)_this;
}
void GetPublicId_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetPublicId_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetPublicId_Request& GetPublicId_Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetPublicId_Request_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void GetPublicId_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.GetPublicId.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<std::string>();
}

const char* GetPublicId_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPublicId_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.GetPublicId.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.GetPublicId.Request)
  return target;
}

size_t GetPublicId_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.GetPublicId.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPublicId_Request::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetPublicId_Request*>(
      &from));
}

void GetPublicId_Request::MergeFrom(const GetPublicId_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.GetPublicId.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void GetPublicId_Request::CopyFrom(const GetPublicId_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.GetPublicId.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPublicId_Request::IsInitialized() const {
  return true;
}

void GetPublicId_Request::InternalSwap(GetPublicId_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(id_, other->id_);
}

std::string GetPublicId_Request::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.GetPublicId.Request";
}


// ===================================================================

void GetPublicId_Response::InitAsDefaultInstance() {
}
class GetPublicId_Response::_Internal {
 public:
};

GetPublicId_Response::GetPublicId_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.GetPublicId.Response)
}
GetPublicId_Response::GetPublicId_Response(const GetPublicId_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.GetPublicId.Response)
}

void GetPublicId_Response::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetPublicId_Response_OrthancDatabasePlugin_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetPublicId_Response::~GetPublicId_Response() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.GetPublicId.Response)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GetPublicId_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetPublicId_Response::ArenaDtor(void* object) {
  GetPublicId_Response* _this = reinterpret_cast< GetPublicId_Response* >(object);
  (void)_this;
}
void GetPublicId_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetPublicId_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetPublicId_Response& GetPublicId_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetPublicId_Response_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void GetPublicId_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.GetPublicId.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<std::string>();
}

const char* GetPublicId_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPublicId_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.GetPublicId.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Orthanc.DatabasePluginMessages.GetPublicId.Response.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.GetPublicId.Response)
  return target;
}

size_t GetPublicId_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.GetPublicId.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPublicId_Response::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetPublicId_Response*>(
      &from));
}

void GetPublicId_Response::MergeFrom(const GetPublicId_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.GetPublicId.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void GetPublicId_Response::CopyFrom(const GetPublicId_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.GetPublicId.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPublicId_Response::IsInitialized() const {
  return true;
}

void GetPublicId_Response::InternalSwap(GetPublicId_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string GetPublicId_Response::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.GetPublicId.Response";
}


// ===================================================================

void GetPublicId::InitAsDefaultInstance() {
}
class GetPublicId::_Internal {
 public:
};

GetPublicId::GetPublicId(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.GetPublicId)
}
GetPublicId::GetPublicId(const GetPublicId& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.GetPublicId)
}

void GetPublicId::SharedCtor() {
}

GetPublicId::~GetPublicId() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.GetPublicId)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GetPublicId::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetPublicId::ArenaDtor(void* object) {
  GetPublicId* _this = reinterpret_cast< GetPublicId* >(object);
  (void)_this;
}
void GetPublicId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetPublicId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetPublicId& GetPublicId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetPublicId_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void GetPublicId::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.GetPublicId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* GetPublicId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPublicId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.GetPublicId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.GetPublicId)
  return target;
}

size_t GetPublicId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.GetPublicId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPublicId::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetPublicId*>(
      &from));
}

void GetPublicId::MergeFrom(const GetPublicId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.GetPublicId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetPublicId::CopyFrom(const GetPublicId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.GetPublicId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPublicId::IsInitialized() const {
  return true;
}

void GetPublicId::InternalSwap(GetPublicId* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string GetPublicId::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.GetPublicId";
}


// ===================================================================

void GetResourcesCount_Request::InitAsDefaultInstance() {
}
class GetResourcesCount_Request::_Internal {
 public:
};

GetResourcesCount_Request::GetResourcesCount_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.GetResourcesCount.Request)
}
GetResourcesCount_Request::GetResourcesCount_Request(const GetResourcesCount_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.GetResourcesCount.Request)
}

void GetResourcesCount_Request::SharedCtor() {
  type_ = 0;
}

GetResourcesCount_Request::~GetResourcesCount_Request() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.GetResourcesCount.Request)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GetResourcesCount_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetResourcesCount_Request::ArenaDtor(void* object) {
  GetResourcesCount_Request* _this = reinterpret_cast< GetResourcesCount_Request* >(object);
  (void)_this;
}
void GetResourcesCount_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetResourcesCount_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetResourcesCount_Request& GetResourcesCount_Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetResourcesCount_Request_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void GetResourcesCount_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.GetResourcesCount.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* GetResourcesCount_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Orthanc.DatabasePluginMessages.ResourceType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::Orthanc::DatabasePluginMessages::ResourceType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetResourcesCount_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.GetResourcesCount.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Orthanc.DatabasePluginMessages.ResourceType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.GetResourcesCount.Request)
  return target;
}

size_t GetResourcesCount_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.GetResourcesCount.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Orthanc.DatabasePluginMessages.ResourceType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetResourcesCount_Request::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetResourcesCount_Request*>(
      &from));
}

void GetResourcesCount_Request::MergeFrom(const GetResourcesCount_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.GetResourcesCount.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void GetResourcesCount_Request::CopyFrom(const GetResourcesCount_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.GetResourcesCount.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetResourcesCount_Request::IsInitialized() const {
  return true;
}

void GetResourcesCount_Request::InternalSwap(GetResourcesCount_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(type_, other->type_);
}

std::string GetResourcesCount_Request::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.GetResourcesCount.Request";
}


// ===================================================================

void GetResourcesCount_Response::InitAsDefaultInstance() {
}
class GetResourcesCount_Response::_Internal {
 public:
};

GetResourcesCount_Response::GetResourcesCount_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.GetResourcesCount.Response)
}
GetResourcesCount_Response::GetResourcesCount_Response(const GetResourcesCount_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.GetResourcesCount.Response)
}

void GetResourcesCount_Response::SharedCtor() {
  count_ = PROTOBUF_ULONGLONG(0);
}

GetResourcesCount_Response::~GetResourcesCount_Response() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.GetResourcesCount.Response)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GetResourcesCount_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetResourcesCount_Response::ArenaDtor(void* object) {
  GetResourcesCount_Response* _this = reinterpret_cast< GetResourcesCount_Response* >(object);
  (void)_this;
}
void GetResourcesCount_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetResourcesCount_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetResourcesCount_Response& GetResourcesCount_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetResourcesCount_Response_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void GetResourcesCount_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.GetResourcesCount.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  count_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<std::string>();
}

const char* GetResourcesCount_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetResourcesCount_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.GetResourcesCount.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 count = 1;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.GetResourcesCount.Response)
  return target;
}

size_t GetResourcesCount_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.GetResourcesCount.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 count = 1;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetResourcesCount_Response::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetResourcesCount_Response*>(
      &from));
}

void GetResourcesCount_Response::MergeFrom(const GetResourcesCount_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.GetResourcesCount.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void GetResourcesCount_Response::CopyFrom(const GetResourcesCount_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.GetResourcesCount.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetResourcesCount_Response::IsInitialized() const {
  return true;
}

void GetResourcesCount_Response::InternalSwap(GetResourcesCount_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(count_, other->count_);
}

std::string GetResourcesCount_Response::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.GetResourcesCount.Response";
}


// ===================================================================

void GetResourcesCount::InitAsDefaultInstance() {
}
class GetResourcesCount::_Internal {
 public:
};

GetResourcesCount::GetResourcesCount(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.GetResourcesCount)
}
GetResourcesCount::GetResourcesCount(const GetResourcesCount& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.GetResourcesCount)
}

void GetResourcesCount::SharedCtor() {
}

GetResourcesCount::~GetResourcesCount() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.GetResourcesCount)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GetResourcesCount::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetResourcesCount::ArenaDtor(void* object) {
  GetResourcesCount* _this = reinterpret_cast< GetResourcesCount* >(object);
  (void)_this;
}
void GetResourcesCount::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetResourcesCount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetResourcesCount& GetResourcesCount::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetResourcesCount_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void GetResourcesCount::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.GetResourcesCount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* GetResourcesCount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetResourcesCount::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.GetResourcesCount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.GetResourcesCount)
  return target;
}

size_t GetResourcesCount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.GetResourcesCount)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetResourcesCount::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetResourcesCount*>(
      &from));
}

void GetResourcesCount::MergeFrom(const GetResourcesCount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.GetResourcesCount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetResourcesCount::CopyFrom(const GetResourcesCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.GetResourcesCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetResourcesCount::IsInitialized() const {
  return true;
}

void GetResourcesCount::InternalSwap(GetResourcesCount* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string GetResourcesCount::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.GetResourcesCount";
}


// ===================================================================

void GetResourceType_Request::InitAsDefaultInstance() {
}
class GetResourceType_Request::_Internal {
 public:
};

GetResourceType_Request::GetResourceType_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.GetResourceType.Request)
}
GetResourceType_Request::GetResourceType_Request(const GetResourceType_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.GetResourceType.Request)
}

void GetResourceType_Request::SharedCtor() {
  id_ = PROTOBUF_LONGLONG(0);
}

GetResourceType_Request::~GetResourceType_Request() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.GetResourceType.Request)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GetResourceType_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetResourceType_Request::ArenaDtor(void* object) {
  GetResourceType_Request* _this = reinterpret_cast< GetResourceType_Request* >(object);
  (void)_this;
}
void GetResourceType_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetResourceType_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetResourceType_Request& GetResourceType_Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetResourceType_Request_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void GetResourceType_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.GetResourceType.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<std::string>();
}

const char* GetResourceType_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetResourceType_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.GetResourceType.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.GetResourceType.Request)
  return target;
}

size_t GetResourceType_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.GetResourceType.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetResourceType_Request::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetResourceType_Request*>(
      &from));
}

void GetResourceType_Request::MergeFrom(const GetResourceType_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.GetResourceType.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void GetResourceType_Request::CopyFrom(const GetResourceType_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.GetResourceType.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetResourceType_Request::IsInitialized() const {
  return true;
}

void GetResourceType_Request::InternalSwap(GetResourceType_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(id_, other->id_);
}

std::string GetResourceType_Request::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.GetResourceType.Request";
}


// ===================================================================

void GetResourceType_Response::InitAsDefaultInstance() {
}
class GetResourceType_Response::_Internal {
 public:
};

GetResourceType_Response::GetResourceType_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.GetResourceType.Response)
}
GetResourceType_Response::GetResourceType_Response(const GetResourceType_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.GetResourceType.Response)
}

void GetResourceType_Response::SharedCtor() {
  type_ = 0;
}

GetResourceType_Response::~GetResourceType_Response() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.GetResourceType.Response)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GetResourceType_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetResourceType_Response::ArenaDtor(void* object) {
  GetResourceType_Response* _this = reinterpret_cast< GetResourceType_Response* >(object);
  (void)_this;
}
void GetResourceType_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetResourceType_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetResourceType_Response& GetResourceType_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetResourceType_Response_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void GetResourceType_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.GetResourceType.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* GetResourceType_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Orthanc.DatabasePluginMessages.ResourceType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::Orthanc::DatabasePluginMessages::ResourceType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetResourceType_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.GetResourceType.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Orthanc.DatabasePluginMessages.ResourceType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.GetResourceType.Response)
  return target;
}

size_t GetResourceType_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.GetResourceType.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Orthanc.DatabasePluginMessages.ResourceType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetResourceType_Response::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetResourceType_Response*>(
      &from));
}

void GetResourceType_Response::MergeFrom(const GetResourceType_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.GetResourceType.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void GetResourceType_Response::CopyFrom(const GetResourceType_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.GetResourceType.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetResourceType_Response::IsInitialized() const {
  return true;
}

void GetResourceType_Response::InternalSwap(GetResourceType_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(type_, other->type_);
}

std::string GetResourceType_Response::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.GetResourceType.Response";
}


// ===================================================================

void GetResourceType::InitAsDefaultInstance() {
}
class GetResourceType::_Internal {
 public:
};

GetResourceType::GetResourceType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.GetResourceType)
}
GetResourceType::GetResourceType(const GetResourceType& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.GetResourceType)
}

void GetResourceType::SharedCtor() {
}

GetResourceType::~GetResourceType() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.GetResourceType)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GetResourceType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetResourceType::ArenaDtor(void* object) {
  GetResourceType* _this = reinterpret_cast< GetResourceType* >(object);
  (void)_this;
}
void GetResourceType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetResourceType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetResourceType& GetResourceType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetResourceType_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void GetResourceType::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.GetResourceType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* GetResourceType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetResourceType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.GetResourceType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.GetResourceType)
  return target;
}

size_t GetResourceType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.GetResourceType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetResourceType::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetResourceType*>(
      &from));
}

void GetResourceType::MergeFrom(const GetResourceType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.GetResourceType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetResourceType::CopyFrom(const GetResourceType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.GetResourceType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetResourceType::IsInitialized() const {
  return true;
}

void GetResourceType::InternalSwap(GetResourceType* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string GetResourceType::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.GetResourceType";
}


// ===================================================================

void GetTotalCompressedSize_Request::InitAsDefaultInstance() {
}
class GetTotalCompressedSize_Request::_Internal {
 public:
};

GetTotalCompressedSize_Request::GetTotalCompressedSize_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.GetTotalCompressedSize.Request)
}
GetTotalCompressedSize_Request::GetTotalCompressedSize_Request(const GetTotalCompressedSize_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.GetTotalCompressedSize.Request)
}

void GetTotalCompressedSize_Request::SharedCtor() {
}

GetTotalCompressedSize_Request::~GetTotalCompressedSize_Request() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.GetTotalCompressedSize.Request)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GetTotalCompressedSize_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetTotalCompressedSize_Request::ArenaDtor(void* object) {
  GetTotalCompressedSize_Request* _this = reinterpret_cast< GetTotalCompressedSize_Request* >(object);
  (void)_this;
}
void GetTotalCompressedSize_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetTotalCompressedSize_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetTotalCompressedSize_Request& GetTotalCompressedSize_Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetTotalCompressedSize_Request_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void GetTotalCompressedSize_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.GetTotalCompressedSize.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* GetTotalCompressedSize_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTotalCompressedSize_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.GetTotalCompressedSize.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.GetTotalCompressedSize.Request)
  return target;
}

size_t GetTotalCompressedSize_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.GetTotalCompressedSize.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTotalCompressedSize_Request::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetTotalCompressedSize_Request*>(
      &from));
}

void GetTotalCompressedSize_Request::MergeFrom(const GetTotalCompressedSize_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.GetTotalCompressedSize.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetTotalCompressedSize_Request::CopyFrom(const GetTotalCompressedSize_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.GetTotalCompressedSize.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTotalCompressedSize_Request::IsInitialized() const {
  return true;
}

void GetTotalCompressedSize_Request::InternalSwap(GetTotalCompressedSize_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string GetTotalCompressedSize_Request::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.GetTotalCompressedSize.Request";
}


// ===================================================================

void GetTotalCompressedSize_Response::InitAsDefaultInstance() {
}
class GetTotalCompressedSize_Response::_Internal {
 public:
};

GetTotalCompressedSize_Response::GetTotalCompressedSize_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.GetTotalCompressedSize.Response)
}
GetTotalCompressedSize_Response::GetTotalCompressedSize_Response(const GetTotalCompressedSize_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.GetTotalCompressedSize.Response)
}

void GetTotalCompressedSize_Response::SharedCtor() {
  size_ = PROTOBUF_ULONGLONG(0);
}

GetTotalCompressedSize_Response::~GetTotalCompressedSize_Response() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.GetTotalCompressedSize.Response)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GetTotalCompressedSize_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetTotalCompressedSize_Response::ArenaDtor(void* object) {
  GetTotalCompressedSize_Response* _this = reinterpret_cast< GetTotalCompressedSize_Response* >(object);
  (void)_this;
}
void GetTotalCompressedSize_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetTotalCompressedSize_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetTotalCompressedSize_Response& GetTotalCompressedSize_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetTotalCompressedSize_Response_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void GetTotalCompressedSize_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.GetTotalCompressedSize.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  size_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<std::string>();
}

const char* GetTotalCompressedSize_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTotalCompressedSize_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.GetTotalCompressedSize.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 size = 1;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.GetTotalCompressedSize.Response)
  return target;
}

size_t GetTotalCompressedSize_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.GetTotalCompressedSize.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 size = 1;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTotalCompressedSize_Response::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetTotalCompressedSize_Response*>(
      &from));
}

void GetTotalCompressedSize_Response::MergeFrom(const GetTotalCompressedSize_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.GetTotalCompressedSize.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
}

void GetTotalCompressedSize_Response::CopyFrom(const GetTotalCompressedSize_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.GetTotalCompressedSize.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTotalCompressedSize_Response::IsInitialized() const {
  return true;
}

void GetTotalCompressedSize_Response::InternalSwap(GetTotalCompressedSize_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(size_, other->size_);
}

std::string GetTotalCompressedSize_Response::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.GetTotalCompressedSize.Response";
}


// ===================================================================

void GetTotalCompressedSize::InitAsDefaultInstance() {
}
class GetTotalCompressedSize::_Internal {
 public:
};

GetTotalCompressedSize::GetTotalCompressedSize(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.GetTotalCompressedSize)
}
GetTotalCompressedSize::GetTotalCompressedSize(const GetTotalCompressedSize& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.GetTotalCompressedSize)
}

void GetTotalCompressedSize::SharedCtor() {
}

GetTotalCompressedSize::~GetTotalCompressedSize() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.GetTotalCompressedSize)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GetTotalCompressedSize::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetTotalCompressedSize::ArenaDtor(void* object) {
  GetTotalCompressedSize* _this = reinterpret_cast< GetTotalCompressedSize* >(object);
  (void)_this;
}
void GetTotalCompressedSize::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetTotalCompressedSize::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetTotalCompressedSize& GetTotalCompressedSize::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetTotalCompressedSize_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void GetTotalCompressedSize::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.GetTotalCompressedSize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* GetTotalCompressedSize::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTotalCompressedSize::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.GetTotalCompressedSize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.GetTotalCompressedSize)
  return target;
}

size_t GetTotalCompressedSize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.GetTotalCompressedSize)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTotalCompressedSize::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetTotalCompressedSize*>(
      &from));
}

void GetTotalCompressedSize::MergeFrom(const GetTotalCompressedSize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.GetTotalCompressedSize)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetTotalCompressedSize::CopyFrom(const GetTotalCompressedSize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.GetTotalCompressedSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTotalCompressedSize::IsInitialized() const {
  return true;
}

void GetTotalCompressedSize::InternalSwap(GetTotalCompressedSize* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string GetTotalCompressedSize::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.GetTotalCompressedSize";
}


// ===================================================================

void GetTotalUncompressedSize_Request::InitAsDefaultInstance() {
}
class GetTotalUncompressedSize_Request::_Internal {
 public:
};

GetTotalUncompressedSize_Request::GetTotalUncompressedSize_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.GetTotalUncompressedSize.Request)
}
GetTotalUncompressedSize_Request::GetTotalUncompressedSize_Request(const GetTotalUncompressedSize_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.GetTotalUncompressedSize.Request)
}

void GetTotalUncompressedSize_Request::SharedCtor() {
}

GetTotalUncompressedSize_Request::~GetTotalUncompressedSize_Request() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.GetTotalUncompressedSize.Request)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GetTotalUncompressedSize_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetTotalUncompressedSize_Request::ArenaDtor(void* object) {
  GetTotalUncompressedSize_Request* _this = reinterpret_cast< GetTotalUncompressedSize_Request* >(object);
  (void)_this;
}
void GetTotalUncompressedSize_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetTotalUncompressedSize_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetTotalUncompressedSize_Request& GetTotalUncompressedSize_Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetTotalUncompressedSize_Request_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void GetTotalUncompressedSize_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.GetTotalUncompressedSize.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* GetTotalUncompressedSize_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTotalUncompressedSize_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.GetTotalUncompressedSize.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.GetTotalUncompressedSize.Request)
  return target;
}

size_t GetTotalUncompressedSize_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.GetTotalUncompressedSize.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTotalUncompressedSize_Request::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetTotalUncompressedSize_Request*>(
      &from));
}

void GetTotalUncompressedSize_Request::MergeFrom(const GetTotalUncompressedSize_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.GetTotalUncompressedSize.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetTotalUncompressedSize_Request::CopyFrom(const GetTotalUncompressedSize_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.GetTotalUncompressedSize.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTotalUncompressedSize_Request::IsInitialized() const {
  return true;
}

void GetTotalUncompressedSize_Request::InternalSwap(GetTotalUncompressedSize_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string GetTotalUncompressedSize_Request::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.GetTotalUncompressedSize.Request";
}


// ===================================================================

void GetTotalUncompressedSize_Response::InitAsDefaultInstance() {
}
class GetTotalUncompressedSize_Response::_Internal {
 public:
};

GetTotalUncompressedSize_Response::GetTotalUncompressedSize_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.GetTotalUncompressedSize.Response)
}
GetTotalUncompressedSize_Response::GetTotalUncompressedSize_Response(const GetTotalUncompressedSize_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.GetTotalUncompressedSize.Response)
}

void GetTotalUncompressedSize_Response::SharedCtor() {
  size_ = PROTOBUF_ULONGLONG(0);
}

GetTotalUncompressedSize_Response::~GetTotalUncompressedSize_Response() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.GetTotalUncompressedSize.Response)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GetTotalUncompressedSize_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetTotalUncompressedSize_Response::ArenaDtor(void* object) {
  GetTotalUncompressedSize_Response* _this = reinterpret_cast< GetTotalUncompressedSize_Response* >(object);
  (void)_this;
}
void GetTotalUncompressedSize_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetTotalUncompressedSize_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetTotalUncompressedSize_Response& GetTotalUncompressedSize_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetTotalUncompressedSize_Response_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void GetTotalUncompressedSize_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.GetTotalUncompressedSize.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  size_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<std::string>();
}

const char* GetTotalUncompressedSize_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTotalUncompressedSize_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.GetTotalUncompressedSize.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 size = 1;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.GetTotalUncompressedSize.Response)
  return target;
}

size_t GetTotalUncompressedSize_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.GetTotalUncompressedSize.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 size = 1;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTotalUncompressedSize_Response::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetTotalUncompressedSize_Response*>(
      &from));
}

void GetTotalUncompressedSize_Response::MergeFrom(const GetTotalUncompressedSize_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.GetTotalUncompressedSize.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
}

void GetTotalUncompressedSize_Response::CopyFrom(const GetTotalUncompressedSize_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.GetTotalUncompressedSize.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTotalUncompressedSize_Response::IsInitialized() const {
  return true;
}

void GetTotalUncompressedSize_Response::InternalSwap(GetTotalUncompressedSize_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(size_, other->size_);
}

std::string GetTotalUncompressedSize_Response::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.GetTotalUncompressedSize.Response";
}


// ===================================================================

void GetTotalUncompressedSize::InitAsDefaultInstance() {
}
class GetTotalUncompressedSize::_Internal {
 public:
};

GetTotalUncompressedSize::GetTotalUncompressedSize(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.GetTotalUncompressedSize)
}
GetTotalUncompressedSize::GetTotalUncompressedSize(const GetTotalUncompressedSize& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.GetTotalUncompressedSize)
}

void GetTotalUncompressedSize::SharedCtor() {
}

GetTotalUncompressedSize::~GetTotalUncompressedSize() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.GetTotalUncompressedSize)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GetTotalUncompressedSize::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetTotalUncompressedSize::ArenaDtor(void* object) {
  GetTotalUncompressedSize* _this = reinterpret_cast< GetTotalUncompressedSize* >(object);
  (void)_this;
}
void GetTotalUncompressedSize::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetTotalUncompressedSize::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetTotalUncompressedSize& GetTotalUncompressedSize::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetTotalUncompressedSize_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void GetTotalUncompressedSize::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.GetTotalUncompressedSize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* GetTotalUncompressedSize::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTotalUncompressedSize::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.GetTotalUncompressedSize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.GetTotalUncompressedSize)
  return target;
}

size_t GetTotalUncompressedSize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.GetTotalUncompressedSize)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTotalUncompressedSize::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetTotalUncompressedSize*>(
      &from));
}

void GetTotalUncompressedSize::MergeFrom(const GetTotalUncompressedSize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.GetTotalUncompressedSize)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetTotalUncompressedSize::CopyFrom(const GetTotalUncompressedSize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.GetTotalUncompressedSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTotalUncompressedSize::IsInitialized() const {
  return true;
}

void GetTotalUncompressedSize::InternalSwap(GetTotalUncompressedSize* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string GetTotalUncompressedSize::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.GetTotalUncompressedSize";
}


// ===================================================================

void IsProtectedPatient_Request::InitAsDefaultInstance() {
}
class IsProtectedPatient_Request::_Internal {
 public:
};

IsProtectedPatient_Request::IsProtectedPatient_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.IsProtectedPatient.Request)
}
IsProtectedPatient_Request::IsProtectedPatient_Request(const IsProtectedPatient_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  patient_id_ = from.patient_id_;
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.IsProtectedPatient.Request)
}

void IsProtectedPatient_Request::SharedCtor() {
  patient_id_ = PROTOBUF_LONGLONG(0);
}

IsProtectedPatient_Request::~IsProtectedPatient_Request() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.IsProtectedPatient.Request)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void IsProtectedPatient_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IsProtectedPatient_Request::ArenaDtor(void* object) {
  IsProtectedPatient_Request* _this = reinterpret_cast< IsProtectedPatient_Request* >(object);
  (void)_this;
}
void IsProtectedPatient_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IsProtectedPatient_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IsProtectedPatient_Request& IsProtectedPatient_Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IsProtectedPatient_Request_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void IsProtectedPatient_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.IsProtectedPatient.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  patient_id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<std::string>();
}

const char* IsProtectedPatient_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 patient_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          patient_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IsProtectedPatient_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.IsProtectedPatient.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 patient_id = 1;
  if (this->patient_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_patient_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.IsProtectedPatient.Request)
  return target;
}

size_t IsProtectedPatient_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.IsProtectedPatient.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 patient_id = 1;
  if (this->patient_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_patient_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IsProtectedPatient_Request::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IsProtectedPatient_Request*>(
      &from));
}

void IsProtectedPatient_Request::MergeFrom(const IsProtectedPatient_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.IsProtectedPatient.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.patient_id() != 0) {
    _internal_set_patient_id(from._internal_patient_id());
  }
}

void IsProtectedPatient_Request::CopyFrom(const IsProtectedPatient_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.IsProtectedPatient.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsProtectedPatient_Request::IsInitialized() const {
  return true;
}

void IsProtectedPatient_Request::InternalSwap(IsProtectedPatient_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(patient_id_, other->patient_id_);
}

std::string IsProtectedPatient_Request::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.IsProtectedPatient.Request";
}


// ===================================================================

void IsProtectedPatient_Response::InitAsDefaultInstance() {
}
class IsProtectedPatient_Response::_Internal {
 public:
};

IsProtectedPatient_Response::IsProtectedPatient_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.IsProtectedPatient.Response)
}
IsProtectedPatient_Response::IsProtectedPatient_Response(const IsProtectedPatient_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  protected_patient_ = from.protected_patient_;
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.IsProtectedPatient.Response)
}

void IsProtectedPatient_Response::SharedCtor() {
  protected_patient_ = false;
}

IsProtectedPatient_Response::~IsProtectedPatient_Response() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.IsProtectedPatient.Response)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void IsProtectedPatient_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IsProtectedPatient_Response::ArenaDtor(void* object) {
  IsProtectedPatient_Response* _this = reinterpret_cast< IsProtectedPatient_Response* >(object);
  (void)_this;
}
void IsProtectedPatient_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IsProtectedPatient_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IsProtectedPatient_Response& IsProtectedPatient_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IsProtectedPatient_Response_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void IsProtectedPatient_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.IsProtectedPatient.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  protected_patient_ = false;
  _internal_metadata_.Clear<std::string>();
}

const char* IsProtectedPatient_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool protected_patient = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          protected_patient_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IsProtectedPatient_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.IsProtectedPatient.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool protected_patient = 1;
  if (this->protected_patient() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_protected_patient(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.IsProtectedPatient.Response)
  return target;
}

size_t IsProtectedPatient_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.IsProtectedPatient.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool protected_patient = 1;
  if (this->protected_patient() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IsProtectedPatient_Response::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IsProtectedPatient_Response*>(
      &from));
}

void IsProtectedPatient_Response::MergeFrom(const IsProtectedPatient_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.IsProtectedPatient.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.protected_patient() != 0) {
    _internal_set_protected_patient(from._internal_protected_patient());
  }
}

void IsProtectedPatient_Response::CopyFrom(const IsProtectedPatient_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.IsProtectedPatient.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsProtectedPatient_Response::IsInitialized() const {
  return true;
}

void IsProtectedPatient_Response::InternalSwap(IsProtectedPatient_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(protected_patient_, other->protected_patient_);
}

std::string IsProtectedPatient_Response::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.IsProtectedPatient.Response";
}


// ===================================================================

void IsProtectedPatient::InitAsDefaultInstance() {
}
class IsProtectedPatient::_Internal {
 public:
};

IsProtectedPatient::IsProtectedPatient(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.IsProtectedPatient)
}
IsProtectedPatient::IsProtectedPatient(const IsProtectedPatient& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.IsProtectedPatient)
}

void IsProtectedPatient::SharedCtor() {
}

IsProtectedPatient::~IsProtectedPatient() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.IsProtectedPatient)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void IsProtectedPatient::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IsProtectedPatient::ArenaDtor(void* object) {
  IsProtectedPatient* _this = reinterpret_cast< IsProtectedPatient* >(object);
  (void)_this;
}
void IsProtectedPatient::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IsProtectedPatient::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IsProtectedPatient& IsProtectedPatient::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IsProtectedPatient_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void IsProtectedPatient::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.IsProtectedPatient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* IsProtectedPatient::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IsProtectedPatient::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.IsProtectedPatient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.IsProtectedPatient)
  return target;
}

size_t IsProtectedPatient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.IsProtectedPatient)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IsProtectedPatient::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IsProtectedPatient*>(
      &from));
}

void IsProtectedPatient::MergeFrom(const IsProtectedPatient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.IsProtectedPatient)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void IsProtectedPatient::CopyFrom(const IsProtectedPatient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.IsProtectedPatient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsProtectedPatient::IsInitialized() const {
  return true;
}

void IsProtectedPatient::InternalSwap(IsProtectedPatient* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string IsProtectedPatient::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.IsProtectedPatient";
}


// ===================================================================

void ListAvailableAttachments_Request::InitAsDefaultInstance() {
}
class ListAvailableAttachments_Request::_Internal {
 public:
};

ListAvailableAttachments_Request::ListAvailableAttachments_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.ListAvailableAttachments.Request)
}
ListAvailableAttachments_Request::ListAvailableAttachments_Request(const ListAvailableAttachments_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.ListAvailableAttachments.Request)
}

void ListAvailableAttachments_Request::SharedCtor() {
  id_ = PROTOBUF_LONGLONG(0);
}

ListAvailableAttachments_Request::~ListAvailableAttachments_Request() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.ListAvailableAttachments.Request)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ListAvailableAttachments_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListAvailableAttachments_Request::ArenaDtor(void* object) {
  ListAvailableAttachments_Request* _this = reinterpret_cast< ListAvailableAttachments_Request* >(object);
  (void)_this;
}
void ListAvailableAttachments_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListAvailableAttachments_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListAvailableAttachments_Request& ListAvailableAttachments_Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListAvailableAttachments_Request_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void ListAvailableAttachments_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.ListAvailableAttachments.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<std::string>();
}

const char* ListAvailableAttachments_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListAvailableAttachments_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.ListAvailableAttachments.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.ListAvailableAttachments.Request)
  return target;
}

size_t ListAvailableAttachments_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.ListAvailableAttachments.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListAvailableAttachments_Request::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ListAvailableAttachments_Request*>(
      &from));
}

void ListAvailableAttachments_Request::MergeFrom(const ListAvailableAttachments_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.ListAvailableAttachments.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void ListAvailableAttachments_Request::CopyFrom(const ListAvailableAttachments_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.ListAvailableAttachments.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListAvailableAttachments_Request::IsInitialized() const {
  return true;
}

void ListAvailableAttachments_Request::InternalSwap(ListAvailableAttachments_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(id_, other->id_);
}

std::string ListAvailableAttachments_Request::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.ListAvailableAttachments.Request";
}


// ===================================================================

void ListAvailableAttachments_Response::InitAsDefaultInstance() {
}
class ListAvailableAttachments_Response::_Internal {
 public:
};

ListAvailableAttachments_Response::ListAvailableAttachments_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  attachments_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.ListAvailableAttachments.Response)
}
ListAvailableAttachments_Response::ListAvailableAttachments_Response(const ListAvailableAttachments_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      attachments_(from.attachments_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.ListAvailableAttachments.Response)
}

void ListAvailableAttachments_Response::SharedCtor() {
}

ListAvailableAttachments_Response::~ListAvailableAttachments_Response() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.ListAvailableAttachments.Response)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ListAvailableAttachments_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListAvailableAttachments_Response::ArenaDtor(void* object) {
  ListAvailableAttachments_Response* _this = reinterpret_cast< ListAvailableAttachments_Response* >(object);
  (void)_this;
}
void ListAvailableAttachments_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListAvailableAttachments_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListAvailableAttachments_Response& ListAvailableAttachments_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListAvailableAttachments_Response_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void ListAvailableAttachments_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.ListAvailableAttachments.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attachments_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ListAvailableAttachments_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 attachments = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_attachments(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_attachments(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListAvailableAttachments_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.ListAvailableAttachments.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 attachments = 1;
  {
    int byte_size = _attachments_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_attachments(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.ListAvailableAttachments.Response)
  return target;
}

size_t ListAvailableAttachments_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.ListAvailableAttachments.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 attachments = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->attachments_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _attachments_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListAvailableAttachments_Response::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ListAvailableAttachments_Response*>(
      &from));
}

void ListAvailableAttachments_Response::MergeFrom(const ListAvailableAttachments_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.ListAvailableAttachments.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attachments_.MergeFrom(from.attachments_);
}

void ListAvailableAttachments_Response::CopyFrom(const ListAvailableAttachments_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.ListAvailableAttachments.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListAvailableAttachments_Response::IsInitialized() const {
  return true;
}

void ListAvailableAttachments_Response::InternalSwap(ListAvailableAttachments_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  attachments_.InternalSwap(&other->attachments_);
}

std::string ListAvailableAttachments_Response::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.ListAvailableAttachments.Response";
}


// ===================================================================

void ListAvailableAttachments::InitAsDefaultInstance() {
}
class ListAvailableAttachments::_Internal {
 public:
};

ListAvailableAttachments::ListAvailableAttachments(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.ListAvailableAttachments)
}
ListAvailableAttachments::ListAvailableAttachments(const ListAvailableAttachments& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.ListAvailableAttachments)
}

void ListAvailableAttachments::SharedCtor() {
}

ListAvailableAttachments::~ListAvailableAttachments() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.ListAvailableAttachments)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ListAvailableAttachments::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListAvailableAttachments::ArenaDtor(void* object) {
  ListAvailableAttachments* _this = reinterpret_cast< ListAvailableAttachments* >(object);
  (void)_this;
}
void ListAvailableAttachments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListAvailableAttachments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListAvailableAttachments& ListAvailableAttachments::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListAvailableAttachments_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void ListAvailableAttachments::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.ListAvailableAttachments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* ListAvailableAttachments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListAvailableAttachments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.ListAvailableAttachments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.ListAvailableAttachments)
  return target;
}

size_t ListAvailableAttachments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.ListAvailableAttachments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListAvailableAttachments::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ListAvailableAttachments*>(
      &from));
}

void ListAvailableAttachments::MergeFrom(const ListAvailableAttachments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.ListAvailableAttachments)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ListAvailableAttachments::CopyFrom(const ListAvailableAttachments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.ListAvailableAttachments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListAvailableAttachments::IsInitialized() const {
  return true;
}

void ListAvailableAttachments::InternalSwap(ListAvailableAttachments* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string ListAvailableAttachments::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.ListAvailableAttachments";
}


// ===================================================================

void LogChange_Request::InitAsDefaultInstance() {
}
class LogChange_Request::_Internal {
 public:
};

LogChange_Request::LogChange_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.LogChange.Request)
}
LogChange_Request::LogChange_Request(const LogChange_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_date().empty()) {
    date_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_date(),
      GetArena());
  }
  ::memcpy(&change_type_, &from.change_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&resource_id_) -
    reinterpret_cast<char*>(&change_type_)) + sizeof(resource_id_));
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.LogChange.Request)
}

void LogChange_Request::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogChange_Request_OrthancDatabasePlugin_2eproto.base);
  date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&change_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resource_id_) -
      reinterpret_cast<char*>(&change_type_)) + sizeof(resource_id_));
}

LogChange_Request::~LogChange_Request() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.LogChange.Request)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void LogChange_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LogChange_Request::ArenaDtor(void* object) {
  LogChange_Request* _this = reinterpret_cast< LogChange_Request* >(object);
  (void)_this;
}
void LogChange_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogChange_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogChange_Request& LogChange_Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogChange_Request_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void LogChange_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.LogChange.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&change_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resource_id_) -
      reinterpret_cast<char*>(&change_type_)) + sizeof(resource_id_));
  _internal_metadata_.Clear<std::string>();
}

const char* LogChange_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 change_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          change_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.ResourceType resource_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_resource_type(static_cast<::Orthanc::DatabasePluginMessages::ResourceType>(val));
        } else goto handle_unusual;
        continue;
      // int64 resource_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          resource_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string date = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogChange_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.LogChange.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 change_type = 1;
  if (this->change_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_change_type(), target);
  }

  // .Orthanc.DatabasePluginMessages.ResourceType resource_type = 2;
  if (this->resource_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_resource_type(), target);
  }

  // int64 resource_id = 3;
  if (this->resource_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_resource_id(), target);
  }

  // string date = 4;
  if (this->date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_date().data(), static_cast<int>(this->_internal_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Orthanc.DatabasePluginMessages.LogChange.Request.date");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_date(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.LogChange.Request)
  return target;
}

size_t LogChange_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.LogChange.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string date = 4;
  if (this->date().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_date());
  }

  // int32 change_type = 1;
  if (this->change_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_change_type());
  }

  // .Orthanc.DatabasePluginMessages.ResourceType resource_type = 2;
  if (this->resource_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_resource_type());
  }

  // int64 resource_id = 3;
  if (this->resource_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_resource_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogChange_Request::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LogChange_Request*>(
      &from));
}

void LogChange_Request::MergeFrom(const LogChange_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.LogChange.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.date().size() > 0) {
    _internal_set_date(from._internal_date());
  }
  if (from.change_type() != 0) {
    _internal_set_change_type(from._internal_change_type());
  }
  if (from.resource_type() != 0) {
    _internal_set_resource_type(from._internal_resource_type());
  }
  if (from.resource_id() != 0) {
    _internal_set_resource_id(from._internal_resource_id());
  }
}

void LogChange_Request::CopyFrom(const LogChange_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.LogChange.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogChange_Request::IsInitialized() const {
  return true;
}

void LogChange_Request::InternalSwap(LogChange_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  date_.Swap(&other->date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogChange_Request, resource_id_)
      + sizeof(LogChange_Request::resource_id_)
      - PROTOBUF_FIELD_OFFSET(LogChange_Request, change_type_)>(
          reinterpret_cast<char*>(&change_type_),
          reinterpret_cast<char*>(&other->change_type_));
}

std::string LogChange_Request::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.LogChange.Request";
}


// ===================================================================

void LogChange_Response::InitAsDefaultInstance() {
}
class LogChange_Response::_Internal {
 public:
};

LogChange_Response::LogChange_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.LogChange.Response)
}
LogChange_Response::LogChange_Response(const LogChange_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.LogChange.Response)
}

void LogChange_Response::SharedCtor() {
}

LogChange_Response::~LogChange_Response() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.LogChange.Response)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void LogChange_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LogChange_Response::ArenaDtor(void* object) {
  LogChange_Response* _this = reinterpret_cast< LogChange_Response* >(object);
  (void)_this;
}
void LogChange_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogChange_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogChange_Response& LogChange_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogChange_Response_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void LogChange_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.LogChange.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* LogChange_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogChange_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.LogChange.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.LogChange.Response)
  return target;
}

size_t LogChange_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.LogChange.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogChange_Response::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LogChange_Response*>(
      &from));
}

void LogChange_Response::MergeFrom(const LogChange_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.LogChange.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void LogChange_Response::CopyFrom(const LogChange_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.LogChange.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogChange_Response::IsInitialized() const {
  return true;
}

void LogChange_Response::InternalSwap(LogChange_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string LogChange_Response::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.LogChange.Response";
}


// ===================================================================

void LogChange::InitAsDefaultInstance() {
}
class LogChange::_Internal {
 public:
};

LogChange::LogChange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.LogChange)
}
LogChange::LogChange(const LogChange& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.LogChange)
}

void LogChange::SharedCtor() {
}

LogChange::~LogChange() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.LogChange)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void LogChange::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LogChange::ArenaDtor(void* object) {
  LogChange* _this = reinterpret_cast< LogChange* >(object);
  (void)_this;
}
void LogChange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogChange& LogChange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogChange_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void LogChange::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.LogChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* LogChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogChange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.LogChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.LogChange)
  return target;
}

size_t LogChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.LogChange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogChange::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LogChange*>(
      &from));
}

void LogChange::MergeFrom(const LogChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.LogChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void LogChange::CopyFrom(const LogChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.LogChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogChange::IsInitialized() const {
  return true;
}

void LogChange::InternalSwap(LogChange* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string LogChange::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.LogChange";
}


// ===================================================================

void LogExportedResource_Request::InitAsDefaultInstance() {
}
class LogExportedResource_Request::_Internal {
 public:
};

LogExportedResource_Request::LogExportedResource_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.LogExportedResource.Request)
}
LogExportedResource_Request::LogExportedResource_Request(const LogExportedResource_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  public_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_public_id().empty()) {
    public_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_public_id(),
      GetArena());
  }
  modality_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_modality().empty()) {
    modality_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_modality(),
      GetArena());
  }
  date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_date().empty()) {
    date_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_date(),
      GetArena());
  }
  patient_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_patient_id().empty()) {
    patient_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_patient_id(),
      GetArena());
  }
  study_instance_uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_study_instance_uid().empty()) {
    study_instance_uid_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_study_instance_uid(),
      GetArena());
  }
  series_instance_uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_series_instance_uid().empty()) {
    series_instance_uid_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_series_instance_uid(),
      GetArena());
  }
  sop_instance_uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sop_instance_uid().empty()) {
    sop_instance_uid_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sop_instance_uid(),
      GetArena());
  }
  resource_type_ = from.resource_type_;
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.LogExportedResource.Request)
}

void LogExportedResource_Request::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogExportedResource_Request_OrthancDatabasePlugin_2eproto.base);
  public_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modality_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  patient_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  study_instance_uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  series_instance_uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sop_instance_uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resource_type_ = 0;
}

LogExportedResource_Request::~LogExportedResource_Request() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.LogExportedResource.Request)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void LogExportedResource_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  public_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modality_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  patient_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  study_instance_uid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  series_instance_uid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sop_instance_uid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LogExportedResource_Request::ArenaDtor(void* object) {
  LogExportedResource_Request* _this = reinterpret_cast< LogExportedResource_Request* >(object);
  (void)_this;
}
void LogExportedResource_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogExportedResource_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogExportedResource_Request& LogExportedResource_Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogExportedResource_Request_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void LogExportedResource_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.LogExportedResource.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  public_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  modality_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  patient_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  study_instance_uid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  series_instance_uid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sop_instance_uid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  resource_type_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* LogExportedResource_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Orthanc.DatabasePluginMessages.ResourceType resource_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_resource_type(static_cast<::Orthanc::DatabasePluginMessages::ResourceType>(val));
        } else goto handle_unusual;
        continue;
      // string public_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_public_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string modality = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_modality();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string date = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string patient_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_patient_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string study_instance_uid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_study_instance_uid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string series_instance_uid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_series_instance_uid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sop_instance_uid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_sop_instance_uid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogExportedResource_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.LogExportedResource.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Orthanc.DatabasePluginMessages.ResourceType resource_type = 1;
  if (this->resource_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_resource_type(), target);
  }

  // string public_id = 2;
  if (this->public_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_public_id().data(), static_cast<int>(this->_internal_public_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Orthanc.DatabasePluginMessages.LogExportedResource.Request.public_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_public_id(), target);
  }

  // string modality = 3;
  if (this->modality().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_modality().data(), static_cast<int>(this->_internal_modality().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Orthanc.DatabasePluginMessages.LogExportedResource.Request.modality");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_modality(), target);
  }

  // string date = 4;
  if (this->date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_date().data(), static_cast<int>(this->_internal_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Orthanc.DatabasePluginMessages.LogExportedResource.Request.date");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_date(), target);
  }

  // string patient_id = 5;
  if (this->patient_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_patient_id().data(), static_cast<int>(this->_internal_patient_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Orthanc.DatabasePluginMessages.LogExportedResource.Request.patient_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_patient_id(), target);
  }

  // string study_instance_uid = 6;
  if (this->study_instance_uid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_study_instance_uid().data(), static_cast<int>(this->_internal_study_instance_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Orthanc.DatabasePluginMessages.LogExportedResource.Request.study_instance_uid");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_study_instance_uid(), target);
  }

  // string series_instance_uid = 7;
  if (this->series_instance_uid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_series_instance_uid().data(), static_cast<int>(this->_internal_series_instance_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Orthanc.DatabasePluginMessages.LogExportedResource.Request.series_instance_uid");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_series_instance_uid(), target);
  }

  // string sop_instance_uid = 8;
  if (this->sop_instance_uid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sop_instance_uid().data(), static_cast<int>(this->_internal_sop_instance_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Orthanc.DatabasePluginMessages.LogExportedResource.Request.sop_instance_uid");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_sop_instance_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.LogExportedResource.Request)
  return target;
}

size_t LogExportedResource_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.LogExportedResource.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string public_id = 2;
  if (this->public_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_public_id());
  }

  // string modality = 3;
  if (this->modality().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_modality());
  }

  // string date = 4;
  if (this->date().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_date());
  }

  // string patient_id = 5;
  if (this->patient_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_patient_id());
  }

  // string study_instance_uid = 6;
  if (this->study_instance_uid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_study_instance_uid());
  }

  // string series_instance_uid = 7;
  if (this->series_instance_uid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_series_instance_uid());
  }

  // string sop_instance_uid = 8;
  if (this->sop_instance_uid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sop_instance_uid());
  }

  // .Orthanc.DatabasePluginMessages.ResourceType resource_type = 1;
  if (this->resource_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_resource_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogExportedResource_Request::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LogExportedResource_Request*>(
      &from));
}

void LogExportedResource_Request::MergeFrom(const LogExportedResource_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.LogExportedResource.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.public_id().size() > 0) {
    _internal_set_public_id(from._internal_public_id());
  }
  if (from.modality().size() > 0) {
    _internal_set_modality(from._internal_modality());
  }
  if (from.date().size() > 0) {
    _internal_set_date(from._internal_date());
  }
  if (from.patient_id().size() > 0) {
    _internal_set_patient_id(from._internal_patient_id());
  }
  if (from.study_instance_uid().size() > 0) {
    _internal_set_study_instance_uid(from._internal_study_instance_uid());
  }
  if (from.series_instance_uid().size() > 0) {
    _internal_set_series_instance_uid(from._internal_series_instance_uid());
  }
  if (from.sop_instance_uid().size() > 0) {
    _internal_set_sop_instance_uid(from._internal_sop_instance_uid());
  }
  if (from.resource_type() != 0) {
    _internal_set_resource_type(from._internal_resource_type());
  }
}

void LogExportedResource_Request::CopyFrom(const LogExportedResource_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.LogExportedResource.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogExportedResource_Request::IsInitialized() const {
  return true;
}

void LogExportedResource_Request::InternalSwap(LogExportedResource_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  public_id_.Swap(&other->public_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  modality_.Swap(&other->modality_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  date_.Swap(&other->date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  patient_id_.Swap(&other->patient_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  study_instance_uid_.Swap(&other->study_instance_uid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  series_instance_uid_.Swap(&other->series_instance_uid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sop_instance_uid_.Swap(&other->sop_instance_uid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(resource_type_, other->resource_type_);
}

std::string LogExportedResource_Request::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.LogExportedResource.Request";
}


// ===================================================================

void LogExportedResource_Response::InitAsDefaultInstance() {
}
class LogExportedResource_Response::_Internal {
 public:
};

LogExportedResource_Response::LogExportedResource_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.LogExportedResource.Response)
}
LogExportedResource_Response::LogExportedResource_Response(const LogExportedResource_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.LogExportedResource.Response)
}

void LogExportedResource_Response::SharedCtor() {
}

LogExportedResource_Response::~LogExportedResource_Response() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.LogExportedResource.Response)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void LogExportedResource_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LogExportedResource_Response::ArenaDtor(void* object) {
  LogExportedResource_Response* _this = reinterpret_cast< LogExportedResource_Response* >(object);
  (void)_this;
}
void LogExportedResource_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogExportedResource_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogExportedResource_Response& LogExportedResource_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogExportedResource_Response_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void LogExportedResource_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.LogExportedResource.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* LogExportedResource_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogExportedResource_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.LogExportedResource.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.LogExportedResource.Response)
  return target;
}

size_t LogExportedResource_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.LogExportedResource.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogExportedResource_Response::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LogExportedResource_Response*>(
      &from));
}

void LogExportedResource_Response::MergeFrom(const LogExportedResource_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.LogExportedResource.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void LogExportedResource_Response::CopyFrom(const LogExportedResource_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.LogExportedResource.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogExportedResource_Response::IsInitialized() const {
  return true;
}

void LogExportedResource_Response::InternalSwap(LogExportedResource_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string LogExportedResource_Response::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.LogExportedResource.Response";
}


// ===================================================================

void LogExportedResource::InitAsDefaultInstance() {
}
class LogExportedResource::_Internal {
 public:
};

LogExportedResource::LogExportedResource(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.LogExportedResource)
}
LogExportedResource::LogExportedResource(const LogExportedResource& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.LogExportedResource)
}

void LogExportedResource::SharedCtor() {
}

LogExportedResource::~LogExportedResource() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.LogExportedResource)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void LogExportedResource::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LogExportedResource::ArenaDtor(void* object) {
  LogExportedResource* _this = reinterpret_cast< LogExportedResource* >(object);
  (void)_this;
}
void LogExportedResource::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogExportedResource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogExportedResource& LogExportedResource::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogExportedResource_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void LogExportedResource::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.LogExportedResource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* LogExportedResource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogExportedResource::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.LogExportedResource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.LogExportedResource)
  return target;
}

size_t LogExportedResource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.LogExportedResource)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogExportedResource::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LogExportedResource*>(
      &from));
}

void LogExportedResource::MergeFrom(const LogExportedResource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.LogExportedResource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void LogExportedResource::CopyFrom(const LogExportedResource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.LogExportedResource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogExportedResource::IsInitialized() const {
  return true;
}

void LogExportedResource::InternalSwap(LogExportedResource* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string LogExportedResource::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.LogExportedResource";
}


// ===================================================================

void LookupAttachment_Request::InitAsDefaultInstance() {
}
class LookupAttachment_Request::_Internal {
 public:
};

LookupAttachment_Request::LookupAttachment_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.LookupAttachment.Request)
}
LookupAttachment_Request::LookupAttachment_Request(const LookupAttachment_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&content_type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(content_type_));
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.LookupAttachment.Request)
}

void LookupAttachment_Request::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&content_type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(content_type_));
}

LookupAttachment_Request::~LookupAttachment_Request() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.LookupAttachment.Request)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void LookupAttachment_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LookupAttachment_Request::ArenaDtor(void* object) {
  LookupAttachment_Request* _this = reinterpret_cast< LookupAttachment_Request* >(object);
  (void)_this;
}
void LookupAttachment_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LookupAttachment_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LookupAttachment_Request& LookupAttachment_Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LookupAttachment_Request_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void LookupAttachment_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.LookupAttachment.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&content_type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(content_type_));
  _internal_metadata_.Clear<std::string>();
}

const char* LookupAttachment_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 content_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          content_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LookupAttachment_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.LookupAttachment.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // int32 content_type = 2;
  if (this->content_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_content_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.LookupAttachment.Request)
  return target;
}

size_t LookupAttachment_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.LookupAttachment.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // int32 content_type = 2;
  if (this->content_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_content_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LookupAttachment_Request::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LookupAttachment_Request*>(
      &from));
}

void LookupAttachment_Request::MergeFrom(const LookupAttachment_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.LookupAttachment.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.content_type() != 0) {
    _internal_set_content_type(from._internal_content_type());
  }
}

void LookupAttachment_Request::CopyFrom(const LookupAttachment_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.LookupAttachment.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LookupAttachment_Request::IsInitialized() const {
  return true;
}

void LookupAttachment_Request::InternalSwap(LookupAttachment_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LookupAttachment_Request, content_type_)
      + sizeof(LookupAttachment_Request::content_type_)
      - PROTOBUF_FIELD_OFFSET(LookupAttachment_Request, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

std::string LookupAttachment_Request::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.LookupAttachment.Request";
}


// ===================================================================

void LookupAttachment_Response::InitAsDefaultInstance() {
  ::Orthanc::DatabasePluginMessages::_LookupAttachment_Response_default_instance_._instance.get_mutable()->attachment_ = const_cast< ::Orthanc::DatabasePluginMessages::FileInfo*>(
      ::Orthanc::DatabasePluginMessages::FileInfo::internal_default_instance());
}
class LookupAttachment_Response::_Internal {
 public:
  static const ::Orthanc::DatabasePluginMessages::FileInfo& attachment(const LookupAttachment_Response* msg);
};

const ::Orthanc::DatabasePluginMessages::FileInfo&
LookupAttachment_Response::_Internal::attachment(const LookupAttachment_Response* msg) {
  return *msg->attachment_;
}
LookupAttachment_Response::LookupAttachment_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.LookupAttachment.Response)
}
LookupAttachment_Response::LookupAttachment_Response(const LookupAttachment_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_attachment()) {
    attachment_ = new ::Orthanc::DatabasePluginMessages::FileInfo(*from.attachment_);
  } else {
    attachment_ = nullptr;
  }
  ::memcpy(&revision_, &from.revision_,
    static_cast<size_t>(reinterpret_cast<char*>(&found_) -
    reinterpret_cast<char*>(&revision_)) + sizeof(found_));
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.LookupAttachment.Response)
}

void LookupAttachment_Response::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LookupAttachment_Response_OrthancDatabasePlugin_2eproto.base);
  ::memset(&attachment_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&found_) -
      reinterpret_cast<char*>(&attachment_)) + sizeof(found_));
}

LookupAttachment_Response::~LookupAttachment_Response() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.LookupAttachment.Response)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void LookupAttachment_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete attachment_;
}

void LookupAttachment_Response::ArenaDtor(void* object) {
  LookupAttachment_Response* _this = reinterpret_cast< LookupAttachment_Response* >(object);
  (void)_this;
}
void LookupAttachment_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LookupAttachment_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LookupAttachment_Response& LookupAttachment_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LookupAttachment_Response_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void LookupAttachment_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.LookupAttachment.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && attachment_ != nullptr) {
    delete attachment_;
  }
  attachment_ = nullptr;
  ::memset(&revision_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&found_) -
      reinterpret_cast<char*>(&revision_)) + sizeof(found_));
  _internal_metadata_.Clear<std::string>();
}

const char* LookupAttachment_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool found = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          found_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.FileInfo attachment = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_attachment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 revision = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          revision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LookupAttachment_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.LookupAttachment.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool found = 1;
  if (this->found() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_found(), target);
  }

  // .Orthanc.DatabasePluginMessages.FileInfo attachment = 2;
  if (this->has_attachment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::attachment(this), target, stream);
  }

  // int64 revision = 3;
  if (this->revision() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_revision(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.LookupAttachment.Response)
  return target;
}

size_t LookupAttachment_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.LookupAttachment.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Orthanc.DatabasePluginMessages.FileInfo attachment = 2;
  if (this->has_attachment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attachment_);
  }

  // int64 revision = 3;
  if (this->revision() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_revision());
  }

  // bool found = 1;
  if (this->found() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LookupAttachment_Response::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LookupAttachment_Response*>(
      &from));
}

void LookupAttachment_Response::MergeFrom(const LookupAttachment_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.LookupAttachment.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_attachment()) {
    _internal_mutable_attachment()->::Orthanc::DatabasePluginMessages::FileInfo::MergeFrom(from._internal_attachment());
  }
  if (from.revision() != 0) {
    _internal_set_revision(from._internal_revision());
  }
  if (from.found() != 0) {
    _internal_set_found(from._internal_found());
  }
}

void LookupAttachment_Response::CopyFrom(const LookupAttachment_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.LookupAttachment.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LookupAttachment_Response::IsInitialized() const {
  return true;
}

void LookupAttachment_Response::InternalSwap(LookupAttachment_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LookupAttachment_Response, found_)
      + sizeof(LookupAttachment_Response::found_)
      - PROTOBUF_FIELD_OFFSET(LookupAttachment_Response, attachment_)>(
          reinterpret_cast<char*>(&attachment_),
          reinterpret_cast<char*>(&other->attachment_));
}

std::string LookupAttachment_Response::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.LookupAttachment.Response";
}


// ===================================================================

void LookupAttachment::InitAsDefaultInstance() {
}
class LookupAttachment::_Internal {
 public:
};

LookupAttachment::LookupAttachment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.LookupAttachment)
}
LookupAttachment::LookupAttachment(const LookupAttachment& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.LookupAttachment)
}

void LookupAttachment::SharedCtor() {
}

LookupAttachment::~LookupAttachment() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.LookupAttachment)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void LookupAttachment::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LookupAttachment::ArenaDtor(void* object) {
  LookupAttachment* _this = reinterpret_cast< LookupAttachment* >(object);
  (void)_this;
}
void LookupAttachment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LookupAttachment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LookupAttachment& LookupAttachment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LookupAttachment_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void LookupAttachment::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.LookupAttachment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* LookupAttachment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LookupAttachment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.LookupAttachment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.LookupAttachment)
  return target;
}

size_t LookupAttachment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.LookupAttachment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LookupAttachment::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LookupAttachment*>(
      &from));
}

void LookupAttachment::MergeFrom(const LookupAttachment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.LookupAttachment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void LookupAttachment::CopyFrom(const LookupAttachment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.LookupAttachment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LookupAttachment::IsInitialized() const {
  return true;
}

void LookupAttachment::InternalSwap(LookupAttachment* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string LookupAttachment::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.LookupAttachment";
}


// ===================================================================

void LookupGlobalProperty_Request::InitAsDefaultInstance() {
}
class LookupGlobalProperty_Request::_Internal {
 public:
};

LookupGlobalProperty_Request::LookupGlobalProperty_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.LookupGlobalProperty.Request)
}
LookupGlobalProperty_Request::LookupGlobalProperty_Request(const LookupGlobalProperty_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  server_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_server_id().empty()) {
    server_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_server_id(),
      GetArena());
  }
  property_ = from.property_;
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.LookupGlobalProperty.Request)
}

void LookupGlobalProperty_Request::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LookupGlobalProperty_Request_OrthancDatabasePlugin_2eproto.base);
  server_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  property_ = 0;
}

LookupGlobalProperty_Request::~LookupGlobalProperty_Request() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.LookupGlobalProperty.Request)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void LookupGlobalProperty_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  server_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LookupGlobalProperty_Request::ArenaDtor(void* object) {
  LookupGlobalProperty_Request* _this = reinterpret_cast< LookupGlobalProperty_Request* >(object);
  (void)_this;
}
void LookupGlobalProperty_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LookupGlobalProperty_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LookupGlobalProperty_Request& LookupGlobalProperty_Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LookupGlobalProperty_Request_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void LookupGlobalProperty_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.LookupGlobalProperty.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  property_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* LookupGlobalProperty_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_server_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 property = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          property_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LookupGlobalProperty_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.LookupGlobalProperty.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string server_id = 1;
  if (this->server_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_server_id().data(), static_cast<int>(this->_internal_server_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Orthanc.DatabasePluginMessages.LookupGlobalProperty.Request.server_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_server_id(), target);
  }

  // int32 property = 2;
  if (this->property() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_property(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.LookupGlobalProperty.Request)
  return target;
}

size_t LookupGlobalProperty_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.LookupGlobalProperty.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string server_id = 1;
  if (this->server_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_server_id());
  }

  // int32 property = 2;
  if (this->property() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_property());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LookupGlobalProperty_Request::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LookupGlobalProperty_Request*>(
      &from));
}

void LookupGlobalProperty_Request::MergeFrom(const LookupGlobalProperty_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.LookupGlobalProperty.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.server_id().size() > 0) {
    _internal_set_server_id(from._internal_server_id());
  }
  if (from.property() != 0) {
    _internal_set_property(from._internal_property());
  }
}

void LookupGlobalProperty_Request::CopyFrom(const LookupGlobalProperty_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.LookupGlobalProperty.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LookupGlobalProperty_Request::IsInitialized() const {
  return true;
}

void LookupGlobalProperty_Request::InternalSwap(LookupGlobalProperty_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  server_id_.Swap(&other->server_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(property_, other->property_);
}

std::string LookupGlobalProperty_Request::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.LookupGlobalProperty.Request";
}


// ===================================================================

void LookupGlobalProperty_Response::InitAsDefaultInstance() {
}
class LookupGlobalProperty_Response::_Internal {
 public:
};

LookupGlobalProperty_Response::LookupGlobalProperty_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.LookupGlobalProperty.Response)
}
LookupGlobalProperty_Response::LookupGlobalProperty_Response(const LookupGlobalProperty_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  found_ = from.found_;
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.LookupGlobalProperty.Response)
}

void LookupGlobalProperty_Response::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LookupGlobalProperty_Response_OrthancDatabasePlugin_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  found_ = false;
}

LookupGlobalProperty_Response::~LookupGlobalProperty_Response() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.LookupGlobalProperty.Response)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void LookupGlobalProperty_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LookupGlobalProperty_Response::ArenaDtor(void* object) {
  LookupGlobalProperty_Response* _this = reinterpret_cast< LookupGlobalProperty_Response* >(object);
  (void)_this;
}
void LookupGlobalProperty_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LookupGlobalProperty_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LookupGlobalProperty_Response& LookupGlobalProperty_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LookupGlobalProperty_Response_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void LookupGlobalProperty_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.LookupGlobalProperty.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  found_ = false;
  _internal_metadata_.Clear<std::string>();
}

const char* LookupGlobalProperty_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool found = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          found_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LookupGlobalProperty_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.LookupGlobalProperty.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool found = 1;
  if (this->found() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_found(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Orthanc.DatabasePluginMessages.LookupGlobalProperty.Response.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.LookupGlobalProperty.Response)
  return target;
}

size_t LookupGlobalProperty_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.LookupGlobalProperty.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // bool found = 1;
  if (this->found() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LookupGlobalProperty_Response::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LookupGlobalProperty_Response*>(
      &from));
}

void LookupGlobalProperty_Response::MergeFrom(const LookupGlobalProperty_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.LookupGlobalProperty.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.found() != 0) {
    _internal_set_found(from._internal_found());
  }
}

void LookupGlobalProperty_Response::CopyFrom(const LookupGlobalProperty_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.LookupGlobalProperty.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LookupGlobalProperty_Response::IsInitialized() const {
  return true;
}

void LookupGlobalProperty_Response::InternalSwap(LookupGlobalProperty_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(found_, other->found_);
}

std::string LookupGlobalProperty_Response::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.LookupGlobalProperty.Response";
}


// ===================================================================

void LookupGlobalProperty::InitAsDefaultInstance() {
}
class LookupGlobalProperty::_Internal {
 public:
};

LookupGlobalProperty::LookupGlobalProperty(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.LookupGlobalProperty)
}
LookupGlobalProperty::LookupGlobalProperty(const LookupGlobalProperty& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.LookupGlobalProperty)
}

void LookupGlobalProperty::SharedCtor() {
}

LookupGlobalProperty::~LookupGlobalProperty() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.LookupGlobalProperty)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void LookupGlobalProperty::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LookupGlobalProperty::ArenaDtor(void* object) {
  LookupGlobalProperty* _this = reinterpret_cast< LookupGlobalProperty* >(object);
  (void)_this;
}
void LookupGlobalProperty::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LookupGlobalProperty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LookupGlobalProperty& LookupGlobalProperty::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LookupGlobalProperty_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void LookupGlobalProperty::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.LookupGlobalProperty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* LookupGlobalProperty::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LookupGlobalProperty::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.LookupGlobalProperty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.LookupGlobalProperty)
  return target;
}

size_t LookupGlobalProperty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.LookupGlobalProperty)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LookupGlobalProperty::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LookupGlobalProperty*>(
      &from));
}

void LookupGlobalProperty::MergeFrom(const LookupGlobalProperty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.LookupGlobalProperty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void LookupGlobalProperty::CopyFrom(const LookupGlobalProperty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.LookupGlobalProperty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LookupGlobalProperty::IsInitialized() const {
  return true;
}

void LookupGlobalProperty::InternalSwap(LookupGlobalProperty* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string LookupGlobalProperty::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.LookupGlobalProperty";
}


// ===================================================================

void LookupMetadata_Request::InitAsDefaultInstance() {
}
class LookupMetadata_Request::_Internal {
 public:
};

LookupMetadata_Request::LookupMetadata_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.LookupMetadata.Request)
}
LookupMetadata_Request::LookupMetadata_Request(const LookupMetadata_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&metadata_type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(metadata_type_));
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.LookupMetadata.Request)
}

void LookupMetadata_Request::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&metadata_type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(metadata_type_));
}

LookupMetadata_Request::~LookupMetadata_Request() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.LookupMetadata.Request)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void LookupMetadata_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LookupMetadata_Request::ArenaDtor(void* object) {
  LookupMetadata_Request* _this = reinterpret_cast< LookupMetadata_Request* >(object);
  (void)_this;
}
void LookupMetadata_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LookupMetadata_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LookupMetadata_Request& LookupMetadata_Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LookupMetadata_Request_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void LookupMetadata_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.LookupMetadata.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&metadata_type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(metadata_type_));
  _internal_metadata_.Clear<std::string>();
}

const char* LookupMetadata_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 metadata_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          metadata_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LookupMetadata_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.LookupMetadata.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // int32 metadata_type = 2;
  if (this->metadata_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_metadata_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.LookupMetadata.Request)
  return target;
}

size_t LookupMetadata_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.LookupMetadata.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // int32 metadata_type = 2;
  if (this->metadata_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_metadata_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LookupMetadata_Request::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LookupMetadata_Request*>(
      &from));
}

void LookupMetadata_Request::MergeFrom(const LookupMetadata_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.LookupMetadata.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.metadata_type() != 0) {
    _internal_set_metadata_type(from._internal_metadata_type());
  }
}

void LookupMetadata_Request::CopyFrom(const LookupMetadata_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.LookupMetadata.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LookupMetadata_Request::IsInitialized() const {
  return true;
}

void LookupMetadata_Request::InternalSwap(LookupMetadata_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LookupMetadata_Request, metadata_type_)
      + sizeof(LookupMetadata_Request::metadata_type_)
      - PROTOBUF_FIELD_OFFSET(LookupMetadata_Request, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

std::string LookupMetadata_Request::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.LookupMetadata.Request";
}


// ===================================================================

void LookupMetadata_Response::InitAsDefaultInstance() {
}
class LookupMetadata_Response::_Internal {
 public:
};

LookupMetadata_Response::LookupMetadata_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.LookupMetadata.Response)
}
LookupMetadata_Response::LookupMetadata_Response(const LookupMetadata_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  ::memcpy(&revision_, &from.revision_,
    static_cast<size_t>(reinterpret_cast<char*>(&found_) -
    reinterpret_cast<char*>(&revision_)) + sizeof(found_));
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.LookupMetadata.Response)
}

void LookupMetadata_Response::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LookupMetadata_Response_OrthancDatabasePlugin_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&revision_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&found_) -
      reinterpret_cast<char*>(&revision_)) + sizeof(found_));
}

LookupMetadata_Response::~LookupMetadata_Response() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.LookupMetadata.Response)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void LookupMetadata_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LookupMetadata_Response::ArenaDtor(void* object) {
  LookupMetadata_Response* _this = reinterpret_cast< LookupMetadata_Response* >(object);
  (void)_this;
}
void LookupMetadata_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LookupMetadata_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LookupMetadata_Response& LookupMetadata_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LookupMetadata_Response_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void LookupMetadata_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.LookupMetadata.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&revision_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&found_) -
      reinterpret_cast<char*>(&revision_)) + sizeof(found_));
  _internal_metadata_.Clear<std::string>();
}

const char* LookupMetadata_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool found = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          found_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 revision = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          revision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LookupMetadata_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.LookupMetadata.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool found = 1;
  if (this->found() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_found(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Orthanc.DatabasePluginMessages.LookupMetadata.Response.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  // int64 revision = 3;
  if (this->revision() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_revision(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.LookupMetadata.Response)
  return target;
}

size_t LookupMetadata_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.LookupMetadata.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // int64 revision = 3;
  if (this->revision() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_revision());
  }

  // bool found = 1;
  if (this->found() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LookupMetadata_Response::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LookupMetadata_Response*>(
      &from));
}

void LookupMetadata_Response::MergeFrom(const LookupMetadata_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.LookupMetadata.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.revision() != 0) {
    _internal_set_revision(from._internal_revision());
  }
  if (from.found() != 0) {
    _internal_set_found(from._internal_found());
  }
}

void LookupMetadata_Response::CopyFrom(const LookupMetadata_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.LookupMetadata.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LookupMetadata_Response::IsInitialized() const {
  return true;
}

void LookupMetadata_Response::InternalSwap(LookupMetadata_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LookupMetadata_Response, found_)
      + sizeof(LookupMetadata_Response::found_)
      - PROTOBUF_FIELD_OFFSET(LookupMetadata_Response, revision_)>(
          reinterpret_cast<char*>(&revision_),
          reinterpret_cast<char*>(&other->revision_));
}

std::string LookupMetadata_Response::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.LookupMetadata.Response";
}


// ===================================================================

void LookupMetadata::InitAsDefaultInstance() {
}
class LookupMetadata::_Internal {
 public:
};

LookupMetadata::LookupMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.LookupMetadata)
}
LookupMetadata::LookupMetadata(const LookupMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.LookupMetadata)
}

void LookupMetadata::SharedCtor() {
}

LookupMetadata::~LookupMetadata() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.LookupMetadata)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void LookupMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LookupMetadata::ArenaDtor(void* object) {
  LookupMetadata* _this = reinterpret_cast< LookupMetadata* >(object);
  (void)_this;
}
void LookupMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LookupMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LookupMetadata& LookupMetadata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LookupMetadata_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void LookupMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.LookupMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* LookupMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LookupMetadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.LookupMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.LookupMetadata)
  return target;
}

size_t LookupMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.LookupMetadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LookupMetadata::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LookupMetadata*>(
      &from));
}

void LookupMetadata::MergeFrom(const LookupMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.LookupMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void LookupMetadata::CopyFrom(const LookupMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.LookupMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LookupMetadata::IsInitialized() const {
  return true;
}

void LookupMetadata::InternalSwap(LookupMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string LookupMetadata::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.LookupMetadata";
}


// ===================================================================

void LookupParent_Request::InitAsDefaultInstance() {
}
class LookupParent_Request::_Internal {
 public:
};

LookupParent_Request::LookupParent_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.LookupParent.Request)
}
LookupParent_Request::LookupParent_Request(const LookupParent_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.LookupParent.Request)
}

void LookupParent_Request::SharedCtor() {
  id_ = PROTOBUF_LONGLONG(0);
}

LookupParent_Request::~LookupParent_Request() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.LookupParent.Request)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void LookupParent_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LookupParent_Request::ArenaDtor(void* object) {
  LookupParent_Request* _this = reinterpret_cast< LookupParent_Request* >(object);
  (void)_this;
}
void LookupParent_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LookupParent_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LookupParent_Request& LookupParent_Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LookupParent_Request_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void LookupParent_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.LookupParent.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<std::string>();
}

const char* LookupParent_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LookupParent_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.LookupParent.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.LookupParent.Request)
  return target;
}

size_t LookupParent_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.LookupParent.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LookupParent_Request::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LookupParent_Request*>(
      &from));
}

void LookupParent_Request::MergeFrom(const LookupParent_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.LookupParent.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void LookupParent_Request::CopyFrom(const LookupParent_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.LookupParent.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LookupParent_Request::IsInitialized() const {
  return true;
}

void LookupParent_Request::InternalSwap(LookupParent_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(id_, other->id_);
}

std::string LookupParent_Request::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.LookupParent.Request";
}


// ===================================================================

void LookupParent_Response::InitAsDefaultInstance() {
}
class LookupParent_Response::_Internal {
 public:
};

LookupParent_Response::LookupParent_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.LookupParent.Response)
}
LookupParent_Response::LookupParent_Response(const LookupParent_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&parent_, &from.parent_,
    static_cast<size_t>(reinterpret_cast<char*>(&found_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(found_));
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.LookupParent.Response)
}

void LookupParent_Response::SharedCtor() {
  ::memset(&parent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&found_) -
      reinterpret_cast<char*>(&parent_)) + sizeof(found_));
}

LookupParent_Response::~LookupParent_Response() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.LookupParent.Response)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void LookupParent_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LookupParent_Response::ArenaDtor(void* object) {
  LookupParent_Response* _this = reinterpret_cast< LookupParent_Response* >(object);
  (void)_this;
}
void LookupParent_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LookupParent_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LookupParent_Response& LookupParent_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LookupParent_Response_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void LookupParent_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.LookupParent.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&parent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&found_) -
      reinterpret_cast<char*>(&parent_)) + sizeof(found_));
  _internal_metadata_.Clear<std::string>();
}

const char* LookupParent_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool found = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          found_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 parent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          parent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LookupParent_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.LookupParent.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool found = 1;
  if (this->found() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_found(), target);
  }

  // int64 parent = 2;
  if (this->parent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_parent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.LookupParent.Response)
  return target;
}

size_t LookupParent_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.LookupParent.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 parent = 2;
  if (this->parent() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_parent());
  }

  // bool found = 1;
  if (this->found() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LookupParent_Response::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LookupParent_Response*>(
      &from));
}

void LookupParent_Response::MergeFrom(const LookupParent_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.LookupParent.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.parent() != 0) {
    _internal_set_parent(from._internal_parent());
  }
  if (from.found() != 0) {
    _internal_set_found(from._internal_found());
  }
}

void LookupParent_Response::CopyFrom(const LookupParent_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.LookupParent.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LookupParent_Response::IsInitialized() const {
  return true;
}

void LookupParent_Response::InternalSwap(LookupParent_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LookupParent_Response, found_)
      + sizeof(LookupParent_Response::found_)
      - PROTOBUF_FIELD_OFFSET(LookupParent_Response, parent_)>(
          reinterpret_cast<char*>(&parent_),
          reinterpret_cast<char*>(&other->parent_));
}

std::string LookupParent_Response::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.LookupParent.Response";
}


// ===================================================================

void LookupParent::InitAsDefaultInstance() {
}
class LookupParent::_Internal {
 public:
};

LookupParent::LookupParent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.LookupParent)
}
LookupParent::LookupParent(const LookupParent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.LookupParent)
}

void LookupParent::SharedCtor() {
}

LookupParent::~LookupParent() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.LookupParent)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void LookupParent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LookupParent::ArenaDtor(void* object) {
  LookupParent* _this = reinterpret_cast< LookupParent* >(object);
  (void)_this;
}
void LookupParent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LookupParent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LookupParent& LookupParent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LookupParent_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void LookupParent::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.LookupParent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* LookupParent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LookupParent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.LookupParent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.LookupParent)
  return target;
}

size_t LookupParent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.LookupParent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LookupParent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LookupParent*>(
      &from));
}

void LookupParent::MergeFrom(const LookupParent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.LookupParent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void LookupParent::CopyFrom(const LookupParent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.LookupParent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LookupParent::IsInitialized() const {
  return true;
}

void LookupParent::InternalSwap(LookupParent* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string LookupParent::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.LookupParent";
}


// ===================================================================

void LookupResource_Request::InitAsDefaultInstance() {
}
class LookupResource_Request::_Internal {
 public:
};

LookupResource_Request::LookupResource_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.LookupResource.Request)
}
LookupResource_Request::LookupResource_Request(const LookupResource_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  public_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_public_id().empty()) {
    public_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_public_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.LookupResource.Request)
}

void LookupResource_Request::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LookupResource_Request_OrthancDatabasePlugin_2eproto.base);
  public_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LookupResource_Request::~LookupResource_Request() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.LookupResource.Request)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void LookupResource_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  public_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LookupResource_Request::ArenaDtor(void* object) {
  LookupResource_Request* _this = reinterpret_cast< LookupResource_Request* >(object);
  (void)_this;
}
void LookupResource_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LookupResource_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LookupResource_Request& LookupResource_Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LookupResource_Request_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void LookupResource_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.LookupResource.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  public_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<std::string>();
}

const char* LookupResource_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string public_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_public_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LookupResource_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.LookupResource.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string public_id = 1;
  if (this->public_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_public_id().data(), static_cast<int>(this->_internal_public_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Orthanc.DatabasePluginMessages.LookupResource.Request.public_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_public_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.LookupResource.Request)
  return target;
}

size_t LookupResource_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.LookupResource.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string public_id = 1;
  if (this->public_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_public_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LookupResource_Request::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LookupResource_Request*>(
      &from));
}

void LookupResource_Request::MergeFrom(const LookupResource_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.LookupResource.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.public_id().size() > 0) {
    _internal_set_public_id(from._internal_public_id());
  }
}

void LookupResource_Request::CopyFrom(const LookupResource_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.LookupResource.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LookupResource_Request::IsInitialized() const {
  return true;
}

void LookupResource_Request::InternalSwap(LookupResource_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  public_id_.Swap(&other->public_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string LookupResource_Request::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.LookupResource.Request";
}


// ===================================================================

void LookupResource_Response::InitAsDefaultInstance() {
}
class LookupResource_Response::_Internal {
 public:
};

LookupResource_Response::LookupResource_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.LookupResource.Response)
}
LookupResource_Response::LookupResource_Response(const LookupResource_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&internal_id_, &from.internal_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&internal_id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.LookupResource.Response)
}

void LookupResource_Response::SharedCtor() {
  ::memset(&internal_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&internal_id_)) + sizeof(type_));
}

LookupResource_Response::~LookupResource_Response() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.LookupResource.Response)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void LookupResource_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LookupResource_Response::ArenaDtor(void* object) {
  LookupResource_Response* _this = reinterpret_cast< LookupResource_Response* >(object);
  (void)_this;
}
void LookupResource_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LookupResource_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LookupResource_Response& LookupResource_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LookupResource_Response_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void LookupResource_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.LookupResource.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&internal_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&internal_id_)) + sizeof(type_));
  _internal_metadata_.Clear<std::string>();
}

const char* LookupResource_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool found = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          found_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 internal_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          internal_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.ResourceType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::Orthanc::DatabasePluginMessages::ResourceType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LookupResource_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.LookupResource.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool found = 1;
  if (this->found() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_found(), target);
  }

  // int64 internal_id = 2;
  if (this->internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_internal_id(), target);
  }

  // .Orthanc.DatabasePluginMessages.ResourceType type = 3;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.LookupResource.Response)
  return target;
}

size_t LookupResource_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.LookupResource.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 internal_id = 2;
  if (this->internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_internal_id());
  }

  // bool found = 1;
  if (this->found() != 0) {
    total_size += 1 + 1;
  }

  // .Orthanc.DatabasePluginMessages.ResourceType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LookupResource_Response::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LookupResource_Response*>(
      &from));
}

void LookupResource_Response::MergeFrom(const LookupResource_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.LookupResource.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.internal_id() != 0) {
    _internal_set_internal_id(from._internal_internal_id());
  }
  if (from.found() != 0) {
    _internal_set_found(from._internal_found());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void LookupResource_Response::CopyFrom(const LookupResource_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.LookupResource.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LookupResource_Response::IsInitialized() const {
  return true;
}

void LookupResource_Response::InternalSwap(LookupResource_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LookupResource_Response, type_)
      + sizeof(LookupResource_Response::type_)
      - PROTOBUF_FIELD_OFFSET(LookupResource_Response, internal_id_)>(
          reinterpret_cast<char*>(&internal_id_),
          reinterpret_cast<char*>(&other->internal_id_));
}

std::string LookupResource_Response::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.LookupResource.Response";
}


// ===================================================================

void LookupResource::InitAsDefaultInstance() {
}
class LookupResource::_Internal {
 public:
};

LookupResource::LookupResource(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.LookupResource)
}
LookupResource::LookupResource(const LookupResource& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.LookupResource)
}

void LookupResource::SharedCtor() {
}

LookupResource::~LookupResource() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.LookupResource)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void LookupResource::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LookupResource::ArenaDtor(void* object) {
  LookupResource* _this = reinterpret_cast< LookupResource* >(object);
  (void)_this;
}
void LookupResource::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LookupResource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LookupResource& LookupResource::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LookupResource_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void LookupResource::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.LookupResource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* LookupResource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LookupResource::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.LookupResource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.LookupResource)
  return target;
}

size_t LookupResource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.LookupResource)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LookupResource::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LookupResource*>(
      &from));
}

void LookupResource::MergeFrom(const LookupResource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.LookupResource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void LookupResource::CopyFrom(const LookupResource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.LookupResource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LookupResource::IsInitialized() const {
  return true;
}

void LookupResource::InternalSwap(LookupResource* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string LookupResource::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.LookupResource";
}


// ===================================================================

void SelectPatientToRecycle_Request::InitAsDefaultInstance() {
}
class SelectPatientToRecycle_Request::_Internal {
 public:
};

SelectPatientToRecycle_Request::SelectPatientToRecycle_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.SelectPatientToRecycle.Request)
}
SelectPatientToRecycle_Request::SelectPatientToRecycle_Request(const SelectPatientToRecycle_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.SelectPatientToRecycle.Request)
}

void SelectPatientToRecycle_Request::SharedCtor() {
}

SelectPatientToRecycle_Request::~SelectPatientToRecycle_Request() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.SelectPatientToRecycle.Request)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void SelectPatientToRecycle_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SelectPatientToRecycle_Request::ArenaDtor(void* object) {
  SelectPatientToRecycle_Request* _this = reinterpret_cast< SelectPatientToRecycle_Request* >(object);
  (void)_this;
}
void SelectPatientToRecycle_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SelectPatientToRecycle_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SelectPatientToRecycle_Request& SelectPatientToRecycle_Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SelectPatientToRecycle_Request_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void SelectPatientToRecycle_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.SelectPatientToRecycle.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* SelectPatientToRecycle_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SelectPatientToRecycle_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.SelectPatientToRecycle.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.SelectPatientToRecycle.Request)
  return target;
}

size_t SelectPatientToRecycle_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.SelectPatientToRecycle.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SelectPatientToRecycle_Request::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SelectPatientToRecycle_Request*>(
      &from));
}

void SelectPatientToRecycle_Request::MergeFrom(const SelectPatientToRecycle_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.SelectPatientToRecycle.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SelectPatientToRecycle_Request::CopyFrom(const SelectPatientToRecycle_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.SelectPatientToRecycle.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectPatientToRecycle_Request::IsInitialized() const {
  return true;
}

void SelectPatientToRecycle_Request::InternalSwap(SelectPatientToRecycle_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string SelectPatientToRecycle_Request::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.SelectPatientToRecycle.Request";
}


// ===================================================================

void SelectPatientToRecycle_Response::InitAsDefaultInstance() {
}
class SelectPatientToRecycle_Response::_Internal {
 public:
};

SelectPatientToRecycle_Response::SelectPatientToRecycle_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.SelectPatientToRecycle.Response)
}
SelectPatientToRecycle_Response::SelectPatientToRecycle_Response(const SelectPatientToRecycle_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&patient_id_, &from.patient_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&found_) -
    reinterpret_cast<char*>(&patient_id_)) + sizeof(found_));
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.SelectPatientToRecycle.Response)
}

void SelectPatientToRecycle_Response::SharedCtor() {
  ::memset(&patient_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&found_) -
      reinterpret_cast<char*>(&patient_id_)) + sizeof(found_));
}

SelectPatientToRecycle_Response::~SelectPatientToRecycle_Response() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.SelectPatientToRecycle.Response)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void SelectPatientToRecycle_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SelectPatientToRecycle_Response::ArenaDtor(void* object) {
  SelectPatientToRecycle_Response* _this = reinterpret_cast< SelectPatientToRecycle_Response* >(object);
  (void)_this;
}
void SelectPatientToRecycle_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SelectPatientToRecycle_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SelectPatientToRecycle_Response& SelectPatientToRecycle_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SelectPatientToRecycle_Response_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void SelectPatientToRecycle_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.SelectPatientToRecycle.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&patient_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&found_) -
      reinterpret_cast<char*>(&patient_id_)) + sizeof(found_));
  _internal_metadata_.Clear<std::string>();
}

const char* SelectPatientToRecycle_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool found = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          found_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 patient_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          patient_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SelectPatientToRecycle_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.SelectPatientToRecycle.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool found = 1;
  if (this->found() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_found(), target);
  }

  // int64 patient_id = 2;
  if (this->patient_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_patient_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.SelectPatientToRecycle.Response)
  return target;
}

size_t SelectPatientToRecycle_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.SelectPatientToRecycle.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 patient_id = 2;
  if (this->patient_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_patient_id());
  }

  // bool found = 1;
  if (this->found() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SelectPatientToRecycle_Response::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SelectPatientToRecycle_Response*>(
      &from));
}

void SelectPatientToRecycle_Response::MergeFrom(const SelectPatientToRecycle_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.SelectPatientToRecycle.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.patient_id() != 0) {
    _internal_set_patient_id(from._internal_patient_id());
  }
  if (from.found() != 0) {
    _internal_set_found(from._internal_found());
  }
}

void SelectPatientToRecycle_Response::CopyFrom(const SelectPatientToRecycle_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.SelectPatientToRecycle.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectPatientToRecycle_Response::IsInitialized() const {
  return true;
}

void SelectPatientToRecycle_Response::InternalSwap(SelectPatientToRecycle_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SelectPatientToRecycle_Response, found_)
      + sizeof(SelectPatientToRecycle_Response::found_)
      - PROTOBUF_FIELD_OFFSET(SelectPatientToRecycle_Response, patient_id_)>(
          reinterpret_cast<char*>(&patient_id_),
          reinterpret_cast<char*>(&other->patient_id_));
}

std::string SelectPatientToRecycle_Response::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.SelectPatientToRecycle.Response";
}


// ===================================================================

void SelectPatientToRecycle::InitAsDefaultInstance() {
}
class SelectPatientToRecycle::_Internal {
 public:
};

SelectPatientToRecycle::SelectPatientToRecycle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.SelectPatientToRecycle)
}
SelectPatientToRecycle::SelectPatientToRecycle(const SelectPatientToRecycle& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.SelectPatientToRecycle)
}

void SelectPatientToRecycle::SharedCtor() {
}

SelectPatientToRecycle::~SelectPatientToRecycle() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.SelectPatientToRecycle)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void SelectPatientToRecycle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SelectPatientToRecycle::ArenaDtor(void* object) {
  SelectPatientToRecycle* _this = reinterpret_cast< SelectPatientToRecycle* >(object);
  (void)_this;
}
void SelectPatientToRecycle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SelectPatientToRecycle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SelectPatientToRecycle& SelectPatientToRecycle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SelectPatientToRecycle_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void SelectPatientToRecycle::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.SelectPatientToRecycle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* SelectPatientToRecycle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SelectPatientToRecycle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.SelectPatientToRecycle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.SelectPatientToRecycle)
  return target;
}

size_t SelectPatientToRecycle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.SelectPatientToRecycle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SelectPatientToRecycle::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SelectPatientToRecycle*>(
      &from));
}

void SelectPatientToRecycle::MergeFrom(const SelectPatientToRecycle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.SelectPatientToRecycle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SelectPatientToRecycle::CopyFrom(const SelectPatientToRecycle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.SelectPatientToRecycle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectPatientToRecycle::IsInitialized() const {
  return true;
}

void SelectPatientToRecycle::InternalSwap(SelectPatientToRecycle* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string SelectPatientToRecycle::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.SelectPatientToRecycle";
}


// ===================================================================

void SelectPatientToRecycleWithAvoid_Request::InitAsDefaultInstance() {
}
class SelectPatientToRecycleWithAvoid_Request::_Internal {
 public:
};

SelectPatientToRecycleWithAvoid_Request::SelectPatientToRecycleWithAvoid_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.SelectPatientToRecycleWithAvoid.Request)
}
SelectPatientToRecycleWithAvoid_Request::SelectPatientToRecycleWithAvoid_Request(const SelectPatientToRecycleWithAvoid_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  patient_id_to_avoid_ = from.patient_id_to_avoid_;
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.SelectPatientToRecycleWithAvoid.Request)
}

void SelectPatientToRecycleWithAvoid_Request::SharedCtor() {
  patient_id_to_avoid_ = PROTOBUF_LONGLONG(0);
}

SelectPatientToRecycleWithAvoid_Request::~SelectPatientToRecycleWithAvoid_Request() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.SelectPatientToRecycleWithAvoid.Request)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void SelectPatientToRecycleWithAvoid_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SelectPatientToRecycleWithAvoid_Request::ArenaDtor(void* object) {
  SelectPatientToRecycleWithAvoid_Request* _this = reinterpret_cast< SelectPatientToRecycleWithAvoid_Request* >(object);
  (void)_this;
}
void SelectPatientToRecycleWithAvoid_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SelectPatientToRecycleWithAvoid_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SelectPatientToRecycleWithAvoid_Request& SelectPatientToRecycleWithAvoid_Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SelectPatientToRecycleWithAvoid_Request_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void SelectPatientToRecycleWithAvoid_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.SelectPatientToRecycleWithAvoid.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  patient_id_to_avoid_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<std::string>();
}

const char* SelectPatientToRecycleWithAvoid_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 patient_id_to_avoid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          patient_id_to_avoid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SelectPatientToRecycleWithAvoid_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.SelectPatientToRecycleWithAvoid.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 patient_id_to_avoid = 1;
  if (this->patient_id_to_avoid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_patient_id_to_avoid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.SelectPatientToRecycleWithAvoid.Request)
  return target;
}

size_t SelectPatientToRecycleWithAvoid_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.SelectPatientToRecycleWithAvoid.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 patient_id_to_avoid = 1;
  if (this->patient_id_to_avoid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_patient_id_to_avoid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SelectPatientToRecycleWithAvoid_Request::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SelectPatientToRecycleWithAvoid_Request*>(
      &from));
}

void SelectPatientToRecycleWithAvoid_Request::MergeFrom(const SelectPatientToRecycleWithAvoid_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.SelectPatientToRecycleWithAvoid.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.patient_id_to_avoid() != 0) {
    _internal_set_patient_id_to_avoid(from._internal_patient_id_to_avoid());
  }
}

void SelectPatientToRecycleWithAvoid_Request::CopyFrom(const SelectPatientToRecycleWithAvoid_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.SelectPatientToRecycleWithAvoid.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectPatientToRecycleWithAvoid_Request::IsInitialized() const {
  return true;
}

void SelectPatientToRecycleWithAvoid_Request::InternalSwap(SelectPatientToRecycleWithAvoid_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(patient_id_to_avoid_, other->patient_id_to_avoid_);
}

std::string SelectPatientToRecycleWithAvoid_Request::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.SelectPatientToRecycleWithAvoid.Request";
}


// ===================================================================

void SelectPatientToRecycleWithAvoid_Response::InitAsDefaultInstance() {
}
class SelectPatientToRecycleWithAvoid_Response::_Internal {
 public:
};

SelectPatientToRecycleWithAvoid_Response::SelectPatientToRecycleWithAvoid_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.SelectPatientToRecycleWithAvoid.Response)
}
SelectPatientToRecycleWithAvoid_Response::SelectPatientToRecycleWithAvoid_Response(const SelectPatientToRecycleWithAvoid_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&patient_id_, &from.patient_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&found_) -
    reinterpret_cast<char*>(&patient_id_)) + sizeof(found_));
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.SelectPatientToRecycleWithAvoid.Response)
}

void SelectPatientToRecycleWithAvoid_Response::SharedCtor() {
  ::memset(&patient_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&found_) -
      reinterpret_cast<char*>(&patient_id_)) + sizeof(found_));
}

SelectPatientToRecycleWithAvoid_Response::~SelectPatientToRecycleWithAvoid_Response() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.SelectPatientToRecycleWithAvoid.Response)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void SelectPatientToRecycleWithAvoid_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SelectPatientToRecycleWithAvoid_Response::ArenaDtor(void* object) {
  SelectPatientToRecycleWithAvoid_Response* _this = reinterpret_cast< SelectPatientToRecycleWithAvoid_Response* >(object);
  (void)_this;
}
void SelectPatientToRecycleWithAvoid_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SelectPatientToRecycleWithAvoid_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SelectPatientToRecycleWithAvoid_Response& SelectPatientToRecycleWithAvoid_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SelectPatientToRecycleWithAvoid_Response_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void SelectPatientToRecycleWithAvoid_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.SelectPatientToRecycleWithAvoid.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&patient_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&found_) -
      reinterpret_cast<char*>(&patient_id_)) + sizeof(found_));
  _internal_metadata_.Clear<std::string>();
}

const char* SelectPatientToRecycleWithAvoid_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool found = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          found_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 patient_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          patient_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SelectPatientToRecycleWithAvoid_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.SelectPatientToRecycleWithAvoid.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool found = 1;
  if (this->found() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_found(), target);
  }

  // int64 patient_id = 2;
  if (this->patient_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_patient_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.SelectPatientToRecycleWithAvoid.Response)
  return target;
}

size_t SelectPatientToRecycleWithAvoid_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.SelectPatientToRecycleWithAvoid.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 patient_id = 2;
  if (this->patient_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_patient_id());
  }

  // bool found = 1;
  if (this->found() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SelectPatientToRecycleWithAvoid_Response::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SelectPatientToRecycleWithAvoid_Response*>(
      &from));
}

void SelectPatientToRecycleWithAvoid_Response::MergeFrom(const SelectPatientToRecycleWithAvoid_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.SelectPatientToRecycleWithAvoid.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.patient_id() != 0) {
    _internal_set_patient_id(from._internal_patient_id());
  }
  if (from.found() != 0) {
    _internal_set_found(from._internal_found());
  }
}

void SelectPatientToRecycleWithAvoid_Response::CopyFrom(const SelectPatientToRecycleWithAvoid_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.SelectPatientToRecycleWithAvoid.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectPatientToRecycleWithAvoid_Response::IsInitialized() const {
  return true;
}

void SelectPatientToRecycleWithAvoid_Response::InternalSwap(SelectPatientToRecycleWithAvoid_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SelectPatientToRecycleWithAvoid_Response, found_)
      + sizeof(SelectPatientToRecycleWithAvoid_Response::found_)
      - PROTOBUF_FIELD_OFFSET(SelectPatientToRecycleWithAvoid_Response, patient_id_)>(
          reinterpret_cast<char*>(&patient_id_),
          reinterpret_cast<char*>(&other->patient_id_));
}

std::string SelectPatientToRecycleWithAvoid_Response::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.SelectPatientToRecycleWithAvoid.Response";
}


// ===================================================================

void SelectPatientToRecycleWithAvoid::InitAsDefaultInstance() {
}
class SelectPatientToRecycleWithAvoid::_Internal {
 public:
};

SelectPatientToRecycleWithAvoid::SelectPatientToRecycleWithAvoid(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.SelectPatientToRecycleWithAvoid)
}
SelectPatientToRecycleWithAvoid::SelectPatientToRecycleWithAvoid(const SelectPatientToRecycleWithAvoid& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.SelectPatientToRecycleWithAvoid)
}

void SelectPatientToRecycleWithAvoid::SharedCtor() {
}

SelectPatientToRecycleWithAvoid::~SelectPatientToRecycleWithAvoid() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.SelectPatientToRecycleWithAvoid)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void SelectPatientToRecycleWithAvoid::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SelectPatientToRecycleWithAvoid::ArenaDtor(void* object) {
  SelectPatientToRecycleWithAvoid* _this = reinterpret_cast< SelectPatientToRecycleWithAvoid* >(object);
  (void)_this;
}
void SelectPatientToRecycleWithAvoid::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SelectPatientToRecycleWithAvoid::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SelectPatientToRecycleWithAvoid& SelectPatientToRecycleWithAvoid::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SelectPatientToRecycleWithAvoid_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void SelectPatientToRecycleWithAvoid::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.SelectPatientToRecycleWithAvoid)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* SelectPatientToRecycleWithAvoid::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SelectPatientToRecycleWithAvoid::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.SelectPatientToRecycleWithAvoid)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.SelectPatientToRecycleWithAvoid)
  return target;
}

size_t SelectPatientToRecycleWithAvoid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.SelectPatientToRecycleWithAvoid)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SelectPatientToRecycleWithAvoid::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SelectPatientToRecycleWithAvoid*>(
      &from));
}

void SelectPatientToRecycleWithAvoid::MergeFrom(const SelectPatientToRecycleWithAvoid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.SelectPatientToRecycleWithAvoid)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SelectPatientToRecycleWithAvoid::CopyFrom(const SelectPatientToRecycleWithAvoid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.SelectPatientToRecycleWithAvoid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectPatientToRecycleWithAvoid::IsInitialized() const {
  return true;
}

void SelectPatientToRecycleWithAvoid::InternalSwap(SelectPatientToRecycleWithAvoid* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string SelectPatientToRecycleWithAvoid::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.SelectPatientToRecycleWithAvoid";
}


// ===================================================================

void SetGlobalProperty_Request::InitAsDefaultInstance() {
}
class SetGlobalProperty_Request::_Internal {
 public:
};

SetGlobalProperty_Request::SetGlobalProperty_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.SetGlobalProperty.Request)
}
SetGlobalProperty_Request::SetGlobalProperty_Request(const SetGlobalProperty_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  server_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_server_id().empty()) {
    server_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_server_id(),
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  property_ = from.property_;
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.SetGlobalProperty.Request)
}

void SetGlobalProperty_Request::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetGlobalProperty_Request_OrthancDatabasePlugin_2eproto.base);
  server_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  property_ = 0;
}

SetGlobalProperty_Request::~SetGlobalProperty_Request() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.SetGlobalProperty.Request)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void SetGlobalProperty_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  server_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetGlobalProperty_Request::ArenaDtor(void* object) {
  SetGlobalProperty_Request* _this = reinterpret_cast< SetGlobalProperty_Request* >(object);
  (void)_this;
}
void SetGlobalProperty_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetGlobalProperty_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetGlobalProperty_Request& SetGlobalProperty_Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetGlobalProperty_Request_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void SetGlobalProperty_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.SetGlobalProperty.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  property_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* SetGlobalProperty_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_server_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 property = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          property_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetGlobalProperty_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.SetGlobalProperty.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string server_id = 1;
  if (this->server_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_server_id().data(), static_cast<int>(this->_internal_server_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Orthanc.DatabasePluginMessages.SetGlobalProperty.Request.server_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_server_id(), target);
  }

  // int32 property = 2;
  if (this->property() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_property(), target);
  }

  // string value = 3;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Orthanc.DatabasePluginMessages.SetGlobalProperty.Request.value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.SetGlobalProperty.Request)
  return target;
}

size_t SetGlobalProperty_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.SetGlobalProperty.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string server_id = 1;
  if (this->server_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_server_id());
  }

  // string value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // int32 property = 2;
  if (this->property() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_property());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetGlobalProperty_Request::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SetGlobalProperty_Request*>(
      &from));
}

void SetGlobalProperty_Request::MergeFrom(const SetGlobalProperty_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.SetGlobalProperty.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.server_id().size() > 0) {
    _internal_set_server_id(from._internal_server_id());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.property() != 0) {
    _internal_set_property(from._internal_property());
  }
}

void SetGlobalProperty_Request::CopyFrom(const SetGlobalProperty_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.SetGlobalProperty.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetGlobalProperty_Request::IsInitialized() const {
  return true;
}

void SetGlobalProperty_Request::InternalSwap(SetGlobalProperty_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  server_id_.Swap(&other->server_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(property_, other->property_);
}

std::string SetGlobalProperty_Request::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.SetGlobalProperty.Request";
}


// ===================================================================

void SetGlobalProperty_Response::InitAsDefaultInstance() {
}
class SetGlobalProperty_Response::_Internal {
 public:
};

SetGlobalProperty_Response::SetGlobalProperty_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.SetGlobalProperty.Response)
}
SetGlobalProperty_Response::SetGlobalProperty_Response(const SetGlobalProperty_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.SetGlobalProperty.Response)
}

void SetGlobalProperty_Response::SharedCtor() {
}

SetGlobalProperty_Response::~SetGlobalProperty_Response() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.SetGlobalProperty.Response)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void SetGlobalProperty_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetGlobalProperty_Response::ArenaDtor(void* object) {
  SetGlobalProperty_Response* _this = reinterpret_cast< SetGlobalProperty_Response* >(object);
  (void)_this;
}
void SetGlobalProperty_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetGlobalProperty_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetGlobalProperty_Response& SetGlobalProperty_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetGlobalProperty_Response_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void SetGlobalProperty_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.SetGlobalProperty.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* SetGlobalProperty_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetGlobalProperty_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.SetGlobalProperty.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.SetGlobalProperty.Response)
  return target;
}

size_t SetGlobalProperty_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.SetGlobalProperty.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetGlobalProperty_Response::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SetGlobalProperty_Response*>(
      &from));
}

void SetGlobalProperty_Response::MergeFrom(const SetGlobalProperty_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.SetGlobalProperty.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SetGlobalProperty_Response::CopyFrom(const SetGlobalProperty_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.SetGlobalProperty.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetGlobalProperty_Response::IsInitialized() const {
  return true;
}

void SetGlobalProperty_Response::InternalSwap(SetGlobalProperty_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string SetGlobalProperty_Response::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.SetGlobalProperty.Response";
}


// ===================================================================

void SetGlobalProperty::InitAsDefaultInstance() {
}
class SetGlobalProperty::_Internal {
 public:
};

SetGlobalProperty::SetGlobalProperty(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.SetGlobalProperty)
}
SetGlobalProperty::SetGlobalProperty(const SetGlobalProperty& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.SetGlobalProperty)
}

void SetGlobalProperty::SharedCtor() {
}

SetGlobalProperty::~SetGlobalProperty() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.SetGlobalProperty)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void SetGlobalProperty::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetGlobalProperty::ArenaDtor(void* object) {
  SetGlobalProperty* _this = reinterpret_cast< SetGlobalProperty* >(object);
  (void)_this;
}
void SetGlobalProperty::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetGlobalProperty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetGlobalProperty& SetGlobalProperty::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetGlobalProperty_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void SetGlobalProperty::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.SetGlobalProperty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* SetGlobalProperty::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetGlobalProperty::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.SetGlobalProperty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.SetGlobalProperty)
  return target;
}

size_t SetGlobalProperty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.SetGlobalProperty)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetGlobalProperty::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SetGlobalProperty*>(
      &from));
}

void SetGlobalProperty::MergeFrom(const SetGlobalProperty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.SetGlobalProperty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SetGlobalProperty::CopyFrom(const SetGlobalProperty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.SetGlobalProperty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetGlobalProperty::IsInitialized() const {
  return true;
}

void SetGlobalProperty::InternalSwap(SetGlobalProperty* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string SetGlobalProperty::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.SetGlobalProperty";
}


// ===================================================================

void IncrementGlobalProperty_Request::InitAsDefaultInstance() {
}
class IncrementGlobalProperty_Request::_Internal {
 public:
};

IncrementGlobalProperty_Request::IncrementGlobalProperty_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.IncrementGlobalProperty.Request)
}
IncrementGlobalProperty_Request::IncrementGlobalProperty_Request(const IncrementGlobalProperty_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  server_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_server_id().empty()) {
    server_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_server_id(),
      GetArena());
  }
  ::memcpy(&increment_, &from.increment_,
    static_cast<size_t>(reinterpret_cast<char*>(&property_) -
    reinterpret_cast<char*>(&increment_)) + sizeof(property_));
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.IncrementGlobalProperty.Request)
}

void IncrementGlobalProperty_Request::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IncrementGlobalProperty_Request_OrthancDatabasePlugin_2eproto.base);
  server_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&increment_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&property_) -
      reinterpret_cast<char*>(&increment_)) + sizeof(property_));
}

IncrementGlobalProperty_Request::~IncrementGlobalProperty_Request() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.IncrementGlobalProperty.Request)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void IncrementGlobalProperty_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  server_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IncrementGlobalProperty_Request::ArenaDtor(void* object) {
  IncrementGlobalProperty_Request* _this = reinterpret_cast< IncrementGlobalProperty_Request* >(object);
  (void)_this;
}
void IncrementGlobalProperty_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IncrementGlobalProperty_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IncrementGlobalProperty_Request& IncrementGlobalProperty_Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IncrementGlobalProperty_Request_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void IncrementGlobalProperty_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.IncrementGlobalProperty.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&increment_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&property_) -
      reinterpret_cast<char*>(&increment_)) + sizeof(property_));
  _internal_metadata_.Clear<std::string>();
}

const char* IncrementGlobalProperty_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_server_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 property = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          property_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 increment = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          increment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IncrementGlobalProperty_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.IncrementGlobalProperty.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string server_id = 1;
  if (this->server_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_server_id().data(), static_cast<int>(this->_internal_server_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Orthanc.DatabasePluginMessages.IncrementGlobalProperty.Request.server_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_server_id(), target);
  }

  // int32 property = 2;
  if (this->property() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_property(), target);
  }

  // int64 increment = 3;
  if (this->increment() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_increment(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.IncrementGlobalProperty.Request)
  return target;
}

size_t IncrementGlobalProperty_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.IncrementGlobalProperty.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string server_id = 1;
  if (this->server_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_server_id());
  }

  // int64 increment = 3;
  if (this->increment() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_increment());
  }

  // int32 property = 2;
  if (this->property() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_property());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IncrementGlobalProperty_Request::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IncrementGlobalProperty_Request*>(
      &from));
}

void IncrementGlobalProperty_Request::MergeFrom(const IncrementGlobalProperty_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.IncrementGlobalProperty.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.server_id().size() > 0) {
    _internal_set_server_id(from._internal_server_id());
  }
  if (from.increment() != 0) {
    _internal_set_increment(from._internal_increment());
  }
  if (from.property() != 0) {
    _internal_set_property(from._internal_property());
  }
}

void IncrementGlobalProperty_Request::CopyFrom(const IncrementGlobalProperty_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.IncrementGlobalProperty.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncrementGlobalProperty_Request::IsInitialized() const {
  return true;
}

void IncrementGlobalProperty_Request::InternalSwap(IncrementGlobalProperty_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  server_id_.Swap(&other->server_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IncrementGlobalProperty_Request, property_)
      + sizeof(IncrementGlobalProperty_Request::property_)
      - PROTOBUF_FIELD_OFFSET(IncrementGlobalProperty_Request, increment_)>(
          reinterpret_cast<char*>(&increment_),
          reinterpret_cast<char*>(&other->increment_));
}

std::string IncrementGlobalProperty_Request::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.IncrementGlobalProperty.Request";
}


// ===================================================================

void IncrementGlobalProperty_Response::InitAsDefaultInstance() {
}
class IncrementGlobalProperty_Response::_Internal {
 public:
};

IncrementGlobalProperty_Response::IncrementGlobalProperty_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.IncrementGlobalProperty.Response)
}
IncrementGlobalProperty_Response::IncrementGlobalProperty_Response(const IncrementGlobalProperty_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  new_value_ = from.new_value_;
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.IncrementGlobalProperty.Response)
}

void IncrementGlobalProperty_Response::SharedCtor() {
  new_value_ = PROTOBUF_LONGLONG(0);
}

IncrementGlobalProperty_Response::~IncrementGlobalProperty_Response() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.IncrementGlobalProperty.Response)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void IncrementGlobalProperty_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IncrementGlobalProperty_Response::ArenaDtor(void* object) {
  IncrementGlobalProperty_Response* _this = reinterpret_cast< IncrementGlobalProperty_Response* >(object);
  (void)_this;
}
void IncrementGlobalProperty_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IncrementGlobalProperty_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IncrementGlobalProperty_Response& IncrementGlobalProperty_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IncrementGlobalProperty_Response_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void IncrementGlobalProperty_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.IncrementGlobalProperty.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  new_value_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<std::string>();
}

const char* IncrementGlobalProperty_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 new_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          new_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IncrementGlobalProperty_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.IncrementGlobalProperty.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 new_value = 1;
  if (this->new_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_new_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.IncrementGlobalProperty.Response)
  return target;
}

size_t IncrementGlobalProperty_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.IncrementGlobalProperty.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 new_value = 1;
  if (this->new_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_new_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IncrementGlobalProperty_Response::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IncrementGlobalProperty_Response*>(
      &from));
}

void IncrementGlobalProperty_Response::MergeFrom(const IncrementGlobalProperty_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.IncrementGlobalProperty.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.new_value() != 0) {
    _internal_set_new_value(from._internal_new_value());
  }
}

void IncrementGlobalProperty_Response::CopyFrom(const IncrementGlobalProperty_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.IncrementGlobalProperty.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncrementGlobalProperty_Response::IsInitialized() const {
  return true;
}

void IncrementGlobalProperty_Response::InternalSwap(IncrementGlobalProperty_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(new_value_, other->new_value_);
}

std::string IncrementGlobalProperty_Response::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.IncrementGlobalProperty.Response";
}


// ===================================================================

void IncrementGlobalProperty::InitAsDefaultInstance() {
}
class IncrementGlobalProperty::_Internal {
 public:
};

IncrementGlobalProperty::IncrementGlobalProperty(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.IncrementGlobalProperty)
}
IncrementGlobalProperty::IncrementGlobalProperty(const IncrementGlobalProperty& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.IncrementGlobalProperty)
}

void IncrementGlobalProperty::SharedCtor() {
}

IncrementGlobalProperty::~IncrementGlobalProperty() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.IncrementGlobalProperty)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void IncrementGlobalProperty::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IncrementGlobalProperty::ArenaDtor(void* object) {
  IncrementGlobalProperty* _this = reinterpret_cast< IncrementGlobalProperty* >(object);
  (void)_this;
}
void IncrementGlobalProperty::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IncrementGlobalProperty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IncrementGlobalProperty& IncrementGlobalProperty::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IncrementGlobalProperty_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void IncrementGlobalProperty::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.IncrementGlobalProperty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* IncrementGlobalProperty::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IncrementGlobalProperty::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.IncrementGlobalProperty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.IncrementGlobalProperty)
  return target;
}

size_t IncrementGlobalProperty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.IncrementGlobalProperty)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IncrementGlobalProperty::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IncrementGlobalProperty*>(
      &from));
}

void IncrementGlobalProperty::MergeFrom(const IncrementGlobalProperty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.IncrementGlobalProperty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void IncrementGlobalProperty::CopyFrom(const IncrementGlobalProperty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.IncrementGlobalProperty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncrementGlobalProperty::IsInitialized() const {
  return true;
}

void IncrementGlobalProperty::InternalSwap(IncrementGlobalProperty* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string IncrementGlobalProperty::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.IncrementGlobalProperty";
}


// ===================================================================

void UpdateAndGetStatistics_Request::InitAsDefaultInstance() {
}
class UpdateAndGetStatistics_Request::_Internal {
 public:
};

UpdateAndGetStatistics_Request::UpdateAndGetStatistics_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.UpdateAndGetStatistics.Request)
}
UpdateAndGetStatistics_Request::UpdateAndGetStatistics_Request(const UpdateAndGetStatistics_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.UpdateAndGetStatistics.Request)
}

void UpdateAndGetStatistics_Request::SharedCtor() {
}

UpdateAndGetStatistics_Request::~UpdateAndGetStatistics_Request() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.UpdateAndGetStatistics.Request)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void UpdateAndGetStatistics_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UpdateAndGetStatistics_Request::ArenaDtor(void* object) {
  UpdateAndGetStatistics_Request* _this = reinterpret_cast< UpdateAndGetStatistics_Request* >(object);
  (void)_this;
}
void UpdateAndGetStatistics_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateAndGetStatistics_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateAndGetStatistics_Request& UpdateAndGetStatistics_Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateAndGetStatistics_Request_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void UpdateAndGetStatistics_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.UpdateAndGetStatistics.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* UpdateAndGetStatistics_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateAndGetStatistics_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.UpdateAndGetStatistics.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.UpdateAndGetStatistics.Request)
  return target;
}

size_t UpdateAndGetStatistics_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.UpdateAndGetStatistics.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateAndGetStatistics_Request::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const UpdateAndGetStatistics_Request*>(
      &from));
}

void UpdateAndGetStatistics_Request::MergeFrom(const UpdateAndGetStatistics_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.UpdateAndGetStatistics.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UpdateAndGetStatistics_Request::CopyFrom(const UpdateAndGetStatistics_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.UpdateAndGetStatistics.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateAndGetStatistics_Request::IsInitialized() const {
  return true;
}

void UpdateAndGetStatistics_Request::InternalSwap(UpdateAndGetStatistics_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string UpdateAndGetStatistics_Request::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.UpdateAndGetStatistics.Request";
}


// ===================================================================

void UpdateAndGetStatistics_Response::InitAsDefaultInstance() {
}
class UpdateAndGetStatistics_Response::_Internal {
 public:
};

UpdateAndGetStatistics_Response::UpdateAndGetStatistics_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.UpdateAndGetStatistics.Response)
}
UpdateAndGetStatistics_Response::UpdateAndGetStatistics_Response(const UpdateAndGetStatistics_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&patients_count_, &from.patients_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_uncompressed_size_) -
    reinterpret_cast<char*>(&patients_count_)) + sizeof(total_uncompressed_size_));
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.UpdateAndGetStatistics.Response)
}

void UpdateAndGetStatistics_Response::SharedCtor() {
  ::memset(&patients_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_uncompressed_size_) -
      reinterpret_cast<char*>(&patients_count_)) + sizeof(total_uncompressed_size_));
}

UpdateAndGetStatistics_Response::~UpdateAndGetStatistics_Response() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.UpdateAndGetStatistics.Response)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void UpdateAndGetStatistics_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UpdateAndGetStatistics_Response::ArenaDtor(void* object) {
  UpdateAndGetStatistics_Response* _this = reinterpret_cast< UpdateAndGetStatistics_Response* >(object);
  (void)_this;
}
void UpdateAndGetStatistics_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateAndGetStatistics_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateAndGetStatistics_Response& UpdateAndGetStatistics_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateAndGetStatistics_Response_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void UpdateAndGetStatistics_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.UpdateAndGetStatistics.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&patients_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_uncompressed_size_) -
      reinterpret_cast<char*>(&patients_count_)) + sizeof(total_uncompressed_size_));
  _internal_metadata_.Clear<std::string>();
}

const char* UpdateAndGetStatistics_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 patients_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          patients_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 studies_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          studies_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 series_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          series_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 instances_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          instances_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 total_compressed_size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          total_compressed_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 total_uncompressed_size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          total_uncompressed_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateAndGetStatistics_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.UpdateAndGetStatistics.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 patients_count = 1;
  if (this->patients_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_patients_count(), target);
  }

  // int64 studies_count = 2;
  if (this->studies_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_studies_count(), target);
  }

  // int64 series_count = 3;
  if (this->series_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_series_count(), target);
  }

  // int64 instances_count = 4;
  if (this->instances_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_instances_count(), target);
  }

  // int64 total_compressed_size = 5;
  if (this->total_compressed_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_total_compressed_size(), target);
  }

  // int64 total_uncompressed_size = 6;
  if (this->total_uncompressed_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_total_uncompressed_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.UpdateAndGetStatistics.Response)
  return target;
}

size_t UpdateAndGetStatistics_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.UpdateAndGetStatistics.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 patients_count = 1;
  if (this->patients_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_patients_count());
  }

  // int64 studies_count = 2;
  if (this->studies_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_studies_count());
  }

  // int64 series_count = 3;
  if (this->series_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_series_count());
  }

  // int64 instances_count = 4;
  if (this->instances_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_instances_count());
  }

  // int64 total_compressed_size = 5;
  if (this->total_compressed_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total_compressed_size());
  }

  // int64 total_uncompressed_size = 6;
  if (this->total_uncompressed_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total_uncompressed_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateAndGetStatistics_Response::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const UpdateAndGetStatistics_Response*>(
      &from));
}

void UpdateAndGetStatistics_Response::MergeFrom(const UpdateAndGetStatistics_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.UpdateAndGetStatistics.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.patients_count() != 0) {
    _internal_set_patients_count(from._internal_patients_count());
  }
  if (from.studies_count() != 0) {
    _internal_set_studies_count(from._internal_studies_count());
  }
  if (from.series_count() != 0) {
    _internal_set_series_count(from._internal_series_count());
  }
  if (from.instances_count() != 0) {
    _internal_set_instances_count(from._internal_instances_count());
  }
  if (from.total_compressed_size() != 0) {
    _internal_set_total_compressed_size(from._internal_total_compressed_size());
  }
  if (from.total_uncompressed_size() != 0) {
    _internal_set_total_uncompressed_size(from._internal_total_uncompressed_size());
  }
}

void UpdateAndGetStatistics_Response::CopyFrom(const UpdateAndGetStatistics_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.UpdateAndGetStatistics.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateAndGetStatistics_Response::IsInitialized() const {
  return true;
}

void UpdateAndGetStatistics_Response::InternalSwap(UpdateAndGetStatistics_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateAndGetStatistics_Response, total_uncompressed_size_)
      + sizeof(UpdateAndGetStatistics_Response::total_uncompressed_size_)
      - PROTOBUF_FIELD_OFFSET(UpdateAndGetStatistics_Response, patients_count_)>(
          reinterpret_cast<char*>(&patients_count_),
          reinterpret_cast<char*>(&other->patients_count_));
}

std::string UpdateAndGetStatistics_Response::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.UpdateAndGetStatistics.Response";
}


// ===================================================================

void UpdateAndGetStatistics::InitAsDefaultInstance() {
}
class UpdateAndGetStatistics::_Internal {
 public:
};

UpdateAndGetStatistics::UpdateAndGetStatistics(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.UpdateAndGetStatistics)
}
UpdateAndGetStatistics::UpdateAndGetStatistics(const UpdateAndGetStatistics& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.UpdateAndGetStatistics)
}

void UpdateAndGetStatistics::SharedCtor() {
}

UpdateAndGetStatistics::~UpdateAndGetStatistics() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.UpdateAndGetStatistics)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void UpdateAndGetStatistics::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UpdateAndGetStatistics::ArenaDtor(void* object) {
  UpdateAndGetStatistics* _this = reinterpret_cast< UpdateAndGetStatistics* >(object);
  (void)_this;
}
void UpdateAndGetStatistics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateAndGetStatistics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateAndGetStatistics& UpdateAndGetStatistics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateAndGetStatistics_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void UpdateAndGetStatistics::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.UpdateAndGetStatistics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* UpdateAndGetStatistics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateAndGetStatistics::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.UpdateAndGetStatistics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.UpdateAndGetStatistics)
  return target;
}

size_t UpdateAndGetStatistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.UpdateAndGetStatistics)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateAndGetStatistics::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const UpdateAndGetStatistics*>(
      &from));
}

void UpdateAndGetStatistics::MergeFrom(const UpdateAndGetStatistics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.UpdateAndGetStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UpdateAndGetStatistics::CopyFrom(const UpdateAndGetStatistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.UpdateAndGetStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateAndGetStatistics::IsInitialized() const {
  return true;
}

void UpdateAndGetStatistics::InternalSwap(UpdateAndGetStatistics* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string UpdateAndGetStatistics::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.UpdateAndGetStatistics";
}


// ===================================================================

void ClearMainDicomTags_Request::InitAsDefaultInstance() {
}
class ClearMainDicomTags_Request::_Internal {
 public:
};

ClearMainDicomTags_Request::ClearMainDicomTags_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.ClearMainDicomTags.Request)
}
ClearMainDicomTags_Request::ClearMainDicomTags_Request(const ClearMainDicomTags_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.ClearMainDicomTags.Request)
}

void ClearMainDicomTags_Request::SharedCtor() {
  id_ = PROTOBUF_LONGLONG(0);
}

ClearMainDicomTags_Request::~ClearMainDicomTags_Request() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.ClearMainDicomTags.Request)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ClearMainDicomTags_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ClearMainDicomTags_Request::ArenaDtor(void* object) {
  ClearMainDicomTags_Request* _this = reinterpret_cast< ClearMainDicomTags_Request* >(object);
  (void)_this;
}
void ClearMainDicomTags_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClearMainDicomTags_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClearMainDicomTags_Request& ClearMainDicomTags_Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClearMainDicomTags_Request_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void ClearMainDicomTags_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.ClearMainDicomTags.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<std::string>();
}

const char* ClearMainDicomTags_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClearMainDicomTags_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.ClearMainDicomTags.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.ClearMainDicomTags.Request)
  return target;
}

size_t ClearMainDicomTags_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.ClearMainDicomTags.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClearMainDicomTags_Request::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ClearMainDicomTags_Request*>(
      &from));
}

void ClearMainDicomTags_Request::MergeFrom(const ClearMainDicomTags_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.ClearMainDicomTags.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void ClearMainDicomTags_Request::CopyFrom(const ClearMainDicomTags_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.ClearMainDicomTags.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearMainDicomTags_Request::IsInitialized() const {
  return true;
}

void ClearMainDicomTags_Request::InternalSwap(ClearMainDicomTags_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(id_, other->id_);
}

std::string ClearMainDicomTags_Request::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.ClearMainDicomTags.Request";
}


// ===================================================================

void ClearMainDicomTags_Response::InitAsDefaultInstance() {
}
class ClearMainDicomTags_Response::_Internal {
 public:
};

ClearMainDicomTags_Response::ClearMainDicomTags_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.ClearMainDicomTags.Response)
}
ClearMainDicomTags_Response::ClearMainDicomTags_Response(const ClearMainDicomTags_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.ClearMainDicomTags.Response)
}

void ClearMainDicomTags_Response::SharedCtor() {
}

ClearMainDicomTags_Response::~ClearMainDicomTags_Response() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.ClearMainDicomTags.Response)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ClearMainDicomTags_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ClearMainDicomTags_Response::ArenaDtor(void* object) {
  ClearMainDicomTags_Response* _this = reinterpret_cast< ClearMainDicomTags_Response* >(object);
  (void)_this;
}
void ClearMainDicomTags_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClearMainDicomTags_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClearMainDicomTags_Response& ClearMainDicomTags_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClearMainDicomTags_Response_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void ClearMainDicomTags_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.ClearMainDicomTags.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* ClearMainDicomTags_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClearMainDicomTags_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.ClearMainDicomTags.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.ClearMainDicomTags.Response)
  return target;
}

size_t ClearMainDicomTags_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.ClearMainDicomTags.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClearMainDicomTags_Response::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ClearMainDicomTags_Response*>(
      &from));
}

void ClearMainDicomTags_Response::MergeFrom(const ClearMainDicomTags_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.ClearMainDicomTags.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ClearMainDicomTags_Response::CopyFrom(const ClearMainDicomTags_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.ClearMainDicomTags.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearMainDicomTags_Response::IsInitialized() const {
  return true;
}

void ClearMainDicomTags_Response::InternalSwap(ClearMainDicomTags_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string ClearMainDicomTags_Response::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.ClearMainDicomTags.Response";
}


// ===================================================================

void ClearMainDicomTags::InitAsDefaultInstance() {
}
class ClearMainDicomTags::_Internal {
 public:
};

ClearMainDicomTags::ClearMainDicomTags(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.ClearMainDicomTags)
}
ClearMainDicomTags::ClearMainDicomTags(const ClearMainDicomTags& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.ClearMainDicomTags)
}

void ClearMainDicomTags::SharedCtor() {
}

ClearMainDicomTags::~ClearMainDicomTags() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.ClearMainDicomTags)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ClearMainDicomTags::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ClearMainDicomTags::ArenaDtor(void* object) {
  ClearMainDicomTags* _this = reinterpret_cast< ClearMainDicomTags* >(object);
  (void)_this;
}
void ClearMainDicomTags::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClearMainDicomTags::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClearMainDicomTags& ClearMainDicomTags::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClearMainDicomTags_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void ClearMainDicomTags::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.ClearMainDicomTags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* ClearMainDicomTags::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClearMainDicomTags::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.ClearMainDicomTags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.ClearMainDicomTags)
  return target;
}

size_t ClearMainDicomTags::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.ClearMainDicomTags)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClearMainDicomTags::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ClearMainDicomTags*>(
      &from));
}

void ClearMainDicomTags::MergeFrom(const ClearMainDicomTags& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.ClearMainDicomTags)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ClearMainDicomTags::CopyFrom(const ClearMainDicomTags& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.ClearMainDicomTags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearMainDicomTags::IsInitialized() const {
  return true;
}

void ClearMainDicomTags::InternalSwap(ClearMainDicomTags* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string ClearMainDicomTags::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.ClearMainDicomTags";
}


// ===================================================================

void SetMetadata_Request::InitAsDefaultInstance() {
}
class SetMetadata_Request::_Internal {
 public:
};

SetMetadata_Request::SetMetadata_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.SetMetadata.Request)
}
SetMetadata_Request::SetMetadata_Request(const SetMetadata_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&metadata_type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(metadata_type_));
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.SetMetadata.Request)
}

void SetMetadata_Request::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetMetadata_Request_OrthancDatabasePlugin_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&metadata_type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(metadata_type_));
}

SetMetadata_Request::~SetMetadata_Request() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.SetMetadata.Request)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void SetMetadata_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetMetadata_Request::ArenaDtor(void* object) {
  SetMetadata_Request* _this = reinterpret_cast< SetMetadata_Request* >(object);
  (void)_this;
}
void SetMetadata_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetMetadata_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetMetadata_Request& SetMetadata_Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetMetadata_Request_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void SetMetadata_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.SetMetadata.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&metadata_type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(metadata_type_));
  _internal_metadata_.Clear<std::string>();
}

const char* SetMetadata_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 metadata_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          metadata_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 revision = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          revision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetMetadata_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.SetMetadata.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // int32 metadata_type = 2;
  if (this->metadata_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_metadata_type(), target);
  }

  // string value = 3;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Orthanc.DatabasePluginMessages.SetMetadata.Request.value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_value(), target);
  }

  // int64 revision = 4;
  if (this->revision() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_revision(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.SetMetadata.Request)
  return target;
}

size_t SetMetadata_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.SetMetadata.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // int64 revision = 4;
  if (this->revision() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_revision());
  }

  // int32 metadata_type = 2;
  if (this->metadata_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_metadata_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetMetadata_Request::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SetMetadata_Request*>(
      &from));
}

void SetMetadata_Request::MergeFrom(const SetMetadata_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.SetMetadata.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.revision() != 0) {
    _internal_set_revision(from._internal_revision());
  }
  if (from.metadata_type() != 0) {
    _internal_set_metadata_type(from._internal_metadata_type());
  }
}

void SetMetadata_Request::CopyFrom(const SetMetadata_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.SetMetadata.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetMetadata_Request::IsInitialized() const {
  return true;
}

void SetMetadata_Request::InternalSwap(SetMetadata_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetMetadata_Request, metadata_type_)
      + sizeof(SetMetadata_Request::metadata_type_)
      - PROTOBUF_FIELD_OFFSET(SetMetadata_Request, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

std::string SetMetadata_Request::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.SetMetadata.Request";
}


// ===================================================================

void SetMetadata_Response::InitAsDefaultInstance() {
}
class SetMetadata_Response::_Internal {
 public:
};

SetMetadata_Response::SetMetadata_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.SetMetadata.Response)
}
SetMetadata_Response::SetMetadata_Response(const SetMetadata_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.SetMetadata.Response)
}

void SetMetadata_Response::SharedCtor() {
}

SetMetadata_Response::~SetMetadata_Response() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.SetMetadata.Response)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void SetMetadata_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetMetadata_Response::ArenaDtor(void* object) {
  SetMetadata_Response* _this = reinterpret_cast< SetMetadata_Response* >(object);
  (void)_this;
}
void SetMetadata_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetMetadata_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetMetadata_Response& SetMetadata_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetMetadata_Response_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void SetMetadata_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.SetMetadata.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* SetMetadata_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetMetadata_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.SetMetadata.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.SetMetadata.Response)
  return target;
}

size_t SetMetadata_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.SetMetadata.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetMetadata_Response::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SetMetadata_Response*>(
      &from));
}

void SetMetadata_Response::MergeFrom(const SetMetadata_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.SetMetadata.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SetMetadata_Response::CopyFrom(const SetMetadata_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.SetMetadata.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetMetadata_Response::IsInitialized() const {
  return true;
}

void SetMetadata_Response::InternalSwap(SetMetadata_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string SetMetadata_Response::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.SetMetadata.Response";
}


// ===================================================================

void SetMetadata::InitAsDefaultInstance() {
}
class SetMetadata::_Internal {
 public:
};

SetMetadata::SetMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.SetMetadata)
}
SetMetadata::SetMetadata(const SetMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.SetMetadata)
}

void SetMetadata::SharedCtor() {
}

SetMetadata::~SetMetadata() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.SetMetadata)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void SetMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetMetadata::ArenaDtor(void* object) {
  SetMetadata* _this = reinterpret_cast< SetMetadata* >(object);
  (void)_this;
}
void SetMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetMetadata& SetMetadata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetMetadata_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void SetMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.SetMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* SetMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetMetadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.SetMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.SetMetadata)
  return target;
}

size_t SetMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.SetMetadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetMetadata::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SetMetadata*>(
      &from));
}

void SetMetadata::MergeFrom(const SetMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.SetMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SetMetadata::CopyFrom(const SetMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.SetMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetMetadata::IsInitialized() const {
  return true;
}

void SetMetadata::InternalSwap(SetMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string SetMetadata::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.SetMetadata";
}


// ===================================================================

void SetProtectedPatient_Request::InitAsDefaultInstance() {
}
class SetProtectedPatient_Request::_Internal {
 public:
};

SetProtectedPatient_Request::SetProtectedPatient_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.SetProtectedPatient.Request)
}
SetProtectedPatient_Request::SetProtectedPatient_Request(const SetProtectedPatient_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&patient_id_, &from.patient_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&protected_patient_) -
    reinterpret_cast<char*>(&patient_id_)) + sizeof(protected_patient_));
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.SetProtectedPatient.Request)
}

void SetProtectedPatient_Request::SharedCtor() {
  ::memset(&patient_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&protected_patient_) -
      reinterpret_cast<char*>(&patient_id_)) + sizeof(protected_patient_));
}

SetProtectedPatient_Request::~SetProtectedPatient_Request() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.SetProtectedPatient.Request)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void SetProtectedPatient_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetProtectedPatient_Request::ArenaDtor(void* object) {
  SetProtectedPatient_Request* _this = reinterpret_cast< SetProtectedPatient_Request* >(object);
  (void)_this;
}
void SetProtectedPatient_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetProtectedPatient_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetProtectedPatient_Request& SetProtectedPatient_Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetProtectedPatient_Request_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void SetProtectedPatient_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.SetProtectedPatient.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&patient_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&protected_patient_) -
      reinterpret_cast<char*>(&patient_id_)) + sizeof(protected_patient_));
  _internal_metadata_.Clear<std::string>();
}

const char* SetProtectedPatient_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 patient_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          patient_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool protected_patient = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          protected_patient_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetProtectedPatient_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.SetProtectedPatient.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 patient_id = 1;
  if (this->patient_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_patient_id(), target);
  }

  // bool protected_patient = 2;
  if (this->protected_patient() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_protected_patient(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.SetProtectedPatient.Request)
  return target;
}

size_t SetProtectedPatient_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.SetProtectedPatient.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 patient_id = 1;
  if (this->patient_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_patient_id());
  }

  // bool protected_patient = 2;
  if (this->protected_patient() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetProtectedPatient_Request::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SetProtectedPatient_Request*>(
      &from));
}

void SetProtectedPatient_Request::MergeFrom(const SetProtectedPatient_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.SetProtectedPatient.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.patient_id() != 0) {
    _internal_set_patient_id(from._internal_patient_id());
  }
  if (from.protected_patient() != 0) {
    _internal_set_protected_patient(from._internal_protected_patient());
  }
}

void SetProtectedPatient_Request::CopyFrom(const SetProtectedPatient_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.SetProtectedPatient.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetProtectedPatient_Request::IsInitialized() const {
  return true;
}

void SetProtectedPatient_Request::InternalSwap(SetProtectedPatient_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetProtectedPatient_Request, protected_patient_)
      + sizeof(SetProtectedPatient_Request::protected_patient_)
      - PROTOBUF_FIELD_OFFSET(SetProtectedPatient_Request, patient_id_)>(
          reinterpret_cast<char*>(&patient_id_),
          reinterpret_cast<char*>(&other->patient_id_));
}

std::string SetProtectedPatient_Request::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.SetProtectedPatient.Request";
}


// ===================================================================

void SetProtectedPatient_Response::InitAsDefaultInstance() {
}
class SetProtectedPatient_Response::_Internal {
 public:
};

SetProtectedPatient_Response::SetProtectedPatient_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.SetProtectedPatient.Response)
}
SetProtectedPatient_Response::SetProtectedPatient_Response(const SetProtectedPatient_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.SetProtectedPatient.Response)
}

void SetProtectedPatient_Response::SharedCtor() {
}

SetProtectedPatient_Response::~SetProtectedPatient_Response() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.SetProtectedPatient.Response)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void SetProtectedPatient_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetProtectedPatient_Response::ArenaDtor(void* object) {
  SetProtectedPatient_Response* _this = reinterpret_cast< SetProtectedPatient_Response* >(object);
  (void)_this;
}
void SetProtectedPatient_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetProtectedPatient_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetProtectedPatient_Response& SetProtectedPatient_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetProtectedPatient_Response_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void SetProtectedPatient_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.SetProtectedPatient.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* SetProtectedPatient_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetProtectedPatient_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.SetProtectedPatient.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.SetProtectedPatient.Response)
  return target;
}

size_t SetProtectedPatient_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.SetProtectedPatient.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetProtectedPatient_Response::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SetProtectedPatient_Response*>(
      &from));
}

void SetProtectedPatient_Response::MergeFrom(const SetProtectedPatient_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.SetProtectedPatient.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SetProtectedPatient_Response::CopyFrom(const SetProtectedPatient_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.SetProtectedPatient.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetProtectedPatient_Response::IsInitialized() const {
  return true;
}

void SetProtectedPatient_Response::InternalSwap(SetProtectedPatient_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string SetProtectedPatient_Response::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.SetProtectedPatient.Response";
}


// ===================================================================

void SetProtectedPatient::InitAsDefaultInstance() {
}
class SetProtectedPatient::_Internal {
 public:
};

SetProtectedPatient::SetProtectedPatient(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.SetProtectedPatient)
}
SetProtectedPatient::SetProtectedPatient(const SetProtectedPatient& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.SetProtectedPatient)
}

void SetProtectedPatient::SharedCtor() {
}

SetProtectedPatient::~SetProtectedPatient() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.SetProtectedPatient)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void SetProtectedPatient::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetProtectedPatient::ArenaDtor(void* object) {
  SetProtectedPatient* _this = reinterpret_cast< SetProtectedPatient* >(object);
  (void)_this;
}
void SetProtectedPatient::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetProtectedPatient::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetProtectedPatient& SetProtectedPatient::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetProtectedPatient_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void SetProtectedPatient::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.SetProtectedPatient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* SetProtectedPatient::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetProtectedPatient::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.SetProtectedPatient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.SetProtectedPatient)
  return target;
}

size_t SetProtectedPatient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.SetProtectedPatient)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetProtectedPatient::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SetProtectedPatient*>(
      &from));
}

void SetProtectedPatient::MergeFrom(const SetProtectedPatient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.SetProtectedPatient)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SetProtectedPatient::CopyFrom(const SetProtectedPatient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.SetProtectedPatient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetProtectedPatient::IsInitialized() const {
  return true;
}

void SetProtectedPatient::InternalSwap(SetProtectedPatient* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string SetProtectedPatient::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.SetProtectedPatient";
}


// ===================================================================

void IsDiskSizeAbove_Request::InitAsDefaultInstance() {
}
class IsDiskSizeAbove_Request::_Internal {
 public:
};

IsDiskSizeAbove_Request::IsDiskSizeAbove_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.IsDiskSizeAbove.Request)
}
IsDiskSizeAbove_Request::IsDiskSizeAbove_Request(const IsDiskSizeAbove_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  threshold_ = from.threshold_;
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.IsDiskSizeAbove.Request)
}

void IsDiskSizeAbove_Request::SharedCtor() {
  threshold_ = PROTOBUF_ULONGLONG(0);
}

IsDiskSizeAbove_Request::~IsDiskSizeAbove_Request() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.IsDiskSizeAbove.Request)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void IsDiskSizeAbove_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IsDiskSizeAbove_Request::ArenaDtor(void* object) {
  IsDiskSizeAbove_Request* _this = reinterpret_cast< IsDiskSizeAbove_Request* >(object);
  (void)_this;
}
void IsDiskSizeAbove_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IsDiskSizeAbove_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IsDiskSizeAbove_Request& IsDiskSizeAbove_Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IsDiskSizeAbove_Request_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void IsDiskSizeAbove_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.IsDiskSizeAbove.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  threshold_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<std::string>();
}

const char* IsDiskSizeAbove_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 threshold = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IsDiskSizeAbove_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.IsDiskSizeAbove.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 threshold = 1;
  if (this->threshold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_threshold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.IsDiskSizeAbove.Request)
  return target;
}

size_t IsDiskSizeAbove_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.IsDiskSizeAbove.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 threshold = 1;
  if (this->threshold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_threshold());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IsDiskSizeAbove_Request::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IsDiskSizeAbove_Request*>(
      &from));
}

void IsDiskSizeAbove_Request::MergeFrom(const IsDiskSizeAbove_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.IsDiskSizeAbove.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.threshold() != 0) {
    _internal_set_threshold(from._internal_threshold());
  }
}

void IsDiskSizeAbove_Request::CopyFrom(const IsDiskSizeAbove_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.IsDiskSizeAbove.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsDiskSizeAbove_Request::IsInitialized() const {
  return true;
}

void IsDiskSizeAbove_Request::InternalSwap(IsDiskSizeAbove_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(threshold_, other->threshold_);
}

std::string IsDiskSizeAbove_Request::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.IsDiskSizeAbove.Request";
}


// ===================================================================

void IsDiskSizeAbove_Response::InitAsDefaultInstance() {
}
class IsDiskSizeAbove_Response::_Internal {
 public:
};

IsDiskSizeAbove_Response::IsDiskSizeAbove_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.IsDiskSizeAbove.Response)
}
IsDiskSizeAbove_Response::IsDiskSizeAbove_Response(const IsDiskSizeAbove_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.IsDiskSizeAbove.Response)
}

void IsDiskSizeAbove_Response::SharedCtor() {
  result_ = false;
}

IsDiskSizeAbove_Response::~IsDiskSizeAbove_Response() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.IsDiskSizeAbove.Response)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void IsDiskSizeAbove_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IsDiskSizeAbove_Response::ArenaDtor(void* object) {
  IsDiskSizeAbove_Response* _this = reinterpret_cast< IsDiskSizeAbove_Response* >(object);
  (void)_this;
}
void IsDiskSizeAbove_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IsDiskSizeAbove_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IsDiskSizeAbove_Response& IsDiskSizeAbove_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IsDiskSizeAbove_Response_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void IsDiskSizeAbove_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.IsDiskSizeAbove.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = false;
  _internal_metadata_.Clear<std::string>();
}

const char* IsDiskSizeAbove_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IsDiskSizeAbove_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.IsDiskSizeAbove.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.IsDiskSizeAbove.Response)
  return target;
}

size_t IsDiskSizeAbove_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.IsDiskSizeAbove.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool result = 1;
  if (this->result() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IsDiskSizeAbove_Response::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IsDiskSizeAbove_Response*>(
      &from));
}

void IsDiskSizeAbove_Response::MergeFrom(const IsDiskSizeAbove_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.IsDiskSizeAbove.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void IsDiskSizeAbove_Response::CopyFrom(const IsDiskSizeAbove_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.IsDiskSizeAbove.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsDiskSizeAbove_Response::IsInitialized() const {
  return true;
}

void IsDiskSizeAbove_Response::InternalSwap(IsDiskSizeAbove_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(result_, other->result_);
}

std::string IsDiskSizeAbove_Response::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.IsDiskSizeAbove.Response";
}


// ===================================================================

void IsDiskSizeAbove::InitAsDefaultInstance() {
}
class IsDiskSizeAbove::_Internal {
 public:
};

IsDiskSizeAbove::IsDiskSizeAbove(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.IsDiskSizeAbove)
}
IsDiskSizeAbove::IsDiskSizeAbove(const IsDiskSizeAbove& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.IsDiskSizeAbove)
}

void IsDiskSizeAbove::SharedCtor() {
}

IsDiskSizeAbove::~IsDiskSizeAbove() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.IsDiskSizeAbove)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void IsDiskSizeAbove::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IsDiskSizeAbove::ArenaDtor(void* object) {
  IsDiskSizeAbove* _this = reinterpret_cast< IsDiskSizeAbove* >(object);
  (void)_this;
}
void IsDiskSizeAbove::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IsDiskSizeAbove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IsDiskSizeAbove& IsDiskSizeAbove::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IsDiskSizeAbove_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void IsDiskSizeAbove::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.IsDiskSizeAbove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* IsDiskSizeAbove::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IsDiskSizeAbove::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.IsDiskSizeAbove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.IsDiskSizeAbove)
  return target;
}

size_t IsDiskSizeAbove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.IsDiskSizeAbove)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IsDiskSizeAbove::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IsDiskSizeAbove*>(
      &from));
}

void IsDiskSizeAbove::MergeFrom(const IsDiskSizeAbove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.IsDiskSizeAbove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void IsDiskSizeAbove::CopyFrom(const IsDiskSizeAbove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.IsDiskSizeAbove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsDiskSizeAbove::IsInitialized() const {
  return true;
}

void IsDiskSizeAbove::InternalSwap(IsDiskSizeAbove* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string IsDiskSizeAbove::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.IsDiskSizeAbove";
}


// ===================================================================

void LookupResources_Request::InitAsDefaultInstance() {
}
class LookupResources_Request::_Internal {
 public:
};

LookupResources_Request::LookupResources_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  lookup_(arena),
  labels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.LookupResources.Request)
}
LookupResources_Request::LookupResources_Request(const LookupResources_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      lookup_(from.lookup_),
      labels_(from.labels_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&query_level_, &from.query_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&labels_constraint_) -
    reinterpret_cast<char*>(&query_level_)) + sizeof(labels_constraint_));
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.LookupResources.Request)
}

void LookupResources_Request::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LookupResources_Request_OrthancDatabasePlugin_2eproto.base);
  ::memset(&query_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&labels_constraint_) -
      reinterpret_cast<char*>(&query_level_)) + sizeof(labels_constraint_));
}

LookupResources_Request::~LookupResources_Request() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.LookupResources.Request)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void LookupResources_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LookupResources_Request::ArenaDtor(void* object) {
  LookupResources_Request* _this = reinterpret_cast< LookupResources_Request* >(object);
  (void)_this;
}
void LookupResources_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LookupResources_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LookupResources_Request& LookupResources_Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LookupResources_Request_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void LookupResources_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.LookupResources.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lookup_.Clear();
  labels_.Clear();
  ::memset(&query_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&labels_constraint_) -
      reinterpret_cast<char*>(&query_level_)) + sizeof(labels_constraint_));
  _internal_metadata_.Clear<std::string>();
}

const char* LookupResources_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Orthanc.DatabasePluginMessages.DatabaseConstraint lookup = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lookup(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.ResourceType query_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_query_level(static_cast<::Orthanc::DatabasePluginMessages::ResourceType>(val));
        } else goto handle_unusual;
        continue;
      // uint32 limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool retrieve_instances_ids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          retrieve_instances_ids_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string labels = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_labels();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.LabelsConstraintType labels_constraint = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_labels_constraint(static_cast<::Orthanc::DatabasePluginMessages::LabelsConstraintType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LookupResources_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.LookupResources.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Orthanc.DatabasePluginMessages.DatabaseConstraint lookup = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lookup_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_lookup(i), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.ResourceType query_level = 2;
  if (this->query_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_query_level(), target);
  }

  // uint32 limit = 3;
  if (this->limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_limit(), target);
  }

  // bool retrieve_instances_ids = 4;
  if (this->retrieve_instances_ids() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_retrieve_instances_ids(), target);
  }

  // repeated string labels = 5;
  for (int i = 0, n = this->_internal_labels_size(); i < n; i++) {
    const auto& s = this->_internal_labels(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Orthanc.DatabasePluginMessages.LookupResources.Request.labels");
    target = stream->WriteString(5, s, target);
  }

  // .Orthanc.DatabasePluginMessages.LabelsConstraintType labels_constraint = 6;
  if (this->labels_constraint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_labels_constraint(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.LookupResources.Request)
  return target;
}

size_t LookupResources_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.LookupResources.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Orthanc.DatabasePluginMessages.DatabaseConstraint lookup = 1;
  total_size += 1UL * this->_internal_lookup_size();
  for (const auto& msg : this->lookup_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string labels = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(labels_.size());
  for (int i = 0, n = labels_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      labels_.Get(i));
  }

  // .Orthanc.DatabasePluginMessages.ResourceType query_level = 2;
  if (this->query_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_query_level());
  }

  // uint32 limit = 3;
  if (this->limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_limit());
  }

  // bool retrieve_instances_ids = 4;
  if (this->retrieve_instances_ids() != 0) {
    total_size += 1 + 1;
  }

  // .Orthanc.DatabasePluginMessages.LabelsConstraintType labels_constraint = 6;
  if (this->labels_constraint() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_labels_constraint());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LookupResources_Request::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LookupResources_Request*>(
      &from));
}

void LookupResources_Request::MergeFrom(const LookupResources_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.LookupResources.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lookup_.MergeFrom(from.lookup_);
  labels_.MergeFrom(from.labels_);
  if (from.query_level() != 0) {
    _internal_set_query_level(from._internal_query_level());
  }
  if (from.limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
  if (from.retrieve_instances_ids() != 0) {
    _internal_set_retrieve_instances_ids(from._internal_retrieve_instances_ids());
  }
  if (from.labels_constraint() != 0) {
    _internal_set_labels_constraint(from._internal_labels_constraint());
  }
}

void LookupResources_Request::CopyFrom(const LookupResources_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.LookupResources.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LookupResources_Request::IsInitialized() const {
  return true;
}

void LookupResources_Request::InternalSwap(LookupResources_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  lookup_.InternalSwap(&other->lookup_);
  labels_.InternalSwap(&other->labels_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LookupResources_Request, labels_constraint_)
      + sizeof(LookupResources_Request::labels_constraint_)
      - PROTOBUF_FIELD_OFFSET(LookupResources_Request, query_level_)>(
          reinterpret_cast<char*>(&query_level_),
          reinterpret_cast<char*>(&other->query_level_));
}

std::string LookupResources_Request::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.LookupResources.Request";
}


// ===================================================================

void LookupResources_Response::InitAsDefaultInstance() {
}
class LookupResources_Response::_Internal {
 public:
};

LookupResources_Response::LookupResources_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  resources_ids_(arena),
  instances_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.LookupResources.Response)
}
LookupResources_Response::LookupResources_Response(const LookupResources_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      resources_ids_(from.resources_ids_),
      instances_ids_(from.instances_ids_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.LookupResources.Response)
}

void LookupResources_Response::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LookupResources_Response_OrthancDatabasePlugin_2eproto.base);
}

LookupResources_Response::~LookupResources_Response() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.LookupResources.Response)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void LookupResources_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LookupResources_Response::ArenaDtor(void* object) {
  LookupResources_Response* _this = reinterpret_cast< LookupResources_Response* >(object);
  (void)_this;
}
void LookupResources_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LookupResources_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LookupResources_Response& LookupResources_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LookupResources_Response_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void LookupResources_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.LookupResources.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resources_ids_.Clear();
  instances_ids_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LookupResources_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string resources_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_resources_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string instances_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_instances_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LookupResources_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.LookupResources.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string resources_ids = 1;
  for (int i = 0, n = this->_internal_resources_ids_size(); i < n; i++) {
    const auto& s = this->_internal_resources_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Orthanc.DatabasePluginMessages.LookupResources.Response.resources_ids");
    target = stream->WriteString(1, s, target);
  }

  // repeated string instances_ids = 2;
  for (int i = 0, n = this->_internal_instances_ids_size(); i < n; i++) {
    const auto& s = this->_internal_instances_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Orthanc.DatabasePluginMessages.LookupResources.Response.instances_ids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.LookupResources.Response)
  return target;
}

size_t LookupResources_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.LookupResources.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string resources_ids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(resources_ids_.size());
  for (int i = 0, n = resources_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      resources_ids_.Get(i));
  }

  // repeated string instances_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(instances_ids_.size());
  for (int i = 0, n = instances_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      instances_ids_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LookupResources_Response::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LookupResources_Response*>(
      &from));
}

void LookupResources_Response::MergeFrom(const LookupResources_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.LookupResources.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  resources_ids_.MergeFrom(from.resources_ids_);
  instances_ids_.MergeFrom(from.instances_ids_);
}

void LookupResources_Response::CopyFrom(const LookupResources_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.LookupResources.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LookupResources_Response::IsInitialized() const {
  return true;
}

void LookupResources_Response::InternalSwap(LookupResources_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  resources_ids_.InternalSwap(&other->resources_ids_);
  instances_ids_.InternalSwap(&other->instances_ids_);
}

std::string LookupResources_Response::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.LookupResources.Response";
}


// ===================================================================

void LookupResources::InitAsDefaultInstance() {
}
class LookupResources::_Internal {
 public:
};

LookupResources::LookupResources(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.LookupResources)
}
LookupResources::LookupResources(const LookupResources& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.LookupResources)
}

void LookupResources::SharedCtor() {
}

LookupResources::~LookupResources() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.LookupResources)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void LookupResources::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LookupResources::ArenaDtor(void* object) {
  LookupResources* _this = reinterpret_cast< LookupResources* >(object);
  (void)_this;
}
void LookupResources::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LookupResources::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LookupResources& LookupResources::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LookupResources_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void LookupResources::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.LookupResources)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* LookupResources::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LookupResources::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.LookupResources)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.LookupResources)
  return target;
}

size_t LookupResources::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.LookupResources)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LookupResources::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LookupResources*>(
      &from));
}

void LookupResources::MergeFrom(const LookupResources& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.LookupResources)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void LookupResources::CopyFrom(const LookupResources& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.LookupResources)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LookupResources::IsInitialized() const {
  return true;
}

void LookupResources::InternalSwap(LookupResources* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string LookupResources::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.LookupResources";
}


// ===================================================================

void CreateInstance_Request::InitAsDefaultInstance() {
}
class CreateInstance_Request::_Internal {
 public:
};

CreateInstance_Request::CreateInstance_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.CreateInstance.Request)
}
CreateInstance_Request::CreateInstance_Request(const CreateInstance_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  patient_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_patient().empty()) {
    patient_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_patient(),
      GetArena());
  }
  study_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_study().empty()) {
    study_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_study(),
      GetArena());
  }
  series_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_series().empty()) {
    series_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_series(),
      GetArena());
  }
  instance_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_instance().empty()) {
    instance_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_instance(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.CreateInstance.Request)
}

void CreateInstance_Request::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateInstance_Request_OrthancDatabasePlugin_2eproto.base);
  patient_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  study_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  series_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instance_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CreateInstance_Request::~CreateInstance_Request() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.CreateInstance.Request)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void CreateInstance_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  patient_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  study_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  series_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instance_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateInstance_Request::ArenaDtor(void* object) {
  CreateInstance_Request* _this = reinterpret_cast< CreateInstance_Request* >(object);
  (void)_this;
}
void CreateInstance_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateInstance_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateInstance_Request& CreateInstance_Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateInstance_Request_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void CreateInstance_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.CreateInstance.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  patient_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  study_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  series_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  instance_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<std::string>();
}

const char* CreateInstance_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string patient = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_patient();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string study = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_study();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string series = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_series();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string instance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_instance();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateInstance_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.CreateInstance.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string patient = 1;
  if (this->patient().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_patient().data(), static_cast<int>(this->_internal_patient().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Orthanc.DatabasePluginMessages.CreateInstance.Request.patient");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_patient(), target);
  }

  // string study = 2;
  if (this->study().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_study().data(), static_cast<int>(this->_internal_study().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Orthanc.DatabasePluginMessages.CreateInstance.Request.study");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_study(), target);
  }

  // string series = 3;
  if (this->series().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_series().data(), static_cast<int>(this->_internal_series().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Orthanc.DatabasePluginMessages.CreateInstance.Request.series");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_series(), target);
  }

  // string instance = 4;
  if (this->instance().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instance().data(), static_cast<int>(this->_internal_instance().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Orthanc.DatabasePluginMessages.CreateInstance.Request.instance");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_instance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.CreateInstance.Request)
  return target;
}

size_t CreateInstance_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.CreateInstance.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string patient = 1;
  if (this->patient().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_patient());
  }

  // string study = 2;
  if (this->study().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_study());
  }

  // string series = 3;
  if (this->series().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_series());
  }

  // string instance = 4;
  if (this->instance().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instance());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateInstance_Request::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CreateInstance_Request*>(
      &from));
}

void CreateInstance_Request::MergeFrom(const CreateInstance_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.CreateInstance.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.patient().size() > 0) {
    _internal_set_patient(from._internal_patient());
  }
  if (from.study().size() > 0) {
    _internal_set_study(from._internal_study());
  }
  if (from.series().size() > 0) {
    _internal_set_series(from._internal_series());
  }
  if (from.instance().size() > 0) {
    _internal_set_instance(from._internal_instance());
  }
}

void CreateInstance_Request::CopyFrom(const CreateInstance_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.CreateInstance.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateInstance_Request::IsInitialized() const {
  return true;
}

void CreateInstance_Request::InternalSwap(CreateInstance_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  patient_.Swap(&other->patient_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  study_.Swap(&other->study_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  series_.Swap(&other->series_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  instance_.Swap(&other->instance_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string CreateInstance_Request::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.CreateInstance.Request";
}


// ===================================================================

void CreateInstance_Response::InitAsDefaultInstance() {
}
class CreateInstance_Response::_Internal {
 public:
};

CreateInstance_Response::CreateInstance_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.CreateInstance.Response)
}
CreateInstance_Response::CreateInstance_Response(const CreateInstance_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&instance_id_, &from.instance_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_new_series_) -
    reinterpret_cast<char*>(&instance_id_)) + sizeof(is_new_series_));
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.CreateInstance.Response)
}

void CreateInstance_Response::SharedCtor() {
  ::memset(&instance_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_new_series_) -
      reinterpret_cast<char*>(&instance_id_)) + sizeof(is_new_series_));
}

CreateInstance_Response::~CreateInstance_Response() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.CreateInstance.Response)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void CreateInstance_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CreateInstance_Response::ArenaDtor(void* object) {
  CreateInstance_Response* _this = reinterpret_cast< CreateInstance_Response* >(object);
  (void)_this;
}
void CreateInstance_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateInstance_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateInstance_Response& CreateInstance_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateInstance_Response_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void CreateInstance_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.CreateInstance.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&instance_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_new_series_) -
      reinterpret_cast<char*>(&instance_id_)) + sizeof(is_new_series_));
  _internal_metadata_.Clear<std::string>();
}

const char* CreateInstance_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_new_instance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_new_instance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 instance_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_new_patient = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_new_patient_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_new_study = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          is_new_study_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_new_series = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          is_new_series_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 patient_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          patient_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 study_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          study_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 series_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          series_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateInstance_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.CreateInstance.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_new_instance = 1;
  if (this->is_new_instance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_new_instance(), target);
  }

  // int64 instance_id = 2;
  if (this->instance_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_instance_id(), target);
  }

  // bool is_new_patient = 3;
  if (this->is_new_patient() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_new_patient(), target);
  }

  // bool is_new_study = 4;
  if (this->is_new_study() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_new_study(), target);
  }

  // bool is_new_series = 5;
  if (this->is_new_series() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_new_series(), target);
  }

  // int64 patient_id = 6;
  if (this->patient_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_patient_id(), target);
  }

  // int64 study_id = 7;
  if (this->study_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_study_id(), target);
  }

  // int64 series_id = 8;
  if (this->series_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_series_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.CreateInstance.Response)
  return target;
}

size_t CreateInstance_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.CreateInstance.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 instance_id = 2;
  if (this->instance_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_instance_id());
  }

  // int64 patient_id = 6;
  if (this->patient_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_patient_id());
  }

  // int64 study_id = 7;
  if (this->study_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_study_id());
  }

  // int64 series_id = 8;
  if (this->series_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_series_id());
  }

  // bool is_new_instance = 1;
  if (this->is_new_instance() != 0) {
    total_size += 1 + 1;
  }

  // bool is_new_patient = 3;
  if (this->is_new_patient() != 0) {
    total_size += 1 + 1;
  }

  // bool is_new_study = 4;
  if (this->is_new_study() != 0) {
    total_size += 1 + 1;
  }

  // bool is_new_series = 5;
  if (this->is_new_series() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateInstance_Response::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CreateInstance_Response*>(
      &from));
}

void CreateInstance_Response::MergeFrom(const CreateInstance_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.CreateInstance.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.instance_id() != 0) {
    _internal_set_instance_id(from._internal_instance_id());
  }
  if (from.patient_id() != 0) {
    _internal_set_patient_id(from._internal_patient_id());
  }
  if (from.study_id() != 0) {
    _internal_set_study_id(from._internal_study_id());
  }
  if (from.series_id() != 0) {
    _internal_set_series_id(from._internal_series_id());
  }
  if (from.is_new_instance() != 0) {
    _internal_set_is_new_instance(from._internal_is_new_instance());
  }
  if (from.is_new_patient() != 0) {
    _internal_set_is_new_patient(from._internal_is_new_patient());
  }
  if (from.is_new_study() != 0) {
    _internal_set_is_new_study(from._internal_is_new_study());
  }
  if (from.is_new_series() != 0) {
    _internal_set_is_new_series(from._internal_is_new_series());
  }
}

void CreateInstance_Response::CopyFrom(const CreateInstance_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.CreateInstance.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateInstance_Response::IsInitialized() const {
  return true;
}

void CreateInstance_Response::InternalSwap(CreateInstance_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateInstance_Response, is_new_series_)
      + sizeof(CreateInstance_Response::is_new_series_)
      - PROTOBUF_FIELD_OFFSET(CreateInstance_Response, instance_id_)>(
          reinterpret_cast<char*>(&instance_id_),
          reinterpret_cast<char*>(&other->instance_id_));
}

std::string CreateInstance_Response::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.CreateInstance.Response";
}


// ===================================================================

void CreateInstance::InitAsDefaultInstance() {
}
class CreateInstance::_Internal {
 public:
};

CreateInstance::CreateInstance(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.CreateInstance)
}
CreateInstance::CreateInstance(const CreateInstance& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.CreateInstance)
}

void CreateInstance::SharedCtor() {
}

CreateInstance::~CreateInstance() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.CreateInstance)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void CreateInstance::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CreateInstance::ArenaDtor(void* object) {
  CreateInstance* _this = reinterpret_cast< CreateInstance* >(object);
  (void)_this;
}
void CreateInstance::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateInstance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateInstance& CreateInstance::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateInstance_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void CreateInstance::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.CreateInstance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* CreateInstance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateInstance::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.CreateInstance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.CreateInstance)
  return target;
}

size_t CreateInstance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.CreateInstance)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateInstance::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CreateInstance*>(
      &from));
}

void CreateInstance::MergeFrom(const CreateInstance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.CreateInstance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CreateInstance::CopyFrom(const CreateInstance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.CreateInstance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateInstance::IsInitialized() const {
  return true;
}

void CreateInstance::InternalSwap(CreateInstance* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string CreateInstance::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.CreateInstance";
}


// ===================================================================

void SetResourcesContent_Request_Tag::InitAsDefaultInstance() {
}
class SetResourcesContent_Request_Tag::_Internal {
 public:
};

SetResourcesContent_Request_Tag::SetResourcesContent_Request_Tag(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.SetResourcesContent.Request.Tag)
}
SetResourcesContent_Request_Tag::SetResourcesContent_Request_Tag(const SetResourcesContent_Request_Tag& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  ::memcpy(&resource_id_, &from.resource_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&element_) -
    reinterpret_cast<char*>(&resource_id_)) + sizeof(element_));
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.SetResourcesContent.Request.Tag)
}

void SetResourcesContent_Request_Tag::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetResourcesContent_Request_Tag_OrthancDatabasePlugin_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&resource_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&element_) -
      reinterpret_cast<char*>(&resource_id_)) + sizeof(element_));
}

SetResourcesContent_Request_Tag::~SetResourcesContent_Request_Tag() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.SetResourcesContent.Request.Tag)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void SetResourcesContent_Request_Tag::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetResourcesContent_Request_Tag::ArenaDtor(void* object) {
  SetResourcesContent_Request_Tag* _this = reinterpret_cast< SetResourcesContent_Request_Tag* >(object);
  (void)_this;
}
void SetResourcesContent_Request_Tag::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetResourcesContent_Request_Tag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetResourcesContent_Request_Tag& SetResourcesContent_Request_Tag::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetResourcesContent_Request_Tag_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void SetResourcesContent_Request_Tag::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.SetResourcesContent.Request.Tag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&resource_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&element_) -
      reinterpret_cast<char*>(&resource_id_)) + sizeof(element_));
  _internal_metadata_.Clear<std::string>();
}

const char* SetResourcesContent_Request_Tag::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 resource_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          resource_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_identifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_identifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 group = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 element = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          element_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetResourcesContent_Request_Tag::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.SetResourcesContent.Request.Tag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 resource_id = 1;
  if (this->resource_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_resource_id(), target);
  }

  // bool is_identifier = 2;
  if (this->is_identifier() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_identifier(), target);
  }

  // uint32 group = 3;
  if (this->group() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_group(), target);
  }

  // uint32 element = 4;
  if (this->element() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_element(), target);
  }

  // string value = 5;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Orthanc.DatabasePluginMessages.SetResourcesContent.Request.Tag.value");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.SetResourcesContent.Request.Tag)
  return target;
}

size_t SetResourcesContent_Request_Tag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.SetResourcesContent.Request.Tag)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 5;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // int64 resource_id = 1;
  if (this->resource_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_resource_id());
  }

  // bool is_identifier = 2;
  if (this->is_identifier() != 0) {
    total_size += 1 + 1;
  }

  // uint32 group = 3;
  if (this->group() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_group());
  }

  // uint32 element = 4;
  if (this->element() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_element());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetResourcesContent_Request_Tag::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SetResourcesContent_Request_Tag*>(
      &from));
}

void SetResourcesContent_Request_Tag::MergeFrom(const SetResourcesContent_Request_Tag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.SetResourcesContent.Request.Tag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.resource_id() != 0) {
    _internal_set_resource_id(from._internal_resource_id());
  }
  if (from.is_identifier() != 0) {
    _internal_set_is_identifier(from._internal_is_identifier());
  }
  if (from.group() != 0) {
    _internal_set_group(from._internal_group());
  }
  if (from.element() != 0) {
    _internal_set_element(from._internal_element());
  }
}

void SetResourcesContent_Request_Tag::CopyFrom(const SetResourcesContent_Request_Tag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.SetResourcesContent.Request.Tag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetResourcesContent_Request_Tag::IsInitialized() const {
  return true;
}

void SetResourcesContent_Request_Tag::InternalSwap(SetResourcesContent_Request_Tag* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetResourcesContent_Request_Tag, element_)
      + sizeof(SetResourcesContent_Request_Tag::element_)
      - PROTOBUF_FIELD_OFFSET(SetResourcesContent_Request_Tag, resource_id_)>(
          reinterpret_cast<char*>(&resource_id_),
          reinterpret_cast<char*>(&other->resource_id_));
}

std::string SetResourcesContent_Request_Tag::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.SetResourcesContent.Request.Tag";
}


// ===================================================================

void SetResourcesContent_Request_Metadata::InitAsDefaultInstance() {
}
class SetResourcesContent_Request_Metadata::_Internal {
 public:
};

SetResourcesContent_Request_Metadata::SetResourcesContent_Request_Metadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.SetResourcesContent.Request.Metadata)
}
SetResourcesContent_Request_Metadata::SetResourcesContent_Request_Metadata(const SetResourcesContent_Request_Metadata& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  ::memcpy(&resource_id_, &from.resource_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&metadata_) -
    reinterpret_cast<char*>(&resource_id_)) + sizeof(metadata_));
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.SetResourcesContent.Request.Metadata)
}

void SetResourcesContent_Request_Metadata::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetResourcesContent_Request_Metadata_OrthancDatabasePlugin_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&resource_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&metadata_) -
      reinterpret_cast<char*>(&resource_id_)) + sizeof(metadata_));
}

SetResourcesContent_Request_Metadata::~SetResourcesContent_Request_Metadata() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.SetResourcesContent.Request.Metadata)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void SetResourcesContent_Request_Metadata::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetResourcesContent_Request_Metadata::ArenaDtor(void* object) {
  SetResourcesContent_Request_Metadata* _this = reinterpret_cast< SetResourcesContent_Request_Metadata* >(object);
  (void)_this;
}
void SetResourcesContent_Request_Metadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetResourcesContent_Request_Metadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetResourcesContent_Request_Metadata& SetResourcesContent_Request_Metadata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetResourcesContent_Request_Metadata_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void SetResourcesContent_Request_Metadata::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.SetResourcesContent.Request.Metadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&resource_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&metadata_) -
      reinterpret_cast<char*>(&resource_id_)) + sizeof(metadata_));
  _internal_metadata_.Clear<std::string>();
}

const char* SetResourcesContent_Request_Metadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 resource_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          resource_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 metadata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          metadata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetResourcesContent_Request_Metadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.SetResourcesContent.Request.Metadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 resource_id = 1;
  if (this->resource_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_resource_id(), target);
  }

  // int32 metadata = 2;
  if (this->metadata() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_metadata(), target);
  }

  // string value = 3;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Orthanc.DatabasePluginMessages.SetResourcesContent.Request.Metadata.value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.SetResourcesContent.Request.Metadata)
  return target;
}

size_t SetResourcesContent_Request_Metadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.SetResourcesContent.Request.Metadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // int64 resource_id = 1;
  if (this->resource_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_resource_id());
  }

  // int32 metadata = 2;
  if (this->metadata() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_metadata());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetResourcesContent_Request_Metadata::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SetResourcesContent_Request_Metadata*>(
      &from));
}

void SetResourcesContent_Request_Metadata::MergeFrom(const SetResourcesContent_Request_Metadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.SetResourcesContent.Request.Metadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.resource_id() != 0) {
    _internal_set_resource_id(from._internal_resource_id());
  }
  if (from.metadata() != 0) {
    _internal_set_metadata(from._internal_metadata());
  }
}

void SetResourcesContent_Request_Metadata::CopyFrom(const SetResourcesContent_Request_Metadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.SetResourcesContent.Request.Metadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetResourcesContent_Request_Metadata::IsInitialized() const {
  return true;
}

void SetResourcesContent_Request_Metadata::InternalSwap(SetResourcesContent_Request_Metadata* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetResourcesContent_Request_Metadata, metadata_)
      + sizeof(SetResourcesContent_Request_Metadata::metadata_)
      - PROTOBUF_FIELD_OFFSET(SetResourcesContent_Request_Metadata, resource_id_)>(
          reinterpret_cast<char*>(&resource_id_),
          reinterpret_cast<char*>(&other->resource_id_));
}

std::string SetResourcesContent_Request_Metadata::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.SetResourcesContent.Request.Metadata";
}


// ===================================================================

void SetResourcesContent_Request::InitAsDefaultInstance() {
}
class SetResourcesContent_Request::_Internal {
 public:
};

SetResourcesContent_Request::SetResourcesContent_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  tags_(arena),
  metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.SetResourcesContent.Request)
}
SetResourcesContent_Request::SetResourcesContent_Request(const SetResourcesContent_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      tags_(from.tags_),
      metadata_(from.metadata_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.SetResourcesContent.Request)
}

void SetResourcesContent_Request::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetResourcesContent_Request_OrthancDatabasePlugin_2eproto.base);
}

SetResourcesContent_Request::~SetResourcesContent_Request() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.SetResourcesContent.Request)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void SetResourcesContent_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetResourcesContent_Request::ArenaDtor(void* object) {
  SetResourcesContent_Request* _this = reinterpret_cast< SetResourcesContent_Request* >(object);
  (void)_this;
}
void SetResourcesContent_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetResourcesContent_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetResourcesContent_Request& SetResourcesContent_Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetResourcesContent_Request_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void SetResourcesContent_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.SetResourcesContent.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  metadata_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SetResourcesContent_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Orthanc.DatabasePluginMessages.SetResourcesContent.Request.Tag tags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tags(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .Orthanc.DatabasePluginMessages.SetResourcesContent.Request.Metadata metadata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metadata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetResourcesContent_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.SetResourcesContent.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Orthanc.DatabasePluginMessages.SetResourcesContent.Request.Tag tags = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tags_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_tags(i), target, stream);
  }

  // repeated .Orthanc.DatabasePluginMessages.SetResourcesContent.Request.Metadata metadata = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_metadata_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_metadata(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.SetResourcesContent.Request)
  return target;
}

size_t SetResourcesContent_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.SetResourcesContent.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Orthanc.DatabasePluginMessages.SetResourcesContent.Request.Tag tags = 1;
  total_size += 1UL * this->_internal_tags_size();
  for (const auto& msg : this->tags_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Orthanc.DatabasePluginMessages.SetResourcesContent.Request.Metadata metadata = 2;
  total_size += 1UL * this->_internal_metadata_size();
  for (const auto& msg : this->metadata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetResourcesContent_Request::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SetResourcesContent_Request*>(
      &from));
}

void SetResourcesContent_Request::MergeFrom(const SetResourcesContent_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.SetResourcesContent.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  metadata_.MergeFrom(from.metadata_);
}

void SetResourcesContent_Request::CopyFrom(const SetResourcesContent_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.SetResourcesContent.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetResourcesContent_Request::IsInitialized() const {
  return true;
}

void SetResourcesContent_Request::InternalSwap(SetResourcesContent_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  tags_.InternalSwap(&other->tags_);
  metadata_.InternalSwap(&other->metadata_);
}

std::string SetResourcesContent_Request::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.SetResourcesContent.Request";
}


// ===================================================================

void SetResourcesContent_Response::InitAsDefaultInstance() {
}
class SetResourcesContent_Response::_Internal {
 public:
};

SetResourcesContent_Response::SetResourcesContent_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.SetResourcesContent.Response)
}
SetResourcesContent_Response::SetResourcesContent_Response(const SetResourcesContent_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.SetResourcesContent.Response)
}

void SetResourcesContent_Response::SharedCtor() {
}

SetResourcesContent_Response::~SetResourcesContent_Response() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.SetResourcesContent.Response)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void SetResourcesContent_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetResourcesContent_Response::ArenaDtor(void* object) {
  SetResourcesContent_Response* _this = reinterpret_cast< SetResourcesContent_Response* >(object);
  (void)_this;
}
void SetResourcesContent_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetResourcesContent_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetResourcesContent_Response& SetResourcesContent_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetResourcesContent_Response_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void SetResourcesContent_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.SetResourcesContent.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* SetResourcesContent_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetResourcesContent_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.SetResourcesContent.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.SetResourcesContent.Response)
  return target;
}

size_t SetResourcesContent_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.SetResourcesContent.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetResourcesContent_Response::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SetResourcesContent_Response*>(
      &from));
}

void SetResourcesContent_Response::MergeFrom(const SetResourcesContent_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.SetResourcesContent.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SetResourcesContent_Response::CopyFrom(const SetResourcesContent_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.SetResourcesContent.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetResourcesContent_Response::IsInitialized() const {
  return true;
}

void SetResourcesContent_Response::InternalSwap(SetResourcesContent_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string SetResourcesContent_Response::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.SetResourcesContent.Response";
}


// ===================================================================

void SetResourcesContent::InitAsDefaultInstance() {
}
class SetResourcesContent::_Internal {
 public:
};

SetResourcesContent::SetResourcesContent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.SetResourcesContent)
}
SetResourcesContent::SetResourcesContent(const SetResourcesContent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.SetResourcesContent)
}

void SetResourcesContent::SharedCtor() {
}

SetResourcesContent::~SetResourcesContent() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.SetResourcesContent)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void SetResourcesContent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetResourcesContent::ArenaDtor(void* object) {
  SetResourcesContent* _this = reinterpret_cast< SetResourcesContent* >(object);
  (void)_this;
}
void SetResourcesContent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetResourcesContent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetResourcesContent& SetResourcesContent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetResourcesContent_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void SetResourcesContent::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.SetResourcesContent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* SetResourcesContent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetResourcesContent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.SetResourcesContent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.SetResourcesContent)
  return target;
}

size_t SetResourcesContent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.SetResourcesContent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetResourcesContent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SetResourcesContent*>(
      &from));
}

void SetResourcesContent::MergeFrom(const SetResourcesContent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.SetResourcesContent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SetResourcesContent::CopyFrom(const SetResourcesContent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.SetResourcesContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetResourcesContent::IsInitialized() const {
  return true;
}

void SetResourcesContent::InternalSwap(SetResourcesContent* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string SetResourcesContent::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.SetResourcesContent";
}


// ===================================================================

void GetChildrenMetadata_Request::InitAsDefaultInstance() {
}
class GetChildrenMetadata_Request::_Internal {
 public:
};

GetChildrenMetadata_Request::GetChildrenMetadata_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.GetChildrenMetadata.Request)
}
GetChildrenMetadata_Request::GetChildrenMetadata_Request(const GetChildrenMetadata_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&metadata_) -
    reinterpret_cast<char*>(&id_)) + sizeof(metadata_));
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.GetChildrenMetadata.Request)
}

void GetChildrenMetadata_Request::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&metadata_) -
      reinterpret_cast<char*>(&id_)) + sizeof(metadata_));
}

GetChildrenMetadata_Request::~GetChildrenMetadata_Request() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.GetChildrenMetadata.Request)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GetChildrenMetadata_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetChildrenMetadata_Request::ArenaDtor(void* object) {
  GetChildrenMetadata_Request* _this = reinterpret_cast< GetChildrenMetadata_Request* >(object);
  (void)_this;
}
void GetChildrenMetadata_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetChildrenMetadata_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetChildrenMetadata_Request& GetChildrenMetadata_Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetChildrenMetadata_Request_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void GetChildrenMetadata_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.GetChildrenMetadata.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&metadata_) -
      reinterpret_cast<char*>(&id_)) + sizeof(metadata_));
  _internal_metadata_.Clear<std::string>();
}

const char* GetChildrenMetadata_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 metadata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          metadata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetChildrenMetadata_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.GetChildrenMetadata.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // int32 metadata = 2;
  if (this->metadata() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_metadata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.GetChildrenMetadata.Request)
  return target;
}

size_t GetChildrenMetadata_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.GetChildrenMetadata.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // int32 metadata = 2;
  if (this->metadata() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_metadata());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetChildrenMetadata_Request::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetChildrenMetadata_Request*>(
      &from));
}

void GetChildrenMetadata_Request::MergeFrom(const GetChildrenMetadata_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.GetChildrenMetadata.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.metadata() != 0) {
    _internal_set_metadata(from._internal_metadata());
  }
}

void GetChildrenMetadata_Request::CopyFrom(const GetChildrenMetadata_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.GetChildrenMetadata.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChildrenMetadata_Request::IsInitialized() const {
  return true;
}

void GetChildrenMetadata_Request::InternalSwap(GetChildrenMetadata_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetChildrenMetadata_Request, metadata_)
      + sizeof(GetChildrenMetadata_Request::metadata_)
      - PROTOBUF_FIELD_OFFSET(GetChildrenMetadata_Request, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

std::string GetChildrenMetadata_Request::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.GetChildrenMetadata.Request";
}


// ===================================================================

void GetChildrenMetadata_Response::InitAsDefaultInstance() {
}
class GetChildrenMetadata_Response::_Internal {
 public:
};

GetChildrenMetadata_Response::GetChildrenMetadata_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.GetChildrenMetadata.Response)
}
GetChildrenMetadata_Response::GetChildrenMetadata_Response(const GetChildrenMetadata_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.GetChildrenMetadata.Response)
}

void GetChildrenMetadata_Response::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetChildrenMetadata_Response_OrthancDatabasePlugin_2eproto.base);
}

GetChildrenMetadata_Response::~GetChildrenMetadata_Response() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.GetChildrenMetadata.Response)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GetChildrenMetadata_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetChildrenMetadata_Response::ArenaDtor(void* object) {
  GetChildrenMetadata_Response* _this = reinterpret_cast< GetChildrenMetadata_Response* >(object);
  (void)_this;
}
void GetChildrenMetadata_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetChildrenMetadata_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetChildrenMetadata_Response& GetChildrenMetadata_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetChildrenMetadata_Response_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void GetChildrenMetadata_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.GetChildrenMetadata.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GetChildrenMetadata_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_values();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetChildrenMetadata_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.GetChildrenMetadata.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string values = 1;
  for (int i = 0, n = this->_internal_values_size(); i < n; i++) {
    const auto& s = this->_internal_values(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Orthanc.DatabasePluginMessages.GetChildrenMetadata.Response.values");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.GetChildrenMetadata.Response)
  return target;
}

size_t GetChildrenMetadata_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.GetChildrenMetadata.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string values = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(values_.size());
  for (int i = 0, n = values_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      values_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetChildrenMetadata_Response::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetChildrenMetadata_Response*>(
      &from));
}

void GetChildrenMetadata_Response::MergeFrom(const GetChildrenMetadata_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.GetChildrenMetadata.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
}

void GetChildrenMetadata_Response::CopyFrom(const GetChildrenMetadata_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.GetChildrenMetadata.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChildrenMetadata_Response::IsInitialized() const {
  return true;
}

void GetChildrenMetadata_Response::InternalSwap(GetChildrenMetadata_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
}

std::string GetChildrenMetadata_Response::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.GetChildrenMetadata.Response";
}


// ===================================================================

void GetChildrenMetadata::InitAsDefaultInstance() {
}
class GetChildrenMetadata::_Internal {
 public:
};

GetChildrenMetadata::GetChildrenMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.GetChildrenMetadata)
}
GetChildrenMetadata::GetChildrenMetadata(const GetChildrenMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.GetChildrenMetadata)
}

void GetChildrenMetadata::SharedCtor() {
}

GetChildrenMetadata::~GetChildrenMetadata() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.GetChildrenMetadata)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GetChildrenMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetChildrenMetadata::ArenaDtor(void* object) {
  GetChildrenMetadata* _this = reinterpret_cast< GetChildrenMetadata* >(object);
  (void)_this;
}
void GetChildrenMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetChildrenMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetChildrenMetadata& GetChildrenMetadata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetChildrenMetadata_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void GetChildrenMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.GetChildrenMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* GetChildrenMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetChildrenMetadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.GetChildrenMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.GetChildrenMetadata)
  return target;
}

size_t GetChildrenMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.GetChildrenMetadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetChildrenMetadata::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetChildrenMetadata*>(
      &from));
}

void GetChildrenMetadata::MergeFrom(const GetChildrenMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.GetChildrenMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetChildrenMetadata::CopyFrom(const GetChildrenMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.GetChildrenMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChildrenMetadata::IsInitialized() const {
  return true;
}

void GetChildrenMetadata::InternalSwap(GetChildrenMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string GetChildrenMetadata::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.GetChildrenMetadata";
}


// ===================================================================

void GetLastChangeIndex_Request::InitAsDefaultInstance() {
}
class GetLastChangeIndex_Request::_Internal {
 public:
};

GetLastChangeIndex_Request::GetLastChangeIndex_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.GetLastChangeIndex.Request)
}
GetLastChangeIndex_Request::GetLastChangeIndex_Request(const GetLastChangeIndex_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.GetLastChangeIndex.Request)
}

void GetLastChangeIndex_Request::SharedCtor() {
}

GetLastChangeIndex_Request::~GetLastChangeIndex_Request() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.GetLastChangeIndex.Request)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GetLastChangeIndex_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetLastChangeIndex_Request::ArenaDtor(void* object) {
  GetLastChangeIndex_Request* _this = reinterpret_cast< GetLastChangeIndex_Request* >(object);
  (void)_this;
}
void GetLastChangeIndex_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetLastChangeIndex_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetLastChangeIndex_Request& GetLastChangeIndex_Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetLastChangeIndex_Request_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void GetLastChangeIndex_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.GetLastChangeIndex.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* GetLastChangeIndex_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLastChangeIndex_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.GetLastChangeIndex.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.GetLastChangeIndex.Request)
  return target;
}

size_t GetLastChangeIndex_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.GetLastChangeIndex.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLastChangeIndex_Request::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetLastChangeIndex_Request*>(
      &from));
}

void GetLastChangeIndex_Request::MergeFrom(const GetLastChangeIndex_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.GetLastChangeIndex.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetLastChangeIndex_Request::CopyFrom(const GetLastChangeIndex_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.GetLastChangeIndex.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLastChangeIndex_Request::IsInitialized() const {
  return true;
}

void GetLastChangeIndex_Request::InternalSwap(GetLastChangeIndex_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string GetLastChangeIndex_Request::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.GetLastChangeIndex.Request";
}


// ===================================================================

void GetLastChangeIndex_Response::InitAsDefaultInstance() {
}
class GetLastChangeIndex_Response::_Internal {
 public:
};

GetLastChangeIndex_Response::GetLastChangeIndex_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.GetLastChangeIndex.Response)
}
GetLastChangeIndex_Response::GetLastChangeIndex_Response(const GetLastChangeIndex_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.GetLastChangeIndex.Response)
}

void GetLastChangeIndex_Response::SharedCtor() {
  result_ = PROTOBUF_LONGLONG(0);
}

GetLastChangeIndex_Response::~GetLastChangeIndex_Response() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.GetLastChangeIndex.Response)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GetLastChangeIndex_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetLastChangeIndex_Response::ArenaDtor(void* object) {
  GetLastChangeIndex_Response* _this = reinterpret_cast< GetLastChangeIndex_Response* >(object);
  (void)_this;
}
void GetLastChangeIndex_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetLastChangeIndex_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetLastChangeIndex_Response& GetLastChangeIndex_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetLastChangeIndex_Response_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void GetLastChangeIndex_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.GetLastChangeIndex.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<std::string>();
}

const char* GetLastChangeIndex_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLastChangeIndex_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.GetLastChangeIndex.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.GetLastChangeIndex.Response)
  return target;
}

size_t GetLastChangeIndex_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.GetLastChangeIndex.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLastChangeIndex_Response::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetLastChangeIndex_Response*>(
      &from));
}

void GetLastChangeIndex_Response::MergeFrom(const GetLastChangeIndex_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.GetLastChangeIndex.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void GetLastChangeIndex_Response::CopyFrom(const GetLastChangeIndex_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.GetLastChangeIndex.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLastChangeIndex_Response::IsInitialized() const {
  return true;
}

void GetLastChangeIndex_Response::InternalSwap(GetLastChangeIndex_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(result_, other->result_);
}

std::string GetLastChangeIndex_Response::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.GetLastChangeIndex.Response";
}


// ===================================================================

void GetLastChangeIndex::InitAsDefaultInstance() {
}
class GetLastChangeIndex::_Internal {
 public:
};

GetLastChangeIndex::GetLastChangeIndex(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.GetLastChangeIndex)
}
GetLastChangeIndex::GetLastChangeIndex(const GetLastChangeIndex& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.GetLastChangeIndex)
}

void GetLastChangeIndex::SharedCtor() {
}

GetLastChangeIndex::~GetLastChangeIndex() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.GetLastChangeIndex)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GetLastChangeIndex::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetLastChangeIndex::ArenaDtor(void* object) {
  GetLastChangeIndex* _this = reinterpret_cast< GetLastChangeIndex* >(object);
  (void)_this;
}
void GetLastChangeIndex::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetLastChangeIndex::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetLastChangeIndex& GetLastChangeIndex::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetLastChangeIndex_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void GetLastChangeIndex::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.GetLastChangeIndex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* GetLastChangeIndex::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLastChangeIndex::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.GetLastChangeIndex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.GetLastChangeIndex)
  return target;
}

size_t GetLastChangeIndex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.GetLastChangeIndex)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLastChangeIndex::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetLastChangeIndex*>(
      &from));
}

void GetLastChangeIndex::MergeFrom(const GetLastChangeIndex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.GetLastChangeIndex)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetLastChangeIndex::CopyFrom(const GetLastChangeIndex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.GetLastChangeIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLastChangeIndex::IsInitialized() const {
  return true;
}

void GetLastChangeIndex::InternalSwap(GetLastChangeIndex* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string GetLastChangeIndex::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.GetLastChangeIndex";
}


// ===================================================================

void LookupResourceAndParent_Request::InitAsDefaultInstance() {
}
class LookupResourceAndParent_Request::_Internal {
 public:
};

LookupResourceAndParent_Request::LookupResourceAndParent_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.LookupResourceAndParent.Request)
}
LookupResourceAndParent_Request::LookupResourceAndParent_Request(const LookupResourceAndParent_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  public_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_public_id().empty()) {
    public_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_public_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.LookupResourceAndParent.Request)
}

void LookupResourceAndParent_Request::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LookupResourceAndParent_Request_OrthancDatabasePlugin_2eproto.base);
  public_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LookupResourceAndParent_Request::~LookupResourceAndParent_Request() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.LookupResourceAndParent.Request)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void LookupResourceAndParent_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  public_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LookupResourceAndParent_Request::ArenaDtor(void* object) {
  LookupResourceAndParent_Request* _this = reinterpret_cast< LookupResourceAndParent_Request* >(object);
  (void)_this;
}
void LookupResourceAndParent_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LookupResourceAndParent_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LookupResourceAndParent_Request& LookupResourceAndParent_Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LookupResourceAndParent_Request_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void LookupResourceAndParent_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.LookupResourceAndParent.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  public_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<std::string>();
}

const char* LookupResourceAndParent_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string public_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_public_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LookupResourceAndParent_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.LookupResourceAndParent.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string public_id = 1;
  if (this->public_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_public_id().data(), static_cast<int>(this->_internal_public_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Orthanc.DatabasePluginMessages.LookupResourceAndParent.Request.public_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_public_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.LookupResourceAndParent.Request)
  return target;
}

size_t LookupResourceAndParent_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.LookupResourceAndParent.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string public_id = 1;
  if (this->public_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_public_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LookupResourceAndParent_Request::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LookupResourceAndParent_Request*>(
      &from));
}

void LookupResourceAndParent_Request::MergeFrom(const LookupResourceAndParent_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.LookupResourceAndParent.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.public_id().size() > 0) {
    _internal_set_public_id(from._internal_public_id());
  }
}

void LookupResourceAndParent_Request::CopyFrom(const LookupResourceAndParent_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.LookupResourceAndParent.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LookupResourceAndParent_Request::IsInitialized() const {
  return true;
}

void LookupResourceAndParent_Request::InternalSwap(LookupResourceAndParent_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  public_id_.Swap(&other->public_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string LookupResourceAndParent_Request::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.LookupResourceAndParent.Request";
}


// ===================================================================

void LookupResourceAndParent_Response::InitAsDefaultInstance() {
}
class LookupResourceAndParent_Response::_Internal {
 public:
};

LookupResourceAndParent_Response::LookupResourceAndParent_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.LookupResourceAndParent.Response)
}
LookupResourceAndParent_Response::LookupResourceAndParent_Response(const LookupResourceAndParent_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  parent_public_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_parent_public_id().empty()) {
    parent_public_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_parent_public_id(),
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.LookupResourceAndParent.Response)
}

void LookupResourceAndParent_Response::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LookupResourceAndParent_Response_OrthancDatabasePlugin_2eproto.base);
  parent_public_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
}

LookupResourceAndParent_Response::~LookupResourceAndParent_Response() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.LookupResourceAndParent.Response)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void LookupResourceAndParent_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  parent_public_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LookupResourceAndParent_Response::ArenaDtor(void* object) {
  LookupResourceAndParent_Response* _this = reinterpret_cast< LookupResourceAndParent_Response* >(object);
  (void)_this;
}
void LookupResourceAndParent_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LookupResourceAndParent_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LookupResourceAndParent_Response& LookupResourceAndParent_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LookupResourceAndParent_Response_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void LookupResourceAndParent_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.LookupResourceAndParent.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parent_public_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
  _internal_metadata_.Clear<std::string>();
}

const char* LookupResourceAndParent_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool found = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          found_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.ResourceType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::Orthanc::DatabasePluginMessages::ResourceType>(val));
        } else goto handle_unusual;
        continue;
      // string parent_public_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_parent_public_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LookupResourceAndParent_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.LookupResourceAndParent.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool found = 1;
  if (this->found() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_found(), target);
  }

  // int64 id = 2;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_id(), target);
  }

  // .Orthanc.DatabasePluginMessages.ResourceType type = 3;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // string parent_public_id = 4;
  if (this->parent_public_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_parent_public_id().data(), static_cast<int>(this->_internal_parent_public_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Orthanc.DatabasePluginMessages.LookupResourceAndParent.Response.parent_public_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_parent_public_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.LookupResourceAndParent.Response)
  return target;
}

size_t LookupResourceAndParent_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.LookupResourceAndParent.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string parent_public_id = 4;
  if (this->parent_public_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parent_public_id());
  }

  // int64 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // bool found = 1;
  if (this->found() != 0) {
    total_size += 1 + 1;
  }

  // .Orthanc.DatabasePluginMessages.ResourceType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LookupResourceAndParent_Response::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LookupResourceAndParent_Response*>(
      &from));
}

void LookupResourceAndParent_Response::MergeFrom(const LookupResourceAndParent_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.LookupResourceAndParent.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.parent_public_id().size() > 0) {
    _internal_set_parent_public_id(from._internal_parent_public_id());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.found() != 0) {
    _internal_set_found(from._internal_found());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void LookupResourceAndParent_Response::CopyFrom(const LookupResourceAndParent_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.LookupResourceAndParent.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LookupResourceAndParent_Response::IsInitialized() const {
  return true;
}

void LookupResourceAndParent_Response::InternalSwap(LookupResourceAndParent_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  parent_public_id_.Swap(&other->parent_public_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LookupResourceAndParent_Response, type_)
      + sizeof(LookupResourceAndParent_Response::type_)
      - PROTOBUF_FIELD_OFFSET(LookupResourceAndParent_Response, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

std::string LookupResourceAndParent_Response::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.LookupResourceAndParent.Response";
}


// ===================================================================

void LookupResourceAndParent::InitAsDefaultInstance() {
}
class LookupResourceAndParent::_Internal {
 public:
};

LookupResourceAndParent::LookupResourceAndParent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.LookupResourceAndParent)
}
LookupResourceAndParent::LookupResourceAndParent(const LookupResourceAndParent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.LookupResourceAndParent)
}

void LookupResourceAndParent::SharedCtor() {
}

LookupResourceAndParent::~LookupResourceAndParent() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.LookupResourceAndParent)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void LookupResourceAndParent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LookupResourceAndParent::ArenaDtor(void* object) {
  LookupResourceAndParent* _this = reinterpret_cast< LookupResourceAndParent* >(object);
  (void)_this;
}
void LookupResourceAndParent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LookupResourceAndParent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LookupResourceAndParent& LookupResourceAndParent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LookupResourceAndParent_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void LookupResourceAndParent::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.LookupResourceAndParent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* LookupResourceAndParent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LookupResourceAndParent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.LookupResourceAndParent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.LookupResourceAndParent)
  return target;
}

size_t LookupResourceAndParent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.LookupResourceAndParent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LookupResourceAndParent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LookupResourceAndParent*>(
      &from));
}

void LookupResourceAndParent::MergeFrom(const LookupResourceAndParent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.LookupResourceAndParent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void LookupResourceAndParent::CopyFrom(const LookupResourceAndParent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.LookupResourceAndParent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LookupResourceAndParent::IsInitialized() const {
  return true;
}

void LookupResourceAndParent::InternalSwap(LookupResourceAndParent* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string LookupResourceAndParent::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.LookupResourceAndParent";
}


// ===================================================================

void AddLabel_Request::InitAsDefaultInstance() {
}
class AddLabel_Request::_Internal {
 public:
};

AddLabel_Request::AddLabel_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.AddLabel.Request)
}
AddLabel_Request::AddLabel_Request(const AddLabel_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_label().empty()) {
    label_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_label(),
      GetArena());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.AddLabel.Request)
}

void AddLabel_Request::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddLabel_Request_OrthancDatabasePlugin_2eproto.base);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = PROTOBUF_LONGLONG(0);
}

AddLabel_Request::~AddLabel_Request() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.AddLabel.Request)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void AddLabel_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AddLabel_Request::ArenaDtor(void* object) {
  AddLabel_Request* _this = reinterpret_cast< AddLabel_Request* >(object);
  (void)_this;
}
void AddLabel_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddLabel_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddLabel_Request& AddLabel_Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddLabel_Request_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void AddLabel_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.AddLabel.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  label_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<std::string>();
}

const char* AddLabel_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string label = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddLabel_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.AddLabel.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // string label = 2;
  if (this->label().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Orthanc.DatabasePluginMessages.AddLabel.Request.label");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_label(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.AddLabel.Request)
  return target;
}

size_t AddLabel_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.AddLabel.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string label = 2;
  if (this->label().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_label());
  }

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddLabel_Request::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AddLabel_Request*>(
      &from));
}

void AddLabel_Request::MergeFrom(const AddLabel_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.AddLabel.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.label().size() > 0) {
    _internal_set_label(from._internal_label());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void AddLabel_Request::CopyFrom(const AddLabel_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.AddLabel.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddLabel_Request::IsInitialized() const {
  return true;
}

void AddLabel_Request::InternalSwap(AddLabel_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  label_.Swap(&other->label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(id_, other->id_);
}

std::string AddLabel_Request::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.AddLabel.Request";
}


// ===================================================================

void AddLabel_Response::InitAsDefaultInstance() {
}
class AddLabel_Response::_Internal {
 public:
};

AddLabel_Response::AddLabel_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.AddLabel.Response)
}
AddLabel_Response::AddLabel_Response(const AddLabel_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.AddLabel.Response)
}

void AddLabel_Response::SharedCtor() {
}

AddLabel_Response::~AddLabel_Response() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.AddLabel.Response)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void AddLabel_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AddLabel_Response::ArenaDtor(void* object) {
  AddLabel_Response* _this = reinterpret_cast< AddLabel_Response* >(object);
  (void)_this;
}
void AddLabel_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddLabel_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddLabel_Response& AddLabel_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddLabel_Response_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void AddLabel_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.AddLabel.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* AddLabel_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddLabel_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.AddLabel.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.AddLabel.Response)
  return target;
}

size_t AddLabel_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.AddLabel.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddLabel_Response::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AddLabel_Response*>(
      &from));
}

void AddLabel_Response::MergeFrom(const AddLabel_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.AddLabel.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AddLabel_Response::CopyFrom(const AddLabel_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.AddLabel.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddLabel_Response::IsInitialized() const {
  return true;
}

void AddLabel_Response::InternalSwap(AddLabel_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string AddLabel_Response::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.AddLabel.Response";
}


// ===================================================================

void AddLabel::InitAsDefaultInstance() {
}
class AddLabel::_Internal {
 public:
};

AddLabel::AddLabel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.AddLabel)
}
AddLabel::AddLabel(const AddLabel& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.AddLabel)
}

void AddLabel::SharedCtor() {
}

AddLabel::~AddLabel() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.AddLabel)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void AddLabel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AddLabel::ArenaDtor(void* object) {
  AddLabel* _this = reinterpret_cast< AddLabel* >(object);
  (void)_this;
}
void AddLabel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddLabel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddLabel& AddLabel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddLabel_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void AddLabel::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.AddLabel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* AddLabel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddLabel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.AddLabel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.AddLabel)
  return target;
}

size_t AddLabel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.AddLabel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddLabel::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AddLabel*>(
      &from));
}

void AddLabel::MergeFrom(const AddLabel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.AddLabel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AddLabel::CopyFrom(const AddLabel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.AddLabel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddLabel::IsInitialized() const {
  return true;
}

void AddLabel::InternalSwap(AddLabel* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string AddLabel::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.AddLabel";
}


// ===================================================================

void RemoveLabel_Request::InitAsDefaultInstance() {
}
class RemoveLabel_Request::_Internal {
 public:
};

RemoveLabel_Request::RemoveLabel_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.RemoveLabel.Request)
}
RemoveLabel_Request::RemoveLabel_Request(const RemoveLabel_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_label().empty()) {
    label_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_label(),
      GetArena());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.RemoveLabel.Request)
}

void RemoveLabel_Request::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RemoveLabel_Request_OrthancDatabasePlugin_2eproto.base);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = PROTOBUF_LONGLONG(0);
}

RemoveLabel_Request::~RemoveLabel_Request() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.RemoveLabel.Request)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void RemoveLabel_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RemoveLabel_Request::ArenaDtor(void* object) {
  RemoveLabel_Request* _this = reinterpret_cast< RemoveLabel_Request* >(object);
  (void)_this;
}
void RemoveLabel_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoveLabel_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoveLabel_Request& RemoveLabel_Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoveLabel_Request_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void RemoveLabel_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.RemoveLabel.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  label_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<std::string>();
}

const char* RemoveLabel_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string label = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoveLabel_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.RemoveLabel.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // string label = 2;
  if (this->label().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Orthanc.DatabasePluginMessages.RemoveLabel.Request.label");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_label(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.RemoveLabel.Request)
  return target;
}

size_t RemoveLabel_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.RemoveLabel.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string label = 2;
  if (this->label().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_label());
  }

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoveLabel_Request::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RemoveLabel_Request*>(
      &from));
}

void RemoveLabel_Request::MergeFrom(const RemoveLabel_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.RemoveLabel.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.label().size() > 0) {
    _internal_set_label(from._internal_label());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void RemoveLabel_Request::CopyFrom(const RemoveLabel_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.RemoveLabel.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveLabel_Request::IsInitialized() const {
  return true;
}

void RemoveLabel_Request::InternalSwap(RemoveLabel_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  label_.Swap(&other->label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(id_, other->id_);
}

std::string RemoveLabel_Request::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.RemoveLabel.Request";
}


// ===================================================================

void RemoveLabel_Response::InitAsDefaultInstance() {
}
class RemoveLabel_Response::_Internal {
 public:
};

RemoveLabel_Response::RemoveLabel_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.RemoveLabel.Response)
}
RemoveLabel_Response::RemoveLabel_Response(const RemoveLabel_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.RemoveLabel.Response)
}

void RemoveLabel_Response::SharedCtor() {
}

RemoveLabel_Response::~RemoveLabel_Response() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.RemoveLabel.Response)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void RemoveLabel_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RemoveLabel_Response::ArenaDtor(void* object) {
  RemoveLabel_Response* _this = reinterpret_cast< RemoveLabel_Response* >(object);
  (void)_this;
}
void RemoveLabel_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoveLabel_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoveLabel_Response& RemoveLabel_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoveLabel_Response_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void RemoveLabel_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.RemoveLabel.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* RemoveLabel_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoveLabel_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.RemoveLabel.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.RemoveLabel.Response)
  return target;
}

size_t RemoveLabel_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.RemoveLabel.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoveLabel_Response::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RemoveLabel_Response*>(
      &from));
}

void RemoveLabel_Response::MergeFrom(const RemoveLabel_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.RemoveLabel.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RemoveLabel_Response::CopyFrom(const RemoveLabel_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.RemoveLabel.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveLabel_Response::IsInitialized() const {
  return true;
}

void RemoveLabel_Response::InternalSwap(RemoveLabel_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string RemoveLabel_Response::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.RemoveLabel.Response";
}


// ===================================================================

void RemoveLabel::InitAsDefaultInstance() {
}
class RemoveLabel::_Internal {
 public:
};

RemoveLabel::RemoveLabel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.RemoveLabel)
}
RemoveLabel::RemoveLabel(const RemoveLabel& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.RemoveLabel)
}

void RemoveLabel::SharedCtor() {
}

RemoveLabel::~RemoveLabel() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.RemoveLabel)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void RemoveLabel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RemoveLabel::ArenaDtor(void* object) {
  RemoveLabel* _this = reinterpret_cast< RemoveLabel* >(object);
  (void)_this;
}
void RemoveLabel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoveLabel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoveLabel& RemoveLabel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoveLabel_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void RemoveLabel::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.RemoveLabel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* RemoveLabel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoveLabel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.RemoveLabel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.RemoveLabel)
  return target;
}

size_t RemoveLabel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.RemoveLabel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoveLabel::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RemoveLabel*>(
      &from));
}

void RemoveLabel::MergeFrom(const RemoveLabel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.RemoveLabel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RemoveLabel::CopyFrom(const RemoveLabel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.RemoveLabel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveLabel::IsInitialized() const {
  return true;
}

void RemoveLabel::InternalSwap(RemoveLabel* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string RemoveLabel::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.RemoveLabel";
}


// ===================================================================

void ListLabels_Request::InitAsDefaultInstance() {
}
class ListLabels_Request::_Internal {
 public:
};

ListLabels_Request::ListLabels_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.ListLabels.Request)
}
ListLabels_Request::ListLabels_Request(const ListLabels_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&single_resource_) -
    reinterpret_cast<char*>(&id_)) + sizeof(single_resource_));
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.ListLabels.Request)
}

void ListLabels_Request::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&single_resource_) -
      reinterpret_cast<char*>(&id_)) + sizeof(single_resource_));
}

ListLabels_Request::~ListLabels_Request() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.ListLabels.Request)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ListLabels_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListLabels_Request::ArenaDtor(void* object) {
  ListLabels_Request* _this = reinterpret_cast< ListLabels_Request* >(object);
  (void)_this;
}
void ListLabels_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListLabels_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListLabels_Request& ListLabels_Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListLabels_Request_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void ListLabels_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.ListLabels.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&single_resource_) -
      reinterpret_cast<char*>(&id_)) + sizeof(single_resource_));
  _internal_metadata_.Clear<std::string>();
}

const char* ListLabels_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool single_resource = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          single_resource_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListLabels_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.ListLabels.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool single_resource = 1;
  if (this->single_resource() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_single_resource(), target);
  }

  // int64 id = 2;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.ListLabels.Request)
  return target;
}

size_t ListLabels_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.ListLabels.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // bool single_resource = 1;
  if (this->single_resource() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListLabels_Request::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ListLabels_Request*>(
      &from));
}

void ListLabels_Request::MergeFrom(const ListLabels_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.ListLabels.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.single_resource() != 0) {
    _internal_set_single_resource(from._internal_single_resource());
  }
}

void ListLabels_Request::CopyFrom(const ListLabels_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.ListLabels.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListLabels_Request::IsInitialized() const {
  return true;
}

void ListLabels_Request::InternalSwap(ListLabels_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListLabels_Request, single_resource_)
      + sizeof(ListLabels_Request::single_resource_)
      - PROTOBUF_FIELD_OFFSET(ListLabels_Request, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

std::string ListLabels_Request::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.ListLabels.Request";
}


// ===================================================================

void ListLabels_Response::InitAsDefaultInstance() {
}
class ListLabels_Response::_Internal {
 public:
};

ListLabels_Response::ListLabels_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  labels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.ListLabels.Response)
}
ListLabels_Response::ListLabels_Response(const ListLabels_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      labels_(from.labels_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.ListLabels.Response)
}

void ListLabels_Response::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListLabels_Response_OrthancDatabasePlugin_2eproto.base);
}

ListLabels_Response::~ListLabels_Response() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.ListLabels.Response)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ListLabels_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListLabels_Response::ArenaDtor(void* object) {
  ListLabels_Response* _this = reinterpret_cast< ListLabels_Response* >(object);
  (void)_this;
}
void ListLabels_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListLabels_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListLabels_Response& ListLabels_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListLabels_Response_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void ListLabels_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.ListLabels.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ListLabels_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string labels = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_labels();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListLabels_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.ListLabels.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string labels = 1;
  for (int i = 0, n = this->_internal_labels_size(); i < n; i++) {
    const auto& s = this->_internal_labels(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Orthanc.DatabasePluginMessages.ListLabels.Response.labels");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.ListLabels.Response)
  return target;
}

size_t ListLabels_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.ListLabels.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string labels = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(labels_.size());
  for (int i = 0, n = labels_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      labels_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListLabels_Response::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ListLabels_Response*>(
      &from));
}

void ListLabels_Response::MergeFrom(const ListLabels_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.ListLabels.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
}

void ListLabels_Response::CopyFrom(const ListLabels_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.ListLabels.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListLabels_Response::IsInitialized() const {
  return true;
}

void ListLabels_Response::InternalSwap(ListLabels_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  labels_.InternalSwap(&other->labels_);
}

std::string ListLabels_Response::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.ListLabels.Response";
}


// ===================================================================

void ListLabels::InitAsDefaultInstance() {
}
class ListLabels::_Internal {
 public:
};

ListLabels::ListLabels(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.ListLabels)
}
ListLabels::ListLabels(const ListLabels& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.ListLabels)
}

void ListLabels::SharedCtor() {
}

ListLabels::~ListLabels() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.ListLabels)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ListLabels::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListLabels::ArenaDtor(void* object) {
  ListLabels* _this = reinterpret_cast< ListLabels* >(object);
  (void)_this;
}
void ListLabels::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListLabels::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListLabels& ListLabels::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListLabels_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void ListLabels::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.ListLabels)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* ListLabels::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListLabels::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.ListLabels)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.ListLabels)
  return target;
}

size_t ListLabels::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.ListLabels)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListLabels::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ListLabels*>(
      &from));
}

void ListLabels::MergeFrom(const ListLabels& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.ListLabels)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ListLabels::CopyFrom(const ListLabels& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.ListLabels)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListLabels::IsInitialized() const {
  return true;
}

void ListLabels::InternalSwap(ListLabels* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string ListLabels::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.ListLabels";
}


// ===================================================================

void TransactionRequest::InitAsDefaultInstance() {
  ::Orthanc::DatabasePluginMessages::_TransactionRequest_default_instance_._instance.get_mutable()->rollback_ = const_cast< ::Orthanc::DatabasePluginMessages::Rollback_Request*>(
      ::Orthanc::DatabasePluginMessages::Rollback_Request::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionRequest_default_instance_._instance.get_mutable()->commit_ = const_cast< ::Orthanc::DatabasePluginMessages::Commit_Request*>(
      ::Orthanc::DatabasePluginMessages::Commit_Request::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionRequest_default_instance_._instance.get_mutable()->add_attachment_ = const_cast< ::Orthanc::DatabasePluginMessages::AddAttachment_Request*>(
      ::Orthanc::DatabasePluginMessages::AddAttachment_Request::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionRequest_default_instance_._instance.get_mutable()->clear_changes_ = const_cast< ::Orthanc::DatabasePluginMessages::ClearChanges_Request*>(
      ::Orthanc::DatabasePluginMessages::ClearChanges_Request::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionRequest_default_instance_._instance.get_mutable()->clear_exported_resources_ = const_cast< ::Orthanc::DatabasePluginMessages::ClearExportedResources_Request*>(
      ::Orthanc::DatabasePluginMessages::ClearExportedResources_Request::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionRequest_default_instance_._instance.get_mutable()->delete_attachment_ = const_cast< ::Orthanc::DatabasePluginMessages::DeleteAttachment_Request*>(
      ::Orthanc::DatabasePluginMessages::DeleteAttachment_Request::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionRequest_default_instance_._instance.get_mutable()->delete_metadata_ = const_cast< ::Orthanc::DatabasePluginMessages::DeleteMetadata_Request*>(
      ::Orthanc::DatabasePluginMessages::DeleteMetadata_Request::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionRequest_default_instance_._instance.get_mutable()->delete_resource_ = const_cast< ::Orthanc::DatabasePluginMessages::DeleteResource_Request*>(
      ::Orthanc::DatabasePluginMessages::DeleteResource_Request::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionRequest_default_instance_._instance.get_mutable()->get_all_metadata_ = const_cast< ::Orthanc::DatabasePluginMessages::GetAllMetadata_Request*>(
      ::Orthanc::DatabasePluginMessages::GetAllMetadata_Request::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionRequest_default_instance_._instance.get_mutable()->get_all_public_ids_ = const_cast< ::Orthanc::DatabasePluginMessages::GetAllPublicIds_Request*>(
      ::Orthanc::DatabasePluginMessages::GetAllPublicIds_Request::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionRequest_default_instance_._instance.get_mutable()->get_all_public_ids_with_limits_ = const_cast< ::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits_Request*>(
      ::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits_Request::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionRequest_default_instance_._instance.get_mutable()->get_changes_ = const_cast< ::Orthanc::DatabasePluginMessages::GetChanges_Request*>(
      ::Orthanc::DatabasePluginMessages::GetChanges_Request::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionRequest_default_instance_._instance.get_mutable()->get_children_internal_id_ = const_cast< ::Orthanc::DatabasePluginMessages::GetChildrenInternalId_Request*>(
      ::Orthanc::DatabasePluginMessages::GetChildrenInternalId_Request::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionRequest_default_instance_._instance.get_mutable()->get_children_public_id_ = const_cast< ::Orthanc::DatabasePluginMessages::GetChildrenPublicId_Request*>(
      ::Orthanc::DatabasePluginMessages::GetChildrenPublicId_Request::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionRequest_default_instance_._instance.get_mutable()->get_exported_resources_ = const_cast< ::Orthanc::DatabasePluginMessages::GetExportedResources_Request*>(
      ::Orthanc::DatabasePluginMessages::GetExportedResources_Request::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionRequest_default_instance_._instance.get_mutable()->get_last_change_ = const_cast< ::Orthanc::DatabasePluginMessages::GetLastChange_Request*>(
      ::Orthanc::DatabasePluginMessages::GetLastChange_Request::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionRequest_default_instance_._instance.get_mutable()->get_last_exported_resource_ = const_cast< ::Orthanc::DatabasePluginMessages::GetLastExportedResource_Request*>(
      ::Orthanc::DatabasePluginMessages::GetLastExportedResource_Request::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionRequest_default_instance_._instance.get_mutable()->get_main_dicom_tags_ = const_cast< ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Request*>(
      ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Request::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionRequest_default_instance_._instance.get_mutable()->get_public_id_ = const_cast< ::Orthanc::DatabasePluginMessages::GetPublicId_Request*>(
      ::Orthanc::DatabasePluginMessages::GetPublicId_Request::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionRequest_default_instance_._instance.get_mutable()->get_resources_count_ = const_cast< ::Orthanc::DatabasePluginMessages::GetResourcesCount_Request*>(
      ::Orthanc::DatabasePluginMessages::GetResourcesCount_Request::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionRequest_default_instance_._instance.get_mutable()->get_resource_type_ = const_cast< ::Orthanc::DatabasePluginMessages::GetResourceType_Request*>(
      ::Orthanc::DatabasePluginMessages::GetResourceType_Request::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionRequest_default_instance_._instance.get_mutable()->get_total_compressed_size_ = const_cast< ::Orthanc::DatabasePluginMessages::GetTotalCompressedSize_Request*>(
      ::Orthanc::DatabasePluginMessages::GetTotalCompressedSize_Request::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionRequest_default_instance_._instance.get_mutable()->get_total_uncompressed_size_ = const_cast< ::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize_Request*>(
      ::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize_Request::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionRequest_default_instance_._instance.get_mutable()->is_protected_patient_ = const_cast< ::Orthanc::DatabasePluginMessages::IsProtectedPatient_Request*>(
      ::Orthanc::DatabasePluginMessages::IsProtectedPatient_Request::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionRequest_default_instance_._instance.get_mutable()->list_available_attachments_ = const_cast< ::Orthanc::DatabasePluginMessages::ListAvailableAttachments_Request*>(
      ::Orthanc::DatabasePluginMessages::ListAvailableAttachments_Request::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionRequest_default_instance_._instance.get_mutable()->log_change_ = const_cast< ::Orthanc::DatabasePluginMessages::LogChange_Request*>(
      ::Orthanc::DatabasePluginMessages::LogChange_Request::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionRequest_default_instance_._instance.get_mutable()->log_exported_resource_ = const_cast< ::Orthanc::DatabasePluginMessages::LogExportedResource_Request*>(
      ::Orthanc::DatabasePluginMessages::LogExportedResource_Request::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionRequest_default_instance_._instance.get_mutable()->lookup_attachment_ = const_cast< ::Orthanc::DatabasePluginMessages::LookupAttachment_Request*>(
      ::Orthanc::DatabasePluginMessages::LookupAttachment_Request::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionRequest_default_instance_._instance.get_mutable()->lookup_global_property_ = const_cast< ::Orthanc::DatabasePluginMessages::LookupGlobalProperty_Request*>(
      ::Orthanc::DatabasePluginMessages::LookupGlobalProperty_Request::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionRequest_default_instance_._instance.get_mutable()->lookup_metadata_ = const_cast< ::Orthanc::DatabasePluginMessages::LookupMetadata_Request*>(
      ::Orthanc::DatabasePluginMessages::LookupMetadata_Request::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionRequest_default_instance_._instance.get_mutable()->lookup_parent_ = const_cast< ::Orthanc::DatabasePluginMessages::LookupParent_Request*>(
      ::Orthanc::DatabasePluginMessages::LookupParent_Request::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionRequest_default_instance_._instance.get_mutable()->lookup_resource_ = const_cast< ::Orthanc::DatabasePluginMessages::LookupResource_Request*>(
      ::Orthanc::DatabasePluginMessages::LookupResource_Request::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionRequest_default_instance_._instance.get_mutable()->select_patient_to_recycle_ = const_cast< ::Orthanc::DatabasePluginMessages::SelectPatientToRecycle_Request*>(
      ::Orthanc::DatabasePluginMessages::SelectPatientToRecycle_Request::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionRequest_default_instance_._instance.get_mutable()->select_patient_to_recycle_with_avoid_ = const_cast< ::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid_Request*>(
      ::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid_Request::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionRequest_default_instance_._instance.get_mutable()->set_global_property_ = const_cast< ::Orthanc::DatabasePluginMessages::SetGlobalProperty_Request*>(
      ::Orthanc::DatabasePluginMessages::SetGlobalProperty_Request::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionRequest_default_instance_._instance.get_mutable()->clear_main_dicom_tags_ = const_cast< ::Orthanc::DatabasePluginMessages::ClearMainDicomTags_Request*>(
      ::Orthanc::DatabasePluginMessages::ClearMainDicomTags_Request::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionRequest_default_instance_._instance.get_mutable()->set_metadata_ = const_cast< ::Orthanc::DatabasePluginMessages::SetMetadata_Request*>(
      ::Orthanc::DatabasePluginMessages::SetMetadata_Request::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionRequest_default_instance_._instance.get_mutable()->set_protected_patient_ = const_cast< ::Orthanc::DatabasePluginMessages::SetProtectedPatient_Request*>(
      ::Orthanc::DatabasePluginMessages::SetProtectedPatient_Request::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionRequest_default_instance_._instance.get_mutable()->is_disk_size_above_ = const_cast< ::Orthanc::DatabasePluginMessages::IsDiskSizeAbove_Request*>(
      ::Orthanc::DatabasePluginMessages::IsDiskSizeAbove_Request::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionRequest_default_instance_._instance.get_mutable()->lookup_resources_ = const_cast< ::Orthanc::DatabasePluginMessages::LookupResources_Request*>(
      ::Orthanc::DatabasePluginMessages::LookupResources_Request::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionRequest_default_instance_._instance.get_mutable()->create_instance_ = const_cast< ::Orthanc::DatabasePluginMessages::CreateInstance_Request*>(
      ::Orthanc::DatabasePluginMessages::CreateInstance_Request::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionRequest_default_instance_._instance.get_mutable()->set_resources_content_ = const_cast< ::Orthanc::DatabasePluginMessages::SetResourcesContent_Request*>(
      ::Orthanc::DatabasePluginMessages::SetResourcesContent_Request::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionRequest_default_instance_._instance.get_mutable()->get_children_metadata_ = const_cast< ::Orthanc::DatabasePluginMessages::GetChildrenMetadata_Request*>(
      ::Orthanc::DatabasePluginMessages::GetChildrenMetadata_Request::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionRequest_default_instance_._instance.get_mutable()->get_last_change_index_ = const_cast< ::Orthanc::DatabasePluginMessages::GetLastChangeIndex_Request*>(
      ::Orthanc::DatabasePluginMessages::GetLastChangeIndex_Request::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionRequest_default_instance_._instance.get_mutable()->lookup_resource_and_parent_ = const_cast< ::Orthanc::DatabasePluginMessages::LookupResourceAndParent_Request*>(
      ::Orthanc::DatabasePluginMessages::LookupResourceAndParent_Request::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionRequest_default_instance_._instance.get_mutable()->add_label_ = const_cast< ::Orthanc::DatabasePluginMessages::AddLabel_Request*>(
      ::Orthanc::DatabasePluginMessages::AddLabel_Request::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionRequest_default_instance_._instance.get_mutable()->remove_label_ = const_cast< ::Orthanc::DatabasePluginMessages::RemoveLabel_Request*>(
      ::Orthanc::DatabasePluginMessages::RemoveLabel_Request::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionRequest_default_instance_._instance.get_mutable()->list_labels_ = const_cast< ::Orthanc::DatabasePluginMessages::ListLabels_Request*>(
      ::Orthanc::DatabasePluginMessages::ListLabels_Request::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionRequest_default_instance_._instance.get_mutable()->increment_global_property_ = const_cast< ::Orthanc::DatabasePluginMessages::IncrementGlobalProperty_Request*>(
      ::Orthanc::DatabasePluginMessages::IncrementGlobalProperty_Request::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionRequest_default_instance_._instance.get_mutable()->update_and_get_statistics_ = const_cast< ::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics_Request*>(
      ::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics_Request::internal_default_instance());
}
class TransactionRequest::_Internal {
 public:
  static const ::Orthanc::DatabasePluginMessages::Rollback_Request& rollback(const TransactionRequest* msg);
  static const ::Orthanc::DatabasePluginMessages::Commit_Request& commit(const TransactionRequest* msg);
  static const ::Orthanc::DatabasePluginMessages::AddAttachment_Request& add_attachment(const TransactionRequest* msg);
  static const ::Orthanc::DatabasePluginMessages::ClearChanges_Request& clear_changes(const TransactionRequest* msg);
  static const ::Orthanc::DatabasePluginMessages::ClearExportedResources_Request& clear_exported_resources(const TransactionRequest* msg);
  static const ::Orthanc::DatabasePluginMessages::DeleteAttachment_Request& delete_attachment(const TransactionRequest* msg);
  static const ::Orthanc::DatabasePluginMessages::DeleteMetadata_Request& delete_metadata(const TransactionRequest* msg);
  static const ::Orthanc::DatabasePluginMessages::DeleteResource_Request& delete_resource(const TransactionRequest* msg);
  static const ::Orthanc::DatabasePluginMessages::GetAllMetadata_Request& get_all_metadata(const TransactionRequest* msg);
  static const ::Orthanc::DatabasePluginMessages::GetAllPublicIds_Request& get_all_public_ids(const TransactionRequest* msg);
  static const ::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits_Request& get_all_public_ids_with_limits(const TransactionRequest* msg);
  static const ::Orthanc::DatabasePluginMessages::GetChanges_Request& get_changes(const TransactionRequest* msg);
  static const ::Orthanc::DatabasePluginMessages::GetChildrenInternalId_Request& get_children_internal_id(const TransactionRequest* msg);
  static const ::Orthanc::DatabasePluginMessages::GetChildrenPublicId_Request& get_children_public_id(const TransactionRequest* msg);
  static const ::Orthanc::DatabasePluginMessages::GetExportedResources_Request& get_exported_resources(const TransactionRequest* msg);
  static const ::Orthanc::DatabasePluginMessages::GetLastChange_Request& get_last_change(const TransactionRequest* msg);
  static const ::Orthanc::DatabasePluginMessages::GetLastExportedResource_Request& get_last_exported_resource(const TransactionRequest* msg);
  static const ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Request& get_main_dicom_tags(const TransactionRequest* msg);
  static const ::Orthanc::DatabasePluginMessages::GetPublicId_Request& get_public_id(const TransactionRequest* msg);
  static const ::Orthanc::DatabasePluginMessages::GetResourcesCount_Request& get_resources_count(const TransactionRequest* msg);
  static const ::Orthanc::DatabasePluginMessages::GetResourceType_Request& get_resource_type(const TransactionRequest* msg);
  static const ::Orthanc::DatabasePluginMessages::GetTotalCompressedSize_Request& get_total_compressed_size(const TransactionRequest* msg);
  static const ::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize_Request& get_total_uncompressed_size(const TransactionRequest* msg);
  static const ::Orthanc::DatabasePluginMessages::IsProtectedPatient_Request& is_protected_patient(const TransactionRequest* msg);
  static const ::Orthanc::DatabasePluginMessages::ListAvailableAttachments_Request& list_available_attachments(const TransactionRequest* msg);
  static const ::Orthanc::DatabasePluginMessages::LogChange_Request& log_change(const TransactionRequest* msg);
  static const ::Orthanc::DatabasePluginMessages::LogExportedResource_Request& log_exported_resource(const TransactionRequest* msg);
  static const ::Orthanc::DatabasePluginMessages::LookupAttachment_Request& lookup_attachment(const TransactionRequest* msg);
  static const ::Orthanc::DatabasePluginMessages::LookupGlobalProperty_Request& lookup_global_property(const TransactionRequest* msg);
  static const ::Orthanc::DatabasePluginMessages::LookupMetadata_Request& lookup_metadata(const TransactionRequest* msg);
  static const ::Orthanc::DatabasePluginMessages::LookupParent_Request& lookup_parent(const TransactionRequest* msg);
  static const ::Orthanc::DatabasePluginMessages::LookupResource_Request& lookup_resource(const TransactionRequest* msg);
  static const ::Orthanc::DatabasePluginMessages::SelectPatientToRecycle_Request& select_patient_to_recycle(const TransactionRequest* msg);
  static const ::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid_Request& select_patient_to_recycle_with_avoid(const TransactionRequest* msg);
  static const ::Orthanc::DatabasePluginMessages::SetGlobalProperty_Request& set_global_property(const TransactionRequest* msg);
  static const ::Orthanc::DatabasePluginMessages::ClearMainDicomTags_Request& clear_main_dicom_tags(const TransactionRequest* msg);
  static const ::Orthanc::DatabasePluginMessages::SetMetadata_Request& set_metadata(const TransactionRequest* msg);
  static const ::Orthanc::DatabasePluginMessages::SetProtectedPatient_Request& set_protected_patient(const TransactionRequest* msg);
  static const ::Orthanc::DatabasePluginMessages::IsDiskSizeAbove_Request& is_disk_size_above(const TransactionRequest* msg);
  static const ::Orthanc::DatabasePluginMessages::LookupResources_Request& lookup_resources(const TransactionRequest* msg);
  static const ::Orthanc::DatabasePluginMessages::CreateInstance_Request& create_instance(const TransactionRequest* msg);
  static const ::Orthanc::DatabasePluginMessages::SetResourcesContent_Request& set_resources_content(const TransactionRequest* msg);
  static const ::Orthanc::DatabasePluginMessages::GetChildrenMetadata_Request& get_children_metadata(const TransactionRequest* msg);
  static const ::Orthanc::DatabasePluginMessages::GetLastChangeIndex_Request& get_last_change_index(const TransactionRequest* msg);
  static const ::Orthanc::DatabasePluginMessages::LookupResourceAndParent_Request& lookup_resource_and_parent(const TransactionRequest* msg);
  static const ::Orthanc::DatabasePluginMessages::AddLabel_Request& add_label(const TransactionRequest* msg);
  static const ::Orthanc::DatabasePluginMessages::RemoveLabel_Request& remove_label(const TransactionRequest* msg);
  static const ::Orthanc::DatabasePluginMessages::ListLabels_Request& list_labels(const TransactionRequest* msg);
  static const ::Orthanc::DatabasePluginMessages::IncrementGlobalProperty_Request& increment_global_property(const TransactionRequest* msg);
  static const ::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics_Request& update_and_get_statistics(const TransactionRequest* msg);
};

const ::Orthanc::DatabasePluginMessages::Rollback_Request&
TransactionRequest::_Internal::rollback(const TransactionRequest* msg) {
  return *msg->rollback_;
}
const ::Orthanc::DatabasePluginMessages::Commit_Request&
TransactionRequest::_Internal::commit(const TransactionRequest* msg) {
  return *msg->commit_;
}
const ::Orthanc::DatabasePluginMessages::AddAttachment_Request&
TransactionRequest::_Internal::add_attachment(const TransactionRequest* msg) {
  return *msg->add_attachment_;
}
const ::Orthanc::DatabasePluginMessages::ClearChanges_Request&
TransactionRequest::_Internal::clear_changes(const TransactionRequest* msg) {
  return *msg->clear_changes_;
}
const ::Orthanc::DatabasePluginMessages::ClearExportedResources_Request&
TransactionRequest::_Internal::clear_exported_resources(const TransactionRequest* msg) {
  return *msg->clear_exported_resources_;
}
const ::Orthanc::DatabasePluginMessages::DeleteAttachment_Request&
TransactionRequest::_Internal::delete_attachment(const TransactionRequest* msg) {
  return *msg->delete_attachment_;
}
const ::Orthanc::DatabasePluginMessages::DeleteMetadata_Request&
TransactionRequest::_Internal::delete_metadata(const TransactionRequest* msg) {
  return *msg->delete_metadata_;
}
const ::Orthanc::DatabasePluginMessages::DeleteResource_Request&
TransactionRequest::_Internal::delete_resource(const TransactionRequest* msg) {
  return *msg->delete_resource_;
}
const ::Orthanc::DatabasePluginMessages::GetAllMetadata_Request&
TransactionRequest::_Internal::get_all_metadata(const TransactionRequest* msg) {
  return *msg->get_all_metadata_;
}
const ::Orthanc::DatabasePluginMessages::GetAllPublicIds_Request&
TransactionRequest::_Internal::get_all_public_ids(const TransactionRequest* msg) {
  return *msg->get_all_public_ids_;
}
const ::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits_Request&
TransactionRequest::_Internal::get_all_public_ids_with_limits(const TransactionRequest* msg) {
  return *msg->get_all_public_ids_with_limits_;
}
const ::Orthanc::DatabasePluginMessages::GetChanges_Request&
TransactionRequest::_Internal::get_changes(const TransactionRequest* msg) {
  return *msg->get_changes_;
}
const ::Orthanc::DatabasePluginMessages::GetChildrenInternalId_Request&
TransactionRequest::_Internal::get_children_internal_id(const TransactionRequest* msg) {
  return *msg->get_children_internal_id_;
}
const ::Orthanc::DatabasePluginMessages::GetChildrenPublicId_Request&
TransactionRequest::_Internal::get_children_public_id(const TransactionRequest* msg) {
  return *msg->get_children_public_id_;
}
const ::Orthanc::DatabasePluginMessages::GetExportedResources_Request&
TransactionRequest::_Internal::get_exported_resources(const TransactionRequest* msg) {
  return *msg->get_exported_resources_;
}
const ::Orthanc::DatabasePluginMessages::GetLastChange_Request&
TransactionRequest::_Internal::get_last_change(const TransactionRequest* msg) {
  return *msg->get_last_change_;
}
const ::Orthanc::DatabasePluginMessages::GetLastExportedResource_Request&
TransactionRequest::_Internal::get_last_exported_resource(const TransactionRequest* msg) {
  return *msg->get_last_exported_resource_;
}
const ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Request&
TransactionRequest::_Internal::get_main_dicom_tags(const TransactionRequest* msg) {
  return *msg->get_main_dicom_tags_;
}
const ::Orthanc::DatabasePluginMessages::GetPublicId_Request&
TransactionRequest::_Internal::get_public_id(const TransactionRequest* msg) {
  return *msg->get_public_id_;
}
const ::Orthanc::DatabasePluginMessages::GetResourcesCount_Request&
TransactionRequest::_Internal::get_resources_count(const TransactionRequest* msg) {
  return *msg->get_resources_count_;
}
const ::Orthanc::DatabasePluginMessages::GetResourceType_Request&
TransactionRequest::_Internal::get_resource_type(const TransactionRequest* msg) {
  return *msg->get_resource_type_;
}
const ::Orthanc::DatabasePluginMessages::GetTotalCompressedSize_Request&
TransactionRequest::_Internal::get_total_compressed_size(const TransactionRequest* msg) {
  return *msg->get_total_compressed_size_;
}
const ::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize_Request&
TransactionRequest::_Internal::get_total_uncompressed_size(const TransactionRequest* msg) {
  return *msg->get_total_uncompressed_size_;
}
const ::Orthanc::DatabasePluginMessages::IsProtectedPatient_Request&
TransactionRequest::_Internal::is_protected_patient(const TransactionRequest* msg) {
  return *msg->is_protected_patient_;
}
const ::Orthanc::DatabasePluginMessages::ListAvailableAttachments_Request&
TransactionRequest::_Internal::list_available_attachments(const TransactionRequest* msg) {
  return *msg->list_available_attachments_;
}
const ::Orthanc::DatabasePluginMessages::LogChange_Request&
TransactionRequest::_Internal::log_change(const TransactionRequest* msg) {
  return *msg->log_change_;
}
const ::Orthanc::DatabasePluginMessages::LogExportedResource_Request&
TransactionRequest::_Internal::log_exported_resource(const TransactionRequest* msg) {
  return *msg->log_exported_resource_;
}
const ::Orthanc::DatabasePluginMessages::LookupAttachment_Request&
TransactionRequest::_Internal::lookup_attachment(const TransactionRequest* msg) {
  return *msg->lookup_attachment_;
}
const ::Orthanc::DatabasePluginMessages::LookupGlobalProperty_Request&
TransactionRequest::_Internal::lookup_global_property(const TransactionRequest* msg) {
  return *msg->lookup_global_property_;
}
const ::Orthanc::DatabasePluginMessages::LookupMetadata_Request&
TransactionRequest::_Internal::lookup_metadata(const TransactionRequest* msg) {
  return *msg->lookup_metadata_;
}
const ::Orthanc::DatabasePluginMessages::LookupParent_Request&
TransactionRequest::_Internal::lookup_parent(const TransactionRequest* msg) {
  return *msg->lookup_parent_;
}
const ::Orthanc::DatabasePluginMessages::LookupResource_Request&
TransactionRequest::_Internal::lookup_resource(const TransactionRequest* msg) {
  return *msg->lookup_resource_;
}
const ::Orthanc::DatabasePluginMessages::SelectPatientToRecycle_Request&
TransactionRequest::_Internal::select_patient_to_recycle(const TransactionRequest* msg) {
  return *msg->select_patient_to_recycle_;
}
const ::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid_Request&
TransactionRequest::_Internal::select_patient_to_recycle_with_avoid(const TransactionRequest* msg) {
  return *msg->select_patient_to_recycle_with_avoid_;
}
const ::Orthanc::DatabasePluginMessages::SetGlobalProperty_Request&
TransactionRequest::_Internal::set_global_property(const TransactionRequest* msg) {
  return *msg->set_global_property_;
}
const ::Orthanc::DatabasePluginMessages::ClearMainDicomTags_Request&
TransactionRequest::_Internal::clear_main_dicom_tags(const TransactionRequest* msg) {
  return *msg->clear_main_dicom_tags_;
}
const ::Orthanc::DatabasePluginMessages::SetMetadata_Request&
TransactionRequest::_Internal::set_metadata(const TransactionRequest* msg) {
  return *msg->set_metadata_;
}
const ::Orthanc::DatabasePluginMessages::SetProtectedPatient_Request&
TransactionRequest::_Internal::set_protected_patient(const TransactionRequest* msg) {
  return *msg->set_protected_patient_;
}
const ::Orthanc::DatabasePluginMessages::IsDiskSizeAbove_Request&
TransactionRequest::_Internal::is_disk_size_above(const TransactionRequest* msg) {
  return *msg->is_disk_size_above_;
}
const ::Orthanc::DatabasePluginMessages::LookupResources_Request&
TransactionRequest::_Internal::lookup_resources(const TransactionRequest* msg) {
  return *msg->lookup_resources_;
}
const ::Orthanc::DatabasePluginMessages::CreateInstance_Request&
TransactionRequest::_Internal::create_instance(const TransactionRequest* msg) {
  return *msg->create_instance_;
}
const ::Orthanc::DatabasePluginMessages::SetResourcesContent_Request&
TransactionRequest::_Internal::set_resources_content(const TransactionRequest* msg) {
  return *msg->set_resources_content_;
}
const ::Orthanc::DatabasePluginMessages::GetChildrenMetadata_Request&
TransactionRequest::_Internal::get_children_metadata(const TransactionRequest* msg) {
  return *msg->get_children_metadata_;
}
const ::Orthanc::DatabasePluginMessages::GetLastChangeIndex_Request&
TransactionRequest::_Internal::get_last_change_index(const TransactionRequest* msg) {
  return *msg->get_last_change_index_;
}
const ::Orthanc::DatabasePluginMessages::LookupResourceAndParent_Request&
TransactionRequest::_Internal::lookup_resource_and_parent(const TransactionRequest* msg) {
  return *msg->lookup_resource_and_parent_;
}
const ::Orthanc::DatabasePluginMessages::AddLabel_Request&
TransactionRequest::_Internal::add_label(const TransactionRequest* msg) {
  return *msg->add_label_;
}
const ::Orthanc::DatabasePluginMessages::RemoveLabel_Request&
TransactionRequest::_Internal::remove_label(const TransactionRequest* msg) {
  return *msg->remove_label_;
}
const ::Orthanc::DatabasePluginMessages::ListLabels_Request&
TransactionRequest::_Internal::list_labels(const TransactionRequest* msg) {
  return *msg->list_labels_;
}
const ::Orthanc::DatabasePluginMessages::IncrementGlobalProperty_Request&
TransactionRequest::_Internal::increment_global_property(const TransactionRequest* msg) {
  return *msg->increment_global_property_;
}
const ::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics_Request&
TransactionRequest::_Internal::update_and_get_statistics(const TransactionRequest* msg) {
  return *msg->update_and_get_statistics_;
}
TransactionRequest::TransactionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.TransactionRequest)
}
TransactionRequest::TransactionRequest(const TransactionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_rollback()) {
    rollback_ = new ::Orthanc::DatabasePluginMessages::Rollback_Request(*from.rollback_);
  } else {
    rollback_ = nullptr;
  }
  if (from._internal_has_commit()) {
    commit_ = new ::Orthanc::DatabasePluginMessages::Commit_Request(*from.commit_);
  } else {
    commit_ = nullptr;
  }
  if (from._internal_has_add_attachment()) {
    add_attachment_ = new ::Orthanc::DatabasePluginMessages::AddAttachment_Request(*from.add_attachment_);
  } else {
    add_attachment_ = nullptr;
  }
  if (from._internal_has_clear_changes()) {
    clear_changes_ = new ::Orthanc::DatabasePluginMessages::ClearChanges_Request(*from.clear_changes_);
  } else {
    clear_changes_ = nullptr;
  }
  if (from._internal_has_clear_exported_resources()) {
    clear_exported_resources_ = new ::Orthanc::DatabasePluginMessages::ClearExportedResources_Request(*from.clear_exported_resources_);
  } else {
    clear_exported_resources_ = nullptr;
  }
  if (from._internal_has_delete_attachment()) {
    delete_attachment_ = new ::Orthanc::DatabasePluginMessages::DeleteAttachment_Request(*from.delete_attachment_);
  } else {
    delete_attachment_ = nullptr;
  }
  if (from._internal_has_delete_metadata()) {
    delete_metadata_ = new ::Orthanc::DatabasePluginMessages::DeleteMetadata_Request(*from.delete_metadata_);
  } else {
    delete_metadata_ = nullptr;
  }
  if (from._internal_has_delete_resource()) {
    delete_resource_ = new ::Orthanc::DatabasePluginMessages::DeleteResource_Request(*from.delete_resource_);
  } else {
    delete_resource_ = nullptr;
  }
  if (from._internal_has_get_all_metadata()) {
    get_all_metadata_ = new ::Orthanc::DatabasePluginMessages::GetAllMetadata_Request(*from.get_all_metadata_);
  } else {
    get_all_metadata_ = nullptr;
  }
  if (from._internal_has_get_all_public_ids()) {
    get_all_public_ids_ = new ::Orthanc::DatabasePluginMessages::GetAllPublicIds_Request(*from.get_all_public_ids_);
  } else {
    get_all_public_ids_ = nullptr;
  }
  if (from._internal_has_get_all_public_ids_with_limits()) {
    get_all_public_ids_with_limits_ = new ::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits_Request(*from.get_all_public_ids_with_limits_);
  } else {
    get_all_public_ids_with_limits_ = nullptr;
  }
  if (from._internal_has_get_changes()) {
    get_changes_ = new ::Orthanc::DatabasePluginMessages::GetChanges_Request(*from.get_changes_);
  } else {
    get_changes_ = nullptr;
  }
  if (from._internal_has_get_children_internal_id()) {
    get_children_internal_id_ = new ::Orthanc::DatabasePluginMessages::GetChildrenInternalId_Request(*from.get_children_internal_id_);
  } else {
    get_children_internal_id_ = nullptr;
  }
  if (from._internal_has_get_children_public_id()) {
    get_children_public_id_ = new ::Orthanc::DatabasePluginMessages::GetChildrenPublicId_Request(*from.get_children_public_id_);
  } else {
    get_children_public_id_ = nullptr;
  }
  if (from._internal_has_get_exported_resources()) {
    get_exported_resources_ = new ::Orthanc::DatabasePluginMessages::GetExportedResources_Request(*from.get_exported_resources_);
  } else {
    get_exported_resources_ = nullptr;
  }
  if (from._internal_has_get_last_change()) {
    get_last_change_ = new ::Orthanc::DatabasePluginMessages::GetLastChange_Request(*from.get_last_change_);
  } else {
    get_last_change_ = nullptr;
  }
  if (from._internal_has_get_last_exported_resource()) {
    get_last_exported_resource_ = new ::Orthanc::DatabasePluginMessages::GetLastExportedResource_Request(*from.get_last_exported_resource_);
  } else {
    get_last_exported_resource_ = nullptr;
  }
  if (from._internal_has_get_main_dicom_tags()) {
    get_main_dicom_tags_ = new ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Request(*from.get_main_dicom_tags_);
  } else {
    get_main_dicom_tags_ = nullptr;
  }
  if (from._internal_has_get_public_id()) {
    get_public_id_ = new ::Orthanc::DatabasePluginMessages::GetPublicId_Request(*from.get_public_id_);
  } else {
    get_public_id_ = nullptr;
  }
  if (from._internal_has_get_resources_count()) {
    get_resources_count_ = new ::Orthanc::DatabasePluginMessages::GetResourcesCount_Request(*from.get_resources_count_);
  } else {
    get_resources_count_ = nullptr;
  }
  if (from._internal_has_get_resource_type()) {
    get_resource_type_ = new ::Orthanc::DatabasePluginMessages::GetResourceType_Request(*from.get_resource_type_);
  } else {
    get_resource_type_ = nullptr;
  }
  if (from._internal_has_get_total_compressed_size()) {
    get_total_compressed_size_ = new ::Orthanc::DatabasePluginMessages::GetTotalCompressedSize_Request(*from.get_total_compressed_size_);
  } else {
    get_total_compressed_size_ = nullptr;
  }
  if (from._internal_has_get_total_uncompressed_size()) {
    get_total_uncompressed_size_ = new ::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize_Request(*from.get_total_uncompressed_size_);
  } else {
    get_total_uncompressed_size_ = nullptr;
  }
  if (from._internal_has_is_protected_patient()) {
    is_protected_patient_ = new ::Orthanc::DatabasePluginMessages::IsProtectedPatient_Request(*from.is_protected_patient_);
  } else {
    is_protected_patient_ = nullptr;
  }
  if (from._internal_has_list_available_attachments()) {
    list_available_attachments_ = new ::Orthanc::DatabasePluginMessages::ListAvailableAttachments_Request(*from.list_available_attachments_);
  } else {
    list_available_attachments_ = nullptr;
  }
  if (from._internal_has_log_change()) {
    log_change_ = new ::Orthanc::DatabasePluginMessages::LogChange_Request(*from.log_change_);
  } else {
    log_change_ = nullptr;
  }
  if (from._internal_has_log_exported_resource()) {
    log_exported_resource_ = new ::Orthanc::DatabasePluginMessages::LogExportedResource_Request(*from.log_exported_resource_);
  } else {
    log_exported_resource_ = nullptr;
  }
  if (from._internal_has_lookup_attachment()) {
    lookup_attachment_ = new ::Orthanc::DatabasePluginMessages::LookupAttachment_Request(*from.lookup_attachment_);
  } else {
    lookup_attachment_ = nullptr;
  }
  if (from._internal_has_lookup_global_property()) {
    lookup_global_property_ = new ::Orthanc::DatabasePluginMessages::LookupGlobalProperty_Request(*from.lookup_global_property_);
  } else {
    lookup_global_property_ = nullptr;
  }
  if (from._internal_has_lookup_metadata()) {
    lookup_metadata_ = new ::Orthanc::DatabasePluginMessages::LookupMetadata_Request(*from.lookup_metadata_);
  } else {
    lookup_metadata_ = nullptr;
  }
  if (from._internal_has_lookup_parent()) {
    lookup_parent_ = new ::Orthanc::DatabasePluginMessages::LookupParent_Request(*from.lookup_parent_);
  } else {
    lookup_parent_ = nullptr;
  }
  if (from._internal_has_lookup_resource()) {
    lookup_resource_ = new ::Orthanc::DatabasePluginMessages::LookupResource_Request(*from.lookup_resource_);
  } else {
    lookup_resource_ = nullptr;
  }
  if (from._internal_has_select_patient_to_recycle()) {
    select_patient_to_recycle_ = new ::Orthanc::DatabasePluginMessages::SelectPatientToRecycle_Request(*from.select_patient_to_recycle_);
  } else {
    select_patient_to_recycle_ = nullptr;
  }
  if (from._internal_has_select_patient_to_recycle_with_avoid()) {
    select_patient_to_recycle_with_avoid_ = new ::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid_Request(*from.select_patient_to_recycle_with_avoid_);
  } else {
    select_patient_to_recycle_with_avoid_ = nullptr;
  }
  if (from._internal_has_set_global_property()) {
    set_global_property_ = new ::Orthanc::DatabasePluginMessages::SetGlobalProperty_Request(*from.set_global_property_);
  } else {
    set_global_property_ = nullptr;
  }
  if (from._internal_has_clear_main_dicom_tags()) {
    clear_main_dicom_tags_ = new ::Orthanc::DatabasePluginMessages::ClearMainDicomTags_Request(*from.clear_main_dicom_tags_);
  } else {
    clear_main_dicom_tags_ = nullptr;
  }
  if (from._internal_has_set_metadata()) {
    set_metadata_ = new ::Orthanc::DatabasePluginMessages::SetMetadata_Request(*from.set_metadata_);
  } else {
    set_metadata_ = nullptr;
  }
  if (from._internal_has_set_protected_patient()) {
    set_protected_patient_ = new ::Orthanc::DatabasePluginMessages::SetProtectedPatient_Request(*from.set_protected_patient_);
  } else {
    set_protected_patient_ = nullptr;
  }
  if (from._internal_has_is_disk_size_above()) {
    is_disk_size_above_ = new ::Orthanc::DatabasePluginMessages::IsDiskSizeAbove_Request(*from.is_disk_size_above_);
  } else {
    is_disk_size_above_ = nullptr;
  }
  if (from._internal_has_lookup_resources()) {
    lookup_resources_ = new ::Orthanc::DatabasePluginMessages::LookupResources_Request(*from.lookup_resources_);
  } else {
    lookup_resources_ = nullptr;
  }
  if (from._internal_has_create_instance()) {
    create_instance_ = new ::Orthanc::DatabasePluginMessages::CreateInstance_Request(*from.create_instance_);
  } else {
    create_instance_ = nullptr;
  }
  if (from._internal_has_set_resources_content()) {
    set_resources_content_ = new ::Orthanc::DatabasePluginMessages::SetResourcesContent_Request(*from.set_resources_content_);
  } else {
    set_resources_content_ = nullptr;
  }
  if (from._internal_has_get_children_metadata()) {
    get_children_metadata_ = new ::Orthanc::DatabasePluginMessages::GetChildrenMetadata_Request(*from.get_children_metadata_);
  } else {
    get_children_metadata_ = nullptr;
  }
  if (from._internal_has_get_last_change_index()) {
    get_last_change_index_ = new ::Orthanc::DatabasePluginMessages::GetLastChangeIndex_Request(*from.get_last_change_index_);
  } else {
    get_last_change_index_ = nullptr;
  }
  if (from._internal_has_lookup_resource_and_parent()) {
    lookup_resource_and_parent_ = new ::Orthanc::DatabasePluginMessages::LookupResourceAndParent_Request(*from.lookup_resource_and_parent_);
  } else {
    lookup_resource_and_parent_ = nullptr;
  }
  if (from._internal_has_add_label()) {
    add_label_ = new ::Orthanc::DatabasePluginMessages::AddLabel_Request(*from.add_label_);
  } else {
    add_label_ = nullptr;
  }
  if (from._internal_has_remove_label()) {
    remove_label_ = new ::Orthanc::DatabasePluginMessages::RemoveLabel_Request(*from.remove_label_);
  } else {
    remove_label_ = nullptr;
  }
  if (from._internal_has_list_labels()) {
    list_labels_ = new ::Orthanc::DatabasePluginMessages::ListLabels_Request(*from.list_labels_);
  } else {
    list_labels_ = nullptr;
  }
  if (from._internal_has_increment_global_property()) {
    increment_global_property_ = new ::Orthanc::DatabasePluginMessages::IncrementGlobalProperty_Request(*from.increment_global_property_);
  } else {
    increment_global_property_ = nullptr;
  }
  if (from._internal_has_update_and_get_statistics()) {
    update_and_get_statistics_ = new ::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics_Request(*from.update_and_get_statistics_);
  } else {
    update_and_get_statistics_ = nullptr;
  }
  ::memcpy(&transaction_, &from.transaction_,
    static_cast<size_t>(reinterpret_cast<char*>(&operation_) -
    reinterpret_cast<char*>(&transaction_)) + sizeof(operation_));
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.TransactionRequest)
}

void TransactionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransactionRequest_OrthancDatabasePlugin_2eproto.base);
  ::memset(&rollback_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&operation_) -
      reinterpret_cast<char*>(&rollback_)) + sizeof(operation_));
}

TransactionRequest::~TransactionRequest() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.TransactionRequest)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void TransactionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete rollback_;
  if (this != internal_default_instance()) delete commit_;
  if (this != internal_default_instance()) delete add_attachment_;
  if (this != internal_default_instance()) delete clear_changes_;
  if (this != internal_default_instance()) delete clear_exported_resources_;
  if (this != internal_default_instance()) delete delete_attachment_;
  if (this != internal_default_instance()) delete delete_metadata_;
  if (this != internal_default_instance()) delete delete_resource_;
  if (this != internal_default_instance()) delete get_all_metadata_;
  if (this != internal_default_instance()) delete get_all_public_ids_;
  if (this != internal_default_instance()) delete get_all_public_ids_with_limits_;
  if (this != internal_default_instance()) delete get_changes_;
  if (this != internal_default_instance()) delete get_children_internal_id_;
  if (this != internal_default_instance()) delete get_children_public_id_;
  if (this != internal_default_instance()) delete get_exported_resources_;
  if (this != internal_default_instance()) delete get_last_change_;
  if (this != internal_default_instance()) delete get_last_exported_resource_;
  if (this != internal_default_instance()) delete get_main_dicom_tags_;
  if (this != internal_default_instance()) delete get_public_id_;
  if (this != internal_default_instance()) delete get_resources_count_;
  if (this != internal_default_instance()) delete get_resource_type_;
  if (this != internal_default_instance()) delete get_total_compressed_size_;
  if (this != internal_default_instance()) delete get_total_uncompressed_size_;
  if (this != internal_default_instance()) delete is_protected_patient_;
  if (this != internal_default_instance()) delete list_available_attachments_;
  if (this != internal_default_instance()) delete log_change_;
  if (this != internal_default_instance()) delete log_exported_resource_;
  if (this != internal_default_instance()) delete lookup_attachment_;
  if (this != internal_default_instance()) delete lookup_global_property_;
  if (this != internal_default_instance()) delete lookup_metadata_;
  if (this != internal_default_instance()) delete lookup_parent_;
  if (this != internal_default_instance()) delete lookup_resource_;
  if (this != internal_default_instance()) delete select_patient_to_recycle_;
  if (this != internal_default_instance()) delete select_patient_to_recycle_with_avoid_;
  if (this != internal_default_instance()) delete set_global_property_;
  if (this != internal_default_instance()) delete clear_main_dicom_tags_;
  if (this != internal_default_instance()) delete set_metadata_;
  if (this != internal_default_instance()) delete set_protected_patient_;
  if (this != internal_default_instance()) delete is_disk_size_above_;
  if (this != internal_default_instance()) delete lookup_resources_;
  if (this != internal_default_instance()) delete create_instance_;
  if (this != internal_default_instance()) delete set_resources_content_;
  if (this != internal_default_instance()) delete get_children_metadata_;
  if (this != internal_default_instance()) delete get_last_change_index_;
  if (this != internal_default_instance()) delete lookup_resource_and_parent_;
  if (this != internal_default_instance()) delete add_label_;
  if (this != internal_default_instance()) delete remove_label_;
  if (this != internal_default_instance()) delete list_labels_;
  if (this != internal_default_instance()) delete increment_global_property_;
  if (this != internal_default_instance()) delete update_and_get_statistics_;
}

void TransactionRequest::ArenaDtor(void* object) {
  TransactionRequest* _this = reinterpret_cast< TransactionRequest* >(object);
  (void)_this;
}
void TransactionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransactionRequest& TransactionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransactionRequest_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void TransactionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.TransactionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && rollback_ != nullptr) {
    delete rollback_;
  }
  rollback_ = nullptr;
  if (GetArena() == nullptr && commit_ != nullptr) {
    delete commit_;
  }
  commit_ = nullptr;
  if (GetArena() == nullptr && add_attachment_ != nullptr) {
    delete add_attachment_;
  }
  add_attachment_ = nullptr;
  if (GetArena() == nullptr && clear_changes_ != nullptr) {
    delete clear_changes_;
  }
  clear_changes_ = nullptr;
  if (GetArena() == nullptr && clear_exported_resources_ != nullptr) {
    delete clear_exported_resources_;
  }
  clear_exported_resources_ = nullptr;
  if (GetArena() == nullptr && delete_attachment_ != nullptr) {
    delete delete_attachment_;
  }
  delete_attachment_ = nullptr;
  if (GetArena() == nullptr && delete_metadata_ != nullptr) {
    delete delete_metadata_;
  }
  delete_metadata_ = nullptr;
  if (GetArena() == nullptr && delete_resource_ != nullptr) {
    delete delete_resource_;
  }
  delete_resource_ = nullptr;
  if (GetArena() == nullptr && get_all_metadata_ != nullptr) {
    delete get_all_metadata_;
  }
  get_all_metadata_ = nullptr;
  if (GetArena() == nullptr && get_all_public_ids_ != nullptr) {
    delete get_all_public_ids_;
  }
  get_all_public_ids_ = nullptr;
  if (GetArena() == nullptr && get_all_public_ids_with_limits_ != nullptr) {
    delete get_all_public_ids_with_limits_;
  }
  get_all_public_ids_with_limits_ = nullptr;
  if (GetArena() == nullptr && get_changes_ != nullptr) {
    delete get_changes_;
  }
  get_changes_ = nullptr;
  if (GetArena() == nullptr && get_children_internal_id_ != nullptr) {
    delete get_children_internal_id_;
  }
  get_children_internal_id_ = nullptr;
  if (GetArena() == nullptr && get_children_public_id_ != nullptr) {
    delete get_children_public_id_;
  }
  get_children_public_id_ = nullptr;
  if (GetArena() == nullptr && get_exported_resources_ != nullptr) {
    delete get_exported_resources_;
  }
  get_exported_resources_ = nullptr;
  if (GetArena() == nullptr && get_last_change_ != nullptr) {
    delete get_last_change_;
  }
  get_last_change_ = nullptr;
  if (GetArena() == nullptr && get_last_exported_resource_ != nullptr) {
    delete get_last_exported_resource_;
  }
  get_last_exported_resource_ = nullptr;
  if (GetArena() == nullptr && get_main_dicom_tags_ != nullptr) {
    delete get_main_dicom_tags_;
  }
  get_main_dicom_tags_ = nullptr;
  if (GetArena() == nullptr && get_public_id_ != nullptr) {
    delete get_public_id_;
  }
  get_public_id_ = nullptr;
  if (GetArena() == nullptr && get_resources_count_ != nullptr) {
    delete get_resources_count_;
  }
  get_resources_count_ = nullptr;
  if (GetArena() == nullptr && get_resource_type_ != nullptr) {
    delete get_resource_type_;
  }
  get_resource_type_ = nullptr;
  if (GetArena() == nullptr && get_total_compressed_size_ != nullptr) {
    delete get_total_compressed_size_;
  }
  get_total_compressed_size_ = nullptr;
  if (GetArena() == nullptr && get_total_uncompressed_size_ != nullptr) {
    delete get_total_uncompressed_size_;
  }
  get_total_uncompressed_size_ = nullptr;
  if (GetArena() == nullptr && is_protected_patient_ != nullptr) {
    delete is_protected_patient_;
  }
  is_protected_patient_ = nullptr;
  if (GetArena() == nullptr && list_available_attachments_ != nullptr) {
    delete list_available_attachments_;
  }
  list_available_attachments_ = nullptr;
  if (GetArena() == nullptr && log_change_ != nullptr) {
    delete log_change_;
  }
  log_change_ = nullptr;
  if (GetArena() == nullptr && log_exported_resource_ != nullptr) {
    delete log_exported_resource_;
  }
  log_exported_resource_ = nullptr;
  if (GetArena() == nullptr && lookup_attachment_ != nullptr) {
    delete lookup_attachment_;
  }
  lookup_attachment_ = nullptr;
  if (GetArena() == nullptr && lookup_global_property_ != nullptr) {
    delete lookup_global_property_;
  }
  lookup_global_property_ = nullptr;
  if (GetArena() == nullptr && lookup_metadata_ != nullptr) {
    delete lookup_metadata_;
  }
  lookup_metadata_ = nullptr;
  if (GetArena() == nullptr && lookup_parent_ != nullptr) {
    delete lookup_parent_;
  }
  lookup_parent_ = nullptr;
  if (GetArena() == nullptr && lookup_resource_ != nullptr) {
    delete lookup_resource_;
  }
  lookup_resource_ = nullptr;
  if (GetArena() == nullptr && select_patient_to_recycle_ != nullptr) {
    delete select_patient_to_recycle_;
  }
  select_patient_to_recycle_ = nullptr;
  if (GetArena() == nullptr && select_patient_to_recycle_with_avoid_ != nullptr) {
    delete select_patient_to_recycle_with_avoid_;
  }
  select_patient_to_recycle_with_avoid_ = nullptr;
  if (GetArena() == nullptr && set_global_property_ != nullptr) {
    delete set_global_property_;
  }
  set_global_property_ = nullptr;
  if (GetArena() == nullptr && clear_main_dicom_tags_ != nullptr) {
    delete clear_main_dicom_tags_;
  }
  clear_main_dicom_tags_ = nullptr;
  if (GetArena() == nullptr && set_metadata_ != nullptr) {
    delete set_metadata_;
  }
  set_metadata_ = nullptr;
  if (GetArena() == nullptr && set_protected_patient_ != nullptr) {
    delete set_protected_patient_;
  }
  set_protected_patient_ = nullptr;
  if (GetArena() == nullptr && is_disk_size_above_ != nullptr) {
    delete is_disk_size_above_;
  }
  is_disk_size_above_ = nullptr;
  if (GetArena() == nullptr && lookup_resources_ != nullptr) {
    delete lookup_resources_;
  }
  lookup_resources_ = nullptr;
  if (GetArena() == nullptr && create_instance_ != nullptr) {
    delete create_instance_;
  }
  create_instance_ = nullptr;
  if (GetArena() == nullptr && set_resources_content_ != nullptr) {
    delete set_resources_content_;
  }
  set_resources_content_ = nullptr;
  if (GetArena() == nullptr && get_children_metadata_ != nullptr) {
    delete get_children_metadata_;
  }
  get_children_metadata_ = nullptr;
  if (GetArena() == nullptr && get_last_change_index_ != nullptr) {
    delete get_last_change_index_;
  }
  get_last_change_index_ = nullptr;
  if (GetArena() == nullptr && lookup_resource_and_parent_ != nullptr) {
    delete lookup_resource_and_parent_;
  }
  lookup_resource_and_parent_ = nullptr;
  if (GetArena() == nullptr && add_label_ != nullptr) {
    delete add_label_;
  }
  add_label_ = nullptr;
  if (GetArena() == nullptr && remove_label_ != nullptr) {
    delete remove_label_;
  }
  remove_label_ = nullptr;
  if (GetArena() == nullptr && list_labels_ != nullptr) {
    delete list_labels_;
  }
  list_labels_ = nullptr;
  if (GetArena() == nullptr && increment_global_property_ != nullptr) {
    delete increment_global_property_;
  }
  increment_global_property_ = nullptr;
  if (GetArena() == nullptr && update_and_get_statistics_ != nullptr) {
    delete update_and_get_statistics_;
  }
  update_and_get_statistics_ = nullptr;
  ::memset(&transaction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&operation_) -
      reinterpret_cast<char*>(&transaction_)) + sizeof(operation_));
  _internal_metadata_.Clear<std::string>();
}

const char* TransactionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // sfixed64 transaction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          transaction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int64);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.TransactionOperation operation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_operation(static_cast<::Orthanc::DatabasePluginMessages::TransactionOperation>(val));
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.Rollback.Request rollback = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_rollback(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.Commit.Request commit = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_commit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.AddAttachment.Request add_attachment = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_add_attachment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.ClearChanges.Request clear_changes = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_clear_changes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.ClearExportedResources.Request clear_exported_resources = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_clear_exported_resources(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.DeleteAttachment.Request delete_attachment = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_delete_attachment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.DeleteMetadata.Request delete_metadata = 106;
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_delete_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.DeleteResource.Request delete_resource = 107;
      case 107:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_delete_resource(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.GetAllMetadata.Request get_all_metadata = 108;
      case 108:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_all_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.GetAllPublicIds.Request get_all_public_ids = 109;
      case 109:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_all_public_ids(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.GetAllPublicIdsWithLimits.Request get_all_public_ids_with_limits = 110;
      case 110:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_all_public_ids_with_limits(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.GetChanges.Request get_changes = 111;
      case 111:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_changes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.GetChildrenInternalId.Request get_children_internal_id = 112;
      case 112:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_children_internal_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.GetChildrenPublicId.Request get_children_public_id = 113;
      case 113:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_children_public_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.GetExportedResources.Request get_exported_resources = 114;
      case 114:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_exported_resources(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.GetLastChange.Request get_last_change = 115;
      case 115:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_last_change(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.GetLastExportedResource.Request get_last_exported_resource = 116;
      case 116:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_last_exported_resource(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.GetMainDicomTags.Request get_main_dicom_tags = 117;
      case 117:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_main_dicom_tags(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.GetPublicId.Request get_public_id = 118;
      case 118:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_public_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.GetResourcesCount.Request get_resources_count = 119;
      case 119:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_resources_count(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.GetResourceType.Request get_resource_type = 120;
      case 120:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_resource_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.GetTotalCompressedSize.Request get_total_compressed_size = 121;
      case 121:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_total_compressed_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.GetTotalUncompressedSize.Request get_total_uncompressed_size = 122;
      case 122:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_total_uncompressed_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.IsProtectedPatient.Request is_protected_patient = 123;
      case 123:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_is_protected_patient(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.ListAvailableAttachments.Request list_available_attachments = 124;
      case 124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_list_available_attachments(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.LogChange.Request log_change = 125;
      case 125:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_log_change(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.LogExportedResource.Request log_exported_resource = 126;
      case 126:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_log_exported_resource(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.LookupAttachment.Request lookup_attachment = 127;
      case 127:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_lookup_attachment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.LookupGlobalProperty.Request lookup_global_property = 128;
      case 128:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_lookup_global_property(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.LookupMetadata.Request lookup_metadata = 129;
      case 129:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_lookup_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.LookupParent.Request lookup_parent = 130;
      case 130:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lookup_parent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.LookupResource.Request lookup_resource = 131;
      case 131:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_lookup_resource(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.SelectPatientToRecycle.Request select_patient_to_recycle = 132;
      case 132:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_select_patient_to_recycle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.SelectPatientToRecycleWithAvoid.Request select_patient_to_recycle_with_avoid = 133;
      case 133:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_select_patient_to_recycle_with_avoid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.SetGlobalProperty.Request set_global_property = 134;
      case 134:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_global_property(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.ClearMainDicomTags.Request clear_main_dicom_tags = 135;
      case 135:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_clear_main_dicom_tags(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.SetMetadata.Request set_metadata = 136;
      case 136:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.SetProtectedPatient.Request set_protected_patient = 137;
      case 137:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_protected_patient(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.IsDiskSizeAbove.Request is_disk_size_above = 138;
      case 138:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_is_disk_size_above(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.LookupResources.Request lookup_resources = 139;
      case 139:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_lookup_resources(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.CreateInstance.Request create_instance = 140;
      case 140:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_instance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.SetResourcesContent.Request set_resources_content = 141;
      case 141:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_resources_content(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.GetChildrenMetadata.Request get_children_metadata = 142;
      case 142:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_children_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.GetLastChangeIndex.Request get_last_change_index = 143;
      case 143:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_last_change_index(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.LookupResourceAndParent.Request lookup_resource_and_parent = 144;
      case 144:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_lookup_resource_and_parent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.AddLabel.Request add_label = 145;
      case 145:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_add_label(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.RemoveLabel.Request remove_label = 146;
      case 146:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_remove_label(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.ListLabels.Request list_labels = 147;
      case 147:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_list_labels(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.IncrementGlobalProperty.Request increment_global_property = 148;
      case 148:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_increment_global_property(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.UpdateAndGetStatistics.Request update_and_get_statistics = 149;
      case 149:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_and_get_statistics(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.TransactionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sfixed64 transaction = 1;
  if (this->transaction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed64ToArray(1, this->_internal_transaction(), target);
  }

  // .Orthanc.DatabasePluginMessages.TransactionOperation operation = 2;
  if (this->operation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_operation(), target);
  }

  // .Orthanc.DatabasePluginMessages.Rollback.Request rollback = 100;
  if (this->has_rollback()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        100, _Internal::rollback(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.Commit.Request commit = 101;
  if (this->has_commit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        101, _Internal::commit(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.AddAttachment.Request add_attachment = 102;
  if (this->has_add_attachment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        102, _Internal::add_attachment(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.ClearChanges.Request clear_changes = 103;
  if (this->has_clear_changes()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        103, _Internal::clear_changes(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.ClearExportedResources.Request clear_exported_resources = 104;
  if (this->has_clear_exported_resources()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        104, _Internal::clear_exported_resources(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.DeleteAttachment.Request delete_attachment = 105;
  if (this->has_delete_attachment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        105, _Internal::delete_attachment(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.DeleteMetadata.Request delete_metadata = 106;
  if (this->has_delete_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        106, _Internal::delete_metadata(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.DeleteResource.Request delete_resource = 107;
  if (this->has_delete_resource()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        107, _Internal::delete_resource(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.GetAllMetadata.Request get_all_metadata = 108;
  if (this->has_get_all_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        108, _Internal::get_all_metadata(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.GetAllPublicIds.Request get_all_public_ids = 109;
  if (this->has_get_all_public_ids()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        109, _Internal::get_all_public_ids(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.GetAllPublicIdsWithLimits.Request get_all_public_ids_with_limits = 110;
  if (this->has_get_all_public_ids_with_limits()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        110, _Internal::get_all_public_ids_with_limits(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.GetChanges.Request get_changes = 111;
  if (this->has_get_changes()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        111, _Internal::get_changes(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.GetChildrenInternalId.Request get_children_internal_id = 112;
  if (this->has_get_children_internal_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        112, _Internal::get_children_internal_id(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.GetChildrenPublicId.Request get_children_public_id = 113;
  if (this->has_get_children_public_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        113, _Internal::get_children_public_id(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.GetExportedResources.Request get_exported_resources = 114;
  if (this->has_get_exported_resources()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        114, _Internal::get_exported_resources(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.GetLastChange.Request get_last_change = 115;
  if (this->has_get_last_change()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        115, _Internal::get_last_change(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.GetLastExportedResource.Request get_last_exported_resource = 116;
  if (this->has_get_last_exported_resource()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        116, _Internal::get_last_exported_resource(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.GetMainDicomTags.Request get_main_dicom_tags = 117;
  if (this->has_get_main_dicom_tags()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        117, _Internal::get_main_dicom_tags(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.GetPublicId.Request get_public_id = 118;
  if (this->has_get_public_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        118, _Internal::get_public_id(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.GetResourcesCount.Request get_resources_count = 119;
  if (this->has_get_resources_count()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        119, _Internal::get_resources_count(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.GetResourceType.Request get_resource_type = 120;
  if (this->has_get_resource_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        120, _Internal::get_resource_type(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.GetTotalCompressedSize.Request get_total_compressed_size = 121;
  if (this->has_get_total_compressed_size()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        121, _Internal::get_total_compressed_size(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.GetTotalUncompressedSize.Request get_total_uncompressed_size = 122;
  if (this->has_get_total_uncompressed_size()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        122, _Internal::get_total_uncompressed_size(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.IsProtectedPatient.Request is_protected_patient = 123;
  if (this->has_is_protected_patient()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        123, _Internal::is_protected_patient(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.ListAvailableAttachments.Request list_available_attachments = 124;
  if (this->has_list_available_attachments()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        124, _Internal::list_available_attachments(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.LogChange.Request log_change = 125;
  if (this->has_log_change()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        125, _Internal::log_change(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.LogExportedResource.Request log_exported_resource = 126;
  if (this->has_log_exported_resource()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        126, _Internal::log_exported_resource(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.LookupAttachment.Request lookup_attachment = 127;
  if (this->has_lookup_attachment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        127, _Internal::lookup_attachment(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.LookupGlobalProperty.Request lookup_global_property = 128;
  if (this->has_lookup_global_property()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        128, _Internal::lookup_global_property(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.LookupMetadata.Request lookup_metadata = 129;
  if (this->has_lookup_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        129, _Internal::lookup_metadata(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.LookupParent.Request lookup_parent = 130;
  if (this->has_lookup_parent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        130, _Internal::lookup_parent(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.LookupResource.Request lookup_resource = 131;
  if (this->has_lookup_resource()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        131, _Internal::lookup_resource(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.SelectPatientToRecycle.Request select_patient_to_recycle = 132;
  if (this->has_select_patient_to_recycle()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        132, _Internal::select_patient_to_recycle(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.SelectPatientToRecycleWithAvoid.Request select_patient_to_recycle_with_avoid = 133;
  if (this->has_select_patient_to_recycle_with_avoid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        133, _Internal::select_patient_to_recycle_with_avoid(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.SetGlobalProperty.Request set_global_property = 134;
  if (this->has_set_global_property()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        134, _Internal::set_global_property(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.ClearMainDicomTags.Request clear_main_dicom_tags = 135;
  if (this->has_clear_main_dicom_tags()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        135, _Internal::clear_main_dicom_tags(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.SetMetadata.Request set_metadata = 136;
  if (this->has_set_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        136, _Internal::set_metadata(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.SetProtectedPatient.Request set_protected_patient = 137;
  if (this->has_set_protected_patient()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        137, _Internal::set_protected_patient(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.IsDiskSizeAbove.Request is_disk_size_above = 138;
  if (this->has_is_disk_size_above()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        138, _Internal::is_disk_size_above(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.LookupResources.Request lookup_resources = 139;
  if (this->has_lookup_resources()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        139, _Internal::lookup_resources(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.CreateInstance.Request create_instance = 140;
  if (this->has_create_instance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        140, _Internal::create_instance(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.SetResourcesContent.Request set_resources_content = 141;
  if (this->has_set_resources_content()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        141, _Internal::set_resources_content(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.GetChildrenMetadata.Request get_children_metadata = 142;
  if (this->has_get_children_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        142, _Internal::get_children_metadata(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.GetLastChangeIndex.Request get_last_change_index = 143;
  if (this->has_get_last_change_index()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        143, _Internal::get_last_change_index(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.LookupResourceAndParent.Request lookup_resource_and_parent = 144;
  if (this->has_lookup_resource_and_parent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        144, _Internal::lookup_resource_and_parent(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.AddLabel.Request add_label = 145;
  if (this->has_add_label()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        145, _Internal::add_label(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.RemoveLabel.Request remove_label = 146;
  if (this->has_remove_label()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        146, _Internal::remove_label(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.ListLabels.Request list_labels = 147;
  if (this->has_list_labels()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        147, _Internal::list_labels(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.IncrementGlobalProperty.Request increment_global_property = 148;
  if (this->has_increment_global_property()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        148, _Internal::increment_global_property(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.UpdateAndGetStatistics.Request update_and_get_statistics = 149;
  if (this->has_update_and_get_statistics()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        149, _Internal::update_and_get_statistics(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.TransactionRequest)
  return target;
}

size_t TransactionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.TransactionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Orthanc.DatabasePluginMessages.Rollback.Request rollback = 100;
  if (this->has_rollback()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rollback_);
  }

  // .Orthanc.DatabasePluginMessages.Commit.Request commit = 101;
  if (this->has_commit()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *commit_);
  }

  // .Orthanc.DatabasePluginMessages.AddAttachment.Request add_attachment = 102;
  if (this->has_add_attachment()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *add_attachment_);
  }

  // .Orthanc.DatabasePluginMessages.ClearChanges.Request clear_changes = 103;
  if (this->has_clear_changes()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *clear_changes_);
  }

  // .Orthanc.DatabasePluginMessages.ClearExportedResources.Request clear_exported_resources = 104;
  if (this->has_clear_exported_resources()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *clear_exported_resources_);
  }

  // .Orthanc.DatabasePluginMessages.DeleteAttachment.Request delete_attachment = 105;
  if (this->has_delete_attachment()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *delete_attachment_);
  }

  // .Orthanc.DatabasePluginMessages.DeleteMetadata.Request delete_metadata = 106;
  if (this->has_delete_metadata()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *delete_metadata_);
  }

  // .Orthanc.DatabasePluginMessages.DeleteResource.Request delete_resource = 107;
  if (this->has_delete_resource()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *delete_resource_);
  }

  // .Orthanc.DatabasePluginMessages.GetAllMetadata.Request get_all_metadata = 108;
  if (this->has_get_all_metadata()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *get_all_metadata_);
  }

  // .Orthanc.DatabasePluginMessages.GetAllPublicIds.Request get_all_public_ids = 109;
  if (this->has_get_all_public_ids()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *get_all_public_ids_);
  }

  // .Orthanc.DatabasePluginMessages.GetAllPublicIdsWithLimits.Request get_all_public_ids_with_limits = 110;
  if (this->has_get_all_public_ids_with_limits()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *get_all_public_ids_with_limits_);
  }

  // .Orthanc.DatabasePluginMessages.GetChanges.Request get_changes = 111;
  if (this->has_get_changes()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *get_changes_);
  }

  // .Orthanc.DatabasePluginMessages.GetChildrenInternalId.Request get_children_internal_id = 112;
  if (this->has_get_children_internal_id()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *get_children_internal_id_);
  }

  // .Orthanc.DatabasePluginMessages.GetChildrenPublicId.Request get_children_public_id = 113;
  if (this->has_get_children_public_id()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *get_children_public_id_);
  }

  // .Orthanc.DatabasePluginMessages.GetExportedResources.Request get_exported_resources = 114;
  if (this->has_get_exported_resources()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *get_exported_resources_);
  }

  // .Orthanc.DatabasePluginMessages.GetLastChange.Request get_last_change = 115;
  if (this->has_get_last_change()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *get_last_change_);
  }

  // .Orthanc.DatabasePluginMessages.GetLastExportedResource.Request get_last_exported_resource = 116;
  if (this->has_get_last_exported_resource()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *get_last_exported_resource_);
  }

  // .Orthanc.DatabasePluginMessages.GetMainDicomTags.Request get_main_dicom_tags = 117;
  if (this->has_get_main_dicom_tags()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *get_main_dicom_tags_);
  }

  // .Orthanc.DatabasePluginMessages.GetPublicId.Request get_public_id = 118;
  if (this->has_get_public_id()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *get_public_id_);
  }

  // .Orthanc.DatabasePluginMessages.GetResourcesCount.Request get_resources_count = 119;
  if (this->has_get_resources_count()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *get_resources_count_);
  }

  // .Orthanc.DatabasePluginMessages.GetResourceType.Request get_resource_type = 120;
  if (this->has_get_resource_type()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *get_resource_type_);
  }

  // .Orthanc.DatabasePluginMessages.GetTotalCompressedSize.Request get_total_compressed_size = 121;
  if (this->has_get_total_compressed_size()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *get_total_compressed_size_);
  }

  // .Orthanc.DatabasePluginMessages.GetTotalUncompressedSize.Request get_total_uncompressed_size = 122;
  if (this->has_get_total_uncompressed_size()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *get_total_uncompressed_size_);
  }

  // .Orthanc.DatabasePluginMessages.IsProtectedPatient.Request is_protected_patient = 123;
  if (this->has_is_protected_patient()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *is_protected_patient_);
  }

  // .Orthanc.DatabasePluginMessages.ListAvailableAttachments.Request list_available_attachments = 124;
  if (this->has_list_available_attachments()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *list_available_attachments_);
  }

  // .Orthanc.DatabasePluginMessages.LogChange.Request log_change = 125;
  if (this->has_log_change()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *log_change_);
  }

  // .Orthanc.DatabasePluginMessages.LogExportedResource.Request log_exported_resource = 126;
  if (this->has_log_exported_resource()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *log_exported_resource_);
  }

  // .Orthanc.DatabasePluginMessages.LookupAttachment.Request lookup_attachment = 127;
  if (this->has_lookup_attachment()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lookup_attachment_);
  }

  // .Orthanc.DatabasePluginMessages.LookupGlobalProperty.Request lookup_global_property = 128;
  if (this->has_lookup_global_property()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lookup_global_property_);
  }

  // .Orthanc.DatabasePluginMessages.LookupMetadata.Request lookup_metadata = 129;
  if (this->has_lookup_metadata()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lookup_metadata_);
  }

  // .Orthanc.DatabasePluginMessages.LookupParent.Request lookup_parent = 130;
  if (this->has_lookup_parent()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lookup_parent_);
  }

  // .Orthanc.DatabasePluginMessages.LookupResource.Request lookup_resource = 131;
  if (this->has_lookup_resource()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lookup_resource_);
  }

  // .Orthanc.DatabasePluginMessages.SelectPatientToRecycle.Request select_patient_to_recycle = 132;
  if (this->has_select_patient_to_recycle()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *select_patient_to_recycle_);
  }

  // .Orthanc.DatabasePluginMessages.SelectPatientToRecycleWithAvoid.Request select_patient_to_recycle_with_avoid = 133;
  if (this->has_select_patient_to_recycle_with_avoid()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *select_patient_to_recycle_with_avoid_);
  }

  // .Orthanc.DatabasePluginMessages.SetGlobalProperty.Request set_global_property = 134;
  if (this->has_set_global_property()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *set_global_property_);
  }

  // .Orthanc.DatabasePluginMessages.ClearMainDicomTags.Request clear_main_dicom_tags = 135;
  if (this->has_clear_main_dicom_tags()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *clear_main_dicom_tags_);
  }

  // .Orthanc.DatabasePluginMessages.SetMetadata.Request set_metadata = 136;
  if (this->has_set_metadata()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *set_metadata_);
  }

  // .Orthanc.DatabasePluginMessages.SetProtectedPatient.Request set_protected_patient = 137;
  if (this->has_set_protected_patient()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *set_protected_patient_);
  }

  // .Orthanc.DatabasePluginMessages.IsDiskSizeAbove.Request is_disk_size_above = 138;
  if (this->has_is_disk_size_above()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *is_disk_size_above_);
  }

  // .Orthanc.DatabasePluginMessages.LookupResources.Request lookup_resources = 139;
  if (this->has_lookup_resources()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lookup_resources_);
  }

  // .Orthanc.DatabasePluginMessages.CreateInstance.Request create_instance = 140;
  if (this->has_create_instance()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *create_instance_);
  }

  // .Orthanc.DatabasePluginMessages.SetResourcesContent.Request set_resources_content = 141;
  if (this->has_set_resources_content()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *set_resources_content_);
  }

  // .Orthanc.DatabasePluginMessages.GetChildrenMetadata.Request get_children_metadata = 142;
  if (this->has_get_children_metadata()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *get_children_metadata_);
  }

  // .Orthanc.DatabasePluginMessages.GetLastChangeIndex.Request get_last_change_index = 143;
  if (this->has_get_last_change_index()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *get_last_change_index_);
  }

  // .Orthanc.DatabasePluginMessages.LookupResourceAndParent.Request lookup_resource_and_parent = 144;
  if (this->has_lookup_resource_and_parent()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lookup_resource_and_parent_);
  }

  // .Orthanc.DatabasePluginMessages.AddLabel.Request add_label = 145;
  if (this->has_add_label()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *add_label_);
  }

  // .Orthanc.DatabasePluginMessages.RemoveLabel.Request remove_label = 146;
  if (this->has_remove_label()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *remove_label_);
  }

  // .Orthanc.DatabasePluginMessages.ListLabels.Request list_labels = 147;
  if (this->has_list_labels()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *list_labels_);
  }

  // .Orthanc.DatabasePluginMessages.IncrementGlobalProperty.Request increment_global_property = 148;
  if (this->has_increment_global_property()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *increment_global_property_);
  }

  // .Orthanc.DatabasePluginMessages.UpdateAndGetStatistics.Request update_and_get_statistics = 149;
  if (this->has_update_and_get_statistics()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *update_and_get_statistics_);
  }

  // sfixed64 transaction = 1;
  if (this->transaction() != 0) {
    total_size += 1 + 8;
  }

  // .Orthanc.DatabasePluginMessages.TransactionOperation operation = 2;
  if (this->operation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_operation());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransactionRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TransactionRequest*>(
      &from));
}

void TransactionRequest::MergeFrom(const TransactionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.TransactionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_rollback()) {
    _internal_mutable_rollback()->::Orthanc::DatabasePluginMessages::Rollback_Request::MergeFrom(from._internal_rollback());
  }
  if (from.has_commit()) {
    _internal_mutable_commit()->::Orthanc::DatabasePluginMessages::Commit_Request::MergeFrom(from._internal_commit());
  }
  if (from.has_add_attachment()) {
    _internal_mutable_add_attachment()->::Orthanc::DatabasePluginMessages::AddAttachment_Request::MergeFrom(from._internal_add_attachment());
  }
  if (from.has_clear_changes()) {
    _internal_mutable_clear_changes()->::Orthanc::DatabasePluginMessages::ClearChanges_Request::MergeFrom(from._internal_clear_changes());
  }
  if (from.has_clear_exported_resources()) {
    _internal_mutable_clear_exported_resources()->::Orthanc::DatabasePluginMessages::ClearExportedResources_Request::MergeFrom(from._internal_clear_exported_resources());
  }
  if (from.has_delete_attachment()) {
    _internal_mutable_delete_attachment()->::Orthanc::DatabasePluginMessages::DeleteAttachment_Request::MergeFrom(from._internal_delete_attachment());
  }
  if (from.has_delete_metadata()) {
    _internal_mutable_delete_metadata()->::Orthanc::DatabasePluginMessages::DeleteMetadata_Request::MergeFrom(from._internal_delete_metadata());
  }
  if (from.has_delete_resource()) {
    _internal_mutable_delete_resource()->::Orthanc::DatabasePluginMessages::DeleteResource_Request::MergeFrom(from._internal_delete_resource());
  }
  if (from.has_get_all_metadata()) {
    _internal_mutable_get_all_metadata()->::Orthanc::DatabasePluginMessages::GetAllMetadata_Request::MergeFrom(from._internal_get_all_metadata());
  }
  if (from.has_get_all_public_ids()) {
    _internal_mutable_get_all_public_ids()->::Orthanc::DatabasePluginMessages::GetAllPublicIds_Request::MergeFrom(from._internal_get_all_public_ids());
  }
  if (from.has_get_all_public_ids_with_limits()) {
    _internal_mutable_get_all_public_ids_with_limits()->::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits_Request::MergeFrom(from._internal_get_all_public_ids_with_limits());
  }
  if (from.has_get_changes()) {
    _internal_mutable_get_changes()->::Orthanc::DatabasePluginMessages::GetChanges_Request::MergeFrom(from._internal_get_changes());
  }
  if (from.has_get_children_internal_id()) {
    _internal_mutable_get_children_internal_id()->::Orthanc::DatabasePluginMessages::GetChildrenInternalId_Request::MergeFrom(from._internal_get_children_internal_id());
  }
  if (from.has_get_children_public_id()) {
    _internal_mutable_get_children_public_id()->::Orthanc::DatabasePluginMessages::GetChildrenPublicId_Request::MergeFrom(from._internal_get_children_public_id());
  }
  if (from.has_get_exported_resources()) {
    _internal_mutable_get_exported_resources()->::Orthanc::DatabasePluginMessages::GetExportedResources_Request::MergeFrom(from._internal_get_exported_resources());
  }
  if (from.has_get_last_change()) {
    _internal_mutable_get_last_change()->::Orthanc::DatabasePluginMessages::GetLastChange_Request::MergeFrom(from._internal_get_last_change());
  }
  if (from.has_get_last_exported_resource()) {
    _internal_mutable_get_last_exported_resource()->::Orthanc::DatabasePluginMessages::GetLastExportedResource_Request::MergeFrom(from._internal_get_last_exported_resource());
  }
  if (from.has_get_main_dicom_tags()) {
    _internal_mutable_get_main_dicom_tags()->::Orthanc::DatabasePluginMessages::GetMainDicomTags_Request::MergeFrom(from._internal_get_main_dicom_tags());
  }
  if (from.has_get_public_id()) {
    _internal_mutable_get_public_id()->::Orthanc::DatabasePluginMessages::GetPublicId_Request::MergeFrom(from._internal_get_public_id());
  }
  if (from.has_get_resources_count()) {
    _internal_mutable_get_resources_count()->::Orthanc::DatabasePluginMessages::GetResourcesCount_Request::MergeFrom(from._internal_get_resources_count());
  }
  if (from.has_get_resource_type()) {
    _internal_mutable_get_resource_type()->::Orthanc::DatabasePluginMessages::GetResourceType_Request::MergeFrom(from._internal_get_resource_type());
  }
  if (from.has_get_total_compressed_size()) {
    _internal_mutable_get_total_compressed_size()->::Orthanc::DatabasePluginMessages::GetTotalCompressedSize_Request::MergeFrom(from._internal_get_total_compressed_size());
  }
  if (from.has_get_total_uncompressed_size()) {
    _internal_mutable_get_total_uncompressed_size()->::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize_Request::MergeFrom(from._internal_get_total_uncompressed_size());
  }
  if (from.has_is_protected_patient()) {
    _internal_mutable_is_protected_patient()->::Orthanc::DatabasePluginMessages::IsProtectedPatient_Request::MergeFrom(from._internal_is_protected_patient());
  }
  if (from.has_list_available_attachments()) {
    _internal_mutable_list_available_attachments()->::Orthanc::DatabasePluginMessages::ListAvailableAttachments_Request::MergeFrom(from._internal_list_available_attachments());
  }
  if (from.has_log_change()) {
    _internal_mutable_log_change()->::Orthanc::DatabasePluginMessages::LogChange_Request::MergeFrom(from._internal_log_change());
  }
  if (from.has_log_exported_resource()) {
    _internal_mutable_log_exported_resource()->::Orthanc::DatabasePluginMessages::LogExportedResource_Request::MergeFrom(from._internal_log_exported_resource());
  }
  if (from.has_lookup_attachment()) {
    _internal_mutable_lookup_attachment()->::Orthanc::DatabasePluginMessages::LookupAttachment_Request::MergeFrom(from._internal_lookup_attachment());
  }
  if (from.has_lookup_global_property()) {
    _internal_mutable_lookup_global_property()->::Orthanc::DatabasePluginMessages::LookupGlobalProperty_Request::MergeFrom(from._internal_lookup_global_property());
  }
  if (from.has_lookup_metadata()) {
    _internal_mutable_lookup_metadata()->::Orthanc::DatabasePluginMessages::LookupMetadata_Request::MergeFrom(from._internal_lookup_metadata());
  }
  if (from.has_lookup_parent()) {
    _internal_mutable_lookup_parent()->::Orthanc::DatabasePluginMessages::LookupParent_Request::MergeFrom(from._internal_lookup_parent());
  }
  if (from.has_lookup_resource()) {
    _internal_mutable_lookup_resource()->::Orthanc::DatabasePluginMessages::LookupResource_Request::MergeFrom(from._internal_lookup_resource());
  }
  if (from.has_select_patient_to_recycle()) {
    _internal_mutable_select_patient_to_recycle()->::Orthanc::DatabasePluginMessages::SelectPatientToRecycle_Request::MergeFrom(from._internal_select_patient_to_recycle());
  }
  if (from.has_select_patient_to_recycle_with_avoid()) {
    _internal_mutable_select_patient_to_recycle_with_avoid()->::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid_Request::MergeFrom(from._internal_select_patient_to_recycle_with_avoid());
  }
  if (from.has_set_global_property()) {
    _internal_mutable_set_global_property()->::Orthanc::DatabasePluginMessages::SetGlobalProperty_Request::MergeFrom(from._internal_set_global_property());
  }
  if (from.has_clear_main_dicom_tags()) {
    _internal_mutable_clear_main_dicom_tags()->::Orthanc::DatabasePluginMessages::ClearMainDicomTags_Request::MergeFrom(from._internal_clear_main_dicom_tags());
  }
  if (from.has_set_metadata()) {
    _internal_mutable_set_metadata()->::Orthanc::DatabasePluginMessages::SetMetadata_Request::MergeFrom(from._internal_set_metadata());
  }
  if (from.has_set_protected_patient()) {
    _internal_mutable_set_protected_patient()->::Orthanc::DatabasePluginMessages::SetProtectedPatient_Request::MergeFrom(from._internal_set_protected_patient());
  }
  if (from.has_is_disk_size_above()) {
    _internal_mutable_is_disk_size_above()->::Orthanc::DatabasePluginMessages::IsDiskSizeAbove_Request::MergeFrom(from._internal_is_disk_size_above());
  }
  if (from.has_lookup_resources()) {
    _internal_mutable_lookup_resources()->::Orthanc::DatabasePluginMessages::LookupResources_Request::MergeFrom(from._internal_lookup_resources());
  }
  if (from.has_create_instance()) {
    _internal_mutable_create_instance()->::Orthanc::DatabasePluginMessages::CreateInstance_Request::MergeFrom(from._internal_create_instance());
  }
  if (from.has_set_resources_content()) {
    _internal_mutable_set_resources_content()->::Orthanc::DatabasePluginMessages::SetResourcesContent_Request::MergeFrom(from._internal_set_resources_content());
  }
  if (from.has_get_children_metadata()) {
    _internal_mutable_get_children_metadata()->::Orthanc::DatabasePluginMessages::GetChildrenMetadata_Request::MergeFrom(from._internal_get_children_metadata());
  }
  if (from.has_get_last_change_index()) {
    _internal_mutable_get_last_change_index()->::Orthanc::DatabasePluginMessages::GetLastChangeIndex_Request::MergeFrom(from._internal_get_last_change_index());
  }
  if (from.has_lookup_resource_and_parent()) {
    _internal_mutable_lookup_resource_and_parent()->::Orthanc::DatabasePluginMessages::LookupResourceAndParent_Request::MergeFrom(from._internal_lookup_resource_and_parent());
  }
  if (from.has_add_label()) {
    _internal_mutable_add_label()->::Orthanc::DatabasePluginMessages::AddLabel_Request::MergeFrom(from._internal_add_label());
  }
  if (from.has_remove_label()) {
    _internal_mutable_remove_label()->::Orthanc::DatabasePluginMessages::RemoveLabel_Request::MergeFrom(from._internal_remove_label());
  }
  if (from.has_list_labels()) {
    _internal_mutable_list_labels()->::Orthanc::DatabasePluginMessages::ListLabels_Request::MergeFrom(from._internal_list_labels());
  }
  if (from.has_increment_global_property()) {
    _internal_mutable_increment_global_property()->::Orthanc::DatabasePluginMessages::IncrementGlobalProperty_Request::MergeFrom(from._internal_increment_global_property());
  }
  if (from.has_update_and_get_statistics()) {
    _internal_mutable_update_and_get_statistics()->::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics_Request::MergeFrom(from._internal_update_and_get_statistics());
  }
  if (from.transaction() != 0) {
    _internal_set_transaction(from._internal_transaction());
  }
  if (from.operation() != 0) {
    _internal_set_operation(from._internal_operation());
  }
}

void TransactionRequest::CopyFrom(const TransactionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.TransactionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionRequest::IsInitialized() const {
  return true;
}

void TransactionRequest::InternalSwap(TransactionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransactionRequest, operation_)
      + sizeof(TransactionRequest::operation_)
      - PROTOBUF_FIELD_OFFSET(TransactionRequest, rollback_)>(
          reinterpret_cast<char*>(&rollback_),
          reinterpret_cast<char*>(&other->rollback_));
}

std::string TransactionRequest::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.TransactionRequest";
}


// ===================================================================

void TransactionResponse::InitAsDefaultInstance() {
  ::Orthanc::DatabasePluginMessages::_TransactionResponse_default_instance_._instance.get_mutable()->rollback_ = const_cast< ::Orthanc::DatabasePluginMessages::Rollback_Response*>(
      ::Orthanc::DatabasePluginMessages::Rollback_Response::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionResponse_default_instance_._instance.get_mutable()->commit_ = const_cast< ::Orthanc::DatabasePluginMessages::Commit_Response*>(
      ::Orthanc::DatabasePluginMessages::Commit_Response::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionResponse_default_instance_._instance.get_mutable()->add_attachment_ = const_cast< ::Orthanc::DatabasePluginMessages::AddAttachment_Response*>(
      ::Orthanc::DatabasePluginMessages::AddAttachment_Response::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionResponse_default_instance_._instance.get_mutable()->clear_changes_ = const_cast< ::Orthanc::DatabasePluginMessages::ClearChanges_Response*>(
      ::Orthanc::DatabasePluginMessages::ClearChanges_Response::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionResponse_default_instance_._instance.get_mutable()->clear_exported_resources_ = const_cast< ::Orthanc::DatabasePluginMessages::ClearExportedResources_Response*>(
      ::Orthanc::DatabasePluginMessages::ClearExportedResources_Response::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionResponse_default_instance_._instance.get_mutable()->delete_attachment_ = const_cast< ::Orthanc::DatabasePluginMessages::DeleteAttachment_Response*>(
      ::Orthanc::DatabasePluginMessages::DeleteAttachment_Response::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionResponse_default_instance_._instance.get_mutable()->delete_metadata_ = const_cast< ::Orthanc::DatabasePluginMessages::DeleteMetadata_Response*>(
      ::Orthanc::DatabasePluginMessages::DeleteMetadata_Response::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionResponse_default_instance_._instance.get_mutable()->delete_resource_ = const_cast< ::Orthanc::DatabasePluginMessages::DeleteResource_Response*>(
      ::Orthanc::DatabasePluginMessages::DeleteResource_Response::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionResponse_default_instance_._instance.get_mutable()->get_all_metadata_ = const_cast< ::Orthanc::DatabasePluginMessages::GetAllMetadata_Response*>(
      ::Orthanc::DatabasePluginMessages::GetAllMetadata_Response::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionResponse_default_instance_._instance.get_mutable()->get_all_public_ids_ = const_cast< ::Orthanc::DatabasePluginMessages::GetAllPublicIds_Response*>(
      ::Orthanc::DatabasePluginMessages::GetAllPublicIds_Response::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionResponse_default_instance_._instance.get_mutable()->get_all_public_ids_with_limits_ = const_cast< ::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits_Response*>(
      ::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits_Response::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionResponse_default_instance_._instance.get_mutable()->get_changes_ = const_cast< ::Orthanc::DatabasePluginMessages::GetChanges_Response*>(
      ::Orthanc::DatabasePluginMessages::GetChanges_Response::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionResponse_default_instance_._instance.get_mutable()->get_children_internal_id_ = const_cast< ::Orthanc::DatabasePluginMessages::GetChildrenInternalId_Response*>(
      ::Orthanc::DatabasePluginMessages::GetChildrenInternalId_Response::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionResponse_default_instance_._instance.get_mutable()->get_children_public_id_ = const_cast< ::Orthanc::DatabasePluginMessages::GetChildrenPublicId_Response*>(
      ::Orthanc::DatabasePluginMessages::GetChildrenPublicId_Response::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionResponse_default_instance_._instance.get_mutable()->get_exported_resources_ = const_cast< ::Orthanc::DatabasePluginMessages::GetExportedResources_Response*>(
      ::Orthanc::DatabasePluginMessages::GetExportedResources_Response::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionResponse_default_instance_._instance.get_mutable()->get_last_change_ = const_cast< ::Orthanc::DatabasePluginMessages::GetLastChange_Response*>(
      ::Orthanc::DatabasePluginMessages::GetLastChange_Response::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionResponse_default_instance_._instance.get_mutable()->get_last_exported_resource_ = const_cast< ::Orthanc::DatabasePluginMessages::GetLastExportedResource_Response*>(
      ::Orthanc::DatabasePluginMessages::GetLastExportedResource_Response::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionResponse_default_instance_._instance.get_mutable()->get_main_dicom_tags_ = const_cast< ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Response*>(
      ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Response::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionResponse_default_instance_._instance.get_mutable()->get_public_id_ = const_cast< ::Orthanc::DatabasePluginMessages::GetPublicId_Response*>(
      ::Orthanc::DatabasePluginMessages::GetPublicId_Response::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionResponse_default_instance_._instance.get_mutable()->get_resources_count_ = const_cast< ::Orthanc::DatabasePluginMessages::GetResourcesCount_Response*>(
      ::Orthanc::DatabasePluginMessages::GetResourcesCount_Response::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionResponse_default_instance_._instance.get_mutable()->get_resource_type_ = const_cast< ::Orthanc::DatabasePluginMessages::GetResourceType_Response*>(
      ::Orthanc::DatabasePluginMessages::GetResourceType_Response::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionResponse_default_instance_._instance.get_mutable()->get_total_compressed_size_ = const_cast< ::Orthanc::DatabasePluginMessages::GetTotalCompressedSize_Response*>(
      ::Orthanc::DatabasePluginMessages::GetTotalCompressedSize_Response::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionResponse_default_instance_._instance.get_mutable()->get_total_uncompressed_size_ = const_cast< ::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize_Response*>(
      ::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize_Response::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionResponse_default_instance_._instance.get_mutable()->is_protected_patient_ = const_cast< ::Orthanc::DatabasePluginMessages::IsProtectedPatient_Response*>(
      ::Orthanc::DatabasePluginMessages::IsProtectedPatient_Response::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionResponse_default_instance_._instance.get_mutable()->list_available_attachments_ = const_cast< ::Orthanc::DatabasePluginMessages::ListAvailableAttachments_Response*>(
      ::Orthanc::DatabasePluginMessages::ListAvailableAttachments_Response::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionResponse_default_instance_._instance.get_mutable()->log_change_ = const_cast< ::Orthanc::DatabasePluginMessages::LogChange_Response*>(
      ::Orthanc::DatabasePluginMessages::LogChange_Response::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionResponse_default_instance_._instance.get_mutable()->log_exported_resource_ = const_cast< ::Orthanc::DatabasePluginMessages::LogExportedResource_Response*>(
      ::Orthanc::DatabasePluginMessages::LogExportedResource_Response::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionResponse_default_instance_._instance.get_mutable()->lookup_attachment_ = const_cast< ::Orthanc::DatabasePluginMessages::LookupAttachment_Response*>(
      ::Orthanc::DatabasePluginMessages::LookupAttachment_Response::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionResponse_default_instance_._instance.get_mutable()->lookup_global_property_ = const_cast< ::Orthanc::DatabasePluginMessages::LookupGlobalProperty_Response*>(
      ::Orthanc::DatabasePluginMessages::LookupGlobalProperty_Response::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionResponse_default_instance_._instance.get_mutable()->lookup_metadata_ = const_cast< ::Orthanc::DatabasePluginMessages::LookupMetadata_Response*>(
      ::Orthanc::DatabasePluginMessages::LookupMetadata_Response::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionResponse_default_instance_._instance.get_mutable()->lookup_parent_ = const_cast< ::Orthanc::DatabasePluginMessages::LookupParent_Response*>(
      ::Orthanc::DatabasePluginMessages::LookupParent_Response::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionResponse_default_instance_._instance.get_mutable()->lookup_resource_ = const_cast< ::Orthanc::DatabasePluginMessages::LookupResource_Response*>(
      ::Orthanc::DatabasePluginMessages::LookupResource_Response::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionResponse_default_instance_._instance.get_mutable()->select_patient_to_recycle_ = const_cast< ::Orthanc::DatabasePluginMessages::SelectPatientToRecycle_Response*>(
      ::Orthanc::DatabasePluginMessages::SelectPatientToRecycle_Response::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionResponse_default_instance_._instance.get_mutable()->select_patient_to_recycle_with_avoid_ = const_cast< ::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid_Response*>(
      ::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid_Response::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionResponse_default_instance_._instance.get_mutable()->set_global_property_ = const_cast< ::Orthanc::DatabasePluginMessages::SetGlobalProperty_Response*>(
      ::Orthanc::DatabasePluginMessages::SetGlobalProperty_Response::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionResponse_default_instance_._instance.get_mutable()->clear_main_dicom_tags_ = const_cast< ::Orthanc::DatabasePluginMessages::ClearMainDicomTags_Response*>(
      ::Orthanc::DatabasePluginMessages::ClearMainDicomTags_Response::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionResponse_default_instance_._instance.get_mutable()->set_metadata_ = const_cast< ::Orthanc::DatabasePluginMessages::SetMetadata_Response*>(
      ::Orthanc::DatabasePluginMessages::SetMetadata_Response::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionResponse_default_instance_._instance.get_mutable()->set_protected_patient_ = const_cast< ::Orthanc::DatabasePluginMessages::SetProtectedPatient_Response*>(
      ::Orthanc::DatabasePluginMessages::SetProtectedPatient_Response::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionResponse_default_instance_._instance.get_mutable()->is_disk_size_above_ = const_cast< ::Orthanc::DatabasePluginMessages::IsDiskSizeAbove_Response*>(
      ::Orthanc::DatabasePluginMessages::IsDiskSizeAbove_Response::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionResponse_default_instance_._instance.get_mutable()->lookup_resources_ = const_cast< ::Orthanc::DatabasePluginMessages::LookupResources_Response*>(
      ::Orthanc::DatabasePluginMessages::LookupResources_Response::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionResponse_default_instance_._instance.get_mutable()->create_instance_ = const_cast< ::Orthanc::DatabasePluginMessages::CreateInstance_Response*>(
      ::Orthanc::DatabasePluginMessages::CreateInstance_Response::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionResponse_default_instance_._instance.get_mutable()->set_resources_content_ = const_cast< ::Orthanc::DatabasePluginMessages::SetResourcesContent_Response*>(
      ::Orthanc::DatabasePluginMessages::SetResourcesContent_Response::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionResponse_default_instance_._instance.get_mutable()->get_children_metadata_ = const_cast< ::Orthanc::DatabasePluginMessages::GetChildrenMetadata_Response*>(
      ::Orthanc::DatabasePluginMessages::GetChildrenMetadata_Response::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionResponse_default_instance_._instance.get_mutable()->get_last_change_index_ = const_cast< ::Orthanc::DatabasePluginMessages::GetLastChangeIndex_Response*>(
      ::Orthanc::DatabasePluginMessages::GetLastChangeIndex_Response::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionResponse_default_instance_._instance.get_mutable()->lookup_resource_and_parent_ = const_cast< ::Orthanc::DatabasePluginMessages::LookupResourceAndParent_Response*>(
      ::Orthanc::DatabasePluginMessages::LookupResourceAndParent_Response::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionResponse_default_instance_._instance.get_mutable()->add_label_ = const_cast< ::Orthanc::DatabasePluginMessages::AddLabel_Response*>(
      ::Orthanc::DatabasePluginMessages::AddLabel_Response::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionResponse_default_instance_._instance.get_mutable()->remove_label_ = const_cast< ::Orthanc::DatabasePluginMessages::RemoveLabel_Response*>(
      ::Orthanc::DatabasePluginMessages::RemoveLabel_Response::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionResponse_default_instance_._instance.get_mutable()->list_labels_ = const_cast< ::Orthanc::DatabasePluginMessages::ListLabels_Response*>(
      ::Orthanc::DatabasePluginMessages::ListLabels_Response::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionResponse_default_instance_._instance.get_mutable()->increment_global_property_ = const_cast< ::Orthanc::DatabasePluginMessages::IncrementGlobalProperty_Response*>(
      ::Orthanc::DatabasePluginMessages::IncrementGlobalProperty_Response::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_TransactionResponse_default_instance_._instance.get_mutable()->update_and_get_statistics_ = const_cast< ::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics_Response*>(
      ::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics_Response::internal_default_instance());
}
class TransactionResponse::_Internal {
 public:
  static const ::Orthanc::DatabasePluginMessages::Rollback_Response& rollback(const TransactionResponse* msg);
  static const ::Orthanc::DatabasePluginMessages::Commit_Response& commit(const TransactionResponse* msg);
  static const ::Orthanc::DatabasePluginMessages::AddAttachment_Response& add_attachment(const TransactionResponse* msg);
  static const ::Orthanc::DatabasePluginMessages::ClearChanges_Response& clear_changes(const TransactionResponse* msg);
  static const ::Orthanc::DatabasePluginMessages::ClearExportedResources_Response& clear_exported_resources(const TransactionResponse* msg);
  static const ::Orthanc::DatabasePluginMessages::DeleteAttachment_Response& delete_attachment(const TransactionResponse* msg);
  static const ::Orthanc::DatabasePluginMessages::DeleteMetadata_Response& delete_metadata(const TransactionResponse* msg);
  static const ::Orthanc::DatabasePluginMessages::DeleteResource_Response& delete_resource(const TransactionResponse* msg);
  static const ::Orthanc::DatabasePluginMessages::GetAllMetadata_Response& get_all_metadata(const TransactionResponse* msg);
  static const ::Orthanc::DatabasePluginMessages::GetAllPublicIds_Response& get_all_public_ids(const TransactionResponse* msg);
  static const ::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits_Response& get_all_public_ids_with_limits(const TransactionResponse* msg);
  static const ::Orthanc::DatabasePluginMessages::GetChanges_Response& get_changes(const TransactionResponse* msg);
  static const ::Orthanc::DatabasePluginMessages::GetChildrenInternalId_Response& get_children_internal_id(const TransactionResponse* msg);
  static const ::Orthanc::DatabasePluginMessages::GetChildrenPublicId_Response& get_children_public_id(const TransactionResponse* msg);
  static const ::Orthanc::DatabasePluginMessages::GetExportedResources_Response& get_exported_resources(const TransactionResponse* msg);
  static const ::Orthanc::DatabasePluginMessages::GetLastChange_Response& get_last_change(const TransactionResponse* msg);
  static const ::Orthanc::DatabasePluginMessages::GetLastExportedResource_Response& get_last_exported_resource(const TransactionResponse* msg);
  static const ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Response& get_main_dicom_tags(const TransactionResponse* msg);
  static const ::Orthanc::DatabasePluginMessages::GetPublicId_Response& get_public_id(const TransactionResponse* msg);
  static const ::Orthanc::DatabasePluginMessages::GetResourcesCount_Response& get_resources_count(const TransactionResponse* msg);
  static const ::Orthanc::DatabasePluginMessages::GetResourceType_Response& get_resource_type(const TransactionResponse* msg);
  static const ::Orthanc::DatabasePluginMessages::GetTotalCompressedSize_Response& get_total_compressed_size(const TransactionResponse* msg);
  static const ::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize_Response& get_total_uncompressed_size(const TransactionResponse* msg);
  static const ::Orthanc::DatabasePluginMessages::IsProtectedPatient_Response& is_protected_patient(const TransactionResponse* msg);
  static const ::Orthanc::DatabasePluginMessages::ListAvailableAttachments_Response& list_available_attachments(const TransactionResponse* msg);
  static const ::Orthanc::DatabasePluginMessages::LogChange_Response& log_change(const TransactionResponse* msg);
  static const ::Orthanc::DatabasePluginMessages::LogExportedResource_Response& log_exported_resource(const TransactionResponse* msg);
  static const ::Orthanc::DatabasePluginMessages::LookupAttachment_Response& lookup_attachment(const TransactionResponse* msg);
  static const ::Orthanc::DatabasePluginMessages::LookupGlobalProperty_Response& lookup_global_property(const TransactionResponse* msg);
  static const ::Orthanc::DatabasePluginMessages::LookupMetadata_Response& lookup_metadata(const TransactionResponse* msg);
  static const ::Orthanc::DatabasePluginMessages::LookupParent_Response& lookup_parent(const TransactionResponse* msg);
  static const ::Orthanc::DatabasePluginMessages::LookupResource_Response& lookup_resource(const TransactionResponse* msg);
  static const ::Orthanc::DatabasePluginMessages::SelectPatientToRecycle_Response& select_patient_to_recycle(const TransactionResponse* msg);
  static const ::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid_Response& select_patient_to_recycle_with_avoid(const TransactionResponse* msg);
  static const ::Orthanc::DatabasePluginMessages::SetGlobalProperty_Response& set_global_property(const TransactionResponse* msg);
  static const ::Orthanc::DatabasePluginMessages::ClearMainDicomTags_Response& clear_main_dicom_tags(const TransactionResponse* msg);
  static const ::Orthanc::DatabasePluginMessages::SetMetadata_Response& set_metadata(const TransactionResponse* msg);
  static const ::Orthanc::DatabasePluginMessages::SetProtectedPatient_Response& set_protected_patient(const TransactionResponse* msg);
  static const ::Orthanc::DatabasePluginMessages::IsDiskSizeAbove_Response& is_disk_size_above(const TransactionResponse* msg);
  static const ::Orthanc::DatabasePluginMessages::LookupResources_Response& lookup_resources(const TransactionResponse* msg);
  static const ::Orthanc::DatabasePluginMessages::CreateInstance_Response& create_instance(const TransactionResponse* msg);
  static const ::Orthanc::DatabasePluginMessages::SetResourcesContent_Response& set_resources_content(const TransactionResponse* msg);
  static const ::Orthanc::DatabasePluginMessages::GetChildrenMetadata_Response& get_children_metadata(const TransactionResponse* msg);
  static const ::Orthanc::DatabasePluginMessages::GetLastChangeIndex_Response& get_last_change_index(const TransactionResponse* msg);
  static const ::Orthanc::DatabasePluginMessages::LookupResourceAndParent_Response& lookup_resource_and_parent(const TransactionResponse* msg);
  static const ::Orthanc::DatabasePluginMessages::AddLabel_Response& add_label(const TransactionResponse* msg);
  static const ::Orthanc::DatabasePluginMessages::RemoveLabel_Response& remove_label(const TransactionResponse* msg);
  static const ::Orthanc::DatabasePluginMessages::ListLabels_Response& list_labels(const TransactionResponse* msg);
  static const ::Orthanc::DatabasePluginMessages::IncrementGlobalProperty_Response& increment_global_property(const TransactionResponse* msg);
  static const ::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics_Response& update_and_get_statistics(const TransactionResponse* msg);
};

const ::Orthanc::DatabasePluginMessages::Rollback_Response&
TransactionResponse::_Internal::rollback(const TransactionResponse* msg) {
  return *msg->rollback_;
}
const ::Orthanc::DatabasePluginMessages::Commit_Response&
TransactionResponse::_Internal::commit(const TransactionResponse* msg) {
  return *msg->commit_;
}
const ::Orthanc::DatabasePluginMessages::AddAttachment_Response&
TransactionResponse::_Internal::add_attachment(const TransactionResponse* msg) {
  return *msg->add_attachment_;
}
const ::Orthanc::DatabasePluginMessages::ClearChanges_Response&
TransactionResponse::_Internal::clear_changes(const TransactionResponse* msg) {
  return *msg->clear_changes_;
}
const ::Orthanc::DatabasePluginMessages::ClearExportedResources_Response&
TransactionResponse::_Internal::clear_exported_resources(const TransactionResponse* msg) {
  return *msg->clear_exported_resources_;
}
const ::Orthanc::DatabasePluginMessages::DeleteAttachment_Response&
TransactionResponse::_Internal::delete_attachment(const TransactionResponse* msg) {
  return *msg->delete_attachment_;
}
const ::Orthanc::DatabasePluginMessages::DeleteMetadata_Response&
TransactionResponse::_Internal::delete_metadata(const TransactionResponse* msg) {
  return *msg->delete_metadata_;
}
const ::Orthanc::DatabasePluginMessages::DeleteResource_Response&
TransactionResponse::_Internal::delete_resource(const TransactionResponse* msg) {
  return *msg->delete_resource_;
}
const ::Orthanc::DatabasePluginMessages::GetAllMetadata_Response&
TransactionResponse::_Internal::get_all_metadata(const TransactionResponse* msg) {
  return *msg->get_all_metadata_;
}
const ::Orthanc::DatabasePluginMessages::GetAllPublicIds_Response&
TransactionResponse::_Internal::get_all_public_ids(const TransactionResponse* msg) {
  return *msg->get_all_public_ids_;
}
const ::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits_Response&
TransactionResponse::_Internal::get_all_public_ids_with_limits(const TransactionResponse* msg) {
  return *msg->get_all_public_ids_with_limits_;
}
const ::Orthanc::DatabasePluginMessages::GetChanges_Response&
TransactionResponse::_Internal::get_changes(const TransactionResponse* msg) {
  return *msg->get_changes_;
}
const ::Orthanc::DatabasePluginMessages::GetChildrenInternalId_Response&
TransactionResponse::_Internal::get_children_internal_id(const TransactionResponse* msg) {
  return *msg->get_children_internal_id_;
}
const ::Orthanc::DatabasePluginMessages::GetChildrenPublicId_Response&
TransactionResponse::_Internal::get_children_public_id(const TransactionResponse* msg) {
  return *msg->get_children_public_id_;
}
const ::Orthanc::DatabasePluginMessages::GetExportedResources_Response&
TransactionResponse::_Internal::get_exported_resources(const TransactionResponse* msg) {
  return *msg->get_exported_resources_;
}
const ::Orthanc::DatabasePluginMessages::GetLastChange_Response&
TransactionResponse::_Internal::get_last_change(const TransactionResponse* msg) {
  return *msg->get_last_change_;
}
const ::Orthanc::DatabasePluginMessages::GetLastExportedResource_Response&
TransactionResponse::_Internal::get_last_exported_resource(const TransactionResponse* msg) {
  return *msg->get_last_exported_resource_;
}
const ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Response&
TransactionResponse::_Internal::get_main_dicom_tags(const TransactionResponse* msg) {
  return *msg->get_main_dicom_tags_;
}
const ::Orthanc::DatabasePluginMessages::GetPublicId_Response&
TransactionResponse::_Internal::get_public_id(const TransactionResponse* msg) {
  return *msg->get_public_id_;
}
const ::Orthanc::DatabasePluginMessages::GetResourcesCount_Response&
TransactionResponse::_Internal::get_resources_count(const TransactionResponse* msg) {
  return *msg->get_resources_count_;
}
const ::Orthanc::DatabasePluginMessages::GetResourceType_Response&
TransactionResponse::_Internal::get_resource_type(const TransactionResponse* msg) {
  return *msg->get_resource_type_;
}
const ::Orthanc::DatabasePluginMessages::GetTotalCompressedSize_Response&
TransactionResponse::_Internal::get_total_compressed_size(const TransactionResponse* msg) {
  return *msg->get_total_compressed_size_;
}
const ::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize_Response&
TransactionResponse::_Internal::get_total_uncompressed_size(const TransactionResponse* msg) {
  return *msg->get_total_uncompressed_size_;
}
const ::Orthanc::DatabasePluginMessages::IsProtectedPatient_Response&
TransactionResponse::_Internal::is_protected_patient(const TransactionResponse* msg) {
  return *msg->is_protected_patient_;
}
const ::Orthanc::DatabasePluginMessages::ListAvailableAttachments_Response&
TransactionResponse::_Internal::list_available_attachments(const TransactionResponse* msg) {
  return *msg->list_available_attachments_;
}
const ::Orthanc::DatabasePluginMessages::LogChange_Response&
TransactionResponse::_Internal::log_change(const TransactionResponse* msg) {
  return *msg->log_change_;
}
const ::Orthanc::DatabasePluginMessages::LogExportedResource_Response&
TransactionResponse::_Internal::log_exported_resource(const TransactionResponse* msg) {
  return *msg->log_exported_resource_;
}
const ::Orthanc::DatabasePluginMessages::LookupAttachment_Response&
TransactionResponse::_Internal::lookup_attachment(const TransactionResponse* msg) {
  return *msg->lookup_attachment_;
}
const ::Orthanc::DatabasePluginMessages::LookupGlobalProperty_Response&
TransactionResponse::_Internal::lookup_global_property(const TransactionResponse* msg) {
  return *msg->lookup_global_property_;
}
const ::Orthanc::DatabasePluginMessages::LookupMetadata_Response&
TransactionResponse::_Internal::lookup_metadata(const TransactionResponse* msg) {
  return *msg->lookup_metadata_;
}
const ::Orthanc::DatabasePluginMessages::LookupParent_Response&
TransactionResponse::_Internal::lookup_parent(const TransactionResponse* msg) {
  return *msg->lookup_parent_;
}
const ::Orthanc::DatabasePluginMessages::LookupResource_Response&
TransactionResponse::_Internal::lookup_resource(const TransactionResponse* msg) {
  return *msg->lookup_resource_;
}
const ::Orthanc::DatabasePluginMessages::SelectPatientToRecycle_Response&
TransactionResponse::_Internal::select_patient_to_recycle(const TransactionResponse* msg) {
  return *msg->select_patient_to_recycle_;
}
const ::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid_Response&
TransactionResponse::_Internal::select_patient_to_recycle_with_avoid(const TransactionResponse* msg) {
  return *msg->select_patient_to_recycle_with_avoid_;
}
const ::Orthanc::DatabasePluginMessages::SetGlobalProperty_Response&
TransactionResponse::_Internal::set_global_property(const TransactionResponse* msg) {
  return *msg->set_global_property_;
}
const ::Orthanc::DatabasePluginMessages::ClearMainDicomTags_Response&
TransactionResponse::_Internal::clear_main_dicom_tags(const TransactionResponse* msg) {
  return *msg->clear_main_dicom_tags_;
}
const ::Orthanc::DatabasePluginMessages::SetMetadata_Response&
TransactionResponse::_Internal::set_metadata(const TransactionResponse* msg) {
  return *msg->set_metadata_;
}
const ::Orthanc::DatabasePluginMessages::SetProtectedPatient_Response&
TransactionResponse::_Internal::set_protected_patient(const TransactionResponse* msg) {
  return *msg->set_protected_patient_;
}
const ::Orthanc::DatabasePluginMessages::IsDiskSizeAbove_Response&
TransactionResponse::_Internal::is_disk_size_above(const TransactionResponse* msg) {
  return *msg->is_disk_size_above_;
}
const ::Orthanc::DatabasePluginMessages::LookupResources_Response&
TransactionResponse::_Internal::lookup_resources(const TransactionResponse* msg) {
  return *msg->lookup_resources_;
}
const ::Orthanc::DatabasePluginMessages::CreateInstance_Response&
TransactionResponse::_Internal::create_instance(const TransactionResponse* msg) {
  return *msg->create_instance_;
}
const ::Orthanc::DatabasePluginMessages::SetResourcesContent_Response&
TransactionResponse::_Internal::set_resources_content(const TransactionResponse* msg) {
  return *msg->set_resources_content_;
}
const ::Orthanc::DatabasePluginMessages::GetChildrenMetadata_Response&
TransactionResponse::_Internal::get_children_metadata(const TransactionResponse* msg) {
  return *msg->get_children_metadata_;
}
const ::Orthanc::DatabasePluginMessages::GetLastChangeIndex_Response&
TransactionResponse::_Internal::get_last_change_index(const TransactionResponse* msg) {
  return *msg->get_last_change_index_;
}
const ::Orthanc::DatabasePluginMessages::LookupResourceAndParent_Response&
TransactionResponse::_Internal::lookup_resource_and_parent(const TransactionResponse* msg) {
  return *msg->lookup_resource_and_parent_;
}
const ::Orthanc::DatabasePluginMessages::AddLabel_Response&
TransactionResponse::_Internal::add_label(const TransactionResponse* msg) {
  return *msg->add_label_;
}
const ::Orthanc::DatabasePluginMessages::RemoveLabel_Response&
TransactionResponse::_Internal::remove_label(const TransactionResponse* msg) {
  return *msg->remove_label_;
}
const ::Orthanc::DatabasePluginMessages::ListLabels_Response&
TransactionResponse::_Internal::list_labels(const TransactionResponse* msg) {
  return *msg->list_labels_;
}
const ::Orthanc::DatabasePluginMessages::IncrementGlobalProperty_Response&
TransactionResponse::_Internal::increment_global_property(const TransactionResponse* msg) {
  return *msg->increment_global_property_;
}
const ::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics_Response&
TransactionResponse::_Internal::update_and_get_statistics(const TransactionResponse* msg) {
  return *msg->update_and_get_statistics_;
}
TransactionResponse::TransactionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.TransactionResponse)
}
TransactionResponse::TransactionResponse(const TransactionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_rollback()) {
    rollback_ = new ::Orthanc::DatabasePluginMessages::Rollback_Response(*from.rollback_);
  } else {
    rollback_ = nullptr;
  }
  if (from._internal_has_commit()) {
    commit_ = new ::Orthanc::DatabasePluginMessages::Commit_Response(*from.commit_);
  } else {
    commit_ = nullptr;
  }
  if (from._internal_has_add_attachment()) {
    add_attachment_ = new ::Orthanc::DatabasePluginMessages::AddAttachment_Response(*from.add_attachment_);
  } else {
    add_attachment_ = nullptr;
  }
  if (from._internal_has_clear_changes()) {
    clear_changes_ = new ::Orthanc::DatabasePluginMessages::ClearChanges_Response(*from.clear_changes_);
  } else {
    clear_changes_ = nullptr;
  }
  if (from._internal_has_clear_exported_resources()) {
    clear_exported_resources_ = new ::Orthanc::DatabasePluginMessages::ClearExportedResources_Response(*from.clear_exported_resources_);
  } else {
    clear_exported_resources_ = nullptr;
  }
  if (from._internal_has_delete_attachment()) {
    delete_attachment_ = new ::Orthanc::DatabasePluginMessages::DeleteAttachment_Response(*from.delete_attachment_);
  } else {
    delete_attachment_ = nullptr;
  }
  if (from._internal_has_delete_metadata()) {
    delete_metadata_ = new ::Orthanc::DatabasePluginMessages::DeleteMetadata_Response(*from.delete_metadata_);
  } else {
    delete_metadata_ = nullptr;
  }
  if (from._internal_has_delete_resource()) {
    delete_resource_ = new ::Orthanc::DatabasePluginMessages::DeleteResource_Response(*from.delete_resource_);
  } else {
    delete_resource_ = nullptr;
  }
  if (from._internal_has_get_all_metadata()) {
    get_all_metadata_ = new ::Orthanc::DatabasePluginMessages::GetAllMetadata_Response(*from.get_all_metadata_);
  } else {
    get_all_metadata_ = nullptr;
  }
  if (from._internal_has_get_all_public_ids()) {
    get_all_public_ids_ = new ::Orthanc::DatabasePluginMessages::GetAllPublicIds_Response(*from.get_all_public_ids_);
  } else {
    get_all_public_ids_ = nullptr;
  }
  if (from._internal_has_get_all_public_ids_with_limits()) {
    get_all_public_ids_with_limits_ = new ::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits_Response(*from.get_all_public_ids_with_limits_);
  } else {
    get_all_public_ids_with_limits_ = nullptr;
  }
  if (from._internal_has_get_changes()) {
    get_changes_ = new ::Orthanc::DatabasePluginMessages::GetChanges_Response(*from.get_changes_);
  } else {
    get_changes_ = nullptr;
  }
  if (from._internal_has_get_children_internal_id()) {
    get_children_internal_id_ = new ::Orthanc::DatabasePluginMessages::GetChildrenInternalId_Response(*from.get_children_internal_id_);
  } else {
    get_children_internal_id_ = nullptr;
  }
  if (from._internal_has_get_children_public_id()) {
    get_children_public_id_ = new ::Orthanc::DatabasePluginMessages::GetChildrenPublicId_Response(*from.get_children_public_id_);
  } else {
    get_children_public_id_ = nullptr;
  }
  if (from._internal_has_get_exported_resources()) {
    get_exported_resources_ = new ::Orthanc::DatabasePluginMessages::GetExportedResources_Response(*from.get_exported_resources_);
  } else {
    get_exported_resources_ = nullptr;
  }
  if (from._internal_has_get_last_change()) {
    get_last_change_ = new ::Orthanc::DatabasePluginMessages::GetLastChange_Response(*from.get_last_change_);
  } else {
    get_last_change_ = nullptr;
  }
  if (from._internal_has_get_last_exported_resource()) {
    get_last_exported_resource_ = new ::Orthanc::DatabasePluginMessages::GetLastExportedResource_Response(*from.get_last_exported_resource_);
  } else {
    get_last_exported_resource_ = nullptr;
  }
  if (from._internal_has_get_main_dicom_tags()) {
    get_main_dicom_tags_ = new ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Response(*from.get_main_dicom_tags_);
  } else {
    get_main_dicom_tags_ = nullptr;
  }
  if (from._internal_has_get_public_id()) {
    get_public_id_ = new ::Orthanc::DatabasePluginMessages::GetPublicId_Response(*from.get_public_id_);
  } else {
    get_public_id_ = nullptr;
  }
  if (from._internal_has_get_resources_count()) {
    get_resources_count_ = new ::Orthanc::DatabasePluginMessages::GetResourcesCount_Response(*from.get_resources_count_);
  } else {
    get_resources_count_ = nullptr;
  }
  if (from._internal_has_get_resource_type()) {
    get_resource_type_ = new ::Orthanc::DatabasePluginMessages::GetResourceType_Response(*from.get_resource_type_);
  } else {
    get_resource_type_ = nullptr;
  }
  if (from._internal_has_get_total_compressed_size()) {
    get_total_compressed_size_ = new ::Orthanc::DatabasePluginMessages::GetTotalCompressedSize_Response(*from.get_total_compressed_size_);
  } else {
    get_total_compressed_size_ = nullptr;
  }
  if (from._internal_has_get_total_uncompressed_size()) {
    get_total_uncompressed_size_ = new ::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize_Response(*from.get_total_uncompressed_size_);
  } else {
    get_total_uncompressed_size_ = nullptr;
  }
  if (from._internal_has_is_protected_patient()) {
    is_protected_patient_ = new ::Orthanc::DatabasePluginMessages::IsProtectedPatient_Response(*from.is_protected_patient_);
  } else {
    is_protected_patient_ = nullptr;
  }
  if (from._internal_has_list_available_attachments()) {
    list_available_attachments_ = new ::Orthanc::DatabasePluginMessages::ListAvailableAttachments_Response(*from.list_available_attachments_);
  } else {
    list_available_attachments_ = nullptr;
  }
  if (from._internal_has_log_change()) {
    log_change_ = new ::Orthanc::DatabasePluginMessages::LogChange_Response(*from.log_change_);
  } else {
    log_change_ = nullptr;
  }
  if (from._internal_has_log_exported_resource()) {
    log_exported_resource_ = new ::Orthanc::DatabasePluginMessages::LogExportedResource_Response(*from.log_exported_resource_);
  } else {
    log_exported_resource_ = nullptr;
  }
  if (from._internal_has_lookup_attachment()) {
    lookup_attachment_ = new ::Orthanc::DatabasePluginMessages::LookupAttachment_Response(*from.lookup_attachment_);
  } else {
    lookup_attachment_ = nullptr;
  }
  if (from._internal_has_lookup_global_property()) {
    lookup_global_property_ = new ::Orthanc::DatabasePluginMessages::LookupGlobalProperty_Response(*from.lookup_global_property_);
  } else {
    lookup_global_property_ = nullptr;
  }
  if (from._internal_has_lookup_metadata()) {
    lookup_metadata_ = new ::Orthanc::DatabasePluginMessages::LookupMetadata_Response(*from.lookup_metadata_);
  } else {
    lookup_metadata_ = nullptr;
  }
  if (from._internal_has_lookup_parent()) {
    lookup_parent_ = new ::Orthanc::DatabasePluginMessages::LookupParent_Response(*from.lookup_parent_);
  } else {
    lookup_parent_ = nullptr;
  }
  if (from._internal_has_lookup_resource()) {
    lookup_resource_ = new ::Orthanc::DatabasePluginMessages::LookupResource_Response(*from.lookup_resource_);
  } else {
    lookup_resource_ = nullptr;
  }
  if (from._internal_has_select_patient_to_recycle()) {
    select_patient_to_recycle_ = new ::Orthanc::DatabasePluginMessages::SelectPatientToRecycle_Response(*from.select_patient_to_recycle_);
  } else {
    select_patient_to_recycle_ = nullptr;
  }
  if (from._internal_has_select_patient_to_recycle_with_avoid()) {
    select_patient_to_recycle_with_avoid_ = new ::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid_Response(*from.select_patient_to_recycle_with_avoid_);
  } else {
    select_patient_to_recycle_with_avoid_ = nullptr;
  }
  if (from._internal_has_set_global_property()) {
    set_global_property_ = new ::Orthanc::DatabasePluginMessages::SetGlobalProperty_Response(*from.set_global_property_);
  } else {
    set_global_property_ = nullptr;
  }
  if (from._internal_has_clear_main_dicom_tags()) {
    clear_main_dicom_tags_ = new ::Orthanc::DatabasePluginMessages::ClearMainDicomTags_Response(*from.clear_main_dicom_tags_);
  } else {
    clear_main_dicom_tags_ = nullptr;
  }
  if (from._internal_has_set_metadata()) {
    set_metadata_ = new ::Orthanc::DatabasePluginMessages::SetMetadata_Response(*from.set_metadata_);
  } else {
    set_metadata_ = nullptr;
  }
  if (from._internal_has_set_protected_patient()) {
    set_protected_patient_ = new ::Orthanc::DatabasePluginMessages::SetProtectedPatient_Response(*from.set_protected_patient_);
  } else {
    set_protected_patient_ = nullptr;
  }
  if (from._internal_has_is_disk_size_above()) {
    is_disk_size_above_ = new ::Orthanc::DatabasePluginMessages::IsDiskSizeAbove_Response(*from.is_disk_size_above_);
  } else {
    is_disk_size_above_ = nullptr;
  }
  if (from._internal_has_lookup_resources()) {
    lookup_resources_ = new ::Orthanc::DatabasePluginMessages::LookupResources_Response(*from.lookup_resources_);
  } else {
    lookup_resources_ = nullptr;
  }
  if (from._internal_has_create_instance()) {
    create_instance_ = new ::Orthanc::DatabasePluginMessages::CreateInstance_Response(*from.create_instance_);
  } else {
    create_instance_ = nullptr;
  }
  if (from._internal_has_set_resources_content()) {
    set_resources_content_ = new ::Orthanc::DatabasePluginMessages::SetResourcesContent_Response(*from.set_resources_content_);
  } else {
    set_resources_content_ = nullptr;
  }
  if (from._internal_has_get_children_metadata()) {
    get_children_metadata_ = new ::Orthanc::DatabasePluginMessages::GetChildrenMetadata_Response(*from.get_children_metadata_);
  } else {
    get_children_metadata_ = nullptr;
  }
  if (from._internal_has_get_last_change_index()) {
    get_last_change_index_ = new ::Orthanc::DatabasePluginMessages::GetLastChangeIndex_Response(*from.get_last_change_index_);
  } else {
    get_last_change_index_ = nullptr;
  }
  if (from._internal_has_lookup_resource_and_parent()) {
    lookup_resource_and_parent_ = new ::Orthanc::DatabasePluginMessages::LookupResourceAndParent_Response(*from.lookup_resource_and_parent_);
  } else {
    lookup_resource_and_parent_ = nullptr;
  }
  if (from._internal_has_add_label()) {
    add_label_ = new ::Orthanc::DatabasePluginMessages::AddLabel_Response(*from.add_label_);
  } else {
    add_label_ = nullptr;
  }
  if (from._internal_has_remove_label()) {
    remove_label_ = new ::Orthanc::DatabasePluginMessages::RemoveLabel_Response(*from.remove_label_);
  } else {
    remove_label_ = nullptr;
  }
  if (from._internal_has_list_labels()) {
    list_labels_ = new ::Orthanc::DatabasePluginMessages::ListLabels_Response(*from.list_labels_);
  } else {
    list_labels_ = nullptr;
  }
  if (from._internal_has_increment_global_property()) {
    increment_global_property_ = new ::Orthanc::DatabasePluginMessages::IncrementGlobalProperty_Response(*from.increment_global_property_);
  } else {
    increment_global_property_ = nullptr;
  }
  if (from._internal_has_update_and_get_statistics()) {
    update_and_get_statistics_ = new ::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics_Response(*from.update_and_get_statistics_);
  } else {
    update_and_get_statistics_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.TransactionResponse)
}

void TransactionResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransactionResponse_OrthancDatabasePlugin_2eproto.base);
  ::memset(&rollback_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_and_get_statistics_) -
      reinterpret_cast<char*>(&rollback_)) + sizeof(update_and_get_statistics_));
}

TransactionResponse::~TransactionResponse() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.TransactionResponse)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void TransactionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete rollback_;
  if (this != internal_default_instance()) delete commit_;
  if (this != internal_default_instance()) delete add_attachment_;
  if (this != internal_default_instance()) delete clear_changes_;
  if (this != internal_default_instance()) delete clear_exported_resources_;
  if (this != internal_default_instance()) delete delete_attachment_;
  if (this != internal_default_instance()) delete delete_metadata_;
  if (this != internal_default_instance()) delete delete_resource_;
  if (this != internal_default_instance()) delete get_all_metadata_;
  if (this != internal_default_instance()) delete get_all_public_ids_;
  if (this != internal_default_instance()) delete get_all_public_ids_with_limits_;
  if (this != internal_default_instance()) delete get_changes_;
  if (this != internal_default_instance()) delete get_children_internal_id_;
  if (this != internal_default_instance()) delete get_children_public_id_;
  if (this != internal_default_instance()) delete get_exported_resources_;
  if (this != internal_default_instance()) delete get_last_change_;
  if (this != internal_default_instance()) delete get_last_exported_resource_;
  if (this != internal_default_instance()) delete get_main_dicom_tags_;
  if (this != internal_default_instance()) delete get_public_id_;
  if (this != internal_default_instance()) delete get_resources_count_;
  if (this != internal_default_instance()) delete get_resource_type_;
  if (this != internal_default_instance()) delete get_total_compressed_size_;
  if (this != internal_default_instance()) delete get_total_uncompressed_size_;
  if (this != internal_default_instance()) delete is_protected_patient_;
  if (this != internal_default_instance()) delete list_available_attachments_;
  if (this != internal_default_instance()) delete log_change_;
  if (this != internal_default_instance()) delete log_exported_resource_;
  if (this != internal_default_instance()) delete lookup_attachment_;
  if (this != internal_default_instance()) delete lookup_global_property_;
  if (this != internal_default_instance()) delete lookup_metadata_;
  if (this != internal_default_instance()) delete lookup_parent_;
  if (this != internal_default_instance()) delete lookup_resource_;
  if (this != internal_default_instance()) delete select_patient_to_recycle_;
  if (this != internal_default_instance()) delete select_patient_to_recycle_with_avoid_;
  if (this != internal_default_instance()) delete set_global_property_;
  if (this != internal_default_instance()) delete clear_main_dicom_tags_;
  if (this != internal_default_instance()) delete set_metadata_;
  if (this != internal_default_instance()) delete set_protected_patient_;
  if (this != internal_default_instance()) delete is_disk_size_above_;
  if (this != internal_default_instance()) delete lookup_resources_;
  if (this != internal_default_instance()) delete create_instance_;
  if (this != internal_default_instance()) delete set_resources_content_;
  if (this != internal_default_instance()) delete get_children_metadata_;
  if (this != internal_default_instance()) delete get_last_change_index_;
  if (this != internal_default_instance()) delete lookup_resource_and_parent_;
  if (this != internal_default_instance()) delete add_label_;
  if (this != internal_default_instance()) delete remove_label_;
  if (this != internal_default_instance()) delete list_labels_;
  if (this != internal_default_instance()) delete increment_global_property_;
  if (this != internal_default_instance()) delete update_and_get_statistics_;
}

void TransactionResponse::ArenaDtor(void* object) {
  TransactionResponse* _this = reinterpret_cast< TransactionResponse* >(object);
  (void)_this;
}
void TransactionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransactionResponse& TransactionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransactionResponse_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void TransactionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.TransactionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && rollback_ != nullptr) {
    delete rollback_;
  }
  rollback_ = nullptr;
  if (GetArena() == nullptr && commit_ != nullptr) {
    delete commit_;
  }
  commit_ = nullptr;
  if (GetArena() == nullptr && add_attachment_ != nullptr) {
    delete add_attachment_;
  }
  add_attachment_ = nullptr;
  if (GetArena() == nullptr && clear_changes_ != nullptr) {
    delete clear_changes_;
  }
  clear_changes_ = nullptr;
  if (GetArena() == nullptr && clear_exported_resources_ != nullptr) {
    delete clear_exported_resources_;
  }
  clear_exported_resources_ = nullptr;
  if (GetArena() == nullptr && delete_attachment_ != nullptr) {
    delete delete_attachment_;
  }
  delete_attachment_ = nullptr;
  if (GetArena() == nullptr && delete_metadata_ != nullptr) {
    delete delete_metadata_;
  }
  delete_metadata_ = nullptr;
  if (GetArena() == nullptr && delete_resource_ != nullptr) {
    delete delete_resource_;
  }
  delete_resource_ = nullptr;
  if (GetArena() == nullptr && get_all_metadata_ != nullptr) {
    delete get_all_metadata_;
  }
  get_all_metadata_ = nullptr;
  if (GetArena() == nullptr && get_all_public_ids_ != nullptr) {
    delete get_all_public_ids_;
  }
  get_all_public_ids_ = nullptr;
  if (GetArena() == nullptr && get_all_public_ids_with_limits_ != nullptr) {
    delete get_all_public_ids_with_limits_;
  }
  get_all_public_ids_with_limits_ = nullptr;
  if (GetArena() == nullptr && get_changes_ != nullptr) {
    delete get_changes_;
  }
  get_changes_ = nullptr;
  if (GetArena() == nullptr && get_children_internal_id_ != nullptr) {
    delete get_children_internal_id_;
  }
  get_children_internal_id_ = nullptr;
  if (GetArena() == nullptr && get_children_public_id_ != nullptr) {
    delete get_children_public_id_;
  }
  get_children_public_id_ = nullptr;
  if (GetArena() == nullptr && get_exported_resources_ != nullptr) {
    delete get_exported_resources_;
  }
  get_exported_resources_ = nullptr;
  if (GetArena() == nullptr && get_last_change_ != nullptr) {
    delete get_last_change_;
  }
  get_last_change_ = nullptr;
  if (GetArena() == nullptr && get_last_exported_resource_ != nullptr) {
    delete get_last_exported_resource_;
  }
  get_last_exported_resource_ = nullptr;
  if (GetArena() == nullptr && get_main_dicom_tags_ != nullptr) {
    delete get_main_dicom_tags_;
  }
  get_main_dicom_tags_ = nullptr;
  if (GetArena() == nullptr && get_public_id_ != nullptr) {
    delete get_public_id_;
  }
  get_public_id_ = nullptr;
  if (GetArena() == nullptr && get_resources_count_ != nullptr) {
    delete get_resources_count_;
  }
  get_resources_count_ = nullptr;
  if (GetArena() == nullptr && get_resource_type_ != nullptr) {
    delete get_resource_type_;
  }
  get_resource_type_ = nullptr;
  if (GetArena() == nullptr && get_total_compressed_size_ != nullptr) {
    delete get_total_compressed_size_;
  }
  get_total_compressed_size_ = nullptr;
  if (GetArena() == nullptr && get_total_uncompressed_size_ != nullptr) {
    delete get_total_uncompressed_size_;
  }
  get_total_uncompressed_size_ = nullptr;
  if (GetArena() == nullptr && is_protected_patient_ != nullptr) {
    delete is_protected_patient_;
  }
  is_protected_patient_ = nullptr;
  if (GetArena() == nullptr && list_available_attachments_ != nullptr) {
    delete list_available_attachments_;
  }
  list_available_attachments_ = nullptr;
  if (GetArena() == nullptr && log_change_ != nullptr) {
    delete log_change_;
  }
  log_change_ = nullptr;
  if (GetArena() == nullptr && log_exported_resource_ != nullptr) {
    delete log_exported_resource_;
  }
  log_exported_resource_ = nullptr;
  if (GetArena() == nullptr && lookup_attachment_ != nullptr) {
    delete lookup_attachment_;
  }
  lookup_attachment_ = nullptr;
  if (GetArena() == nullptr && lookup_global_property_ != nullptr) {
    delete lookup_global_property_;
  }
  lookup_global_property_ = nullptr;
  if (GetArena() == nullptr && lookup_metadata_ != nullptr) {
    delete lookup_metadata_;
  }
  lookup_metadata_ = nullptr;
  if (GetArena() == nullptr && lookup_parent_ != nullptr) {
    delete lookup_parent_;
  }
  lookup_parent_ = nullptr;
  if (GetArena() == nullptr && lookup_resource_ != nullptr) {
    delete lookup_resource_;
  }
  lookup_resource_ = nullptr;
  if (GetArena() == nullptr && select_patient_to_recycle_ != nullptr) {
    delete select_patient_to_recycle_;
  }
  select_patient_to_recycle_ = nullptr;
  if (GetArena() == nullptr && select_patient_to_recycle_with_avoid_ != nullptr) {
    delete select_patient_to_recycle_with_avoid_;
  }
  select_patient_to_recycle_with_avoid_ = nullptr;
  if (GetArena() == nullptr && set_global_property_ != nullptr) {
    delete set_global_property_;
  }
  set_global_property_ = nullptr;
  if (GetArena() == nullptr && clear_main_dicom_tags_ != nullptr) {
    delete clear_main_dicom_tags_;
  }
  clear_main_dicom_tags_ = nullptr;
  if (GetArena() == nullptr && set_metadata_ != nullptr) {
    delete set_metadata_;
  }
  set_metadata_ = nullptr;
  if (GetArena() == nullptr && set_protected_patient_ != nullptr) {
    delete set_protected_patient_;
  }
  set_protected_patient_ = nullptr;
  if (GetArena() == nullptr && is_disk_size_above_ != nullptr) {
    delete is_disk_size_above_;
  }
  is_disk_size_above_ = nullptr;
  if (GetArena() == nullptr && lookup_resources_ != nullptr) {
    delete lookup_resources_;
  }
  lookup_resources_ = nullptr;
  if (GetArena() == nullptr && create_instance_ != nullptr) {
    delete create_instance_;
  }
  create_instance_ = nullptr;
  if (GetArena() == nullptr && set_resources_content_ != nullptr) {
    delete set_resources_content_;
  }
  set_resources_content_ = nullptr;
  if (GetArena() == nullptr && get_children_metadata_ != nullptr) {
    delete get_children_metadata_;
  }
  get_children_metadata_ = nullptr;
  if (GetArena() == nullptr && get_last_change_index_ != nullptr) {
    delete get_last_change_index_;
  }
  get_last_change_index_ = nullptr;
  if (GetArena() == nullptr && lookup_resource_and_parent_ != nullptr) {
    delete lookup_resource_and_parent_;
  }
  lookup_resource_and_parent_ = nullptr;
  if (GetArena() == nullptr && add_label_ != nullptr) {
    delete add_label_;
  }
  add_label_ = nullptr;
  if (GetArena() == nullptr && remove_label_ != nullptr) {
    delete remove_label_;
  }
  remove_label_ = nullptr;
  if (GetArena() == nullptr && list_labels_ != nullptr) {
    delete list_labels_;
  }
  list_labels_ = nullptr;
  if (GetArena() == nullptr && increment_global_property_ != nullptr) {
    delete increment_global_property_;
  }
  increment_global_property_ = nullptr;
  if (GetArena() == nullptr && update_and_get_statistics_ != nullptr) {
    delete update_and_get_statistics_;
  }
  update_and_get_statistics_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* TransactionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Orthanc.DatabasePluginMessages.Rollback.Response rollback = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_rollback(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.Commit.Response commit = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_commit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.AddAttachment.Response add_attachment = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_add_attachment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.ClearChanges.Response clear_changes = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_clear_changes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.ClearExportedResources.Response clear_exported_resources = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_clear_exported_resources(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.DeleteAttachment.Response delete_attachment = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_delete_attachment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.DeleteMetadata.Response delete_metadata = 106;
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_delete_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.DeleteResource.Response delete_resource = 107;
      case 107:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_delete_resource(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.GetAllMetadata.Response get_all_metadata = 108;
      case 108:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_all_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.GetAllPublicIds.Response get_all_public_ids = 109;
      case 109:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_all_public_ids(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.GetAllPublicIdsWithLimits.Response get_all_public_ids_with_limits = 110;
      case 110:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_all_public_ids_with_limits(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.GetChanges.Response get_changes = 111;
      case 111:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_changes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.GetChildrenInternalId.Response get_children_internal_id = 112;
      case 112:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_children_internal_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.GetChildrenPublicId.Response get_children_public_id = 113;
      case 113:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_children_public_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.GetExportedResources.Response get_exported_resources = 114;
      case 114:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_exported_resources(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.GetLastChange.Response get_last_change = 115;
      case 115:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_last_change(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.GetLastExportedResource.Response get_last_exported_resource = 116;
      case 116:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_last_exported_resource(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.GetMainDicomTags.Response get_main_dicom_tags = 117;
      case 117:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_main_dicom_tags(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.GetPublicId.Response get_public_id = 118;
      case 118:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_public_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.GetResourcesCount.Response get_resources_count = 119;
      case 119:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_resources_count(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.GetResourceType.Response get_resource_type = 120;
      case 120:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_resource_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.GetTotalCompressedSize.Response get_total_compressed_size = 121;
      case 121:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_total_compressed_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.GetTotalUncompressedSize.Response get_total_uncompressed_size = 122;
      case 122:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_total_uncompressed_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.IsProtectedPatient.Response is_protected_patient = 123;
      case 123:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_is_protected_patient(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.ListAvailableAttachments.Response list_available_attachments = 124;
      case 124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_list_available_attachments(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.LogChange.Response log_change = 125;
      case 125:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_log_change(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.LogExportedResource.Response log_exported_resource = 126;
      case 126:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_log_exported_resource(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.LookupAttachment.Response lookup_attachment = 127;
      case 127:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_lookup_attachment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.LookupGlobalProperty.Response lookup_global_property = 128;
      case 128:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_lookup_global_property(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.LookupMetadata.Response lookup_metadata = 129;
      case 129:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_lookup_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.LookupParent.Response lookup_parent = 130;
      case 130:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lookup_parent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.LookupResource.Response lookup_resource = 131;
      case 131:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_lookup_resource(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.SelectPatientToRecycle.Response select_patient_to_recycle = 132;
      case 132:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_select_patient_to_recycle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.SelectPatientToRecycleWithAvoid.Response select_patient_to_recycle_with_avoid = 133;
      case 133:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_select_patient_to_recycle_with_avoid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.SetGlobalProperty.Response set_global_property = 134;
      case 134:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_global_property(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.ClearMainDicomTags.Response clear_main_dicom_tags = 135;
      case 135:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_clear_main_dicom_tags(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.SetMetadata.Response set_metadata = 136;
      case 136:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.SetProtectedPatient.Response set_protected_patient = 137;
      case 137:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_protected_patient(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.IsDiskSizeAbove.Response is_disk_size_above = 138;
      case 138:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_is_disk_size_above(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.LookupResources.Response lookup_resources = 139;
      case 139:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_lookup_resources(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.CreateInstance.Response create_instance = 140;
      case 140:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_instance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.SetResourcesContent.Response set_resources_content = 141;
      case 141:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_resources_content(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.GetChildrenMetadata.Response get_children_metadata = 142;
      case 142:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_children_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.GetLastChangeIndex.Response get_last_change_index = 143;
      case 143:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_last_change_index(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.LookupResourceAndParent.Response lookup_resource_and_parent = 144;
      case 144:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_lookup_resource_and_parent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.AddLabel.Response add_label = 145;
      case 145:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_add_label(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.RemoveLabel.Response remove_label = 146;
      case 146:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_remove_label(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.ListLabels.Response list_labels = 147;
      case 147:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_list_labels(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.IncrementGlobalProperty.Response increment_global_property = 148;
      case 148:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_increment_global_property(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.UpdateAndGetStatistics.Response update_and_get_statistics = 149;
      case 149:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_and_get_statistics(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.TransactionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Orthanc.DatabasePluginMessages.Rollback.Response rollback = 100;
  if (this->has_rollback()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        100, _Internal::rollback(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.Commit.Response commit = 101;
  if (this->has_commit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        101, _Internal::commit(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.AddAttachment.Response add_attachment = 102;
  if (this->has_add_attachment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        102, _Internal::add_attachment(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.ClearChanges.Response clear_changes = 103;
  if (this->has_clear_changes()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        103, _Internal::clear_changes(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.ClearExportedResources.Response clear_exported_resources = 104;
  if (this->has_clear_exported_resources()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        104, _Internal::clear_exported_resources(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.DeleteAttachment.Response delete_attachment = 105;
  if (this->has_delete_attachment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        105, _Internal::delete_attachment(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.DeleteMetadata.Response delete_metadata = 106;
  if (this->has_delete_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        106, _Internal::delete_metadata(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.DeleteResource.Response delete_resource = 107;
  if (this->has_delete_resource()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        107, _Internal::delete_resource(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.GetAllMetadata.Response get_all_metadata = 108;
  if (this->has_get_all_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        108, _Internal::get_all_metadata(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.GetAllPublicIds.Response get_all_public_ids = 109;
  if (this->has_get_all_public_ids()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        109, _Internal::get_all_public_ids(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.GetAllPublicIdsWithLimits.Response get_all_public_ids_with_limits = 110;
  if (this->has_get_all_public_ids_with_limits()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        110, _Internal::get_all_public_ids_with_limits(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.GetChanges.Response get_changes = 111;
  if (this->has_get_changes()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        111, _Internal::get_changes(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.GetChildrenInternalId.Response get_children_internal_id = 112;
  if (this->has_get_children_internal_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        112, _Internal::get_children_internal_id(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.GetChildrenPublicId.Response get_children_public_id = 113;
  if (this->has_get_children_public_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        113, _Internal::get_children_public_id(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.GetExportedResources.Response get_exported_resources = 114;
  if (this->has_get_exported_resources()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        114, _Internal::get_exported_resources(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.GetLastChange.Response get_last_change = 115;
  if (this->has_get_last_change()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        115, _Internal::get_last_change(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.GetLastExportedResource.Response get_last_exported_resource = 116;
  if (this->has_get_last_exported_resource()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        116, _Internal::get_last_exported_resource(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.GetMainDicomTags.Response get_main_dicom_tags = 117;
  if (this->has_get_main_dicom_tags()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        117, _Internal::get_main_dicom_tags(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.GetPublicId.Response get_public_id = 118;
  if (this->has_get_public_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        118, _Internal::get_public_id(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.GetResourcesCount.Response get_resources_count = 119;
  if (this->has_get_resources_count()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        119, _Internal::get_resources_count(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.GetResourceType.Response get_resource_type = 120;
  if (this->has_get_resource_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        120, _Internal::get_resource_type(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.GetTotalCompressedSize.Response get_total_compressed_size = 121;
  if (this->has_get_total_compressed_size()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        121, _Internal::get_total_compressed_size(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.GetTotalUncompressedSize.Response get_total_uncompressed_size = 122;
  if (this->has_get_total_uncompressed_size()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        122, _Internal::get_total_uncompressed_size(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.IsProtectedPatient.Response is_protected_patient = 123;
  if (this->has_is_protected_patient()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        123, _Internal::is_protected_patient(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.ListAvailableAttachments.Response list_available_attachments = 124;
  if (this->has_list_available_attachments()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        124, _Internal::list_available_attachments(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.LogChange.Response log_change = 125;
  if (this->has_log_change()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        125, _Internal::log_change(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.LogExportedResource.Response log_exported_resource = 126;
  if (this->has_log_exported_resource()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        126, _Internal::log_exported_resource(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.LookupAttachment.Response lookup_attachment = 127;
  if (this->has_lookup_attachment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        127, _Internal::lookup_attachment(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.LookupGlobalProperty.Response lookup_global_property = 128;
  if (this->has_lookup_global_property()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        128, _Internal::lookup_global_property(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.LookupMetadata.Response lookup_metadata = 129;
  if (this->has_lookup_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        129, _Internal::lookup_metadata(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.LookupParent.Response lookup_parent = 130;
  if (this->has_lookup_parent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        130, _Internal::lookup_parent(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.LookupResource.Response lookup_resource = 131;
  if (this->has_lookup_resource()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        131, _Internal::lookup_resource(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.SelectPatientToRecycle.Response select_patient_to_recycle = 132;
  if (this->has_select_patient_to_recycle()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        132, _Internal::select_patient_to_recycle(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.SelectPatientToRecycleWithAvoid.Response select_patient_to_recycle_with_avoid = 133;
  if (this->has_select_patient_to_recycle_with_avoid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        133, _Internal::select_patient_to_recycle_with_avoid(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.SetGlobalProperty.Response set_global_property = 134;
  if (this->has_set_global_property()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        134, _Internal::set_global_property(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.ClearMainDicomTags.Response clear_main_dicom_tags = 135;
  if (this->has_clear_main_dicom_tags()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        135, _Internal::clear_main_dicom_tags(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.SetMetadata.Response set_metadata = 136;
  if (this->has_set_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        136, _Internal::set_metadata(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.SetProtectedPatient.Response set_protected_patient = 137;
  if (this->has_set_protected_patient()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        137, _Internal::set_protected_patient(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.IsDiskSizeAbove.Response is_disk_size_above = 138;
  if (this->has_is_disk_size_above()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        138, _Internal::is_disk_size_above(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.LookupResources.Response lookup_resources = 139;
  if (this->has_lookup_resources()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        139, _Internal::lookup_resources(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.CreateInstance.Response create_instance = 140;
  if (this->has_create_instance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        140, _Internal::create_instance(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.SetResourcesContent.Response set_resources_content = 141;
  if (this->has_set_resources_content()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        141, _Internal::set_resources_content(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.GetChildrenMetadata.Response get_children_metadata = 142;
  if (this->has_get_children_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        142, _Internal::get_children_metadata(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.GetLastChangeIndex.Response get_last_change_index = 143;
  if (this->has_get_last_change_index()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        143, _Internal::get_last_change_index(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.LookupResourceAndParent.Response lookup_resource_and_parent = 144;
  if (this->has_lookup_resource_and_parent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        144, _Internal::lookup_resource_and_parent(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.AddLabel.Response add_label = 145;
  if (this->has_add_label()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        145, _Internal::add_label(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.RemoveLabel.Response remove_label = 146;
  if (this->has_remove_label()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        146, _Internal::remove_label(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.ListLabels.Response list_labels = 147;
  if (this->has_list_labels()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        147, _Internal::list_labels(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.IncrementGlobalProperty.Response increment_global_property = 148;
  if (this->has_increment_global_property()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        148, _Internal::increment_global_property(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.UpdateAndGetStatistics.Response update_and_get_statistics = 149;
  if (this->has_update_and_get_statistics()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        149, _Internal::update_and_get_statistics(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.TransactionResponse)
  return target;
}

size_t TransactionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.TransactionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Orthanc.DatabasePluginMessages.Rollback.Response rollback = 100;
  if (this->has_rollback()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rollback_);
  }

  // .Orthanc.DatabasePluginMessages.Commit.Response commit = 101;
  if (this->has_commit()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *commit_);
  }

  // .Orthanc.DatabasePluginMessages.AddAttachment.Response add_attachment = 102;
  if (this->has_add_attachment()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *add_attachment_);
  }

  // .Orthanc.DatabasePluginMessages.ClearChanges.Response clear_changes = 103;
  if (this->has_clear_changes()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *clear_changes_);
  }

  // .Orthanc.DatabasePluginMessages.ClearExportedResources.Response clear_exported_resources = 104;
  if (this->has_clear_exported_resources()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *clear_exported_resources_);
  }

  // .Orthanc.DatabasePluginMessages.DeleteAttachment.Response delete_attachment = 105;
  if (this->has_delete_attachment()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *delete_attachment_);
  }

  // .Orthanc.DatabasePluginMessages.DeleteMetadata.Response delete_metadata = 106;
  if (this->has_delete_metadata()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *delete_metadata_);
  }

  // .Orthanc.DatabasePluginMessages.DeleteResource.Response delete_resource = 107;
  if (this->has_delete_resource()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *delete_resource_);
  }

  // .Orthanc.DatabasePluginMessages.GetAllMetadata.Response get_all_metadata = 108;
  if (this->has_get_all_metadata()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *get_all_metadata_);
  }

  // .Orthanc.DatabasePluginMessages.GetAllPublicIds.Response get_all_public_ids = 109;
  if (this->has_get_all_public_ids()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *get_all_public_ids_);
  }

  // .Orthanc.DatabasePluginMessages.GetAllPublicIdsWithLimits.Response get_all_public_ids_with_limits = 110;
  if (this->has_get_all_public_ids_with_limits()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *get_all_public_ids_with_limits_);
  }

  // .Orthanc.DatabasePluginMessages.GetChanges.Response get_changes = 111;
  if (this->has_get_changes()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *get_changes_);
  }

  // .Orthanc.DatabasePluginMessages.GetChildrenInternalId.Response get_children_internal_id = 112;
  if (this->has_get_children_internal_id()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *get_children_internal_id_);
  }

  // .Orthanc.DatabasePluginMessages.GetChildrenPublicId.Response get_children_public_id = 113;
  if (this->has_get_children_public_id()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *get_children_public_id_);
  }

  // .Orthanc.DatabasePluginMessages.GetExportedResources.Response get_exported_resources = 114;
  if (this->has_get_exported_resources()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *get_exported_resources_);
  }

  // .Orthanc.DatabasePluginMessages.GetLastChange.Response get_last_change = 115;
  if (this->has_get_last_change()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *get_last_change_);
  }

  // .Orthanc.DatabasePluginMessages.GetLastExportedResource.Response get_last_exported_resource = 116;
  if (this->has_get_last_exported_resource()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *get_last_exported_resource_);
  }

  // .Orthanc.DatabasePluginMessages.GetMainDicomTags.Response get_main_dicom_tags = 117;
  if (this->has_get_main_dicom_tags()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *get_main_dicom_tags_);
  }

  // .Orthanc.DatabasePluginMessages.GetPublicId.Response get_public_id = 118;
  if (this->has_get_public_id()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *get_public_id_);
  }

  // .Orthanc.DatabasePluginMessages.GetResourcesCount.Response get_resources_count = 119;
  if (this->has_get_resources_count()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *get_resources_count_);
  }

  // .Orthanc.DatabasePluginMessages.GetResourceType.Response get_resource_type = 120;
  if (this->has_get_resource_type()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *get_resource_type_);
  }

  // .Orthanc.DatabasePluginMessages.GetTotalCompressedSize.Response get_total_compressed_size = 121;
  if (this->has_get_total_compressed_size()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *get_total_compressed_size_);
  }

  // .Orthanc.DatabasePluginMessages.GetTotalUncompressedSize.Response get_total_uncompressed_size = 122;
  if (this->has_get_total_uncompressed_size()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *get_total_uncompressed_size_);
  }

  // .Orthanc.DatabasePluginMessages.IsProtectedPatient.Response is_protected_patient = 123;
  if (this->has_is_protected_patient()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *is_protected_patient_);
  }

  // .Orthanc.DatabasePluginMessages.ListAvailableAttachments.Response list_available_attachments = 124;
  if (this->has_list_available_attachments()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *list_available_attachments_);
  }

  // .Orthanc.DatabasePluginMessages.LogChange.Response log_change = 125;
  if (this->has_log_change()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *log_change_);
  }

  // .Orthanc.DatabasePluginMessages.LogExportedResource.Response log_exported_resource = 126;
  if (this->has_log_exported_resource()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *log_exported_resource_);
  }

  // .Orthanc.DatabasePluginMessages.LookupAttachment.Response lookup_attachment = 127;
  if (this->has_lookup_attachment()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lookup_attachment_);
  }

  // .Orthanc.DatabasePluginMessages.LookupGlobalProperty.Response lookup_global_property = 128;
  if (this->has_lookup_global_property()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lookup_global_property_);
  }

  // .Orthanc.DatabasePluginMessages.LookupMetadata.Response lookup_metadata = 129;
  if (this->has_lookup_metadata()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lookup_metadata_);
  }

  // .Orthanc.DatabasePluginMessages.LookupParent.Response lookup_parent = 130;
  if (this->has_lookup_parent()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lookup_parent_);
  }

  // .Orthanc.DatabasePluginMessages.LookupResource.Response lookup_resource = 131;
  if (this->has_lookup_resource()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lookup_resource_);
  }

  // .Orthanc.DatabasePluginMessages.SelectPatientToRecycle.Response select_patient_to_recycle = 132;
  if (this->has_select_patient_to_recycle()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *select_patient_to_recycle_);
  }

  // .Orthanc.DatabasePluginMessages.SelectPatientToRecycleWithAvoid.Response select_patient_to_recycle_with_avoid = 133;
  if (this->has_select_patient_to_recycle_with_avoid()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *select_patient_to_recycle_with_avoid_);
  }

  // .Orthanc.DatabasePluginMessages.SetGlobalProperty.Response set_global_property = 134;
  if (this->has_set_global_property()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *set_global_property_);
  }

  // .Orthanc.DatabasePluginMessages.ClearMainDicomTags.Response clear_main_dicom_tags = 135;
  if (this->has_clear_main_dicom_tags()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *clear_main_dicom_tags_);
  }

  // .Orthanc.DatabasePluginMessages.SetMetadata.Response set_metadata = 136;
  if (this->has_set_metadata()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *set_metadata_);
  }

  // .Orthanc.DatabasePluginMessages.SetProtectedPatient.Response set_protected_patient = 137;
  if (this->has_set_protected_patient()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *set_protected_patient_);
  }

  // .Orthanc.DatabasePluginMessages.IsDiskSizeAbove.Response is_disk_size_above = 138;
  if (this->has_is_disk_size_above()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *is_disk_size_above_);
  }

  // .Orthanc.DatabasePluginMessages.LookupResources.Response lookup_resources = 139;
  if (this->has_lookup_resources()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lookup_resources_);
  }

  // .Orthanc.DatabasePluginMessages.CreateInstance.Response create_instance = 140;
  if (this->has_create_instance()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *create_instance_);
  }

  // .Orthanc.DatabasePluginMessages.SetResourcesContent.Response set_resources_content = 141;
  if (this->has_set_resources_content()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *set_resources_content_);
  }

  // .Orthanc.DatabasePluginMessages.GetChildrenMetadata.Response get_children_metadata = 142;
  if (this->has_get_children_metadata()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *get_children_metadata_);
  }

  // .Orthanc.DatabasePluginMessages.GetLastChangeIndex.Response get_last_change_index = 143;
  if (this->has_get_last_change_index()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *get_last_change_index_);
  }

  // .Orthanc.DatabasePluginMessages.LookupResourceAndParent.Response lookup_resource_and_parent = 144;
  if (this->has_lookup_resource_and_parent()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lookup_resource_and_parent_);
  }

  // .Orthanc.DatabasePluginMessages.AddLabel.Response add_label = 145;
  if (this->has_add_label()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *add_label_);
  }

  // .Orthanc.DatabasePluginMessages.RemoveLabel.Response remove_label = 146;
  if (this->has_remove_label()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *remove_label_);
  }

  // .Orthanc.DatabasePluginMessages.ListLabels.Response list_labels = 147;
  if (this->has_list_labels()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *list_labels_);
  }

  // .Orthanc.DatabasePluginMessages.IncrementGlobalProperty.Response increment_global_property = 148;
  if (this->has_increment_global_property()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *increment_global_property_);
  }

  // .Orthanc.DatabasePluginMessages.UpdateAndGetStatistics.Response update_and_get_statistics = 149;
  if (this->has_update_and_get_statistics()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *update_and_get_statistics_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransactionResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TransactionResponse*>(
      &from));
}

void TransactionResponse::MergeFrom(const TransactionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.TransactionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_rollback()) {
    _internal_mutable_rollback()->::Orthanc::DatabasePluginMessages::Rollback_Response::MergeFrom(from._internal_rollback());
  }
  if (from.has_commit()) {
    _internal_mutable_commit()->::Orthanc::DatabasePluginMessages::Commit_Response::MergeFrom(from._internal_commit());
  }
  if (from.has_add_attachment()) {
    _internal_mutable_add_attachment()->::Orthanc::DatabasePluginMessages::AddAttachment_Response::MergeFrom(from._internal_add_attachment());
  }
  if (from.has_clear_changes()) {
    _internal_mutable_clear_changes()->::Orthanc::DatabasePluginMessages::ClearChanges_Response::MergeFrom(from._internal_clear_changes());
  }
  if (from.has_clear_exported_resources()) {
    _internal_mutable_clear_exported_resources()->::Orthanc::DatabasePluginMessages::ClearExportedResources_Response::MergeFrom(from._internal_clear_exported_resources());
  }
  if (from.has_delete_attachment()) {
    _internal_mutable_delete_attachment()->::Orthanc::DatabasePluginMessages::DeleteAttachment_Response::MergeFrom(from._internal_delete_attachment());
  }
  if (from.has_delete_metadata()) {
    _internal_mutable_delete_metadata()->::Orthanc::DatabasePluginMessages::DeleteMetadata_Response::MergeFrom(from._internal_delete_metadata());
  }
  if (from.has_delete_resource()) {
    _internal_mutable_delete_resource()->::Orthanc::DatabasePluginMessages::DeleteResource_Response::MergeFrom(from._internal_delete_resource());
  }
  if (from.has_get_all_metadata()) {
    _internal_mutable_get_all_metadata()->::Orthanc::DatabasePluginMessages::GetAllMetadata_Response::MergeFrom(from._internal_get_all_metadata());
  }
  if (from.has_get_all_public_ids()) {
    _internal_mutable_get_all_public_ids()->::Orthanc::DatabasePluginMessages::GetAllPublicIds_Response::MergeFrom(from._internal_get_all_public_ids());
  }
  if (from.has_get_all_public_ids_with_limits()) {
    _internal_mutable_get_all_public_ids_with_limits()->::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits_Response::MergeFrom(from._internal_get_all_public_ids_with_limits());
  }
  if (from.has_get_changes()) {
    _internal_mutable_get_changes()->::Orthanc::DatabasePluginMessages::GetChanges_Response::MergeFrom(from._internal_get_changes());
  }
  if (from.has_get_children_internal_id()) {
    _internal_mutable_get_children_internal_id()->::Orthanc::DatabasePluginMessages::GetChildrenInternalId_Response::MergeFrom(from._internal_get_children_internal_id());
  }
  if (from.has_get_children_public_id()) {
    _internal_mutable_get_children_public_id()->::Orthanc::DatabasePluginMessages::GetChildrenPublicId_Response::MergeFrom(from._internal_get_children_public_id());
  }
  if (from.has_get_exported_resources()) {
    _internal_mutable_get_exported_resources()->::Orthanc::DatabasePluginMessages::GetExportedResources_Response::MergeFrom(from._internal_get_exported_resources());
  }
  if (from.has_get_last_change()) {
    _internal_mutable_get_last_change()->::Orthanc::DatabasePluginMessages::GetLastChange_Response::MergeFrom(from._internal_get_last_change());
  }
  if (from.has_get_last_exported_resource()) {
    _internal_mutable_get_last_exported_resource()->::Orthanc::DatabasePluginMessages::GetLastExportedResource_Response::MergeFrom(from._internal_get_last_exported_resource());
  }
  if (from.has_get_main_dicom_tags()) {
    _internal_mutable_get_main_dicom_tags()->::Orthanc::DatabasePluginMessages::GetMainDicomTags_Response::MergeFrom(from._internal_get_main_dicom_tags());
  }
  if (from.has_get_public_id()) {
    _internal_mutable_get_public_id()->::Orthanc::DatabasePluginMessages::GetPublicId_Response::MergeFrom(from._internal_get_public_id());
  }
  if (from.has_get_resources_count()) {
    _internal_mutable_get_resources_count()->::Orthanc::DatabasePluginMessages::GetResourcesCount_Response::MergeFrom(from._internal_get_resources_count());
  }
  if (from.has_get_resource_type()) {
    _internal_mutable_get_resource_type()->::Orthanc::DatabasePluginMessages::GetResourceType_Response::MergeFrom(from._internal_get_resource_type());
  }
  if (from.has_get_total_compressed_size()) {
    _internal_mutable_get_total_compressed_size()->::Orthanc::DatabasePluginMessages::GetTotalCompressedSize_Response::MergeFrom(from._internal_get_total_compressed_size());
  }
  if (from.has_get_total_uncompressed_size()) {
    _internal_mutable_get_total_uncompressed_size()->::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize_Response::MergeFrom(from._internal_get_total_uncompressed_size());
  }
  if (from.has_is_protected_patient()) {
    _internal_mutable_is_protected_patient()->::Orthanc::DatabasePluginMessages::IsProtectedPatient_Response::MergeFrom(from._internal_is_protected_patient());
  }
  if (from.has_list_available_attachments()) {
    _internal_mutable_list_available_attachments()->::Orthanc::DatabasePluginMessages::ListAvailableAttachments_Response::MergeFrom(from._internal_list_available_attachments());
  }
  if (from.has_log_change()) {
    _internal_mutable_log_change()->::Orthanc::DatabasePluginMessages::LogChange_Response::MergeFrom(from._internal_log_change());
  }
  if (from.has_log_exported_resource()) {
    _internal_mutable_log_exported_resource()->::Orthanc::DatabasePluginMessages::LogExportedResource_Response::MergeFrom(from._internal_log_exported_resource());
  }
  if (from.has_lookup_attachment()) {
    _internal_mutable_lookup_attachment()->::Orthanc::DatabasePluginMessages::LookupAttachment_Response::MergeFrom(from._internal_lookup_attachment());
  }
  if (from.has_lookup_global_property()) {
    _internal_mutable_lookup_global_property()->::Orthanc::DatabasePluginMessages::LookupGlobalProperty_Response::MergeFrom(from._internal_lookup_global_property());
  }
  if (from.has_lookup_metadata()) {
    _internal_mutable_lookup_metadata()->::Orthanc::DatabasePluginMessages::LookupMetadata_Response::MergeFrom(from._internal_lookup_metadata());
  }
  if (from.has_lookup_parent()) {
    _internal_mutable_lookup_parent()->::Orthanc::DatabasePluginMessages::LookupParent_Response::MergeFrom(from._internal_lookup_parent());
  }
  if (from.has_lookup_resource()) {
    _internal_mutable_lookup_resource()->::Orthanc::DatabasePluginMessages::LookupResource_Response::MergeFrom(from._internal_lookup_resource());
  }
  if (from.has_select_patient_to_recycle()) {
    _internal_mutable_select_patient_to_recycle()->::Orthanc::DatabasePluginMessages::SelectPatientToRecycle_Response::MergeFrom(from._internal_select_patient_to_recycle());
  }
  if (from.has_select_patient_to_recycle_with_avoid()) {
    _internal_mutable_select_patient_to_recycle_with_avoid()->::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid_Response::MergeFrom(from._internal_select_patient_to_recycle_with_avoid());
  }
  if (from.has_set_global_property()) {
    _internal_mutable_set_global_property()->::Orthanc::DatabasePluginMessages::SetGlobalProperty_Response::MergeFrom(from._internal_set_global_property());
  }
  if (from.has_clear_main_dicom_tags()) {
    _internal_mutable_clear_main_dicom_tags()->::Orthanc::DatabasePluginMessages::ClearMainDicomTags_Response::MergeFrom(from._internal_clear_main_dicom_tags());
  }
  if (from.has_set_metadata()) {
    _internal_mutable_set_metadata()->::Orthanc::DatabasePluginMessages::SetMetadata_Response::MergeFrom(from._internal_set_metadata());
  }
  if (from.has_set_protected_patient()) {
    _internal_mutable_set_protected_patient()->::Orthanc::DatabasePluginMessages::SetProtectedPatient_Response::MergeFrom(from._internal_set_protected_patient());
  }
  if (from.has_is_disk_size_above()) {
    _internal_mutable_is_disk_size_above()->::Orthanc::DatabasePluginMessages::IsDiskSizeAbove_Response::MergeFrom(from._internal_is_disk_size_above());
  }
  if (from.has_lookup_resources()) {
    _internal_mutable_lookup_resources()->::Orthanc::DatabasePluginMessages::LookupResources_Response::MergeFrom(from._internal_lookup_resources());
  }
  if (from.has_create_instance()) {
    _internal_mutable_create_instance()->::Orthanc::DatabasePluginMessages::CreateInstance_Response::MergeFrom(from._internal_create_instance());
  }
  if (from.has_set_resources_content()) {
    _internal_mutable_set_resources_content()->::Orthanc::DatabasePluginMessages::SetResourcesContent_Response::MergeFrom(from._internal_set_resources_content());
  }
  if (from.has_get_children_metadata()) {
    _internal_mutable_get_children_metadata()->::Orthanc::DatabasePluginMessages::GetChildrenMetadata_Response::MergeFrom(from._internal_get_children_metadata());
  }
  if (from.has_get_last_change_index()) {
    _internal_mutable_get_last_change_index()->::Orthanc::DatabasePluginMessages::GetLastChangeIndex_Response::MergeFrom(from._internal_get_last_change_index());
  }
  if (from.has_lookup_resource_and_parent()) {
    _internal_mutable_lookup_resource_and_parent()->::Orthanc::DatabasePluginMessages::LookupResourceAndParent_Response::MergeFrom(from._internal_lookup_resource_and_parent());
  }
  if (from.has_add_label()) {
    _internal_mutable_add_label()->::Orthanc::DatabasePluginMessages::AddLabel_Response::MergeFrom(from._internal_add_label());
  }
  if (from.has_remove_label()) {
    _internal_mutable_remove_label()->::Orthanc::DatabasePluginMessages::RemoveLabel_Response::MergeFrom(from._internal_remove_label());
  }
  if (from.has_list_labels()) {
    _internal_mutable_list_labels()->::Orthanc::DatabasePluginMessages::ListLabels_Response::MergeFrom(from._internal_list_labels());
  }
  if (from.has_increment_global_property()) {
    _internal_mutable_increment_global_property()->::Orthanc::DatabasePluginMessages::IncrementGlobalProperty_Response::MergeFrom(from._internal_increment_global_property());
  }
  if (from.has_update_and_get_statistics()) {
    _internal_mutable_update_and_get_statistics()->::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics_Response::MergeFrom(from._internal_update_and_get_statistics());
  }
}

void TransactionResponse::CopyFrom(const TransactionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.TransactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionResponse::IsInitialized() const {
  return true;
}

void TransactionResponse::InternalSwap(TransactionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransactionResponse, update_and_get_statistics_)
      + sizeof(TransactionResponse::update_and_get_statistics_)
      - PROTOBUF_FIELD_OFFSET(TransactionResponse, rollback_)>(
          reinterpret_cast<char*>(&rollback_),
          reinterpret_cast<char*>(&other->rollback_));
}

std::string TransactionResponse::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.TransactionResponse";
}


// ===================================================================

void Request::InitAsDefaultInstance() {
  ::Orthanc::DatabasePluginMessages::_Request_default_instance_._instance.get_mutable()->database_request_ = const_cast< ::Orthanc::DatabasePluginMessages::DatabaseRequest*>(
      ::Orthanc::DatabasePluginMessages::DatabaseRequest::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_Request_default_instance_._instance.get_mutable()->transaction_request_ = const_cast< ::Orthanc::DatabasePluginMessages::TransactionRequest*>(
      ::Orthanc::DatabasePluginMessages::TransactionRequest::internal_default_instance());
}
class Request::_Internal {
 public:
  static const ::Orthanc::DatabasePluginMessages::DatabaseRequest& database_request(const Request* msg);
  static const ::Orthanc::DatabasePluginMessages::TransactionRequest& transaction_request(const Request* msg);
};

const ::Orthanc::DatabasePluginMessages::DatabaseRequest&
Request::_Internal::database_request(const Request* msg) {
  return *msg->database_request_;
}
const ::Orthanc::DatabasePluginMessages::TransactionRequest&
Request::_Internal::transaction_request(const Request* msg) {
  return *msg->transaction_request_;
}
Request::Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.Request)
}
Request::Request(const Request& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_database_request()) {
    database_request_ = new ::Orthanc::DatabasePluginMessages::DatabaseRequest(*from.database_request_);
  } else {
    database_request_ = nullptr;
  }
  if (from._internal_has_transaction_request()) {
    transaction_request_ = new ::Orthanc::DatabasePluginMessages::TransactionRequest(*from.transaction_request_);
  } else {
    transaction_request_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.Request)
}

void Request::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Request_OrthancDatabasePlugin_2eproto.base);
  ::memset(&database_request_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&database_request_)) + sizeof(type_));
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.Request)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete database_request_;
  if (this != internal_default_instance()) delete transaction_request_;
}

void Request::ArenaDtor(void* object) {
  Request* _this = reinterpret_cast< Request* >(object);
  (void)_this;
}
void Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Request& Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Request_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && database_request_ != nullptr) {
    delete database_request_;
  }
  database_request_ = nullptr;
  if (GetArena() == nullptr && transaction_request_ != nullptr) {
    delete transaction_request_;
  }
  transaction_request_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Orthanc.DatabasePluginMessages.RequestType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::Orthanc::DatabasePluginMessages::RequestType>(val));
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.DatabaseRequest database_request = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_database_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.TransactionRequest transaction_request = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_transaction_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Orthanc.DatabasePluginMessages.RequestType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .Orthanc.DatabasePluginMessages.DatabaseRequest database_request = 2;
  if (this->has_database_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::database_request(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.TransactionRequest transaction_request = 3;
  if (this->has_transaction_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::transaction_request(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.Request)
  return target;
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Orthanc.DatabasePluginMessages.DatabaseRequest database_request = 2;
  if (this->has_database_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *database_request_);
  }

  // .Orthanc.DatabasePluginMessages.TransactionRequest transaction_request = 3;
  if (this->has_transaction_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transaction_request_);
  }

  // .Orthanc.DatabasePluginMessages.RequestType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Request*>(
      &from));
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_database_request()) {
    _internal_mutable_database_request()->::Orthanc::DatabasePluginMessages::DatabaseRequest::MergeFrom(from._internal_database_request());
  }
  if (from.has_transaction_request()) {
    _internal_mutable_transaction_request()->::Orthanc::DatabasePluginMessages::TransactionRequest::MergeFrom(from._internal_transaction_request());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  return true;
}

void Request::InternalSwap(Request* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Request, type_)
      + sizeof(Request::type_)
      - PROTOBUF_FIELD_OFFSET(Request, database_request_)>(
          reinterpret_cast<char*>(&database_request_),
          reinterpret_cast<char*>(&other->database_request_));
}

std::string Request::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.Request";
}


// ===================================================================

void Response::InitAsDefaultInstance() {
  ::Orthanc::DatabasePluginMessages::_Response_default_instance_._instance.get_mutable()->database_response_ = const_cast< ::Orthanc::DatabasePluginMessages::DatabaseResponse*>(
      ::Orthanc::DatabasePluginMessages::DatabaseResponse::internal_default_instance());
  ::Orthanc::DatabasePluginMessages::_Response_default_instance_._instance.get_mutable()->transaction_response_ = const_cast< ::Orthanc::DatabasePluginMessages::TransactionResponse*>(
      ::Orthanc::DatabasePluginMessages::TransactionResponse::internal_default_instance());
}
class Response::_Internal {
 public:
  static const ::Orthanc::DatabasePluginMessages::DatabaseResponse& database_response(const Response* msg);
  static const ::Orthanc::DatabasePluginMessages::TransactionResponse& transaction_response(const Response* msg);
};

const ::Orthanc::DatabasePluginMessages::DatabaseResponse&
Response::_Internal::database_response(const Response* msg) {
  return *msg->database_response_;
}
const ::Orthanc::DatabasePluginMessages::TransactionResponse&
Response::_Internal::transaction_response(const Response* msg) {
  return *msg->transaction_response_;
}
Response::Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Orthanc.DatabasePluginMessages.Response)
}
Response::Response(const Response& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_database_response()) {
    database_response_ = new ::Orthanc::DatabasePluginMessages::DatabaseResponse(*from.database_response_);
  } else {
    database_response_ = nullptr;
  }
  if (from._internal_has_transaction_response()) {
    transaction_response_ = new ::Orthanc::DatabasePluginMessages::TransactionResponse(*from.transaction_response_);
  } else {
    transaction_response_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Orthanc.DatabasePluginMessages.Response)
}

void Response::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Response_OrthancDatabasePlugin_2eproto.base);
  ::memset(&database_response_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&transaction_response_) -
      reinterpret_cast<char*>(&database_response_)) + sizeof(transaction_response_));
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:Orthanc.DatabasePluginMessages.Response)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete database_response_;
  if (this != internal_default_instance()) delete transaction_response_;
}

void Response::ArenaDtor(void* object) {
  Response* _this = reinterpret_cast< Response* >(object);
  (void)_this;
}
void Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Response& Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Response_OrthancDatabasePlugin_2eproto.base);
  return *internal_default_instance();
}


void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Orthanc.DatabasePluginMessages.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && database_response_ != nullptr) {
    delete database_response_;
  }
  database_response_ = nullptr;
  if (GetArena() == nullptr && transaction_response_ != nullptr) {
    delete transaction_response_;
  }
  transaction_response_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Orthanc.DatabasePluginMessages.DatabaseResponse database_response = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_database_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Orthanc.DatabasePluginMessages.TransactionResponse transaction_response = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_transaction_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Orthanc.DatabasePluginMessages.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Orthanc.DatabasePluginMessages.DatabaseResponse database_response = 2;
  if (this->has_database_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::database_response(this), target, stream);
  }

  // .Orthanc.DatabasePluginMessages.TransactionResponse transaction_response = 3;
  if (this->has_transaction_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::transaction_response(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Orthanc.DatabasePluginMessages.Response)
  return target;
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Orthanc.DatabasePluginMessages.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Orthanc.DatabasePluginMessages.DatabaseResponse database_response = 2;
  if (this->has_database_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *database_response_);
  }

  // .Orthanc.DatabasePluginMessages.TransactionResponse transaction_response = 3;
  if (this->has_transaction_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transaction_response_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Response::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Response*>(
      &from));
}

void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Orthanc.DatabasePluginMessages.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_database_response()) {
    _internal_mutable_database_response()->::Orthanc::DatabasePluginMessages::DatabaseResponse::MergeFrom(from._internal_database_response());
  }
  if (from.has_transaction_response()) {
    _internal_mutable_transaction_response()->::Orthanc::DatabasePluginMessages::TransactionResponse::MergeFrom(from._internal_transaction_response());
  }
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Orthanc.DatabasePluginMessages.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  return true;
}

void Response::InternalSwap(Response* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Response, transaction_response_)
      + sizeof(Response::transaction_response_)
      - PROTOBUF_FIELD_OFFSET(Response, database_response_)>(
          reinterpret_cast<char*>(&database_response_),
          reinterpret_cast<char*>(&other->database_response_));
}

std::string Response::GetTypeName() const {
  return "Orthanc.DatabasePluginMessages.Response";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace DatabasePluginMessages
}  // namespace Orthanc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::FileInfo* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::FileInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::FileInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::ServerIndexChange* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::ServerIndexChange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::ServerIndexChange >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::ExportedResource* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::ExportedResource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::ExportedResource >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::DatabaseConstraint* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::DatabaseConstraint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::DatabaseConstraint >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::GetSystemInformation_Request* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::GetSystemInformation_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::GetSystemInformation_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::GetSystemInformation_Response* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::GetSystemInformation_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::GetSystemInformation_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::GetSystemInformation* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::GetSystemInformation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::GetSystemInformation >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::Open_Request_IdentifierTag* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::Open_Request_IdentifierTag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::Open_Request_IdentifierTag >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::Open_Request* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::Open_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::Open_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::Open_Response* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::Open_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::Open_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::Open* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::Open >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::Open >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::Close_Request* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::Close_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::Close_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::Close_Response* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::Close_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::Close_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::Close* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::Close >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::Close >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::FlushToDisk_Request* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::FlushToDisk_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::FlushToDisk_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::FlushToDisk_Response* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::FlushToDisk_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::FlushToDisk_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::FlushToDisk* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::FlushToDisk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::FlushToDisk >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::StartTransaction_Request* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::StartTransaction_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::StartTransaction_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::StartTransaction_Response* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::StartTransaction_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::StartTransaction_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::StartTransaction* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::StartTransaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::StartTransaction >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::Upgrade_Request* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::Upgrade_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::Upgrade_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::Upgrade_Response* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::Upgrade_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::Upgrade_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::Upgrade* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::Upgrade >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::Upgrade >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::FinalizeTransaction_Request* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::FinalizeTransaction_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::FinalizeTransaction_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::FinalizeTransaction_Response* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::FinalizeTransaction_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::FinalizeTransaction_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::FinalizeTransaction* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::FinalizeTransaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::FinalizeTransaction >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::MeasureLatency_Request* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::MeasureLatency_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::MeasureLatency_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::MeasureLatency_Response* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::MeasureLatency_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::MeasureLatency_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::MeasureLatency* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::MeasureLatency >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::MeasureLatency >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::DatabaseRequest* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::DatabaseRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::DatabaseRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::DatabaseResponse* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::DatabaseResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::DatabaseResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::Rollback_Request* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::Rollback_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::Rollback_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::Rollback_Response* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::Rollback_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::Rollback_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::Rollback* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::Rollback >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::Rollback >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::Commit_Request* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::Commit_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::Commit_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::Commit_Response* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::Commit_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::Commit_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::Commit* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::Commit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::Commit >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::AddAttachment_Request* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::AddAttachment_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::AddAttachment_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::AddAttachment_Response* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::AddAttachment_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::AddAttachment_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::AddAttachment* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::AddAttachment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::AddAttachment >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::ClearChanges_Request* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::ClearChanges_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::ClearChanges_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::ClearChanges_Response* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::ClearChanges_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::ClearChanges_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::ClearChanges* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::ClearChanges >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::ClearChanges >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::ClearExportedResources_Request* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::ClearExportedResources_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::ClearExportedResources_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::ClearExportedResources_Response* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::ClearExportedResources_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::ClearExportedResources_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::ClearExportedResources* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::ClearExportedResources >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::ClearExportedResources >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::DeleteAttachment_Request* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::DeleteAttachment_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::DeleteAttachment_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::DeleteAttachment_Response* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::DeleteAttachment_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::DeleteAttachment_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::DeleteAttachment* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::DeleteAttachment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::DeleteAttachment >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::DeleteMetadata_Request* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::DeleteMetadata_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::DeleteMetadata_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::DeleteMetadata_Response* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::DeleteMetadata_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::DeleteMetadata_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::DeleteMetadata* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::DeleteMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::DeleteMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::DeleteResource_Request* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::DeleteResource_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::DeleteResource_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::DeleteResource_Response_Resource* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::DeleteResource_Response_Resource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::DeleteResource_Response_Resource >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::DeleteResource_Response* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::DeleteResource_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::DeleteResource_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::DeleteResource* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::DeleteResource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::DeleteResource >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::GetAllMetadata_Request* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::GetAllMetadata_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::GetAllMetadata_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::GetAllMetadata_Response_Metadata* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::GetAllMetadata_Response_Metadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::GetAllMetadata_Response_Metadata >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::GetAllMetadata_Response* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::GetAllMetadata_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::GetAllMetadata_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::GetAllMetadata* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::GetAllMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::GetAllMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::GetAllPublicIds_Request* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::GetAllPublicIds_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::GetAllPublicIds_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::GetAllPublicIds_Response* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::GetAllPublicIds_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::GetAllPublicIds_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::GetAllPublicIds* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::GetAllPublicIds >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::GetAllPublicIds >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits_Request* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits_Response* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::GetChanges_Request* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::GetChanges_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::GetChanges_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::GetChanges_Response* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::GetChanges_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::GetChanges_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::GetChanges* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::GetChanges >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::GetChanges >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::GetChildrenInternalId_Request* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::GetChildrenInternalId_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::GetChildrenInternalId_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::GetChildrenInternalId_Response* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::GetChildrenInternalId_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::GetChildrenInternalId_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::GetChildrenInternalId* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::GetChildrenInternalId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::GetChildrenInternalId >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::GetChildrenPublicId_Request* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::GetChildrenPublicId_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::GetChildrenPublicId_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::GetChildrenPublicId_Response* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::GetChildrenPublicId_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::GetChildrenPublicId_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::GetChildrenPublicId* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::GetChildrenPublicId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::GetChildrenPublicId >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::GetExportedResources_Request* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::GetExportedResources_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::GetExportedResources_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::GetExportedResources_Response* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::GetExportedResources_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::GetExportedResources_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::GetExportedResources* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::GetExportedResources >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::GetExportedResources >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::GetLastChange_Request* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::GetLastChange_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::GetLastChange_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::GetLastChange_Response* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::GetLastChange_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::GetLastChange_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::GetLastChange* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::GetLastChange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::GetLastChange >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::GetLastExportedResource_Request* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::GetLastExportedResource_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::GetLastExportedResource_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::GetLastExportedResource_Response* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::GetLastExportedResource_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::GetLastExportedResource_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::GetLastExportedResource* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::GetLastExportedResource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::GetLastExportedResource >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Request* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Response_Tag* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Response_Tag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Response_Tag >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Response* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::GetMainDicomTags* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::GetMainDicomTags >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::GetMainDicomTags >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::GetPublicId_Request* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::GetPublicId_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::GetPublicId_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::GetPublicId_Response* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::GetPublicId_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::GetPublicId_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::GetPublicId* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::GetPublicId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::GetPublicId >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::GetResourcesCount_Request* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::GetResourcesCount_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::GetResourcesCount_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::GetResourcesCount_Response* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::GetResourcesCount_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::GetResourcesCount_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::GetResourcesCount* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::GetResourcesCount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::GetResourcesCount >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::GetResourceType_Request* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::GetResourceType_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::GetResourceType_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::GetResourceType_Response* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::GetResourceType_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::GetResourceType_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::GetResourceType* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::GetResourceType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::GetResourceType >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::GetTotalCompressedSize_Request* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::GetTotalCompressedSize_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::GetTotalCompressedSize_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::GetTotalCompressedSize_Response* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::GetTotalCompressedSize_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::GetTotalCompressedSize_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::GetTotalCompressedSize* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::GetTotalCompressedSize >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::GetTotalCompressedSize >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize_Request* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize_Response* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::IsProtectedPatient_Request* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::IsProtectedPatient_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::IsProtectedPatient_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::IsProtectedPatient_Response* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::IsProtectedPatient_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::IsProtectedPatient_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::IsProtectedPatient* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::IsProtectedPatient >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::IsProtectedPatient >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::ListAvailableAttachments_Request* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::ListAvailableAttachments_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::ListAvailableAttachments_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::ListAvailableAttachments_Response* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::ListAvailableAttachments_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::ListAvailableAttachments_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::ListAvailableAttachments* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::ListAvailableAttachments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::ListAvailableAttachments >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::LogChange_Request* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::LogChange_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::LogChange_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::LogChange_Response* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::LogChange_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::LogChange_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::LogChange* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::LogChange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::LogChange >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::LogExportedResource_Request* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::LogExportedResource_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::LogExportedResource_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::LogExportedResource_Response* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::LogExportedResource_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::LogExportedResource_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::LogExportedResource* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::LogExportedResource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::LogExportedResource >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::LookupAttachment_Request* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::LookupAttachment_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::LookupAttachment_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::LookupAttachment_Response* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::LookupAttachment_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::LookupAttachment_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::LookupAttachment* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::LookupAttachment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::LookupAttachment >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::LookupGlobalProperty_Request* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::LookupGlobalProperty_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::LookupGlobalProperty_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::LookupGlobalProperty_Response* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::LookupGlobalProperty_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::LookupGlobalProperty_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::LookupGlobalProperty* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::LookupGlobalProperty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::LookupGlobalProperty >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::LookupMetadata_Request* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::LookupMetadata_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::LookupMetadata_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::LookupMetadata_Response* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::LookupMetadata_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::LookupMetadata_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::LookupMetadata* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::LookupMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::LookupMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::LookupParent_Request* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::LookupParent_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::LookupParent_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::LookupParent_Response* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::LookupParent_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::LookupParent_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::LookupParent* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::LookupParent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::LookupParent >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::LookupResource_Request* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::LookupResource_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::LookupResource_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::LookupResource_Response* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::LookupResource_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::LookupResource_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::LookupResource* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::LookupResource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::LookupResource >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::SelectPatientToRecycle_Request* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::SelectPatientToRecycle_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::SelectPatientToRecycle_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::SelectPatientToRecycle_Response* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::SelectPatientToRecycle_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::SelectPatientToRecycle_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::SelectPatientToRecycle* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::SelectPatientToRecycle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::SelectPatientToRecycle >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid_Request* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid_Response* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::SetGlobalProperty_Request* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::SetGlobalProperty_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::SetGlobalProperty_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::SetGlobalProperty_Response* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::SetGlobalProperty_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::SetGlobalProperty_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::SetGlobalProperty* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::SetGlobalProperty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::SetGlobalProperty >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::IncrementGlobalProperty_Request* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::IncrementGlobalProperty_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::IncrementGlobalProperty_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::IncrementGlobalProperty_Response* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::IncrementGlobalProperty_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::IncrementGlobalProperty_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::IncrementGlobalProperty* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::IncrementGlobalProperty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::IncrementGlobalProperty >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics_Request* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics_Response* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::ClearMainDicomTags_Request* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::ClearMainDicomTags_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::ClearMainDicomTags_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::ClearMainDicomTags_Response* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::ClearMainDicomTags_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::ClearMainDicomTags_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::ClearMainDicomTags* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::ClearMainDicomTags >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::ClearMainDicomTags >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::SetMetadata_Request* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::SetMetadata_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::SetMetadata_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::SetMetadata_Response* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::SetMetadata_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::SetMetadata_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::SetMetadata* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::SetMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::SetMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::SetProtectedPatient_Request* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::SetProtectedPatient_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::SetProtectedPatient_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::SetProtectedPatient_Response* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::SetProtectedPatient_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::SetProtectedPatient_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::SetProtectedPatient* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::SetProtectedPatient >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::SetProtectedPatient >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::IsDiskSizeAbove_Request* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::IsDiskSizeAbove_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::IsDiskSizeAbove_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::IsDiskSizeAbove_Response* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::IsDiskSizeAbove_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::IsDiskSizeAbove_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::IsDiskSizeAbove* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::IsDiskSizeAbove >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::IsDiskSizeAbove >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::LookupResources_Request* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::LookupResources_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::LookupResources_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::LookupResources_Response* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::LookupResources_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::LookupResources_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::LookupResources* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::LookupResources >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::LookupResources >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::CreateInstance_Request* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::CreateInstance_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::CreateInstance_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::CreateInstance_Response* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::CreateInstance_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::CreateInstance_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::CreateInstance* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::CreateInstance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::CreateInstance >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::SetResourcesContent_Request_Tag* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::SetResourcesContent_Request_Tag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::SetResourcesContent_Request_Tag >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::SetResourcesContent_Request_Metadata* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::SetResourcesContent_Request_Metadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::SetResourcesContent_Request_Metadata >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::SetResourcesContent_Request* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::SetResourcesContent_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::SetResourcesContent_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::SetResourcesContent_Response* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::SetResourcesContent_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::SetResourcesContent_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::SetResourcesContent* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::SetResourcesContent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::SetResourcesContent >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::GetChildrenMetadata_Request* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::GetChildrenMetadata_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::GetChildrenMetadata_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::GetChildrenMetadata_Response* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::GetChildrenMetadata_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::GetChildrenMetadata_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::GetChildrenMetadata* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::GetChildrenMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::GetChildrenMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::GetLastChangeIndex_Request* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::GetLastChangeIndex_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::GetLastChangeIndex_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::GetLastChangeIndex_Response* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::GetLastChangeIndex_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::GetLastChangeIndex_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::GetLastChangeIndex* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::GetLastChangeIndex >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::GetLastChangeIndex >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::LookupResourceAndParent_Request* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::LookupResourceAndParent_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::LookupResourceAndParent_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::LookupResourceAndParent_Response* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::LookupResourceAndParent_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::LookupResourceAndParent_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::LookupResourceAndParent* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::LookupResourceAndParent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::LookupResourceAndParent >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::AddLabel_Request* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::AddLabel_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::AddLabel_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::AddLabel_Response* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::AddLabel_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::AddLabel_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::AddLabel* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::AddLabel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::AddLabel >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::RemoveLabel_Request* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::RemoveLabel_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::RemoveLabel_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::RemoveLabel_Response* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::RemoveLabel_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::RemoveLabel_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::RemoveLabel* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::RemoveLabel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::RemoveLabel >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::ListLabels_Request* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::ListLabels_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::ListLabels_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::ListLabels_Response* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::ListLabels_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::ListLabels_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::ListLabels* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::ListLabels >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::ListLabels >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::TransactionRequest* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::TransactionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::TransactionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::TransactionResponse* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::TransactionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::TransactionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::Request* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::Request >(arena);
}
template<> PROTOBUF_NOINLINE ::Orthanc::DatabasePluginMessages::Response* Arena::CreateMaybeMessage< ::Orthanc::DatabasePluginMessages::Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Orthanc::DatabasePluginMessages::Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
