// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OrthancDatabasePlugin.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_OrthancDatabasePlugin_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_OrthancDatabasePlugin_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_OrthancDatabasePlugin_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_OrthancDatabasePlugin_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[190]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace Orthanc {
namespace DatabasePluginMessages {
class AddAttachment;
class AddAttachmentDefaultTypeInternal;
extern AddAttachmentDefaultTypeInternal _AddAttachment_default_instance_;
class AddAttachment_Request;
class AddAttachment_RequestDefaultTypeInternal;
extern AddAttachment_RequestDefaultTypeInternal _AddAttachment_Request_default_instance_;
class AddAttachment_Response;
class AddAttachment_ResponseDefaultTypeInternal;
extern AddAttachment_ResponseDefaultTypeInternal _AddAttachment_Response_default_instance_;
class AddLabel;
class AddLabelDefaultTypeInternal;
extern AddLabelDefaultTypeInternal _AddLabel_default_instance_;
class AddLabel_Request;
class AddLabel_RequestDefaultTypeInternal;
extern AddLabel_RequestDefaultTypeInternal _AddLabel_Request_default_instance_;
class AddLabel_Response;
class AddLabel_ResponseDefaultTypeInternal;
extern AddLabel_ResponseDefaultTypeInternal _AddLabel_Response_default_instance_;
class ClearChanges;
class ClearChangesDefaultTypeInternal;
extern ClearChangesDefaultTypeInternal _ClearChanges_default_instance_;
class ClearChanges_Request;
class ClearChanges_RequestDefaultTypeInternal;
extern ClearChanges_RequestDefaultTypeInternal _ClearChanges_Request_default_instance_;
class ClearChanges_Response;
class ClearChanges_ResponseDefaultTypeInternal;
extern ClearChanges_ResponseDefaultTypeInternal _ClearChanges_Response_default_instance_;
class ClearExportedResources;
class ClearExportedResourcesDefaultTypeInternal;
extern ClearExportedResourcesDefaultTypeInternal _ClearExportedResources_default_instance_;
class ClearExportedResources_Request;
class ClearExportedResources_RequestDefaultTypeInternal;
extern ClearExportedResources_RequestDefaultTypeInternal _ClearExportedResources_Request_default_instance_;
class ClearExportedResources_Response;
class ClearExportedResources_ResponseDefaultTypeInternal;
extern ClearExportedResources_ResponseDefaultTypeInternal _ClearExportedResources_Response_default_instance_;
class ClearMainDicomTags;
class ClearMainDicomTagsDefaultTypeInternal;
extern ClearMainDicomTagsDefaultTypeInternal _ClearMainDicomTags_default_instance_;
class ClearMainDicomTags_Request;
class ClearMainDicomTags_RequestDefaultTypeInternal;
extern ClearMainDicomTags_RequestDefaultTypeInternal _ClearMainDicomTags_Request_default_instance_;
class ClearMainDicomTags_Response;
class ClearMainDicomTags_ResponseDefaultTypeInternal;
extern ClearMainDicomTags_ResponseDefaultTypeInternal _ClearMainDicomTags_Response_default_instance_;
class Close;
class CloseDefaultTypeInternal;
extern CloseDefaultTypeInternal _Close_default_instance_;
class Close_Request;
class Close_RequestDefaultTypeInternal;
extern Close_RequestDefaultTypeInternal _Close_Request_default_instance_;
class Close_Response;
class Close_ResponseDefaultTypeInternal;
extern Close_ResponseDefaultTypeInternal _Close_Response_default_instance_;
class Commit;
class CommitDefaultTypeInternal;
extern CommitDefaultTypeInternal _Commit_default_instance_;
class Commit_Request;
class Commit_RequestDefaultTypeInternal;
extern Commit_RequestDefaultTypeInternal _Commit_Request_default_instance_;
class Commit_Response;
class Commit_ResponseDefaultTypeInternal;
extern Commit_ResponseDefaultTypeInternal _Commit_Response_default_instance_;
class CreateInstance;
class CreateInstanceDefaultTypeInternal;
extern CreateInstanceDefaultTypeInternal _CreateInstance_default_instance_;
class CreateInstance_Request;
class CreateInstance_RequestDefaultTypeInternal;
extern CreateInstance_RequestDefaultTypeInternal _CreateInstance_Request_default_instance_;
class CreateInstance_Response;
class CreateInstance_ResponseDefaultTypeInternal;
extern CreateInstance_ResponseDefaultTypeInternal _CreateInstance_Response_default_instance_;
class DatabaseConstraint;
class DatabaseConstraintDefaultTypeInternal;
extern DatabaseConstraintDefaultTypeInternal _DatabaseConstraint_default_instance_;
class DatabaseRequest;
class DatabaseRequestDefaultTypeInternal;
extern DatabaseRequestDefaultTypeInternal _DatabaseRequest_default_instance_;
class DatabaseResponse;
class DatabaseResponseDefaultTypeInternal;
extern DatabaseResponseDefaultTypeInternal _DatabaseResponse_default_instance_;
class DeleteAttachment;
class DeleteAttachmentDefaultTypeInternal;
extern DeleteAttachmentDefaultTypeInternal _DeleteAttachment_default_instance_;
class DeleteAttachment_Request;
class DeleteAttachment_RequestDefaultTypeInternal;
extern DeleteAttachment_RequestDefaultTypeInternal _DeleteAttachment_Request_default_instance_;
class DeleteAttachment_Response;
class DeleteAttachment_ResponseDefaultTypeInternal;
extern DeleteAttachment_ResponseDefaultTypeInternal _DeleteAttachment_Response_default_instance_;
class DeleteMetadata;
class DeleteMetadataDefaultTypeInternal;
extern DeleteMetadataDefaultTypeInternal _DeleteMetadata_default_instance_;
class DeleteMetadata_Request;
class DeleteMetadata_RequestDefaultTypeInternal;
extern DeleteMetadata_RequestDefaultTypeInternal _DeleteMetadata_Request_default_instance_;
class DeleteMetadata_Response;
class DeleteMetadata_ResponseDefaultTypeInternal;
extern DeleteMetadata_ResponseDefaultTypeInternal _DeleteMetadata_Response_default_instance_;
class DeleteResource;
class DeleteResourceDefaultTypeInternal;
extern DeleteResourceDefaultTypeInternal _DeleteResource_default_instance_;
class DeleteResource_Request;
class DeleteResource_RequestDefaultTypeInternal;
extern DeleteResource_RequestDefaultTypeInternal _DeleteResource_Request_default_instance_;
class DeleteResource_Response;
class DeleteResource_ResponseDefaultTypeInternal;
extern DeleteResource_ResponseDefaultTypeInternal _DeleteResource_Response_default_instance_;
class DeleteResource_Response_Resource;
class DeleteResource_Response_ResourceDefaultTypeInternal;
extern DeleteResource_Response_ResourceDefaultTypeInternal _DeleteResource_Response_Resource_default_instance_;
class ExportedResource;
class ExportedResourceDefaultTypeInternal;
extern ExportedResourceDefaultTypeInternal _ExportedResource_default_instance_;
class FileInfo;
class FileInfoDefaultTypeInternal;
extern FileInfoDefaultTypeInternal _FileInfo_default_instance_;
class FinalizeTransaction;
class FinalizeTransactionDefaultTypeInternal;
extern FinalizeTransactionDefaultTypeInternal _FinalizeTransaction_default_instance_;
class FinalizeTransaction_Request;
class FinalizeTransaction_RequestDefaultTypeInternal;
extern FinalizeTransaction_RequestDefaultTypeInternal _FinalizeTransaction_Request_default_instance_;
class FinalizeTransaction_Response;
class FinalizeTransaction_ResponseDefaultTypeInternal;
extern FinalizeTransaction_ResponseDefaultTypeInternal _FinalizeTransaction_Response_default_instance_;
class FlushToDisk;
class FlushToDiskDefaultTypeInternal;
extern FlushToDiskDefaultTypeInternal _FlushToDisk_default_instance_;
class FlushToDisk_Request;
class FlushToDisk_RequestDefaultTypeInternal;
extern FlushToDisk_RequestDefaultTypeInternal _FlushToDisk_Request_default_instance_;
class FlushToDisk_Response;
class FlushToDisk_ResponseDefaultTypeInternal;
extern FlushToDisk_ResponseDefaultTypeInternal _FlushToDisk_Response_default_instance_;
class GetAllMetadata;
class GetAllMetadataDefaultTypeInternal;
extern GetAllMetadataDefaultTypeInternal _GetAllMetadata_default_instance_;
class GetAllMetadata_Request;
class GetAllMetadata_RequestDefaultTypeInternal;
extern GetAllMetadata_RequestDefaultTypeInternal _GetAllMetadata_Request_default_instance_;
class GetAllMetadata_Response;
class GetAllMetadata_ResponseDefaultTypeInternal;
extern GetAllMetadata_ResponseDefaultTypeInternal _GetAllMetadata_Response_default_instance_;
class GetAllMetadata_Response_Metadata;
class GetAllMetadata_Response_MetadataDefaultTypeInternal;
extern GetAllMetadata_Response_MetadataDefaultTypeInternal _GetAllMetadata_Response_Metadata_default_instance_;
class GetAllPublicIds;
class GetAllPublicIdsDefaultTypeInternal;
extern GetAllPublicIdsDefaultTypeInternal _GetAllPublicIds_default_instance_;
class GetAllPublicIdsWithLimits;
class GetAllPublicIdsWithLimitsDefaultTypeInternal;
extern GetAllPublicIdsWithLimitsDefaultTypeInternal _GetAllPublicIdsWithLimits_default_instance_;
class GetAllPublicIdsWithLimits_Request;
class GetAllPublicIdsWithLimits_RequestDefaultTypeInternal;
extern GetAllPublicIdsWithLimits_RequestDefaultTypeInternal _GetAllPublicIdsWithLimits_Request_default_instance_;
class GetAllPublicIdsWithLimits_Response;
class GetAllPublicIdsWithLimits_ResponseDefaultTypeInternal;
extern GetAllPublicIdsWithLimits_ResponseDefaultTypeInternal _GetAllPublicIdsWithLimits_Response_default_instance_;
class GetAllPublicIds_Request;
class GetAllPublicIds_RequestDefaultTypeInternal;
extern GetAllPublicIds_RequestDefaultTypeInternal _GetAllPublicIds_Request_default_instance_;
class GetAllPublicIds_Response;
class GetAllPublicIds_ResponseDefaultTypeInternal;
extern GetAllPublicIds_ResponseDefaultTypeInternal _GetAllPublicIds_Response_default_instance_;
class GetChanges;
class GetChangesDefaultTypeInternal;
extern GetChangesDefaultTypeInternal _GetChanges_default_instance_;
class GetChanges_Request;
class GetChanges_RequestDefaultTypeInternal;
extern GetChanges_RequestDefaultTypeInternal _GetChanges_Request_default_instance_;
class GetChanges_Response;
class GetChanges_ResponseDefaultTypeInternal;
extern GetChanges_ResponseDefaultTypeInternal _GetChanges_Response_default_instance_;
class GetChildrenInternalId;
class GetChildrenInternalIdDefaultTypeInternal;
extern GetChildrenInternalIdDefaultTypeInternal _GetChildrenInternalId_default_instance_;
class GetChildrenInternalId_Request;
class GetChildrenInternalId_RequestDefaultTypeInternal;
extern GetChildrenInternalId_RequestDefaultTypeInternal _GetChildrenInternalId_Request_default_instance_;
class GetChildrenInternalId_Response;
class GetChildrenInternalId_ResponseDefaultTypeInternal;
extern GetChildrenInternalId_ResponseDefaultTypeInternal _GetChildrenInternalId_Response_default_instance_;
class GetChildrenMetadata;
class GetChildrenMetadataDefaultTypeInternal;
extern GetChildrenMetadataDefaultTypeInternal _GetChildrenMetadata_default_instance_;
class GetChildrenMetadata_Request;
class GetChildrenMetadata_RequestDefaultTypeInternal;
extern GetChildrenMetadata_RequestDefaultTypeInternal _GetChildrenMetadata_Request_default_instance_;
class GetChildrenMetadata_Response;
class GetChildrenMetadata_ResponseDefaultTypeInternal;
extern GetChildrenMetadata_ResponseDefaultTypeInternal _GetChildrenMetadata_Response_default_instance_;
class GetChildrenPublicId;
class GetChildrenPublicIdDefaultTypeInternal;
extern GetChildrenPublicIdDefaultTypeInternal _GetChildrenPublicId_default_instance_;
class GetChildrenPublicId_Request;
class GetChildrenPublicId_RequestDefaultTypeInternal;
extern GetChildrenPublicId_RequestDefaultTypeInternal _GetChildrenPublicId_Request_default_instance_;
class GetChildrenPublicId_Response;
class GetChildrenPublicId_ResponseDefaultTypeInternal;
extern GetChildrenPublicId_ResponseDefaultTypeInternal _GetChildrenPublicId_Response_default_instance_;
class GetExportedResources;
class GetExportedResourcesDefaultTypeInternal;
extern GetExportedResourcesDefaultTypeInternal _GetExportedResources_default_instance_;
class GetExportedResources_Request;
class GetExportedResources_RequestDefaultTypeInternal;
extern GetExportedResources_RequestDefaultTypeInternal _GetExportedResources_Request_default_instance_;
class GetExportedResources_Response;
class GetExportedResources_ResponseDefaultTypeInternal;
extern GetExportedResources_ResponseDefaultTypeInternal _GetExportedResources_Response_default_instance_;
class GetLastChange;
class GetLastChangeDefaultTypeInternal;
extern GetLastChangeDefaultTypeInternal _GetLastChange_default_instance_;
class GetLastChangeIndex;
class GetLastChangeIndexDefaultTypeInternal;
extern GetLastChangeIndexDefaultTypeInternal _GetLastChangeIndex_default_instance_;
class GetLastChangeIndex_Request;
class GetLastChangeIndex_RequestDefaultTypeInternal;
extern GetLastChangeIndex_RequestDefaultTypeInternal _GetLastChangeIndex_Request_default_instance_;
class GetLastChangeIndex_Response;
class GetLastChangeIndex_ResponseDefaultTypeInternal;
extern GetLastChangeIndex_ResponseDefaultTypeInternal _GetLastChangeIndex_Response_default_instance_;
class GetLastChange_Request;
class GetLastChange_RequestDefaultTypeInternal;
extern GetLastChange_RequestDefaultTypeInternal _GetLastChange_Request_default_instance_;
class GetLastChange_Response;
class GetLastChange_ResponseDefaultTypeInternal;
extern GetLastChange_ResponseDefaultTypeInternal _GetLastChange_Response_default_instance_;
class GetLastExportedResource;
class GetLastExportedResourceDefaultTypeInternal;
extern GetLastExportedResourceDefaultTypeInternal _GetLastExportedResource_default_instance_;
class GetLastExportedResource_Request;
class GetLastExportedResource_RequestDefaultTypeInternal;
extern GetLastExportedResource_RequestDefaultTypeInternal _GetLastExportedResource_Request_default_instance_;
class GetLastExportedResource_Response;
class GetLastExportedResource_ResponseDefaultTypeInternal;
extern GetLastExportedResource_ResponseDefaultTypeInternal _GetLastExportedResource_Response_default_instance_;
class GetMainDicomTags;
class GetMainDicomTagsDefaultTypeInternal;
extern GetMainDicomTagsDefaultTypeInternal _GetMainDicomTags_default_instance_;
class GetMainDicomTags_Request;
class GetMainDicomTags_RequestDefaultTypeInternal;
extern GetMainDicomTags_RequestDefaultTypeInternal _GetMainDicomTags_Request_default_instance_;
class GetMainDicomTags_Response;
class GetMainDicomTags_ResponseDefaultTypeInternal;
extern GetMainDicomTags_ResponseDefaultTypeInternal _GetMainDicomTags_Response_default_instance_;
class GetMainDicomTags_Response_Tag;
class GetMainDicomTags_Response_TagDefaultTypeInternal;
extern GetMainDicomTags_Response_TagDefaultTypeInternal _GetMainDicomTags_Response_Tag_default_instance_;
class GetPublicId;
class GetPublicIdDefaultTypeInternal;
extern GetPublicIdDefaultTypeInternal _GetPublicId_default_instance_;
class GetPublicId_Request;
class GetPublicId_RequestDefaultTypeInternal;
extern GetPublicId_RequestDefaultTypeInternal _GetPublicId_Request_default_instance_;
class GetPublicId_Response;
class GetPublicId_ResponseDefaultTypeInternal;
extern GetPublicId_ResponseDefaultTypeInternal _GetPublicId_Response_default_instance_;
class GetResourceType;
class GetResourceTypeDefaultTypeInternal;
extern GetResourceTypeDefaultTypeInternal _GetResourceType_default_instance_;
class GetResourceType_Request;
class GetResourceType_RequestDefaultTypeInternal;
extern GetResourceType_RequestDefaultTypeInternal _GetResourceType_Request_default_instance_;
class GetResourceType_Response;
class GetResourceType_ResponseDefaultTypeInternal;
extern GetResourceType_ResponseDefaultTypeInternal _GetResourceType_Response_default_instance_;
class GetResourcesCount;
class GetResourcesCountDefaultTypeInternal;
extern GetResourcesCountDefaultTypeInternal _GetResourcesCount_default_instance_;
class GetResourcesCount_Request;
class GetResourcesCount_RequestDefaultTypeInternal;
extern GetResourcesCount_RequestDefaultTypeInternal _GetResourcesCount_Request_default_instance_;
class GetResourcesCount_Response;
class GetResourcesCount_ResponseDefaultTypeInternal;
extern GetResourcesCount_ResponseDefaultTypeInternal _GetResourcesCount_Response_default_instance_;
class GetSystemInformation;
class GetSystemInformationDefaultTypeInternal;
extern GetSystemInformationDefaultTypeInternal _GetSystemInformation_default_instance_;
class GetSystemInformation_Request;
class GetSystemInformation_RequestDefaultTypeInternal;
extern GetSystemInformation_RequestDefaultTypeInternal _GetSystemInformation_Request_default_instance_;
class GetSystemInformation_Response;
class GetSystemInformation_ResponseDefaultTypeInternal;
extern GetSystemInformation_ResponseDefaultTypeInternal _GetSystemInformation_Response_default_instance_;
class GetTotalCompressedSize;
class GetTotalCompressedSizeDefaultTypeInternal;
extern GetTotalCompressedSizeDefaultTypeInternal _GetTotalCompressedSize_default_instance_;
class GetTotalCompressedSize_Request;
class GetTotalCompressedSize_RequestDefaultTypeInternal;
extern GetTotalCompressedSize_RequestDefaultTypeInternal _GetTotalCompressedSize_Request_default_instance_;
class GetTotalCompressedSize_Response;
class GetTotalCompressedSize_ResponseDefaultTypeInternal;
extern GetTotalCompressedSize_ResponseDefaultTypeInternal _GetTotalCompressedSize_Response_default_instance_;
class GetTotalUncompressedSize;
class GetTotalUncompressedSizeDefaultTypeInternal;
extern GetTotalUncompressedSizeDefaultTypeInternal _GetTotalUncompressedSize_default_instance_;
class GetTotalUncompressedSize_Request;
class GetTotalUncompressedSize_RequestDefaultTypeInternal;
extern GetTotalUncompressedSize_RequestDefaultTypeInternal _GetTotalUncompressedSize_Request_default_instance_;
class GetTotalUncompressedSize_Response;
class GetTotalUncompressedSize_ResponseDefaultTypeInternal;
extern GetTotalUncompressedSize_ResponseDefaultTypeInternal _GetTotalUncompressedSize_Response_default_instance_;
class IncrementGlobalProperty;
class IncrementGlobalPropertyDefaultTypeInternal;
extern IncrementGlobalPropertyDefaultTypeInternal _IncrementGlobalProperty_default_instance_;
class IncrementGlobalProperty_Request;
class IncrementGlobalProperty_RequestDefaultTypeInternal;
extern IncrementGlobalProperty_RequestDefaultTypeInternal _IncrementGlobalProperty_Request_default_instance_;
class IncrementGlobalProperty_Response;
class IncrementGlobalProperty_ResponseDefaultTypeInternal;
extern IncrementGlobalProperty_ResponseDefaultTypeInternal _IncrementGlobalProperty_Response_default_instance_;
class IsDiskSizeAbove;
class IsDiskSizeAboveDefaultTypeInternal;
extern IsDiskSizeAboveDefaultTypeInternal _IsDiskSizeAbove_default_instance_;
class IsDiskSizeAbove_Request;
class IsDiskSizeAbove_RequestDefaultTypeInternal;
extern IsDiskSizeAbove_RequestDefaultTypeInternal _IsDiskSizeAbove_Request_default_instance_;
class IsDiskSizeAbove_Response;
class IsDiskSizeAbove_ResponseDefaultTypeInternal;
extern IsDiskSizeAbove_ResponseDefaultTypeInternal _IsDiskSizeAbove_Response_default_instance_;
class IsProtectedPatient;
class IsProtectedPatientDefaultTypeInternal;
extern IsProtectedPatientDefaultTypeInternal _IsProtectedPatient_default_instance_;
class IsProtectedPatient_Request;
class IsProtectedPatient_RequestDefaultTypeInternal;
extern IsProtectedPatient_RequestDefaultTypeInternal _IsProtectedPatient_Request_default_instance_;
class IsProtectedPatient_Response;
class IsProtectedPatient_ResponseDefaultTypeInternal;
extern IsProtectedPatient_ResponseDefaultTypeInternal _IsProtectedPatient_Response_default_instance_;
class ListAvailableAttachments;
class ListAvailableAttachmentsDefaultTypeInternal;
extern ListAvailableAttachmentsDefaultTypeInternal _ListAvailableAttachments_default_instance_;
class ListAvailableAttachments_Request;
class ListAvailableAttachments_RequestDefaultTypeInternal;
extern ListAvailableAttachments_RequestDefaultTypeInternal _ListAvailableAttachments_Request_default_instance_;
class ListAvailableAttachments_Response;
class ListAvailableAttachments_ResponseDefaultTypeInternal;
extern ListAvailableAttachments_ResponseDefaultTypeInternal _ListAvailableAttachments_Response_default_instance_;
class ListLabels;
class ListLabelsDefaultTypeInternal;
extern ListLabelsDefaultTypeInternal _ListLabels_default_instance_;
class ListLabels_Request;
class ListLabels_RequestDefaultTypeInternal;
extern ListLabels_RequestDefaultTypeInternal _ListLabels_Request_default_instance_;
class ListLabels_Response;
class ListLabels_ResponseDefaultTypeInternal;
extern ListLabels_ResponseDefaultTypeInternal _ListLabels_Response_default_instance_;
class LogChange;
class LogChangeDefaultTypeInternal;
extern LogChangeDefaultTypeInternal _LogChange_default_instance_;
class LogChange_Request;
class LogChange_RequestDefaultTypeInternal;
extern LogChange_RequestDefaultTypeInternal _LogChange_Request_default_instance_;
class LogChange_Response;
class LogChange_ResponseDefaultTypeInternal;
extern LogChange_ResponseDefaultTypeInternal _LogChange_Response_default_instance_;
class LogExportedResource;
class LogExportedResourceDefaultTypeInternal;
extern LogExportedResourceDefaultTypeInternal _LogExportedResource_default_instance_;
class LogExportedResource_Request;
class LogExportedResource_RequestDefaultTypeInternal;
extern LogExportedResource_RequestDefaultTypeInternal _LogExportedResource_Request_default_instance_;
class LogExportedResource_Response;
class LogExportedResource_ResponseDefaultTypeInternal;
extern LogExportedResource_ResponseDefaultTypeInternal _LogExportedResource_Response_default_instance_;
class LookupAttachment;
class LookupAttachmentDefaultTypeInternal;
extern LookupAttachmentDefaultTypeInternal _LookupAttachment_default_instance_;
class LookupAttachment_Request;
class LookupAttachment_RequestDefaultTypeInternal;
extern LookupAttachment_RequestDefaultTypeInternal _LookupAttachment_Request_default_instance_;
class LookupAttachment_Response;
class LookupAttachment_ResponseDefaultTypeInternal;
extern LookupAttachment_ResponseDefaultTypeInternal _LookupAttachment_Response_default_instance_;
class LookupGlobalProperty;
class LookupGlobalPropertyDefaultTypeInternal;
extern LookupGlobalPropertyDefaultTypeInternal _LookupGlobalProperty_default_instance_;
class LookupGlobalProperty_Request;
class LookupGlobalProperty_RequestDefaultTypeInternal;
extern LookupGlobalProperty_RequestDefaultTypeInternal _LookupGlobalProperty_Request_default_instance_;
class LookupGlobalProperty_Response;
class LookupGlobalProperty_ResponseDefaultTypeInternal;
extern LookupGlobalProperty_ResponseDefaultTypeInternal _LookupGlobalProperty_Response_default_instance_;
class LookupMetadata;
class LookupMetadataDefaultTypeInternal;
extern LookupMetadataDefaultTypeInternal _LookupMetadata_default_instance_;
class LookupMetadata_Request;
class LookupMetadata_RequestDefaultTypeInternal;
extern LookupMetadata_RequestDefaultTypeInternal _LookupMetadata_Request_default_instance_;
class LookupMetadata_Response;
class LookupMetadata_ResponseDefaultTypeInternal;
extern LookupMetadata_ResponseDefaultTypeInternal _LookupMetadata_Response_default_instance_;
class LookupParent;
class LookupParentDefaultTypeInternal;
extern LookupParentDefaultTypeInternal _LookupParent_default_instance_;
class LookupParent_Request;
class LookupParent_RequestDefaultTypeInternal;
extern LookupParent_RequestDefaultTypeInternal _LookupParent_Request_default_instance_;
class LookupParent_Response;
class LookupParent_ResponseDefaultTypeInternal;
extern LookupParent_ResponseDefaultTypeInternal _LookupParent_Response_default_instance_;
class LookupResource;
class LookupResourceDefaultTypeInternal;
extern LookupResourceDefaultTypeInternal _LookupResource_default_instance_;
class LookupResourceAndParent;
class LookupResourceAndParentDefaultTypeInternal;
extern LookupResourceAndParentDefaultTypeInternal _LookupResourceAndParent_default_instance_;
class LookupResourceAndParent_Request;
class LookupResourceAndParent_RequestDefaultTypeInternal;
extern LookupResourceAndParent_RequestDefaultTypeInternal _LookupResourceAndParent_Request_default_instance_;
class LookupResourceAndParent_Response;
class LookupResourceAndParent_ResponseDefaultTypeInternal;
extern LookupResourceAndParent_ResponseDefaultTypeInternal _LookupResourceAndParent_Response_default_instance_;
class LookupResource_Request;
class LookupResource_RequestDefaultTypeInternal;
extern LookupResource_RequestDefaultTypeInternal _LookupResource_Request_default_instance_;
class LookupResource_Response;
class LookupResource_ResponseDefaultTypeInternal;
extern LookupResource_ResponseDefaultTypeInternal _LookupResource_Response_default_instance_;
class LookupResources;
class LookupResourcesDefaultTypeInternal;
extern LookupResourcesDefaultTypeInternal _LookupResources_default_instance_;
class LookupResources_Request;
class LookupResources_RequestDefaultTypeInternal;
extern LookupResources_RequestDefaultTypeInternal _LookupResources_Request_default_instance_;
class LookupResources_Response;
class LookupResources_ResponseDefaultTypeInternal;
extern LookupResources_ResponseDefaultTypeInternal _LookupResources_Response_default_instance_;
class MeasureLatency;
class MeasureLatencyDefaultTypeInternal;
extern MeasureLatencyDefaultTypeInternal _MeasureLatency_default_instance_;
class MeasureLatency_Request;
class MeasureLatency_RequestDefaultTypeInternal;
extern MeasureLatency_RequestDefaultTypeInternal _MeasureLatency_Request_default_instance_;
class MeasureLatency_Response;
class MeasureLatency_ResponseDefaultTypeInternal;
extern MeasureLatency_ResponseDefaultTypeInternal _MeasureLatency_Response_default_instance_;
class Open;
class OpenDefaultTypeInternal;
extern OpenDefaultTypeInternal _Open_default_instance_;
class Open_Request;
class Open_RequestDefaultTypeInternal;
extern Open_RequestDefaultTypeInternal _Open_Request_default_instance_;
class Open_Request_IdentifierTag;
class Open_Request_IdentifierTagDefaultTypeInternal;
extern Open_Request_IdentifierTagDefaultTypeInternal _Open_Request_IdentifierTag_default_instance_;
class Open_Response;
class Open_ResponseDefaultTypeInternal;
extern Open_ResponseDefaultTypeInternal _Open_Response_default_instance_;
class RemoveLabel;
class RemoveLabelDefaultTypeInternal;
extern RemoveLabelDefaultTypeInternal _RemoveLabel_default_instance_;
class RemoveLabel_Request;
class RemoveLabel_RequestDefaultTypeInternal;
extern RemoveLabel_RequestDefaultTypeInternal _RemoveLabel_Request_default_instance_;
class RemoveLabel_Response;
class RemoveLabel_ResponseDefaultTypeInternal;
extern RemoveLabel_ResponseDefaultTypeInternal _RemoveLabel_Response_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class Rollback;
class RollbackDefaultTypeInternal;
extern RollbackDefaultTypeInternal _Rollback_default_instance_;
class Rollback_Request;
class Rollback_RequestDefaultTypeInternal;
extern Rollback_RequestDefaultTypeInternal _Rollback_Request_default_instance_;
class Rollback_Response;
class Rollback_ResponseDefaultTypeInternal;
extern Rollback_ResponseDefaultTypeInternal _Rollback_Response_default_instance_;
class SelectPatientToRecycle;
class SelectPatientToRecycleDefaultTypeInternal;
extern SelectPatientToRecycleDefaultTypeInternal _SelectPatientToRecycle_default_instance_;
class SelectPatientToRecycleWithAvoid;
class SelectPatientToRecycleWithAvoidDefaultTypeInternal;
extern SelectPatientToRecycleWithAvoidDefaultTypeInternal _SelectPatientToRecycleWithAvoid_default_instance_;
class SelectPatientToRecycleWithAvoid_Request;
class SelectPatientToRecycleWithAvoid_RequestDefaultTypeInternal;
extern SelectPatientToRecycleWithAvoid_RequestDefaultTypeInternal _SelectPatientToRecycleWithAvoid_Request_default_instance_;
class SelectPatientToRecycleWithAvoid_Response;
class SelectPatientToRecycleWithAvoid_ResponseDefaultTypeInternal;
extern SelectPatientToRecycleWithAvoid_ResponseDefaultTypeInternal _SelectPatientToRecycleWithAvoid_Response_default_instance_;
class SelectPatientToRecycle_Request;
class SelectPatientToRecycle_RequestDefaultTypeInternal;
extern SelectPatientToRecycle_RequestDefaultTypeInternal _SelectPatientToRecycle_Request_default_instance_;
class SelectPatientToRecycle_Response;
class SelectPatientToRecycle_ResponseDefaultTypeInternal;
extern SelectPatientToRecycle_ResponseDefaultTypeInternal _SelectPatientToRecycle_Response_default_instance_;
class ServerIndexChange;
class ServerIndexChangeDefaultTypeInternal;
extern ServerIndexChangeDefaultTypeInternal _ServerIndexChange_default_instance_;
class SetGlobalProperty;
class SetGlobalPropertyDefaultTypeInternal;
extern SetGlobalPropertyDefaultTypeInternal _SetGlobalProperty_default_instance_;
class SetGlobalProperty_Request;
class SetGlobalProperty_RequestDefaultTypeInternal;
extern SetGlobalProperty_RequestDefaultTypeInternal _SetGlobalProperty_Request_default_instance_;
class SetGlobalProperty_Response;
class SetGlobalProperty_ResponseDefaultTypeInternal;
extern SetGlobalProperty_ResponseDefaultTypeInternal _SetGlobalProperty_Response_default_instance_;
class SetMetadata;
class SetMetadataDefaultTypeInternal;
extern SetMetadataDefaultTypeInternal _SetMetadata_default_instance_;
class SetMetadata_Request;
class SetMetadata_RequestDefaultTypeInternal;
extern SetMetadata_RequestDefaultTypeInternal _SetMetadata_Request_default_instance_;
class SetMetadata_Response;
class SetMetadata_ResponseDefaultTypeInternal;
extern SetMetadata_ResponseDefaultTypeInternal _SetMetadata_Response_default_instance_;
class SetProtectedPatient;
class SetProtectedPatientDefaultTypeInternal;
extern SetProtectedPatientDefaultTypeInternal _SetProtectedPatient_default_instance_;
class SetProtectedPatient_Request;
class SetProtectedPatient_RequestDefaultTypeInternal;
extern SetProtectedPatient_RequestDefaultTypeInternal _SetProtectedPatient_Request_default_instance_;
class SetProtectedPatient_Response;
class SetProtectedPatient_ResponseDefaultTypeInternal;
extern SetProtectedPatient_ResponseDefaultTypeInternal _SetProtectedPatient_Response_default_instance_;
class SetResourcesContent;
class SetResourcesContentDefaultTypeInternal;
extern SetResourcesContentDefaultTypeInternal _SetResourcesContent_default_instance_;
class SetResourcesContent_Request;
class SetResourcesContent_RequestDefaultTypeInternal;
extern SetResourcesContent_RequestDefaultTypeInternal _SetResourcesContent_Request_default_instance_;
class SetResourcesContent_Request_Metadata;
class SetResourcesContent_Request_MetadataDefaultTypeInternal;
extern SetResourcesContent_Request_MetadataDefaultTypeInternal _SetResourcesContent_Request_Metadata_default_instance_;
class SetResourcesContent_Request_Tag;
class SetResourcesContent_Request_TagDefaultTypeInternal;
extern SetResourcesContent_Request_TagDefaultTypeInternal _SetResourcesContent_Request_Tag_default_instance_;
class SetResourcesContent_Response;
class SetResourcesContent_ResponseDefaultTypeInternal;
extern SetResourcesContent_ResponseDefaultTypeInternal _SetResourcesContent_Response_default_instance_;
class StartTransaction;
class StartTransactionDefaultTypeInternal;
extern StartTransactionDefaultTypeInternal _StartTransaction_default_instance_;
class StartTransaction_Request;
class StartTransaction_RequestDefaultTypeInternal;
extern StartTransaction_RequestDefaultTypeInternal _StartTransaction_Request_default_instance_;
class StartTransaction_Response;
class StartTransaction_ResponseDefaultTypeInternal;
extern StartTransaction_ResponseDefaultTypeInternal _StartTransaction_Response_default_instance_;
class TransactionRequest;
class TransactionRequestDefaultTypeInternal;
extern TransactionRequestDefaultTypeInternal _TransactionRequest_default_instance_;
class TransactionResponse;
class TransactionResponseDefaultTypeInternal;
extern TransactionResponseDefaultTypeInternal _TransactionResponse_default_instance_;
class UpdateAndGetStatistics;
class UpdateAndGetStatisticsDefaultTypeInternal;
extern UpdateAndGetStatisticsDefaultTypeInternal _UpdateAndGetStatistics_default_instance_;
class UpdateAndGetStatistics_Request;
class UpdateAndGetStatistics_RequestDefaultTypeInternal;
extern UpdateAndGetStatistics_RequestDefaultTypeInternal _UpdateAndGetStatistics_Request_default_instance_;
class UpdateAndGetStatistics_Response;
class UpdateAndGetStatistics_ResponseDefaultTypeInternal;
extern UpdateAndGetStatistics_ResponseDefaultTypeInternal _UpdateAndGetStatistics_Response_default_instance_;
class Upgrade;
class UpgradeDefaultTypeInternal;
extern UpgradeDefaultTypeInternal _Upgrade_default_instance_;
class Upgrade_Request;
class Upgrade_RequestDefaultTypeInternal;
extern Upgrade_RequestDefaultTypeInternal _Upgrade_Request_default_instance_;
class Upgrade_Response;
class Upgrade_ResponseDefaultTypeInternal;
extern Upgrade_ResponseDefaultTypeInternal _Upgrade_Response_default_instance_;
}  // namespace DatabasePluginMessages
}  // namespace Orthanc
PROTOBUF_NAMESPACE_OPEN
template<> ::Orthanc::DatabasePluginMessages::AddAttachment* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::AddAttachment>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::AddAttachment_Request* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::AddAttachment_Request>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::AddAttachment_Response* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::AddAttachment_Response>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::AddLabel* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::AddLabel>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::AddLabel_Request* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::AddLabel_Request>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::AddLabel_Response* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::AddLabel_Response>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::ClearChanges* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::ClearChanges>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::ClearChanges_Request* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::ClearChanges_Request>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::ClearChanges_Response* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::ClearChanges_Response>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::ClearExportedResources* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::ClearExportedResources>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::ClearExportedResources_Request* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::ClearExportedResources_Request>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::ClearExportedResources_Response* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::ClearExportedResources_Response>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::ClearMainDicomTags* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::ClearMainDicomTags>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::ClearMainDicomTags_Request* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::ClearMainDicomTags_Request>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::ClearMainDicomTags_Response* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::ClearMainDicomTags_Response>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::Close* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::Close>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::Close_Request* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::Close_Request>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::Close_Response* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::Close_Response>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::Commit* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::Commit>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::Commit_Request* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::Commit_Request>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::Commit_Response* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::Commit_Response>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::CreateInstance* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::CreateInstance>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::CreateInstance_Request* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::CreateInstance_Request>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::CreateInstance_Response* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::CreateInstance_Response>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::DatabaseConstraint* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::DatabaseConstraint>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::DatabaseRequest* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::DatabaseRequest>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::DatabaseResponse* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::DatabaseResponse>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::DeleteAttachment* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::DeleteAttachment>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::DeleteAttachment_Request* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::DeleteAttachment_Request>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::DeleteAttachment_Response* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::DeleteAttachment_Response>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::DeleteMetadata* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::DeleteMetadata>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::DeleteMetadata_Request* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::DeleteMetadata_Request>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::DeleteMetadata_Response* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::DeleteMetadata_Response>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::DeleteResource* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::DeleteResource>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::DeleteResource_Request* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::DeleteResource_Request>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::DeleteResource_Response* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::DeleteResource_Response>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::DeleteResource_Response_Resource* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::DeleteResource_Response_Resource>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::ExportedResource* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::ExportedResource>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::FileInfo* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::FileInfo>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::FinalizeTransaction* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::FinalizeTransaction>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::FinalizeTransaction_Request* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::FinalizeTransaction_Request>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::FinalizeTransaction_Response* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::FinalizeTransaction_Response>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::FlushToDisk* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::FlushToDisk>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::FlushToDisk_Request* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::FlushToDisk_Request>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::FlushToDisk_Response* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::FlushToDisk_Response>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::GetAllMetadata* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetAllMetadata>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::GetAllMetadata_Request* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetAllMetadata_Request>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::GetAllMetadata_Response* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetAllMetadata_Response>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::GetAllMetadata_Response_Metadata* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetAllMetadata_Response_Metadata>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::GetAllPublicIds* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetAllPublicIds>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits_Request* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits_Request>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits_Response* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits_Response>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::GetAllPublicIds_Request* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetAllPublicIds_Request>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::GetAllPublicIds_Response* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetAllPublicIds_Response>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::GetChanges* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetChanges>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::GetChanges_Request* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetChanges_Request>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::GetChanges_Response* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetChanges_Response>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::GetChildrenInternalId* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetChildrenInternalId>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::GetChildrenInternalId_Request* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetChildrenInternalId_Request>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::GetChildrenInternalId_Response* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetChildrenInternalId_Response>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::GetChildrenMetadata* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetChildrenMetadata>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::GetChildrenMetadata_Request* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetChildrenMetadata_Request>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::GetChildrenMetadata_Response* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetChildrenMetadata_Response>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::GetChildrenPublicId* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetChildrenPublicId>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::GetChildrenPublicId_Request* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetChildrenPublicId_Request>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::GetChildrenPublicId_Response* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetChildrenPublicId_Response>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::GetExportedResources* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetExportedResources>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::GetExportedResources_Request* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetExportedResources_Request>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::GetExportedResources_Response* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetExportedResources_Response>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::GetLastChange* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetLastChange>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::GetLastChangeIndex* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetLastChangeIndex>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::GetLastChangeIndex_Request* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetLastChangeIndex_Request>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::GetLastChangeIndex_Response* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetLastChangeIndex_Response>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::GetLastChange_Request* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetLastChange_Request>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::GetLastChange_Response* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetLastChange_Response>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::GetLastExportedResource* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetLastExportedResource>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::GetLastExportedResource_Request* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetLastExportedResource_Request>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::GetLastExportedResource_Response* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetLastExportedResource_Response>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::GetMainDicomTags* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetMainDicomTags>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Request* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetMainDicomTags_Request>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Response* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetMainDicomTags_Response>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Response_Tag* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetMainDicomTags_Response_Tag>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::GetPublicId* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetPublicId>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::GetPublicId_Request* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetPublicId_Request>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::GetPublicId_Response* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetPublicId_Response>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::GetResourceType* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetResourceType>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::GetResourceType_Request* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetResourceType_Request>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::GetResourceType_Response* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetResourceType_Response>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::GetResourcesCount* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetResourcesCount>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::GetResourcesCount_Request* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetResourcesCount_Request>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::GetResourcesCount_Response* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetResourcesCount_Response>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::GetSystemInformation* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetSystemInformation>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::GetSystemInformation_Request* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetSystemInformation_Request>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::GetSystemInformation_Response* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetSystemInformation_Response>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::GetTotalCompressedSize* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetTotalCompressedSize>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::GetTotalCompressedSize_Request* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetTotalCompressedSize_Request>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::GetTotalCompressedSize_Response* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetTotalCompressedSize_Response>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize_Request* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize_Request>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize_Response* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize_Response>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::IncrementGlobalProperty* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::IncrementGlobalProperty>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::IncrementGlobalProperty_Request* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::IncrementGlobalProperty_Request>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::IncrementGlobalProperty_Response* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::IncrementGlobalProperty_Response>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::IsDiskSizeAbove* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::IsDiskSizeAbove>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::IsDiskSizeAbove_Request* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::IsDiskSizeAbove_Request>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::IsDiskSizeAbove_Response* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::IsDiskSizeAbove_Response>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::IsProtectedPatient* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::IsProtectedPatient>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::IsProtectedPatient_Request* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::IsProtectedPatient_Request>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::IsProtectedPatient_Response* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::IsProtectedPatient_Response>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::ListAvailableAttachments* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::ListAvailableAttachments>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::ListAvailableAttachments_Request* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::ListAvailableAttachments_Request>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::ListAvailableAttachments_Response* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::ListAvailableAttachments_Response>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::ListLabels* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::ListLabels>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::ListLabels_Request* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::ListLabels_Request>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::ListLabels_Response* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::ListLabels_Response>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::LogChange* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::LogChange>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::LogChange_Request* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::LogChange_Request>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::LogChange_Response* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::LogChange_Response>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::LogExportedResource* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::LogExportedResource>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::LogExportedResource_Request* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::LogExportedResource_Request>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::LogExportedResource_Response* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::LogExportedResource_Response>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::LookupAttachment* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::LookupAttachment>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::LookupAttachment_Request* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::LookupAttachment_Request>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::LookupAttachment_Response* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::LookupAttachment_Response>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::LookupGlobalProperty* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::LookupGlobalProperty>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::LookupGlobalProperty_Request* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::LookupGlobalProperty_Request>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::LookupGlobalProperty_Response* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::LookupGlobalProperty_Response>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::LookupMetadata* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::LookupMetadata>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::LookupMetadata_Request* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::LookupMetadata_Request>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::LookupMetadata_Response* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::LookupMetadata_Response>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::LookupParent* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::LookupParent>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::LookupParent_Request* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::LookupParent_Request>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::LookupParent_Response* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::LookupParent_Response>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::LookupResource* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::LookupResource>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::LookupResourceAndParent* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::LookupResourceAndParent>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::LookupResourceAndParent_Request* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::LookupResourceAndParent_Request>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::LookupResourceAndParent_Response* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::LookupResourceAndParent_Response>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::LookupResource_Request* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::LookupResource_Request>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::LookupResource_Response* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::LookupResource_Response>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::LookupResources* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::LookupResources>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::LookupResources_Request* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::LookupResources_Request>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::LookupResources_Response* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::LookupResources_Response>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::MeasureLatency* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::MeasureLatency>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::MeasureLatency_Request* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::MeasureLatency_Request>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::MeasureLatency_Response* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::MeasureLatency_Response>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::Open* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::Open>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::Open_Request* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::Open_Request>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::Open_Request_IdentifierTag* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::Open_Request_IdentifierTag>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::Open_Response* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::Open_Response>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::RemoveLabel* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::RemoveLabel>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::RemoveLabel_Request* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::RemoveLabel_Request>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::RemoveLabel_Response* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::RemoveLabel_Response>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::Request* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::Request>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::Response* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::Response>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::Rollback* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::Rollback>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::Rollback_Request* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::Rollback_Request>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::Rollback_Response* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::Rollback_Response>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::SelectPatientToRecycle* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::SelectPatientToRecycle>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid_Request* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid_Request>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid_Response* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid_Response>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::SelectPatientToRecycle_Request* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::SelectPatientToRecycle_Request>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::SelectPatientToRecycle_Response* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::SelectPatientToRecycle_Response>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::ServerIndexChange* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::ServerIndexChange>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::SetGlobalProperty* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::SetGlobalProperty>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::SetGlobalProperty_Request* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::SetGlobalProperty_Request>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::SetGlobalProperty_Response* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::SetGlobalProperty_Response>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::SetMetadata* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::SetMetadata>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::SetMetadata_Request* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::SetMetadata_Request>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::SetMetadata_Response* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::SetMetadata_Response>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::SetProtectedPatient* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::SetProtectedPatient>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::SetProtectedPatient_Request* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::SetProtectedPatient_Request>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::SetProtectedPatient_Response* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::SetProtectedPatient_Response>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::SetResourcesContent* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::SetResourcesContent>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::SetResourcesContent_Request* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::SetResourcesContent_Request>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::SetResourcesContent_Request_Metadata* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::SetResourcesContent_Request_Metadata>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::SetResourcesContent_Request_Tag* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::SetResourcesContent_Request_Tag>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::SetResourcesContent_Response* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::SetResourcesContent_Response>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::StartTransaction* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::StartTransaction>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::StartTransaction_Request* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::StartTransaction_Request>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::StartTransaction_Response* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::StartTransaction_Response>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::TransactionRequest* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::TransactionRequest>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::TransactionResponse* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::TransactionResponse>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics_Request* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics_Request>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics_Response* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics_Response>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::Upgrade* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::Upgrade>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::Upgrade_Request* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::Upgrade_Request>(Arena*);
template<> ::Orthanc::DatabasePluginMessages::Upgrade_Response* Arena::CreateMaybeMessage<::Orthanc::DatabasePluginMessages::Upgrade_Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Orthanc {
namespace DatabasePluginMessages {

enum ResourceType : int {
  RESOURCE_PATIENT = 0,
  RESOURCE_STUDY = 1,
  RESOURCE_SERIES = 2,
  RESOURCE_INSTANCE = 3,
  ResourceType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ResourceType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ResourceType_IsValid(int value);
constexpr ResourceType ResourceType_MIN = RESOURCE_PATIENT;
constexpr ResourceType ResourceType_MAX = RESOURCE_INSTANCE;
constexpr int ResourceType_ARRAYSIZE = ResourceType_MAX + 1;

const std::string& ResourceType_Name(ResourceType value);
template<typename T>
inline const std::string& ResourceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ResourceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ResourceType_Name.");
  return ResourceType_Name(static_cast<ResourceType>(enum_t_value));
}
bool ResourceType_Parse(
    const std::string& name, ResourceType* value);
enum ConstraintType : int {
  CONSTRAINT_EQUAL = 0,
  CONSTRAINT_SMALLER_OR_EQUAL = 1,
  CONSTRAINT_GREATER_OR_EQUAL = 2,
  CONSTRAINT_WILDCARD = 3,
  CONSTRAINT_LIST = 4,
  ConstraintType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ConstraintType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ConstraintType_IsValid(int value);
constexpr ConstraintType ConstraintType_MIN = CONSTRAINT_EQUAL;
constexpr ConstraintType ConstraintType_MAX = CONSTRAINT_LIST;
constexpr int ConstraintType_ARRAYSIZE = ConstraintType_MAX + 1;

const std::string& ConstraintType_Name(ConstraintType value);
template<typename T>
inline const std::string& ConstraintType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ConstraintType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ConstraintType_Name.");
  return ConstraintType_Name(static_cast<ConstraintType>(enum_t_value));
}
bool ConstraintType_Parse(
    const std::string& name, ConstraintType* value);
enum LabelsConstraintType : int {
  LABELS_CONSTRAINT_ALL = 0,
  LABELS_CONSTRAINT_ANY = 1,
  LABELS_CONSTRAINT_NONE = 2,
  LabelsConstraintType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LabelsConstraintType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LabelsConstraintType_IsValid(int value);
constexpr LabelsConstraintType LabelsConstraintType_MIN = LABELS_CONSTRAINT_ALL;
constexpr LabelsConstraintType LabelsConstraintType_MAX = LABELS_CONSTRAINT_NONE;
constexpr int LabelsConstraintType_ARRAYSIZE = LabelsConstraintType_MAX + 1;

const std::string& LabelsConstraintType_Name(LabelsConstraintType value);
template<typename T>
inline const std::string& LabelsConstraintType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LabelsConstraintType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LabelsConstraintType_Name.");
  return LabelsConstraintType_Name(static_cast<LabelsConstraintType>(enum_t_value));
}
bool LabelsConstraintType_Parse(
    const std::string& name, LabelsConstraintType* value);
enum DatabaseOperation : int {
  OPERATION_GET_SYSTEM_INFORMATION = 0,
  OPERATION_OPEN = 1,
  OPERATION_CLOSE = 2,
  OPERATION_FLUSH_TO_DISK = 3,
  OPERATION_START_TRANSACTION = 4,
  OPERATION_UPGRADE = 5,
  OPERATION_FINALIZE_TRANSACTION = 6,
  OPERATION_MEASURE_LATENCY = 7,
  DatabaseOperation_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DatabaseOperation_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DatabaseOperation_IsValid(int value);
constexpr DatabaseOperation DatabaseOperation_MIN = OPERATION_GET_SYSTEM_INFORMATION;
constexpr DatabaseOperation DatabaseOperation_MAX = OPERATION_MEASURE_LATENCY;
constexpr int DatabaseOperation_ARRAYSIZE = DatabaseOperation_MAX + 1;

const std::string& DatabaseOperation_Name(DatabaseOperation value);
template<typename T>
inline const std::string& DatabaseOperation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DatabaseOperation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DatabaseOperation_Name.");
  return DatabaseOperation_Name(static_cast<DatabaseOperation>(enum_t_value));
}
bool DatabaseOperation_Parse(
    const std::string& name, DatabaseOperation* value);
enum TransactionType : int {
  TRANSACTION_READ_ONLY = 0,
  TRANSACTION_READ_WRITE = 1,
  TransactionType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TransactionType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TransactionType_IsValid(int value);
constexpr TransactionType TransactionType_MIN = TRANSACTION_READ_ONLY;
constexpr TransactionType TransactionType_MAX = TRANSACTION_READ_WRITE;
constexpr int TransactionType_ARRAYSIZE = TransactionType_MAX + 1;

const std::string& TransactionType_Name(TransactionType value);
template<typename T>
inline const std::string& TransactionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TransactionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TransactionType_Name.");
  return TransactionType_Name(static_cast<TransactionType>(enum_t_value));
}
bool TransactionType_Parse(
    const std::string& name, TransactionType* value);
enum TransactionOperation : int {
  OPERATION_ROLLBACK = 0,
  OPERATION_COMMIT = 1,
  OPERATION_ADD_ATTACHMENT = 2,
  OPERATION_CLEAR_CHANGES = 3,
  OPERATION_CLEAR_EXPORTED_RESOURCES = 4,
  OPERATION_DELETE_ATTACHMENT = 5,
  OPERATION_DELETE_METADATA = 6,
  OPERATION_DELETE_RESOURCE = 7,
  OPERATION_GET_ALL_METADATA = 8,
  OPERATION_GET_ALL_PUBLIC_IDS = 9,
  OPERATION_GET_ALL_PUBLIC_IDS_WITH_LIMITS = 10,
  OPERATION_GET_CHANGES = 11,
  OPERATION_GET_CHILDREN_INTERNAL_ID = 12,
  OPERATION_GET_CHILDREN_PUBLIC_ID = 13,
  OPERATION_GET_EXPORTED_RESOURCES = 14,
  OPERATION_GET_LAST_CHANGE = 15,
  OPERATION_GET_LAST_EXPORTED_RESOURCE = 16,
  OPERATION_GET_MAIN_DICOM_TAGS = 17,
  OPERATION_GET_PUBLIC_ID = 18,
  OPERATION_GET_RESOURCES_COUNT = 19,
  OPERATION_GET_RESOURCE_TYPE = 20,
  OPERATION_GET_TOTAL_COMPRESSED_SIZE = 21,
  OPERATION_GET_TOTAL_UNCOMPRESSED_SIZE = 22,
  OPERATION_IS_PROTECTED_PATIENT = 23,
  OPERATION_LIST_AVAILABLE_ATTACHMENTS = 24,
  OPERATION_LOG_CHANGE = 25,
  OPERATION_LOG_EXPORTED_RESOURCE = 26,
  OPERATION_LOOKUP_ATTACHMENT = 27,
  OPERATION_LOOKUP_GLOBAL_PROPERTY = 28,
  OPERATION_LOOKUP_METADATA = 29,
  OPERATION_LOOKUP_PARENT = 30,
  OPERATION_LOOKUP_RESOURCE = 31,
  OPERATION_SELECT_PATIENT_TO_RECYCLE = 32,
  OPERATION_SELECT_PATIENT_TO_RECYCLE_WITH_AVOID = 33,
  OPERATION_SET_GLOBAL_PROPERTY = 34,
  OPERATION_CLEAR_MAIN_DICOM_TAGS = 35,
  OPERATION_SET_METADATA = 36,
  OPERATION_SET_PROTECTED_PATIENT = 37,
  OPERATION_IS_DISK_SIZE_ABOVE = 38,
  OPERATION_LOOKUP_RESOURCES = 39,
  OPERATION_CREATE_INSTANCE = 40,
  OPERATION_SET_RESOURCES_CONTENT = 41,
  OPERATION_GET_CHILDREN_METADATA = 42,
  OPERATION_GET_LAST_CHANGE_INDEX = 43,
  OPERATION_LOOKUP_RESOURCE_AND_PARENT = 44,
  OPERATION_ADD_LABEL = 45,
  OPERATION_REMOVE_LABEL = 46,
  OPERATION_LIST_LABELS = 47,
  OPERATION_INCREMENT_GLOBAL_PROPERTY = 48,
  OPERATION_UPDATE_AND_GET_STATISTICS = 49,
  TransactionOperation_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TransactionOperation_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TransactionOperation_IsValid(int value);
constexpr TransactionOperation TransactionOperation_MIN = OPERATION_ROLLBACK;
constexpr TransactionOperation TransactionOperation_MAX = OPERATION_UPDATE_AND_GET_STATISTICS;
constexpr int TransactionOperation_ARRAYSIZE = TransactionOperation_MAX + 1;

const std::string& TransactionOperation_Name(TransactionOperation value);
template<typename T>
inline const std::string& TransactionOperation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TransactionOperation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TransactionOperation_Name.");
  return TransactionOperation_Name(static_cast<TransactionOperation>(enum_t_value));
}
bool TransactionOperation_Parse(
    const std::string& name, TransactionOperation* value);
enum RequestType : int {
  REQUEST_DATABASE = 0,
  REQUEST_TRANSACTION = 1,
  RequestType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RequestType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RequestType_IsValid(int value);
constexpr RequestType RequestType_MIN = REQUEST_DATABASE;
constexpr RequestType RequestType_MAX = REQUEST_TRANSACTION;
constexpr int RequestType_ARRAYSIZE = RequestType_MAX + 1;

const std::string& RequestType_Name(RequestType value);
template<typename T>
inline const std::string& RequestType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RequestType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RequestType_Name.");
  return RequestType_Name(static_cast<RequestType>(enum_t_value));
}
bool RequestType_Parse(
    const std::string& name, RequestType* value);
// ===================================================================

class FileInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.FileInfo) */ {
 public:
  inline FileInfo() : FileInfo(nullptr) {};
  virtual ~FileInfo();

  FileInfo(const FileInfo& from);
  FileInfo(FileInfo&& from) noexcept
    : FileInfo() {
    *this = ::std::move(from);
  }

  inline FileInfo& operator=(const FileInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileInfo& operator=(FileInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const FileInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileInfo* internal_default_instance() {
    return reinterpret_cast<const FileInfo*>(
               &_FileInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FileInfo& a, FileInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(FileInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FileInfo* New() const final {
    return CreateMaybeMessage<FileInfo>(nullptr);
  }

  FileInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FileInfo& from);
  void MergeFrom(const FileInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FileInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.FileInfo";
  }
  protected:
  explicit FileInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
    kUncompressedHashFieldNumber = 4,
    kCompressedHashFieldNumber = 7,
    kUncompressedSizeFieldNumber = 3,
    kContentTypeFieldNumber = 2,
    kCompressionTypeFieldNumber = 5,
    kCompressedSizeFieldNumber = 6,
  };
  // string uuid = 1;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_uuid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_uuid(
      std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // string uncompressed_hash = 4;
  void clear_uncompressed_hash();
  const std::string& uncompressed_hash() const;
  void set_uncompressed_hash(const std::string& value);
  void set_uncompressed_hash(std::string&& value);
  void set_uncompressed_hash(const char* value);
  void set_uncompressed_hash(const char* value, size_t size);
  std::string* mutable_uncompressed_hash();
  std::string* release_uncompressed_hash();
  void set_allocated_uncompressed_hash(std::string* uncompressed_hash);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_uncompressed_hash();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_uncompressed_hash(
      std::string* uncompressed_hash);
  private:
  const std::string& _internal_uncompressed_hash() const;
  void _internal_set_uncompressed_hash(const std::string& value);
  std::string* _internal_mutable_uncompressed_hash();
  public:

  // string compressed_hash = 7;
  void clear_compressed_hash();
  const std::string& compressed_hash() const;
  void set_compressed_hash(const std::string& value);
  void set_compressed_hash(std::string&& value);
  void set_compressed_hash(const char* value);
  void set_compressed_hash(const char* value, size_t size);
  std::string* mutable_compressed_hash();
  std::string* release_compressed_hash();
  void set_allocated_compressed_hash(std::string* compressed_hash);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_compressed_hash();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_compressed_hash(
      std::string* compressed_hash);
  private:
  const std::string& _internal_compressed_hash() const;
  void _internal_set_compressed_hash(const std::string& value);
  std::string* _internal_mutable_compressed_hash();
  public:

  // uint64 uncompressed_size = 3;
  void clear_uncompressed_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 uncompressed_size() const;
  void set_uncompressed_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_uncompressed_size() const;
  void _internal_set_uncompressed_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 content_type = 2;
  void clear_content_type();
  ::PROTOBUF_NAMESPACE_ID::int32 content_type() const;
  void set_content_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_content_type() const;
  void _internal_set_content_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 compression_type = 5;
  void clear_compression_type();
  ::PROTOBUF_NAMESPACE_ID::int32 compression_type() const;
  void set_compression_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_compression_type() const;
  void _internal_set_compression_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint64 compressed_size = 6;
  void clear_compressed_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 compressed_size() const;
  void set_compressed_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_compressed_size() const;
  void _internal_set_compressed_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.FileInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uncompressed_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr compressed_hash_;
  ::PROTOBUF_NAMESPACE_ID::uint64 uncompressed_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 content_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 compression_type_;
  ::PROTOBUF_NAMESPACE_ID::uint64 compressed_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class ServerIndexChange PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.ServerIndexChange) */ {
 public:
  inline ServerIndexChange() : ServerIndexChange(nullptr) {};
  virtual ~ServerIndexChange();

  ServerIndexChange(const ServerIndexChange& from);
  ServerIndexChange(ServerIndexChange&& from) noexcept
    : ServerIndexChange() {
    *this = ::std::move(from);
  }

  inline ServerIndexChange& operator=(const ServerIndexChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerIndexChange& operator=(ServerIndexChange&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ServerIndexChange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerIndexChange* internal_default_instance() {
    return reinterpret_cast<const ServerIndexChange*>(
               &_ServerIndexChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ServerIndexChange& a, ServerIndexChange& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerIndexChange* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerIndexChange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerIndexChange* New() const final {
    return CreateMaybeMessage<ServerIndexChange>(nullptr);
  }

  ServerIndexChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerIndexChange>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ServerIndexChange& from);
  void MergeFrom(const ServerIndexChange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServerIndexChange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.ServerIndexChange";
  }
  protected:
  explicit ServerIndexChange(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicIdFieldNumber = 4,
    kDateFieldNumber = 5,
    kSeqFieldNumber = 1,
    kChangeTypeFieldNumber = 2,
    kResourceTypeFieldNumber = 3,
  };
  // string public_id = 4;
  void clear_public_id();
  const std::string& public_id() const;
  void set_public_id(const std::string& value);
  void set_public_id(std::string&& value);
  void set_public_id(const char* value);
  void set_public_id(const char* value, size_t size);
  std::string* mutable_public_id();
  std::string* release_public_id();
  void set_allocated_public_id(std::string* public_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_public_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_public_id(
      std::string* public_id);
  private:
  const std::string& _internal_public_id() const;
  void _internal_set_public_id(const std::string& value);
  std::string* _internal_mutable_public_id();
  public:

  // string date = 5;
  void clear_date();
  const std::string& date() const;
  void set_date(const std::string& value);
  void set_date(std::string&& value);
  void set_date(const char* value);
  void set_date(const char* value, size_t size);
  std::string* mutable_date();
  std::string* release_date();
  void set_allocated_date(std::string* date);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_date();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_date(
      std::string* date);
  private:
  const std::string& _internal_date() const;
  void _internal_set_date(const std::string& value);
  std::string* _internal_mutable_date();
  public:

  // int64 seq = 1;
  void clear_seq();
  ::PROTOBUF_NAMESPACE_ID::int64 seq() const;
  void set_seq(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_seq() const;
  void _internal_set_seq(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 change_type = 2;
  void clear_change_type();
  ::PROTOBUF_NAMESPACE_ID::int32 change_type() const;
  void set_change_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_change_type() const;
  void _internal_set_change_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .Orthanc.DatabasePluginMessages.ResourceType resource_type = 3;
  void clear_resource_type();
  ::Orthanc::DatabasePluginMessages::ResourceType resource_type() const;
  void set_resource_type(::Orthanc::DatabasePluginMessages::ResourceType value);
  private:
  ::Orthanc::DatabasePluginMessages::ResourceType _internal_resource_type() const;
  void _internal_set_resource_type(::Orthanc::DatabasePluginMessages::ResourceType value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.ServerIndexChange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr date_;
  ::PROTOBUF_NAMESPACE_ID::int64 seq_;
  ::PROTOBUF_NAMESPACE_ID::int32 change_type_;
  int resource_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class ExportedResource PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.ExportedResource) */ {
 public:
  inline ExportedResource() : ExportedResource(nullptr) {};
  virtual ~ExportedResource();

  ExportedResource(const ExportedResource& from);
  ExportedResource(ExportedResource&& from) noexcept
    : ExportedResource() {
    *this = ::std::move(from);
  }

  inline ExportedResource& operator=(const ExportedResource& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExportedResource& operator=(ExportedResource&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ExportedResource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExportedResource* internal_default_instance() {
    return reinterpret_cast<const ExportedResource*>(
               &_ExportedResource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ExportedResource& a, ExportedResource& b) {
    a.Swap(&b);
  }
  inline void Swap(ExportedResource* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExportedResource* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExportedResource* New() const final {
    return CreateMaybeMessage<ExportedResource>(nullptr);
  }

  ExportedResource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExportedResource>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ExportedResource& from);
  void MergeFrom(const ExportedResource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ExportedResource* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.ExportedResource";
  }
  protected:
  explicit ExportedResource(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicIdFieldNumber = 3,
    kModalityFieldNumber = 4,
    kDateFieldNumber = 5,
    kPatientIdFieldNumber = 6,
    kStudyInstanceUidFieldNumber = 7,
    kSeriesInstanceUidFieldNumber = 8,
    kSopInstanceUidFieldNumber = 9,
    kSeqFieldNumber = 1,
    kResourceTypeFieldNumber = 2,
  };
  // string public_id = 3;
  void clear_public_id();
  const std::string& public_id() const;
  void set_public_id(const std::string& value);
  void set_public_id(std::string&& value);
  void set_public_id(const char* value);
  void set_public_id(const char* value, size_t size);
  std::string* mutable_public_id();
  std::string* release_public_id();
  void set_allocated_public_id(std::string* public_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_public_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_public_id(
      std::string* public_id);
  private:
  const std::string& _internal_public_id() const;
  void _internal_set_public_id(const std::string& value);
  std::string* _internal_mutable_public_id();
  public:

  // string modality = 4;
  void clear_modality();
  const std::string& modality() const;
  void set_modality(const std::string& value);
  void set_modality(std::string&& value);
  void set_modality(const char* value);
  void set_modality(const char* value, size_t size);
  std::string* mutable_modality();
  std::string* release_modality();
  void set_allocated_modality(std::string* modality);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_modality();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_modality(
      std::string* modality);
  private:
  const std::string& _internal_modality() const;
  void _internal_set_modality(const std::string& value);
  std::string* _internal_mutable_modality();
  public:

  // string date = 5;
  void clear_date();
  const std::string& date() const;
  void set_date(const std::string& value);
  void set_date(std::string&& value);
  void set_date(const char* value);
  void set_date(const char* value, size_t size);
  std::string* mutable_date();
  std::string* release_date();
  void set_allocated_date(std::string* date);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_date();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_date(
      std::string* date);
  private:
  const std::string& _internal_date() const;
  void _internal_set_date(const std::string& value);
  std::string* _internal_mutable_date();
  public:

  // string patient_id = 6;
  void clear_patient_id();
  const std::string& patient_id() const;
  void set_patient_id(const std::string& value);
  void set_patient_id(std::string&& value);
  void set_patient_id(const char* value);
  void set_patient_id(const char* value, size_t size);
  std::string* mutable_patient_id();
  std::string* release_patient_id();
  void set_allocated_patient_id(std::string* patient_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_patient_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_patient_id(
      std::string* patient_id);
  private:
  const std::string& _internal_patient_id() const;
  void _internal_set_patient_id(const std::string& value);
  std::string* _internal_mutable_patient_id();
  public:

  // string study_instance_uid = 7;
  void clear_study_instance_uid();
  const std::string& study_instance_uid() const;
  void set_study_instance_uid(const std::string& value);
  void set_study_instance_uid(std::string&& value);
  void set_study_instance_uid(const char* value);
  void set_study_instance_uid(const char* value, size_t size);
  std::string* mutable_study_instance_uid();
  std::string* release_study_instance_uid();
  void set_allocated_study_instance_uid(std::string* study_instance_uid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_study_instance_uid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_study_instance_uid(
      std::string* study_instance_uid);
  private:
  const std::string& _internal_study_instance_uid() const;
  void _internal_set_study_instance_uid(const std::string& value);
  std::string* _internal_mutable_study_instance_uid();
  public:

  // string series_instance_uid = 8;
  void clear_series_instance_uid();
  const std::string& series_instance_uid() const;
  void set_series_instance_uid(const std::string& value);
  void set_series_instance_uid(std::string&& value);
  void set_series_instance_uid(const char* value);
  void set_series_instance_uid(const char* value, size_t size);
  std::string* mutable_series_instance_uid();
  std::string* release_series_instance_uid();
  void set_allocated_series_instance_uid(std::string* series_instance_uid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_series_instance_uid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_series_instance_uid(
      std::string* series_instance_uid);
  private:
  const std::string& _internal_series_instance_uid() const;
  void _internal_set_series_instance_uid(const std::string& value);
  std::string* _internal_mutable_series_instance_uid();
  public:

  // string sop_instance_uid = 9;
  void clear_sop_instance_uid();
  const std::string& sop_instance_uid() const;
  void set_sop_instance_uid(const std::string& value);
  void set_sop_instance_uid(std::string&& value);
  void set_sop_instance_uid(const char* value);
  void set_sop_instance_uid(const char* value, size_t size);
  std::string* mutable_sop_instance_uid();
  std::string* release_sop_instance_uid();
  void set_allocated_sop_instance_uid(std::string* sop_instance_uid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_sop_instance_uid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sop_instance_uid(
      std::string* sop_instance_uid);
  private:
  const std::string& _internal_sop_instance_uid() const;
  void _internal_set_sop_instance_uid(const std::string& value);
  std::string* _internal_mutable_sop_instance_uid();
  public:

  // int64 seq = 1;
  void clear_seq();
  ::PROTOBUF_NAMESPACE_ID::int64 seq() const;
  void set_seq(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_seq() const;
  void _internal_set_seq(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .Orthanc.DatabasePluginMessages.ResourceType resource_type = 2;
  void clear_resource_type();
  ::Orthanc::DatabasePluginMessages::ResourceType resource_type() const;
  void set_resource_type(::Orthanc::DatabasePluginMessages::ResourceType value);
  private:
  ::Orthanc::DatabasePluginMessages::ResourceType _internal_resource_type() const;
  void _internal_set_resource_type(::Orthanc::DatabasePluginMessages::ResourceType value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.ExportedResource)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr modality_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr patient_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr study_instance_uid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr series_instance_uid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sop_instance_uid_;
  ::PROTOBUF_NAMESPACE_ID::int64 seq_;
  int resource_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class DatabaseConstraint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.DatabaseConstraint) */ {
 public:
  inline DatabaseConstraint() : DatabaseConstraint(nullptr) {};
  virtual ~DatabaseConstraint();

  DatabaseConstraint(const DatabaseConstraint& from);
  DatabaseConstraint(DatabaseConstraint&& from) noexcept
    : DatabaseConstraint() {
    *this = ::std::move(from);
  }

  inline DatabaseConstraint& operator=(const DatabaseConstraint& from) {
    CopyFrom(from);
    return *this;
  }
  inline DatabaseConstraint& operator=(DatabaseConstraint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const DatabaseConstraint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DatabaseConstraint* internal_default_instance() {
    return reinterpret_cast<const DatabaseConstraint*>(
               &_DatabaseConstraint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DatabaseConstraint& a, DatabaseConstraint& b) {
    a.Swap(&b);
  }
  inline void Swap(DatabaseConstraint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DatabaseConstraint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DatabaseConstraint* New() const final {
    return CreateMaybeMessage<DatabaseConstraint>(nullptr);
  }

  DatabaseConstraint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DatabaseConstraint>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DatabaseConstraint& from);
  void MergeFrom(const DatabaseConstraint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DatabaseConstraint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.DatabaseConstraint";
  }
  protected:
  explicit DatabaseConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 8,
    kLevelFieldNumber = 1,
    kTagGroupFieldNumber = 2,
    kTagElementFieldNumber = 3,
    kIsIdentifierTagFieldNumber = 4,
    kIsCaseSensitiveFieldNumber = 5,
    kIsMandatoryFieldNumber = 6,
    kTypeFieldNumber = 7,
  };
  // repeated string values = 8;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  const std::string& values(int index) const;
  std::string* mutable_values(int index);
  void set_values(int index, const std::string& value);
  void set_values(int index, std::string&& value);
  void set_values(int index, const char* value);
  void set_values(int index, const char* value, size_t size);
  std::string* add_values();
  void add_values(const std::string& value);
  void add_values(std::string&& value);
  void add_values(const char* value);
  void add_values(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_values();
  private:
  const std::string& _internal_values(int index) const;
  std::string* _internal_add_values();
  public:

  // .Orthanc.DatabasePluginMessages.ResourceType level = 1;
  void clear_level();
  ::Orthanc::DatabasePluginMessages::ResourceType level() const;
  void set_level(::Orthanc::DatabasePluginMessages::ResourceType value);
  private:
  ::Orthanc::DatabasePluginMessages::ResourceType _internal_level() const;
  void _internal_set_level(::Orthanc::DatabasePluginMessages::ResourceType value);
  public:

  // uint32 tag_group = 2;
  void clear_tag_group();
  ::PROTOBUF_NAMESPACE_ID::uint32 tag_group() const;
  void set_tag_group(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tag_group() const;
  void _internal_set_tag_group(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 tag_element = 3;
  void clear_tag_element();
  ::PROTOBUF_NAMESPACE_ID::uint32 tag_element() const;
  void set_tag_element(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tag_element() const;
  void _internal_set_tag_element(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool is_identifier_tag = 4;
  void clear_is_identifier_tag();
  bool is_identifier_tag() const;
  void set_is_identifier_tag(bool value);
  private:
  bool _internal_is_identifier_tag() const;
  void _internal_set_is_identifier_tag(bool value);
  public:

  // bool is_case_sensitive = 5;
  void clear_is_case_sensitive();
  bool is_case_sensitive() const;
  void set_is_case_sensitive(bool value);
  private:
  bool _internal_is_case_sensitive() const;
  void _internal_set_is_case_sensitive(bool value);
  public:

  // bool is_mandatory = 6;
  void clear_is_mandatory();
  bool is_mandatory() const;
  void set_is_mandatory(bool value);
  private:
  bool _internal_is_mandatory() const;
  void _internal_set_is_mandatory(bool value);
  public:

  // .Orthanc.DatabasePluginMessages.ConstraintType type = 7;
  void clear_type();
  ::Orthanc::DatabasePluginMessages::ConstraintType type() const;
  void set_type(::Orthanc::DatabasePluginMessages::ConstraintType value);
  private:
  ::Orthanc::DatabasePluginMessages::ConstraintType _internal_type() const;
  void _internal_set_type(::Orthanc::DatabasePluginMessages::ConstraintType value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.DatabaseConstraint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> values_;
  int level_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tag_group_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tag_element_;
  bool is_identifier_tag_;
  bool is_case_sensitive_;
  bool is_mandatory_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class GetSystemInformation_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.GetSystemInformation.Request) */ {
 public:
  inline GetSystemInformation_Request() : GetSystemInformation_Request(nullptr) {};
  virtual ~GetSystemInformation_Request();

  GetSystemInformation_Request(const GetSystemInformation_Request& from);
  GetSystemInformation_Request(GetSystemInformation_Request&& from) noexcept
    : GetSystemInformation_Request() {
    *this = ::std::move(from);
  }

  inline GetSystemInformation_Request& operator=(const GetSystemInformation_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSystemInformation_Request& operator=(GetSystemInformation_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GetSystemInformation_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetSystemInformation_Request* internal_default_instance() {
    return reinterpret_cast<const GetSystemInformation_Request*>(
               &_GetSystemInformation_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetSystemInformation_Request& a, GetSystemInformation_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSystemInformation_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSystemInformation_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSystemInformation_Request* New() const final {
    return CreateMaybeMessage<GetSystemInformation_Request>(nullptr);
  }

  GetSystemInformation_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSystemInformation_Request>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GetSystemInformation_Request& from);
  void MergeFrom(const GetSystemInformation_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetSystemInformation_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.GetSystemInformation.Request";
  }
  protected:
  explicit GetSystemInformation_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.GetSystemInformation.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class GetSystemInformation_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.GetSystemInformation.Response) */ {
 public:
  inline GetSystemInformation_Response() : GetSystemInformation_Response(nullptr) {};
  virtual ~GetSystemInformation_Response();

  GetSystemInformation_Response(const GetSystemInformation_Response& from);
  GetSystemInformation_Response(GetSystemInformation_Response&& from) noexcept
    : GetSystemInformation_Response() {
    *this = ::std::move(from);
  }

  inline GetSystemInformation_Response& operator=(const GetSystemInformation_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSystemInformation_Response& operator=(GetSystemInformation_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GetSystemInformation_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetSystemInformation_Response* internal_default_instance() {
    return reinterpret_cast<const GetSystemInformation_Response*>(
               &_GetSystemInformation_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetSystemInformation_Response& a, GetSystemInformation_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSystemInformation_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSystemInformation_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSystemInformation_Response* New() const final {
    return CreateMaybeMessage<GetSystemInformation_Response>(nullptr);
  }

  GetSystemInformation_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSystemInformation_Response>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GetSystemInformation_Response& from);
  void MergeFrom(const GetSystemInformation_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetSystemInformation_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.GetSystemInformation.Response";
  }
  protected:
  explicit GetSystemInformation_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatabaseVersionFieldNumber = 1,
    kSupportsFlushToDiskFieldNumber = 2,
    kSupportsRevisionsFieldNumber = 3,
    kSupportsLabelsFieldNumber = 4,
    kSupportsIncrementGlobalPropertyFieldNumber = 5,
    kHasUpdateAndGetStatisticsFieldNumber = 6,
    kHasMeasureLatencyFieldNumber = 7,
  };
  // uint32 database_version = 1;
  void clear_database_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 database_version() const;
  void set_database_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_database_version() const;
  void _internal_set_database_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool supports_flush_to_disk = 2;
  void clear_supports_flush_to_disk();
  bool supports_flush_to_disk() const;
  void set_supports_flush_to_disk(bool value);
  private:
  bool _internal_supports_flush_to_disk() const;
  void _internal_set_supports_flush_to_disk(bool value);
  public:

  // bool supports_revisions = 3;
  void clear_supports_revisions();
  bool supports_revisions() const;
  void set_supports_revisions(bool value);
  private:
  bool _internal_supports_revisions() const;
  void _internal_set_supports_revisions(bool value);
  public:

  // bool supports_labels = 4;
  void clear_supports_labels();
  bool supports_labels() const;
  void set_supports_labels(bool value);
  private:
  bool _internal_supports_labels() const;
  void _internal_set_supports_labels(bool value);
  public:

  // bool supports_increment_global_property = 5;
  void clear_supports_increment_global_property();
  bool supports_increment_global_property() const;
  void set_supports_increment_global_property(bool value);
  private:
  bool _internal_supports_increment_global_property() const;
  void _internal_set_supports_increment_global_property(bool value);
  public:

  // bool has_update_and_get_statistics = 6;
  void clear_has_update_and_get_statistics();
  bool has_update_and_get_statistics() const;
  void set_has_update_and_get_statistics(bool value);
  private:
  bool _internal_has_update_and_get_statistics() const;
  void _internal_set_has_update_and_get_statistics(bool value);
  public:

  // bool has_measure_latency = 7;
  void clear_has_measure_latency();
  bool has_measure_latency() const;
  void set_has_measure_latency(bool value);
  private:
  bool _internal_has_measure_latency() const;
  void _internal_set_has_measure_latency(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.GetSystemInformation.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 database_version_;
  bool supports_flush_to_disk_;
  bool supports_revisions_;
  bool supports_labels_;
  bool supports_increment_global_property_;
  bool has_update_and_get_statistics_;
  bool has_measure_latency_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class GetSystemInformation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.GetSystemInformation) */ {
 public:
  inline GetSystemInformation() : GetSystemInformation(nullptr) {};
  virtual ~GetSystemInformation();

  GetSystemInformation(const GetSystemInformation& from);
  GetSystemInformation(GetSystemInformation&& from) noexcept
    : GetSystemInformation() {
    *this = ::std::move(from);
  }

  inline GetSystemInformation& operator=(const GetSystemInformation& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSystemInformation& operator=(GetSystemInformation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GetSystemInformation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetSystemInformation* internal_default_instance() {
    return reinterpret_cast<const GetSystemInformation*>(
               &_GetSystemInformation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetSystemInformation& a, GetSystemInformation& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSystemInformation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSystemInformation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSystemInformation* New() const final {
    return CreateMaybeMessage<GetSystemInformation>(nullptr);
  }

  GetSystemInformation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSystemInformation>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GetSystemInformation& from);
  void MergeFrom(const GetSystemInformation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetSystemInformation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.GetSystemInformation";
  }
  protected:
  explicit GetSystemInformation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef GetSystemInformation_Request Request;
  typedef GetSystemInformation_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.GetSystemInformation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class Open_Request_IdentifierTag PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.Open.Request.IdentifierTag) */ {
 public:
  inline Open_Request_IdentifierTag() : Open_Request_IdentifierTag(nullptr) {};
  virtual ~Open_Request_IdentifierTag();

  Open_Request_IdentifierTag(const Open_Request_IdentifierTag& from);
  Open_Request_IdentifierTag(Open_Request_IdentifierTag&& from) noexcept
    : Open_Request_IdentifierTag() {
    *this = ::std::move(from);
  }

  inline Open_Request_IdentifierTag& operator=(const Open_Request_IdentifierTag& from) {
    CopyFrom(from);
    return *this;
  }
  inline Open_Request_IdentifierTag& operator=(Open_Request_IdentifierTag&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Open_Request_IdentifierTag& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Open_Request_IdentifierTag* internal_default_instance() {
    return reinterpret_cast<const Open_Request_IdentifierTag*>(
               &_Open_Request_IdentifierTag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Open_Request_IdentifierTag& a, Open_Request_IdentifierTag& b) {
    a.Swap(&b);
  }
  inline void Swap(Open_Request_IdentifierTag* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Open_Request_IdentifierTag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Open_Request_IdentifierTag* New() const final {
    return CreateMaybeMessage<Open_Request_IdentifierTag>(nullptr);
  }

  Open_Request_IdentifierTag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Open_Request_IdentifierTag>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Open_Request_IdentifierTag& from);
  void MergeFrom(const Open_Request_IdentifierTag& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Open_Request_IdentifierTag* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.Open.Request.IdentifierTag";
  }
  protected:
  explicit Open_Request_IdentifierTag(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 4,
    kLevelFieldNumber = 1,
    kGroupFieldNumber = 2,
    kElementFieldNumber = 3,
  };
  // string name = 4;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .Orthanc.DatabasePluginMessages.ResourceType level = 1;
  void clear_level();
  ::Orthanc::DatabasePluginMessages::ResourceType level() const;
  void set_level(::Orthanc::DatabasePluginMessages::ResourceType value);
  private:
  ::Orthanc::DatabasePluginMessages::ResourceType _internal_level() const;
  void _internal_set_level(::Orthanc::DatabasePluginMessages::ResourceType value);
  public:

  // uint32 group = 2;
  void clear_group();
  ::PROTOBUF_NAMESPACE_ID::uint32 group() const;
  void set_group(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_group() const;
  void _internal_set_group(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 element = 3;
  void clear_element();
  ::PROTOBUF_NAMESPACE_ID::uint32 element() const;
  void set_element(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_element() const;
  void _internal_set_element(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.Open.Request.IdentifierTag)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int level_;
  ::PROTOBUF_NAMESPACE_ID::uint32 group_;
  ::PROTOBUF_NAMESPACE_ID::uint32 element_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class Open_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.Open.Request) */ {
 public:
  inline Open_Request() : Open_Request(nullptr) {};
  virtual ~Open_Request();

  Open_Request(const Open_Request& from);
  Open_Request(Open_Request&& from) noexcept
    : Open_Request() {
    *this = ::std::move(from);
  }

  inline Open_Request& operator=(const Open_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Open_Request& operator=(Open_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Open_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Open_Request* internal_default_instance() {
    return reinterpret_cast<const Open_Request*>(
               &_Open_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Open_Request& a, Open_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Open_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Open_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Open_Request* New() const final {
    return CreateMaybeMessage<Open_Request>(nullptr);
  }

  Open_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Open_Request>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Open_Request& from);
  void MergeFrom(const Open_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Open_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.Open.Request";
  }
  protected:
  explicit Open_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef Open_Request_IdentifierTag IdentifierTag;

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifierTagsFieldNumber = 1,
  };
  // repeated .Orthanc.DatabasePluginMessages.Open.Request.IdentifierTag identifier_tags = 1;
  int identifier_tags_size() const;
  private:
  int _internal_identifier_tags_size() const;
  public:
  void clear_identifier_tags();
  ::Orthanc::DatabasePluginMessages::Open_Request_IdentifierTag* mutable_identifier_tags(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Orthanc::DatabasePluginMessages::Open_Request_IdentifierTag >*
      mutable_identifier_tags();
  private:
  const ::Orthanc::DatabasePluginMessages::Open_Request_IdentifierTag& _internal_identifier_tags(int index) const;
  ::Orthanc::DatabasePluginMessages::Open_Request_IdentifierTag* _internal_add_identifier_tags();
  public:
  const ::Orthanc::DatabasePluginMessages::Open_Request_IdentifierTag& identifier_tags(int index) const;
  ::Orthanc::DatabasePluginMessages::Open_Request_IdentifierTag* add_identifier_tags();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Orthanc::DatabasePluginMessages::Open_Request_IdentifierTag >&
      identifier_tags() const;

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.Open.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Orthanc::DatabasePluginMessages::Open_Request_IdentifierTag > identifier_tags_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class Open_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.Open.Response) */ {
 public:
  inline Open_Response() : Open_Response(nullptr) {};
  virtual ~Open_Response();

  Open_Response(const Open_Response& from);
  Open_Response(Open_Response&& from) noexcept
    : Open_Response() {
    *this = ::std::move(from);
  }

  inline Open_Response& operator=(const Open_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Open_Response& operator=(Open_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Open_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Open_Response* internal_default_instance() {
    return reinterpret_cast<const Open_Response*>(
               &_Open_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Open_Response& a, Open_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Open_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Open_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Open_Response* New() const final {
    return CreateMaybeMessage<Open_Response>(nullptr);
  }

  Open_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Open_Response>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Open_Response& from);
  void MergeFrom(const Open_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Open_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.Open.Response";
  }
  protected:
  explicit Open_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.Open.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class Open PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.Open) */ {
 public:
  inline Open() : Open(nullptr) {};
  virtual ~Open();

  Open(const Open& from);
  Open(Open&& from) noexcept
    : Open() {
    *this = ::std::move(from);
  }

  inline Open& operator=(const Open& from) {
    CopyFrom(from);
    return *this;
  }
  inline Open& operator=(Open&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Open& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Open* internal_default_instance() {
    return reinterpret_cast<const Open*>(
               &_Open_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Open& a, Open& b) {
    a.Swap(&b);
  }
  inline void Swap(Open* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Open* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Open* New() const final {
    return CreateMaybeMessage<Open>(nullptr);
  }

  Open* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Open>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Open& from);
  void MergeFrom(const Open& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Open* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.Open";
  }
  protected:
  explicit Open(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef Open_Request Request;
  typedef Open_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.Open)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class Close_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.Close.Request) */ {
 public:
  inline Close_Request() : Close_Request(nullptr) {};
  virtual ~Close_Request();

  Close_Request(const Close_Request& from);
  Close_Request(Close_Request&& from) noexcept
    : Close_Request() {
    *this = ::std::move(from);
  }

  inline Close_Request& operator=(const Close_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Close_Request& operator=(Close_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Close_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Close_Request* internal_default_instance() {
    return reinterpret_cast<const Close_Request*>(
               &_Close_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Close_Request& a, Close_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Close_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Close_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Close_Request* New() const final {
    return CreateMaybeMessage<Close_Request>(nullptr);
  }

  Close_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Close_Request>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Close_Request& from);
  void MergeFrom(const Close_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Close_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.Close.Request";
  }
  protected:
  explicit Close_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.Close.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class Close_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.Close.Response) */ {
 public:
  inline Close_Response() : Close_Response(nullptr) {};
  virtual ~Close_Response();

  Close_Response(const Close_Response& from);
  Close_Response(Close_Response&& from) noexcept
    : Close_Response() {
    *this = ::std::move(from);
  }

  inline Close_Response& operator=(const Close_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Close_Response& operator=(Close_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Close_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Close_Response* internal_default_instance() {
    return reinterpret_cast<const Close_Response*>(
               &_Close_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Close_Response& a, Close_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Close_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Close_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Close_Response* New() const final {
    return CreateMaybeMessage<Close_Response>(nullptr);
  }

  Close_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Close_Response>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Close_Response& from);
  void MergeFrom(const Close_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Close_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.Close.Response";
  }
  protected:
  explicit Close_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.Close.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class Close PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.Close) */ {
 public:
  inline Close() : Close(nullptr) {};
  virtual ~Close();

  Close(const Close& from);
  Close(Close&& from) noexcept
    : Close() {
    *this = ::std::move(from);
  }

  inline Close& operator=(const Close& from) {
    CopyFrom(from);
    return *this;
  }
  inline Close& operator=(Close&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Close& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Close* internal_default_instance() {
    return reinterpret_cast<const Close*>(
               &_Close_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Close& a, Close& b) {
    a.Swap(&b);
  }
  inline void Swap(Close* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Close* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Close* New() const final {
    return CreateMaybeMessage<Close>(nullptr);
  }

  Close* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Close>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Close& from);
  void MergeFrom(const Close& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Close* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.Close";
  }
  protected:
  explicit Close(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef Close_Request Request;
  typedef Close_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.Close)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class FlushToDisk_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.FlushToDisk.Request) */ {
 public:
  inline FlushToDisk_Request() : FlushToDisk_Request(nullptr) {};
  virtual ~FlushToDisk_Request();

  FlushToDisk_Request(const FlushToDisk_Request& from);
  FlushToDisk_Request(FlushToDisk_Request&& from) noexcept
    : FlushToDisk_Request() {
    *this = ::std::move(from);
  }

  inline FlushToDisk_Request& operator=(const FlushToDisk_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlushToDisk_Request& operator=(FlushToDisk_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const FlushToDisk_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FlushToDisk_Request* internal_default_instance() {
    return reinterpret_cast<const FlushToDisk_Request*>(
               &_FlushToDisk_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(FlushToDisk_Request& a, FlushToDisk_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(FlushToDisk_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FlushToDisk_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FlushToDisk_Request* New() const final {
    return CreateMaybeMessage<FlushToDisk_Request>(nullptr);
  }

  FlushToDisk_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FlushToDisk_Request>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FlushToDisk_Request& from);
  void MergeFrom(const FlushToDisk_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FlushToDisk_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.FlushToDisk.Request";
  }
  protected:
  explicit FlushToDisk_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.FlushToDisk.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class FlushToDisk_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.FlushToDisk.Response) */ {
 public:
  inline FlushToDisk_Response() : FlushToDisk_Response(nullptr) {};
  virtual ~FlushToDisk_Response();

  FlushToDisk_Response(const FlushToDisk_Response& from);
  FlushToDisk_Response(FlushToDisk_Response&& from) noexcept
    : FlushToDisk_Response() {
    *this = ::std::move(from);
  }

  inline FlushToDisk_Response& operator=(const FlushToDisk_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlushToDisk_Response& operator=(FlushToDisk_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const FlushToDisk_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FlushToDisk_Response* internal_default_instance() {
    return reinterpret_cast<const FlushToDisk_Response*>(
               &_FlushToDisk_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(FlushToDisk_Response& a, FlushToDisk_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(FlushToDisk_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FlushToDisk_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FlushToDisk_Response* New() const final {
    return CreateMaybeMessage<FlushToDisk_Response>(nullptr);
  }

  FlushToDisk_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FlushToDisk_Response>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FlushToDisk_Response& from);
  void MergeFrom(const FlushToDisk_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FlushToDisk_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.FlushToDisk.Response";
  }
  protected:
  explicit FlushToDisk_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.FlushToDisk.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class FlushToDisk PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.FlushToDisk) */ {
 public:
  inline FlushToDisk() : FlushToDisk(nullptr) {};
  virtual ~FlushToDisk();

  FlushToDisk(const FlushToDisk& from);
  FlushToDisk(FlushToDisk&& from) noexcept
    : FlushToDisk() {
    *this = ::std::move(from);
  }

  inline FlushToDisk& operator=(const FlushToDisk& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlushToDisk& operator=(FlushToDisk&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const FlushToDisk& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FlushToDisk* internal_default_instance() {
    return reinterpret_cast<const FlushToDisk*>(
               &_FlushToDisk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(FlushToDisk& a, FlushToDisk& b) {
    a.Swap(&b);
  }
  inline void Swap(FlushToDisk* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FlushToDisk* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FlushToDisk* New() const final {
    return CreateMaybeMessage<FlushToDisk>(nullptr);
  }

  FlushToDisk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FlushToDisk>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FlushToDisk& from);
  void MergeFrom(const FlushToDisk& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FlushToDisk* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.FlushToDisk";
  }
  protected:
  explicit FlushToDisk(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef FlushToDisk_Request Request;
  typedef FlushToDisk_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.FlushToDisk)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class StartTransaction_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.StartTransaction.Request) */ {
 public:
  inline StartTransaction_Request() : StartTransaction_Request(nullptr) {};
  virtual ~StartTransaction_Request();

  StartTransaction_Request(const StartTransaction_Request& from);
  StartTransaction_Request(StartTransaction_Request&& from) noexcept
    : StartTransaction_Request() {
    *this = ::std::move(from);
  }

  inline StartTransaction_Request& operator=(const StartTransaction_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartTransaction_Request& operator=(StartTransaction_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const StartTransaction_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartTransaction_Request* internal_default_instance() {
    return reinterpret_cast<const StartTransaction_Request*>(
               &_StartTransaction_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(StartTransaction_Request& a, StartTransaction_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(StartTransaction_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartTransaction_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartTransaction_Request* New() const final {
    return CreateMaybeMessage<StartTransaction_Request>(nullptr);
  }

  StartTransaction_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartTransaction_Request>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const StartTransaction_Request& from);
  void MergeFrom(const StartTransaction_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StartTransaction_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.StartTransaction.Request";
  }
  protected:
  explicit StartTransaction_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // .Orthanc.DatabasePluginMessages.TransactionType type = 1;
  void clear_type();
  ::Orthanc::DatabasePluginMessages::TransactionType type() const;
  void set_type(::Orthanc::DatabasePluginMessages::TransactionType value);
  private:
  ::Orthanc::DatabasePluginMessages::TransactionType _internal_type() const;
  void _internal_set_type(::Orthanc::DatabasePluginMessages::TransactionType value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.StartTransaction.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class StartTransaction_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.StartTransaction.Response) */ {
 public:
  inline StartTransaction_Response() : StartTransaction_Response(nullptr) {};
  virtual ~StartTransaction_Response();

  StartTransaction_Response(const StartTransaction_Response& from);
  StartTransaction_Response(StartTransaction_Response&& from) noexcept
    : StartTransaction_Response() {
    *this = ::std::move(from);
  }

  inline StartTransaction_Response& operator=(const StartTransaction_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartTransaction_Response& operator=(StartTransaction_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const StartTransaction_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartTransaction_Response* internal_default_instance() {
    return reinterpret_cast<const StartTransaction_Response*>(
               &_StartTransaction_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(StartTransaction_Response& a, StartTransaction_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(StartTransaction_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartTransaction_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartTransaction_Response* New() const final {
    return CreateMaybeMessage<StartTransaction_Response>(nullptr);
  }

  StartTransaction_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartTransaction_Response>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const StartTransaction_Response& from);
  void MergeFrom(const StartTransaction_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StartTransaction_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.StartTransaction.Response";
  }
  protected:
  explicit StartTransaction_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionFieldNumber = 1,
  };
  // sfixed64 transaction = 1;
  void clear_transaction();
  ::PROTOBUF_NAMESPACE_ID::int64 transaction() const;
  void set_transaction(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_transaction() const;
  void _internal_set_transaction(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.StartTransaction.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 transaction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class StartTransaction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.StartTransaction) */ {
 public:
  inline StartTransaction() : StartTransaction(nullptr) {};
  virtual ~StartTransaction();

  StartTransaction(const StartTransaction& from);
  StartTransaction(StartTransaction&& from) noexcept
    : StartTransaction() {
    *this = ::std::move(from);
  }

  inline StartTransaction& operator=(const StartTransaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartTransaction& operator=(StartTransaction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const StartTransaction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartTransaction* internal_default_instance() {
    return reinterpret_cast<const StartTransaction*>(
               &_StartTransaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(StartTransaction& a, StartTransaction& b) {
    a.Swap(&b);
  }
  inline void Swap(StartTransaction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartTransaction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartTransaction* New() const final {
    return CreateMaybeMessage<StartTransaction>(nullptr);
  }

  StartTransaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartTransaction>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const StartTransaction& from);
  void MergeFrom(const StartTransaction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StartTransaction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.StartTransaction";
  }
  protected:
  explicit StartTransaction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef StartTransaction_Request Request;
  typedef StartTransaction_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.StartTransaction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class Upgrade_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.Upgrade.Request) */ {
 public:
  inline Upgrade_Request() : Upgrade_Request(nullptr) {};
  virtual ~Upgrade_Request();

  Upgrade_Request(const Upgrade_Request& from);
  Upgrade_Request(Upgrade_Request&& from) noexcept
    : Upgrade_Request() {
    *this = ::std::move(from);
  }

  inline Upgrade_Request& operator=(const Upgrade_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Upgrade_Request& operator=(Upgrade_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Upgrade_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Upgrade_Request* internal_default_instance() {
    return reinterpret_cast<const Upgrade_Request*>(
               &_Upgrade_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(Upgrade_Request& a, Upgrade_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Upgrade_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Upgrade_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Upgrade_Request* New() const final {
    return CreateMaybeMessage<Upgrade_Request>(nullptr);
  }

  Upgrade_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Upgrade_Request>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Upgrade_Request& from);
  void MergeFrom(const Upgrade_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Upgrade_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.Upgrade.Request";
  }
  protected:
  explicit Upgrade_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStorageAreaFieldNumber = 2,
    kTransactionFieldNumber = 3,
    kTargetVersionFieldNumber = 1,
  };
  // sfixed64 storage_area = 2;
  void clear_storage_area();
  ::PROTOBUF_NAMESPACE_ID::int64 storage_area() const;
  void set_storage_area(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_storage_area() const;
  void _internal_set_storage_area(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // sfixed64 transaction = 3;
  void clear_transaction();
  ::PROTOBUF_NAMESPACE_ID::int64 transaction() const;
  void set_transaction(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_transaction() const;
  void _internal_set_transaction(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 target_version = 1;
  void clear_target_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 target_version() const;
  void set_target_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_target_version() const;
  void _internal_set_target_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.Upgrade.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 storage_area_;
  ::PROTOBUF_NAMESPACE_ID::int64 transaction_;
  ::PROTOBUF_NAMESPACE_ID::uint32 target_version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class Upgrade_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.Upgrade.Response) */ {
 public:
  inline Upgrade_Response() : Upgrade_Response(nullptr) {};
  virtual ~Upgrade_Response();

  Upgrade_Response(const Upgrade_Response& from);
  Upgrade_Response(Upgrade_Response&& from) noexcept
    : Upgrade_Response() {
    *this = ::std::move(from);
  }

  inline Upgrade_Response& operator=(const Upgrade_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Upgrade_Response& operator=(Upgrade_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Upgrade_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Upgrade_Response* internal_default_instance() {
    return reinterpret_cast<const Upgrade_Response*>(
               &_Upgrade_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(Upgrade_Response& a, Upgrade_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Upgrade_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Upgrade_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Upgrade_Response* New() const final {
    return CreateMaybeMessage<Upgrade_Response>(nullptr);
  }

  Upgrade_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Upgrade_Response>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Upgrade_Response& from);
  void MergeFrom(const Upgrade_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Upgrade_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.Upgrade.Response";
  }
  protected:
  explicit Upgrade_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.Upgrade.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class Upgrade PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.Upgrade) */ {
 public:
  inline Upgrade() : Upgrade(nullptr) {};
  virtual ~Upgrade();

  Upgrade(const Upgrade& from);
  Upgrade(Upgrade&& from) noexcept
    : Upgrade() {
    *this = ::std::move(from);
  }

  inline Upgrade& operator=(const Upgrade& from) {
    CopyFrom(from);
    return *this;
  }
  inline Upgrade& operator=(Upgrade&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Upgrade& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Upgrade* internal_default_instance() {
    return reinterpret_cast<const Upgrade*>(
               &_Upgrade_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(Upgrade& a, Upgrade& b) {
    a.Swap(&b);
  }
  inline void Swap(Upgrade* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Upgrade* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Upgrade* New() const final {
    return CreateMaybeMessage<Upgrade>(nullptr);
  }

  Upgrade* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Upgrade>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Upgrade& from);
  void MergeFrom(const Upgrade& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Upgrade* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.Upgrade";
  }
  protected:
  explicit Upgrade(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef Upgrade_Request Request;
  typedef Upgrade_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.Upgrade)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class FinalizeTransaction_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.FinalizeTransaction.Request) */ {
 public:
  inline FinalizeTransaction_Request() : FinalizeTransaction_Request(nullptr) {};
  virtual ~FinalizeTransaction_Request();

  FinalizeTransaction_Request(const FinalizeTransaction_Request& from);
  FinalizeTransaction_Request(FinalizeTransaction_Request&& from) noexcept
    : FinalizeTransaction_Request() {
    *this = ::std::move(from);
  }

  inline FinalizeTransaction_Request& operator=(const FinalizeTransaction_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline FinalizeTransaction_Request& operator=(FinalizeTransaction_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const FinalizeTransaction_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FinalizeTransaction_Request* internal_default_instance() {
    return reinterpret_cast<const FinalizeTransaction_Request*>(
               &_FinalizeTransaction_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(FinalizeTransaction_Request& a, FinalizeTransaction_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(FinalizeTransaction_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FinalizeTransaction_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FinalizeTransaction_Request* New() const final {
    return CreateMaybeMessage<FinalizeTransaction_Request>(nullptr);
  }

  FinalizeTransaction_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FinalizeTransaction_Request>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FinalizeTransaction_Request& from);
  void MergeFrom(const FinalizeTransaction_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FinalizeTransaction_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.FinalizeTransaction.Request";
  }
  protected:
  explicit FinalizeTransaction_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionFieldNumber = 1,
  };
  // sfixed64 transaction = 1;
  void clear_transaction();
  ::PROTOBUF_NAMESPACE_ID::int64 transaction() const;
  void set_transaction(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_transaction() const;
  void _internal_set_transaction(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.FinalizeTransaction.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 transaction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class FinalizeTransaction_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.FinalizeTransaction.Response) */ {
 public:
  inline FinalizeTransaction_Response() : FinalizeTransaction_Response(nullptr) {};
  virtual ~FinalizeTransaction_Response();

  FinalizeTransaction_Response(const FinalizeTransaction_Response& from);
  FinalizeTransaction_Response(FinalizeTransaction_Response&& from) noexcept
    : FinalizeTransaction_Response() {
    *this = ::std::move(from);
  }

  inline FinalizeTransaction_Response& operator=(const FinalizeTransaction_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline FinalizeTransaction_Response& operator=(FinalizeTransaction_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const FinalizeTransaction_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FinalizeTransaction_Response* internal_default_instance() {
    return reinterpret_cast<const FinalizeTransaction_Response*>(
               &_FinalizeTransaction_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(FinalizeTransaction_Response& a, FinalizeTransaction_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(FinalizeTransaction_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FinalizeTransaction_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FinalizeTransaction_Response* New() const final {
    return CreateMaybeMessage<FinalizeTransaction_Response>(nullptr);
  }

  FinalizeTransaction_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FinalizeTransaction_Response>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FinalizeTransaction_Response& from);
  void MergeFrom(const FinalizeTransaction_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FinalizeTransaction_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.FinalizeTransaction.Response";
  }
  protected:
  explicit FinalizeTransaction_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.FinalizeTransaction.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class FinalizeTransaction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.FinalizeTransaction) */ {
 public:
  inline FinalizeTransaction() : FinalizeTransaction(nullptr) {};
  virtual ~FinalizeTransaction();

  FinalizeTransaction(const FinalizeTransaction& from);
  FinalizeTransaction(FinalizeTransaction&& from) noexcept
    : FinalizeTransaction() {
    *this = ::std::move(from);
  }

  inline FinalizeTransaction& operator=(const FinalizeTransaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline FinalizeTransaction& operator=(FinalizeTransaction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const FinalizeTransaction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FinalizeTransaction* internal_default_instance() {
    return reinterpret_cast<const FinalizeTransaction*>(
               &_FinalizeTransaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(FinalizeTransaction& a, FinalizeTransaction& b) {
    a.Swap(&b);
  }
  inline void Swap(FinalizeTransaction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FinalizeTransaction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FinalizeTransaction* New() const final {
    return CreateMaybeMessage<FinalizeTransaction>(nullptr);
  }

  FinalizeTransaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FinalizeTransaction>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FinalizeTransaction& from);
  void MergeFrom(const FinalizeTransaction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FinalizeTransaction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.FinalizeTransaction";
  }
  protected:
  explicit FinalizeTransaction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef FinalizeTransaction_Request Request;
  typedef FinalizeTransaction_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.FinalizeTransaction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class MeasureLatency_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.MeasureLatency.Request) */ {
 public:
  inline MeasureLatency_Request() : MeasureLatency_Request(nullptr) {};
  virtual ~MeasureLatency_Request();

  MeasureLatency_Request(const MeasureLatency_Request& from);
  MeasureLatency_Request(MeasureLatency_Request&& from) noexcept
    : MeasureLatency_Request() {
    *this = ::std::move(from);
  }

  inline MeasureLatency_Request& operator=(const MeasureLatency_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline MeasureLatency_Request& operator=(MeasureLatency_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const MeasureLatency_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MeasureLatency_Request* internal_default_instance() {
    return reinterpret_cast<const MeasureLatency_Request*>(
               &_MeasureLatency_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(MeasureLatency_Request& a, MeasureLatency_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(MeasureLatency_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MeasureLatency_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MeasureLatency_Request* New() const final {
    return CreateMaybeMessage<MeasureLatency_Request>(nullptr);
  }

  MeasureLatency_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MeasureLatency_Request>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MeasureLatency_Request& from);
  void MergeFrom(const MeasureLatency_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MeasureLatency_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.MeasureLatency.Request";
  }
  protected:
  explicit MeasureLatency_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.MeasureLatency.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class MeasureLatency_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.MeasureLatency.Response) */ {
 public:
  inline MeasureLatency_Response() : MeasureLatency_Response(nullptr) {};
  virtual ~MeasureLatency_Response();

  MeasureLatency_Response(const MeasureLatency_Response& from);
  MeasureLatency_Response(MeasureLatency_Response&& from) noexcept
    : MeasureLatency_Response() {
    *this = ::std::move(from);
  }

  inline MeasureLatency_Response& operator=(const MeasureLatency_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline MeasureLatency_Response& operator=(MeasureLatency_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const MeasureLatency_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MeasureLatency_Response* internal_default_instance() {
    return reinterpret_cast<const MeasureLatency_Response*>(
               &_MeasureLatency_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(MeasureLatency_Response& a, MeasureLatency_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(MeasureLatency_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MeasureLatency_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MeasureLatency_Response* New() const final {
    return CreateMaybeMessage<MeasureLatency_Response>(nullptr);
  }

  MeasureLatency_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MeasureLatency_Response>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MeasureLatency_Response& from);
  void MergeFrom(const MeasureLatency_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MeasureLatency_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.MeasureLatency.Response";
  }
  protected:
  explicit MeasureLatency_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatencyUsFieldNumber = 1,
  };
  // int64 latency_us = 1;
  void clear_latency_us();
  ::PROTOBUF_NAMESPACE_ID::int64 latency_us() const;
  void set_latency_us(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_latency_us() const;
  void _internal_set_latency_us(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.MeasureLatency.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 latency_us_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class MeasureLatency PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.MeasureLatency) */ {
 public:
  inline MeasureLatency() : MeasureLatency(nullptr) {};
  virtual ~MeasureLatency();

  MeasureLatency(const MeasureLatency& from);
  MeasureLatency(MeasureLatency&& from) noexcept
    : MeasureLatency() {
    *this = ::std::move(from);
  }

  inline MeasureLatency& operator=(const MeasureLatency& from) {
    CopyFrom(from);
    return *this;
  }
  inline MeasureLatency& operator=(MeasureLatency&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const MeasureLatency& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MeasureLatency* internal_default_instance() {
    return reinterpret_cast<const MeasureLatency*>(
               &_MeasureLatency_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(MeasureLatency& a, MeasureLatency& b) {
    a.Swap(&b);
  }
  inline void Swap(MeasureLatency* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MeasureLatency* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MeasureLatency* New() const final {
    return CreateMaybeMessage<MeasureLatency>(nullptr);
  }

  MeasureLatency* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MeasureLatency>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MeasureLatency& from);
  void MergeFrom(const MeasureLatency& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MeasureLatency* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.MeasureLatency";
  }
  protected:
  explicit MeasureLatency(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef MeasureLatency_Request Request;
  typedef MeasureLatency_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.MeasureLatency)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class DatabaseRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.DatabaseRequest) */ {
 public:
  inline DatabaseRequest() : DatabaseRequest(nullptr) {};
  virtual ~DatabaseRequest();

  DatabaseRequest(const DatabaseRequest& from);
  DatabaseRequest(DatabaseRequest&& from) noexcept
    : DatabaseRequest() {
    *this = ::std::move(from);
  }

  inline DatabaseRequest& operator=(const DatabaseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DatabaseRequest& operator=(DatabaseRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const DatabaseRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DatabaseRequest* internal_default_instance() {
    return reinterpret_cast<const DatabaseRequest*>(
               &_DatabaseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(DatabaseRequest& a, DatabaseRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DatabaseRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DatabaseRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DatabaseRequest* New() const final {
    return CreateMaybeMessage<DatabaseRequest>(nullptr);
  }

  DatabaseRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DatabaseRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DatabaseRequest& from);
  void MergeFrom(const DatabaseRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DatabaseRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.DatabaseRequest";
  }
  protected:
  explicit DatabaseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGetSystemInformationFieldNumber = 100,
    kOpenFieldNumber = 101,
    kCloseFieldNumber = 102,
    kFlushToDiskFieldNumber = 103,
    kStartTransactionFieldNumber = 104,
    kUpgradeFieldNumber = 105,
    kFinalizeTransactionFieldNumber = 106,
    kMeasureLatencyFieldNumber = 107,
    kDatabaseFieldNumber = 1,
    kOperationFieldNumber = 2,
  };
  // .Orthanc.DatabasePluginMessages.GetSystemInformation.Request get_system_information = 100;
  bool has_get_system_information() const;
  private:
  bool _internal_has_get_system_information() const;
  public:
  void clear_get_system_information();
  const ::Orthanc::DatabasePluginMessages::GetSystemInformation_Request& get_system_information() const;
  ::Orthanc::DatabasePluginMessages::GetSystemInformation_Request* release_get_system_information();
  ::Orthanc::DatabasePluginMessages::GetSystemInformation_Request* mutable_get_system_information();
  void set_allocated_get_system_information(::Orthanc::DatabasePluginMessages::GetSystemInformation_Request* get_system_information);
  private:
  const ::Orthanc::DatabasePluginMessages::GetSystemInformation_Request& _internal_get_system_information() const;
  ::Orthanc::DatabasePluginMessages::GetSystemInformation_Request* _internal_mutable_get_system_information();
  public:
  void unsafe_arena_set_allocated_get_system_information(
      ::Orthanc::DatabasePluginMessages::GetSystemInformation_Request* get_system_information);
  ::Orthanc::DatabasePluginMessages::GetSystemInformation_Request* unsafe_arena_release_get_system_information();

  // .Orthanc.DatabasePluginMessages.Open.Request open = 101;
  bool has_open() const;
  private:
  bool _internal_has_open() const;
  public:
  void clear_open();
  const ::Orthanc::DatabasePluginMessages::Open_Request& open() const;
  ::Orthanc::DatabasePluginMessages::Open_Request* release_open();
  ::Orthanc::DatabasePluginMessages::Open_Request* mutable_open();
  void set_allocated_open(::Orthanc::DatabasePluginMessages::Open_Request* open);
  private:
  const ::Orthanc::DatabasePluginMessages::Open_Request& _internal_open() const;
  ::Orthanc::DatabasePluginMessages::Open_Request* _internal_mutable_open();
  public:
  void unsafe_arena_set_allocated_open(
      ::Orthanc::DatabasePluginMessages::Open_Request* open);
  ::Orthanc::DatabasePluginMessages::Open_Request* unsafe_arena_release_open();

  // .Orthanc.DatabasePluginMessages.Close.Request close = 102;
  bool has_close() const;
  private:
  bool _internal_has_close() const;
  public:
  void clear_close();
  const ::Orthanc::DatabasePluginMessages::Close_Request& close() const;
  ::Orthanc::DatabasePluginMessages::Close_Request* release_close();
  ::Orthanc::DatabasePluginMessages::Close_Request* mutable_close();
  void set_allocated_close(::Orthanc::DatabasePluginMessages::Close_Request* close);
  private:
  const ::Orthanc::DatabasePluginMessages::Close_Request& _internal_close() const;
  ::Orthanc::DatabasePluginMessages::Close_Request* _internal_mutable_close();
  public:
  void unsafe_arena_set_allocated_close(
      ::Orthanc::DatabasePluginMessages::Close_Request* close);
  ::Orthanc::DatabasePluginMessages::Close_Request* unsafe_arena_release_close();

  // .Orthanc.DatabasePluginMessages.FlushToDisk.Request flush_to_disk = 103;
  bool has_flush_to_disk() const;
  private:
  bool _internal_has_flush_to_disk() const;
  public:
  void clear_flush_to_disk();
  const ::Orthanc::DatabasePluginMessages::FlushToDisk_Request& flush_to_disk() const;
  ::Orthanc::DatabasePluginMessages::FlushToDisk_Request* release_flush_to_disk();
  ::Orthanc::DatabasePluginMessages::FlushToDisk_Request* mutable_flush_to_disk();
  void set_allocated_flush_to_disk(::Orthanc::DatabasePluginMessages::FlushToDisk_Request* flush_to_disk);
  private:
  const ::Orthanc::DatabasePluginMessages::FlushToDisk_Request& _internal_flush_to_disk() const;
  ::Orthanc::DatabasePluginMessages::FlushToDisk_Request* _internal_mutable_flush_to_disk();
  public:
  void unsafe_arena_set_allocated_flush_to_disk(
      ::Orthanc::DatabasePluginMessages::FlushToDisk_Request* flush_to_disk);
  ::Orthanc::DatabasePluginMessages::FlushToDisk_Request* unsafe_arena_release_flush_to_disk();

  // .Orthanc.DatabasePluginMessages.StartTransaction.Request start_transaction = 104;
  bool has_start_transaction() const;
  private:
  bool _internal_has_start_transaction() const;
  public:
  void clear_start_transaction();
  const ::Orthanc::DatabasePluginMessages::StartTransaction_Request& start_transaction() const;
  ::Orthanc::DatabasePluginMessages::StartTransaction_Request* release_start_transaction();
  ::Orthanc::DatabasePluginMessages::StartTransaction_Request* mutable_start_transaction();
  void set_allocated_start_transaction(::Orthanc::DatabasePluginMessages::StartTransaction_Request* start_transaction);
  private:
  const ::Orthanc::DatabasePluginMessages::StartTransaction_Request& _internal_start_transaction() const;
  ::Orthanc::DatabasePluginMessages::StartTransaction_Request* _internal_mutable_start_transaction();
  public:
  void unsafe_arena_set_allocated_start_transaction(
      ::Orthanc::DatabasePluginMessages::StartTransaction_Request* start_transaction);
  ::Orthanc::DatabasePluginMessages::StartTransaction_Request* unsafe_arena_release_start_transaction();

  // .Orthanc.DatabasePluginMessages.Upgrade.Request upgrade = 105;
  bool has_upgrade() const;
  private:
  bool _internal_has_upgrade() const;
  public:
  void clear_upgrade();
  const ::Orthanc::DatabasePluginMessages::Upgrade_Request& upgrade() const;
  ::Orthanc::DatabasePluginMessages::Upgrade_Request* release_upgrade();
  ::Orthanc::DatabasePluginMessages::Upgrade_Request* mutable_upgrade();
  void set_allocated_upgrade(::Orthanc::DatabasePluginMessages::Upgrade_Request* upgrade);
  private:
  const ::Orthanc::DatabasePluginMessages::Upgrade_Request& _internal_upgrade() const;
  ::Orthanc::DatabasePluginMessages::Upgrade_Request* _internal_mutable_upgrade();
  public:
  void unsafe_arena_set_allocated_upgrade(
      ::Orthanc::DatabasePluginMessages::Upgrade_Request* upgrade);
  ::Orthanc::DatabasePluginMessages::Upgrade_Request* unsafe_arena_release_upgrade();

  // .Orthanc.DatabasePluginMessages.FinalizeTransaction.Request finalize_transaction = 106;
  bool has_finalize_transaction() const;
  private:
  bool _internal_has_finalize_transaction() const;
  public:
  void clear_finalize_transaction();
  const ::Orthanc::DatabasePluginMessages::FinalizeTransaction_Request& finalize_transaction() const;
  ::Orthanc::DatabasePluginMessages::FinalizeTransaction_Request* release_finalize_transaction();
  ::Orthanc::DatabasePluginMessages::FinalizeTransaction_Request* mutable_finalize_transaction();
  void set_allocated_finalize_transaction(::Orthanc::DatabasePluginMessages::FinalizeTransaction_Request* finalize_transaction);
  private:
  const ::Orthanc::DatabasePluginMessages::FinalizeTransaction_Request& _internal_finalize_transaction() const;
  ::Orthanc::DatabasePluginMessages::FinalizeTransaction_Request* _internal_mutable_finalize_transaction();
  public:
  void unsafe_arena_set_allocated_finalize_transaction(
      ::Orthanc::DatabasePluginMessages::FinalizeTransaction_Request* finalize_transaction);
  ::Orthanc::DatabasePluginMessages::FinalizeTransaction_Request* unsafe_arena_release_finalize_transaction();

  // .Orthanc.DatabasePluginMessages.MeasureLatency.Request measure_latency = 107;
  bool has_measure_latency() const;
  private:
  bool _internal_has_measure_latency() const;
  public:
  void clear_measure_latency();
  const ::Orthanc::DatabasePluginMessages::MeasureLatency_Request& measure_latency() const;
  ::Orthanc::DatabasePluginMessages::MeasureLatency_Request* release_measure_latency();
  ::Orthanc::DatabasePluginMessages::MeasureLatency_Request* mutable_measure_latency();
  void set_allocated_measure_latency(::Orthanc::DatabasePluginMessages::MeasureLatency_Request* measure_latency);
  private:
  const ::Orthanc::DatabasePluginMessages::MeasureLatency_Request& _internal_measure_latency() const;
  ::Orthanc::DatabasePluginMessages::MeasureLatency_Request* _internal_mutable_measure_latency();
  public:
  void unsafe_arena_set_allocated_measure_latency(
      ::Orthanc::DatabasePluginMessages::MeasureLatency_Request* measure_latency);
  ::Orthanc::DatabasePluginMessages::MeasureLatency_Request* unsafe_arena_release_measure_latency();

  // sfixed64 database = 1;
  void clear_database();
  ::PROTOBUF_NAMESPACE_ID::int64 database() const;
  void set_database(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_database() const;
  void _internal_set_database(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .Orthanc.DatabasePluginMessages.DatabaseOperation operation = 2;
  void clear_operation();
  ::Orthanc::DatabasePluginMessages::DatabaseOperation operation() const;
  void set_operation(::Orthanc::DatabasePluginMessages::DatabaseOperation value);
  private:
  ::Orthanc::DatabasePluginMessages::DatabaseOperation _internal_operation() const;
  void _internal_set_operation(::Orthanc::DatabasePluginMessages::DatabaseOperation value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.DatabaseRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Orthanc::DatabasePluginMessages::GetSystemInformation_Request* get_system_information_;
  ::Orthanc::DatabasePluginMessages::Open_Request* open_;
  ::Orthanc::DatabasePluginMessages::Close_Request* close_;
  ::Orthanc::DatabasePluginMessages::FlushToDisk_Request* flush_to_disk_;
  ::Orthanc::DatabasePluginMessages::StartTransaction_Request* start_transaction_;
  ::Orthanc::DatabasePluginMessages::Upgrade_Request* upgrade_;
  ::Orthanc::DatabasePluginMessages::FinalizeTransaction_Request* finalize_transaction_;
  ::Orthanc::DatabasePluginMessages::MeasureLatency_Request* measure_latency_;
  ::PROTOBUF_NAMESPACE_ID::int64 database_;
  int operation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class DatabaseResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.DatabaseResponse) */ {
 public:
  inline DatabaseResponse() : DatabaseResponse(nullptr) {};
  virtual ~DatabaseResponse();

  DatabaseResponse(const DatabaseResponse& from);
  DatabaseResponse(DatabaseResponse&& from) noexcept
    : DatabaseResponse() {
    *this = ::std::move(from);
  }

  inline DatabaseResponse& operator=(const DatabaseResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DatabaseResponse& operator=(DatabaseResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const DatabaseResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DatabaseResponse* internal_default_instance() {
    return reinterpret_cast<const DatabaseResponse*>(
               &_DatabaseResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(DatabaseResponse& a, DatabaseResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DatabaseResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DatabaseResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DatabaseResponse* New() const final {
    return CreateMaybeMessage<DatabaseResponse>(nullptr);
  }

  DatabaseResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DatabaseResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DatabaseResponse& from);
  void MergeFrom(const DatabaseResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DatabaseResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.DatabaseResponse";
  }
  protected:
  explicit DatabaseResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGetSystemInformationFieldNumber = 100,
    kOpenFieldNumber = 101,
    kCloseFieldNumber = 102,
    kFlushToDiskFieldNumber = 103,
    kStartTransactionFieldNumber = 104,
    kUpgradeFieldNumber = 105,
    kFinalizeTransactionFieldNumber = 106,
    kMeasureLatencyFieldNumber = 107,
  };
  // .Orthanc.DatabasePluginMessages.GetSystemInformation.Response get_system_information = 100;
  bool has_get_system_information() const;
  private:
  bool _internal_has_get_system_information() const;
  public:
  void clear_get_system_information();
  const ::Orthanc::DatabasePluginMessages::GetSystemInformation_Response& get_system_information() const;
  ::Orthanc::DatabasePluginMessages::GetSystemInformation_Response* release_get_system_information();
  ::Orthanc::DatabasePluginMessages::GetSystemInformation_Response* mutable_get_system_information();
  void set_allocated_get_system_information(::Orthanc::DatabasePluginMessages::GetSystemInformation_Response* get_system_information);
  private:
  const ::Orthanc::DatabasePluginMessages::GetSystemInformation_Response& _internal_get_system_information() const;
  ::Orthanc::DatabasePluginMessages::GetSystemInformation_Response* _internal_mutable_get_system_information();
  public:
  void unsafe_arena_set_allocated_get_system_information(
      ::Orthanc::DatabasePluginMessages::GetSystemInformation_Response* get_system_information);
  ::Orthanc::DatabasePluginMessages::GetSystemInformation_Response* unsafe_arena_release_get_system_information();

  // .Orthanc.DatabasePluginMessages.Open.Response open = 101;
  bool has_open() const;
  private:
  bool _internal_has_open() const;
  public:
  void clear_open();
  const ::Orthanc::DatabasePluginMessages::Open_Response& open() const;
  ::Orthanc::DatabasePluginMessages::Open_Response* release_open();
  ::Orthanc::DatabasePluginMessages::Open_Response* mutable_open();
  void set_allocated_open(::Orthanc::DatabasePluginMessages::Open_Response* open);
  private:
  const ::Orthanc::DatabasePluginMessages::Open_Response& _internal_open() const;
  ::Orthanc::DatabasePluginMessages::Open_Response* _internal_mutable_open();
  public:
  void unsafe_arena_set_allocated_open(
      ::Orthanc::DatabasePluginMessages::Open_Response* open);
  ::Orthanc::DatabasePluginMessages::Open_Response* unsafe_arena_release_open();

  // .Orthanc.DatabasePluginMessages.Close.Response close = 102;
  bool has_close() const;
  private:
  bool _internal_has_close() const;
  public:
  void clear_close();
  const ::Orthanc::DatabasePluginMessages::Close_Response& close() const;
  ::Orthanc::DatabasePluginMessages::Close_Response* release_close();
  ::Orthanc::DatabasePluginMessages::Close_Response* mutable_close();
  void set_allocated_close(::Orthanc::DatabasePluginMessages::Close_Response* close);
  private:
  const ::Orthanc::DatabasePluginMessages::Close_Response& _internal_close() const;
  ::Orthanc::DatabasePluginMessages::Close_Response* _internal_mutable_close();
  public:
  void unsafe_arena_set_allocated_close(
      ::Orthanc::DatabasePluginMessages::Close_Response* close);
  ::Orthanc::DatabasePluginMessages::Close_Response* unsafe_arena_release_close();

  // .Orthanc.DatabasePluginMessages.FlushToDisk.Response flush_to_disk = 103;
  bool has_flush_to_disk() const;
  private:
  bool _internal_has_flush_to_disk() const;
  public:
  void clear_flush_to_disk();
  const ::Orthanc::DatabasePluginMessages::FlushToDisk_Response& flush_to_disk() const;
  ::Orthanc::DatabasePluginMessages::FlushToDisk_Response* release_flush_to_disk();
  ::Orthanc::DatabasePluginMessages::FlushToDisk_Response* mutable_flush_to_disk();
  void set_allocated_flush_to_disk(::Orthanc::DatabasePluginMessages::FlushToDisk_Response* flush_to_disk);
  private:
  const ::Orthanc::DatabasePluginMessages::FlushToDisk_Response& _internal_flush_to_disk() const;
  ::Orthanc::DatabasePluginMessages::FlushToDisk_Response* _internal_mutable_flush_to_disk();
  public:
  void unsafe_arena_set_allocated_flush_to_disk(
      ::Orthanc::DatabasePluginMessages::FlushToDisk_Response* flush_to_disk);
  ::Orthanc::DatabasePluginMessages::FlushToDisk_Response* unsafe_arena_release_flush_to_disk();

  // .Orthanc.DatabasePluginMessages.StartTransaction.Response start_transaction = 104;
  bool has_start_transaction() const;
  private:
  bool _internal_has_start_transaction() const;
  public:
  void clear_start_transaction();
  const ::Orthanc::DatabasePluginMessages::StartTransaction_Response& start_transaction() const;
  ::Orthanc::DatabasePluginMessages::StartTransaction_Response* release_start_transaction();
  ::Orthanc::DatabasePluginMessages::StartTransaction_Response* mutable_start_transaction();
  void set_allocated_start_transaction(::Orthanc::DatabasePluginMessages::StartTransaction_Response* start_transaction);
  private:
  const ::Orthanc::DatabasePluginMessages::StartTransaction_Response& _internal_start_transaction() const;
  ::Orthanc::DatabasePluginMessages::StartTransaction_Response* _internal_mutable_start_transaction();
  public:
  void unsafe_arena_set_allocated_start_transaction(
      ::Orthanc::DatabasePluginMessages::StartTransaction_Response* start_transaction);
  ::Orthanc::DatabasePluginMessages::StartTransaction_Response* unsafe_arena_release_start_transaction();

  // .Orthanc.DatabasePluginMessages.Upgrade.Response upgrade = 105;
  bool has_upgrade() const;
  private:
  bool _internal_has_upgrade() const;
  public:
  void clear_upgrade();
  const ::Orthanc::DatabasePluginMessages::Upgrade_Response& upgrade() const;
  ::Orthanc::DatabasePluginMessages::Upgrade_Response* release_upgrade();
  ::Orthanc::DatabasePluginMessages::Upgrade_Response* mutable_upgrade();
  void set_allocated_upgrade(::Orthanc::DatabasePluginMessages::Upgrade_Response* upgrade);
  private:
  const ::Orthanc::DatabasePluginMessages::Upgrade_Response& _internal_upgrade() const;
  ::Orthanc::DatabasePluginMessages::Upgrade_Response* _internal_mutable_upgrade();
  public:
  void unsafe_arena_set_allocated_upgrade(
      ::Orthanc::DatabasePluginMessages::Upgrade_Response* upgrade);
  ::Orthanc::DatabasePluginMessages::Upgrade_Response* unsafe_arena_release_upgrade();

  // .Orthanc.DatabasePluginMessages.FinalizeTransaction.Response finalize_transaction = 106;
  bool has_finalize_transaction() const;
  private:
  bool _internal_has_finalize_transaction() const;
  public:
  void clear_finalize_transaction();
  const ::Orthanc::DatabasePluginMessages::FinalizeTransaction_Response& finalize_transaction() const;
  ::Orthanc::DatabasePluginMessages::FinalizeTransaction_Response* release_finalize_transaction();
  ::Orthanc::DatabasePluginMessages::FinalizeTransaction_Response* mutable_finalize_transaction();
  void set_allocated_finalize_transaction(::Orthanc::DatabasePluginMessages::FinalizeTransaction_Response* finalize_transaction);
  private:
  const ::Orthanc::DatabasePluginMessages::FinalizeTransaction_Response& _internal_finalize_transaction() const;
  ::Orthanc::DatabasePluginMessages::FinalizeTransaction_Response* _internal_mutable_finalize_transaction();
  public:
  void unsafe_arena_set_allocated_finalize_transaction(
      ::Orthanc::DatabasePluginMessages::FinalizeTransaction_Response* finalize_transaction);
  ::Orthanc::DatabasePluginMessages::FinalizeTransaction_Response* unsafe_arena_release_finalize_transaction();

  // .Orthanc.DatabasePluginMessages.MeasureLatency.Response measure_latency = 107;
  bool has_measure_latency() const;
  private:
  bool _internal_has_measure_latency() const;
  public:
  void clear_measure_latency();
  const ::Orthanc::DatabasePluginMessages::MeasureLatency_Response& measure_latency() const;
  ::Orthanc::DatabasePluginMessages::MeasureLatency_Response* release_measure_latency();
  ::Orthanc::DatabasePluginMessages::MeasureLatency_Response* mutable_measure_latency();
  void set_allocated_measure_latency(::Orthanc::DatabasePluginMessages::MeasureLatency_Response* measure_latency);
  private:
  const ::Orthanc::DatabasePluginMessages::MeasureLatency_Response& _internal_measure_latency() const;
  ::Orthanc::DatabasePluginMessages::MeasureLatency_Response* _internal_mutable_measure_latency();
  public:
  void unsafe_arena_set_allocated_measure_latency(
      ::Orthanc::DatabasePluginMessages::MeasureLatency_Response* measure_latency);
  ::Orthanc::DatabasePluginMessages::MeasureLatency_Response* unsafe_arena_release_measure_latency();

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.DatabaseResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Orthanc::DatabasePluginMessages::GetSystemInformation_Response* get_system_information_;
  ::Orthanc::DatabasePluginMessages::Open_Response* open_;
  ::Orthanc::DatabasePluginMessages::Close_Response* close_;
  ::Orthanc::DatabasePluginMessages::FlushToDisk_Response* flush_to_disk_;
  ::Orthanc::DatabasePluginMessages::StartTransaction_Response* start_transaction_;
  ::Orthanc::DatabasePluginMessages::Upgrade_Response* upgrade_;
  ::Orthanc::DatabasePluginMessages::FinalizeTransaction_Response* finalize_transaction_;
  ::Orthanc::DatabasePluginMessages::MeasureLatency_Response* measure_latency_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class Rollback_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.Rollback.Request) */ {
 public:
  inline Rollback_Request() : Rollback_Request(nullptr) {};
  virtual ~Rollback_Request();

  Rollback_Request(const Rollback_Request& from);
  Rollback_Request(Rollback_Request&& from) noexcept
    : Rollback_Request() {
    *this = ::std::move(from);
  }

  inline Rollback_Request& operator=(const Rollback_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rollback_Request& operator=(Rollback_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Rollback_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rollback_Request* internal_default_instance() {
    return reinterpret_cast<const Rollback_Request*>(
               &_Rollback_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(Rollback_Request& a, Rollback_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Rollback_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Rollback_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Rollback_Request* New() const final {
    return CreateMaybeMessage<Rollback_Request>(nullptr);
  }

  Rollback_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Rollback_Request>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Rollback_Request& from);
  void MergeFrom(const Rollback_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Rollback_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.Rollback.Request";
  }
  protected:
  explicit Rollback_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.Rollback.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class Rollback_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.Rollback.Response) */ {
 public:
  inline Rollback_Response() : Rollback_Response(nullptr) {};
  virtual ~Rollback_Response();

  Rollback_Response(const Rollback_Response& from);
  Rollback_Response(Rollback_Response&& from) noexcept
    : Rollback_Response() {
    *this = ::std::move(from);
  }

  inline Rollback_Response& operator=(const Rollback_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rollback_Response& operator=(Rollback_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Rollback_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rollback_Response* internal_default_instance() {
    return reinterpret_cast<const Rollback_Response*>(
               &_Rollback_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(Rollback_Response& a, Rollback_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Rollback_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Rollback_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Rollback_Response* New() const final {
    return CreateMaybeMessage<Rollback_Response>(nullptr);
  }

  Rollback_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Rollback_Response>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Rollback_Response& from);
  void MergeFrom(const Rollback_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Rollback_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.Rollback.Response";
  }
  protected:
  explicit Rollback_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.Rollback.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class Rollback PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.Rollback) */ {
 public:
  inline Rollback() : Rollback(nullptr) {};
  virtual ~Rollback();

  Rollback(const Rollback& from);
  Rollback(Rollback&& from) noexcept
    : Rollback() {
    *this = ::std::move(from);
  }

  inline Rollback& operator=(const Rollback& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rollback& operator=(Rollback&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Rollback& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rollback* internal_default_instance() {
    return reinterpret_cast<const Rollback*>(
               &_Rollback_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(Rollback& a, Rollback& b) {
    a.Swap(&b);
  }
  inline void Swap(Rollback* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Rollback* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Rollback* New() const final {
    return CreateMaybeMessage<Rollback>(nullptr);
  }

  Rollback* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Rollback>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Rollback& from);
  void MergeFrom(const Rollback& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Rollback* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.Rollback";
  }
  protected:
  explicit Rollback(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef Rollback_Request Request;
  typedef Rollback_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.Rollback)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class Commit_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.Commit.Request) */ {
 public:
  inline Commit_Request() : Commit_Request(nullptr) {};
  virtual ~Commit_Request();

  Commit_Request(const Commit_Request& from);
  Commit_Request(Commit_Request&& from) noexcept
    : Commit_Request() {
    *this = ::std::move(from);
  }

  inline Commit_Request& operator=(const Commit_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Commit_Request& operator=(Commit_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Commit_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Commit_Request* internal_default_instance() {
    return reinterpret_cast<const Commit_Request*>(
               &_Commit_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(Commit_Request& a, Commit_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Commit_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Commit_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Commit_Request* New() const final {
    return CreateMaybeMessage<Commit_Request>(nullptr);
  }

  Commit_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Commit_Request>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Commit_Request& from);
  void MergeFrom(const Commit_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Commit_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.Commit.Request";
  }
  protected:
  explicit Commit_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileSizeDeltaFieldNumber = 1,
  };
  // int64 file_size_delta = 1;
  void clear_file_size_delta();
  ::PROTOBUF_NAMESPACE_ID::int64 file_size_delta() const;
  void set_file_size_delta(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_file_size_delta() const;
  void _internal_set_file_size_delta(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.Commit.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 file_size_delta_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class Commit_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.Commit.Response) */ {
 public:
  inline Commit_Response() : Commit_Response(nullptr) {};
  virtual ~Commit_Response();

  Commit_Response(const Commit_Response& from);
  Commit_Response(Commit_Response&& from) noexcept
    : Commit_Response() {
    *this = ::std::move(from);
  }

  inline Commit_Response& operator=(const Commit_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Commit_Response& operator=(Commit_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Commit_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Commit_Response* internal_default_instance() {
    return reinterpret_cast<const Commit_Response*>(
               &_Commit_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(Commit_Response& a, Commit_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Commit_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Commit_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Commit_Response* New() const final {
    return CreateMaybeMessage<Commit_Response>(nullptr);
  }

  Commit_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Commit_Response>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Commit_Response& from);
  void MergeFrom(const Commit_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Commit_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.Commit.Response";
  }
  protected:
  explicit Commit_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.Commit.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class Commit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.Commit) */ {
 public:
  inline Commit() : Commit(nullptr) {};
  virtual ~Commit();

  Commit(const Commit& from);
  Commit(Commit&& from) noexcept
    : Commit() {
    *this = ::std::move(from);
  }

  inline Commit& operator=(const Commit& from) {
    CopyFrom(from);
    return *this;
  }
  inline Commit& operator=(Commit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Commit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Commit* internal_default_instance() {
    return reinterpret_cast<const Commit*>(
               &_Commit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(Commit& a, Commit& b) {
    a.Swap(&b);
  }
  inline void Swap(Commit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Commit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Commit* New() const final {
    return CreateMaybeMessage<Commit>(nullptr);
  }

  Commit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Commit>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Commit& from);
  void MergeFrom(const Commit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Commit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.Commit";
  }
  protected:
  explicit Commit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef Commit_Request Request;
  typedef Commit_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.Commit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class AddAttachment_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.AddAttachment.Request) */ {
 public:
  inline AddAttachment_Request() : AddAttachment_Request(nullptr) {};
  virtual ~AddAttachment_Request();

  AddAttachment_Request(const AddAttachment_Request& from);
  AddAttachment_Request(AddAttachment_Request&& from) noexcept
    : AddAttachment_Request() {
    *this = ::std::move(from);
  }

  inline AddAttachment_Request& operator=(const AddAttachment_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddAttachment_Request& operator=(AddAttachment_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const AddAttachment_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddAttachment_Request* internal_default_instance() {
    return reinterpret_cast<const AddAttachment_Request*>(
               &_AddAttachment_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(AddAttachment_Request& a, AddAttachment_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(AddAttachment_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddAttachment_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddAttachment_Request* New() const final {
    return CreateMaybeMessage<AddAttachment_Request>(nullptr);
  }

  AddAttachment_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddAttachment_Request>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AddAttachment_Request& from);
  void MergeFrom(const AddAttachment_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AddAttachment_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.AddAttachment.Request";
  }
  protected:
  explicit AddAttachment_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttachmentFieldNumber = 2,
    kIdFieldNumber = 1,
    kRevisionFieldNumber = 3,
  };
  // .Orthanc.DatabasePluginMessages.FileInfo attachment = 2;
  bool has_attachment() const;
  private:
  bool _internal_has_attachment() const;
  public:
  void clear_attachment();
  const ::Orthanc::DatabasePluginMessages::FileInfo& attachment() const;
  ::Orthanc::DatabasePluginMessages::FileInfo* release_attachment();
  ::Orthanc::DatabasePluginMessages::FileInfo* mutable_attachment();
  void set_allocated_attachment(::Orthanc::DatabasePluginMessages::FileInfo* attachment);
  private:
  const ::Orthanc::DatabasePluginMessages::FileInfo& _internal_attachment() const;
  ::Orthanc::DatabasePluginMessages::FileInfo* _internal_mutable_attachment();
  public:
  void unsafe_arena_set_allocated_attachment(
      ::Orthanc::DatabasePluginMessages::FileInfo* attachment);
  ::Orthanc::DatabasePluginMessages::FileInfo* unsafe_arena_release_attachment();

  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 revision = 3;
  void clear_revision();
  ::PROTOBUF_NAMESPACE_ID::int64 revision() const;
  void set_revision(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_revision() const;
  void _internal_set_revision(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.AddAttachment.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Orthanc::DatabasePluginMessages::FileInfo* attachment_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 revision_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class AddAttachment_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.AddAttachment.Response) */ {
 public:
  inline AddAttachment_Response() : AddAttachment_Response(nullptr) {};
  virtual ~AddAttachment_Response();

  AddAttachment_Response(const AddAttachment_Response& from);
  AddAttachment_Response(AddAttachment_Response&& from) noexcept
    : AddAttachment_Response() {
    *this = ::std::move(from);
  }

  inline AddAttachment_Response& operator=(const AddAttachment_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddAttachment_Response& operator=(AddAttachment_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const AddAttachment_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddAttachment_Response* internal_default_instance() {
    return reinterpret_cast<const AddAttachment_Response*>(
               &_AddAttachment_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(AddAttachment_Response& a, AddAttachment_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(AddAttachment_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddAttachment_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddAttachment_Response* New() const final {
    return CreateMaybeMessage<AddAttachment_Response>(nullptr);
  }

  AddAttachment_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddAttachment_Response>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AddAttachment_Response& from);
  void MergeFrom(const AddAttachment_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AddAttachment_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.AddAttachment.Response";
  }
  protected:
  explicit AddAttachment_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.AddAttachment.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class AddAttachment PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.AddAttachment) */ {
 public:
  inline AddAttachment() : AddAttachment(nullptr) {};
  virtual ~AddAttachment();

  AddAttachment(const AddAttachment& from);
  AddAttachment(AddAttachment&& from) noexcept
    : AddAttachment() {
    *this = ::std::move(from);
  }

  inline AddAttachment& operator=(const AddAttachment& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddAttachment& operator=(AddAttachment&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const AddAttachment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddAttachment* internal_default_instance() {
    return reinterpret_cast<const AddAttachment*>(
               &_AddAttachment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(AddAttachment& a, AddAttachment& b) {
    a.Swap(&b);
  }
  inline void Swap(AddAttachment* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddAttachment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddAttachment* New() const final {
    return CreateMaybeMessage<AddAttachment>(nullptr);
  }

  AddAttachment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddAttachment>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AddAttachment& from);
  void MergeFrom(const AddAttachment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AddAttachment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.AddAttachment";
  }
  protected:
  explicit AddAttachment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef AddAttachment_Request Request;
  typedef AddAttachment_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.AddAttachment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class ClearChanges_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.ClearChanges.Request) */ {
 public:
  inline ClearChanges_Request() : ClearChanges_Request(nullptr) {};
  virtual ~ClearChanges_Request();

  ClearChanges_Request(const ClearChanges_Request& from);
  ClearChanges_Request(ClearChanges_Request&& from) noexcept
    : ClearChanges_Request() {
    *this = ::std::move(from);
  }

  inline ClearChanges_Request& operator=(const ClearChanges_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClearChanges_Request& operator=(ClearChanges_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ClearChanges_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClearChanges_Request* internal_default_instance() {
    return reinterpret_cast<const ClearChanges_Request*>(
               &_ClearChanges_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(ClearChanges_Request& a, ClearChanges_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(ClearChanges_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClearChanges_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClearChanges_Request* New() const final {
    return CreateMaybeMessage<ClearChanges_Request>(nullptr);
  }

  ClearChanges_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClearChanges_Request>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ClearChanges_Request& from);
  void MergeFrom(const ClearChanges_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClearChanges_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.ClearChanges.Request";
  }
  protected:
  explicit ClearChanges_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.ClearChanges.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class ClearChanges_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.ClearChanges.Response) */ {
 public:
  inline ClearChanges_Response() : ClearChanges_Response(nullptr) {};
  virtual ~ClearChanges_Response();

  ClearChanges_Response(const ClearChanges_Response& from);
  ClearChanges_Response(ClearChanges_Response&& from) noexcept
    : ClearChanges_Response() {
    *this = ::std::move(from);
  }

  inline ClearChanges_Response& operator=(const ClearChanges_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClearChanges_Response& operator=(ClearChanges_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ClearChanges_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClearChanges_Response* internal_default_instance() {
    return reinterpret_cast<const ClearChanges_Response*>(
               &_ClearChanges_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(ClearChanges_Response& a, ClearChanges_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(ClearChanges_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClearChanges_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClearChanges_Response* New() const final {
    return CreateMaybeMessage<ClearChanges_Response>(nullptr);
  }

  ClearChanges_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClearChanges_Response>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ClearChanges_Response& from);
  void MergeFrom(const ClearChanges_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClearChanges_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.ClearChanges.Response";
  }
  protected:
  explicit ClearChanges_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.ClearChanges.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class ClearChanges PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.ClearChanges) */ {
 public:
  inline ClearChanges() : ClearChanges(nullptr) {};
  virtual ~ClearChanges();

  ClearChanges(const ClearChanges& from);
  ClearChanges(ClearChanges&& from) noexcept
    : ClearChanges() {
    *this = ::std::move(from);
  }

  inline ClearChanges& operator=(const ClearChanges& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClearChanges& operator=(ClearChanges&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ClearChanges& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClearChanges* internal_default_instance() {
    return reinterpret_cast<const ClearChanges*>(
               &_ClearChanges_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(ClearChanges& a, ClearChanges& b) {
    a.Swap(&b);
  }
  inline void Swap(ClearChanges* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClearChanges* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClearChanges* New() const final {
    return CreateMaybeMessage<ClearChanges>(nullptr);
  }

  ClearChanges* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClearChanges>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ClearChanges& from);
  void MergeFrom(const ClearChanges& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClearChanges* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.ClearChanges";
  }
  protected:
  explicit ClearChanges(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ClearChanges_Request Request;
  typedef ClearChanges_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.ClearChanges)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class ClearExportedResources_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.ClearExportedResources.Request) */ {
 public:
  inline ClearExportedResources_Request() : ClearExportedResources_Request(nullptr) {};
  virtual ~ClearExportedResources_Request();

  ClearExportedResources_Request(const ClearExportedResources_Request& from);
  ClearExportedResources_Request(ClearExportedResources_Request&& from) noexcept
    : ClearExportedResources_Request() {
    *this = ::std::move(from);
  }

  inline ClearExportedResources_Request& operator=(const ClearExportedResources_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClearExportedResources_Request& operator=(ClearExportedResources_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ClearExportedResources_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClearExportedResources_Request* internal_default_instance() {
    return reinterpret_cast<const ClearExportedResources_Request*>(
               &_ClearExportedResources_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(ClearExportedResources_Request& a, ClearExportedResources_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(ClearExportedResources_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClearExportedResources_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClearExportedResources_Request* New() const final {
    return CreateMaybeMessage<ClearExportedResources_Request>(nullptr);
  }

  ClearExportedResources_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClearExportedResources_Request>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ClearExportedResources_Request& from);
  void MergeFrom(const ClearExportedResources_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClearExportedResources_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.ClearExportedResources.Request";
  }
  protected:
  explicit ClearExportedResources_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.ClearExportedResources.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class ClearExportedResources_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.ClearExportedResources.Response) */ {
 public:
  inline ClearExportedResources_Response() : ClearExportedResources_Response(nullptr) {};
  virtual ~ClearExportedResources_Response();

  ClearExportedResources_Response(const ClearExportedResources_Response& from);
  ClearExportedResources_Response(ClearExportedResources_Response&& from) noexcept
    : ClearExportedResources_Response() {
    *this = ::std::move(from);
  }

  inline ClearExportedResources_Response& operator=(const ClearExportedResources_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClearExportedResources_Response& operator=(ClearExportedResources_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ClearExportedResources_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClearExportedResources_Response* internal_default_instance() {
    return reinterpret_cast<const ClearExportedResources_Response*>(
               &_ClearExportedResources_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(ClearExportedResources_Response& a, ClearExportedResources_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(ClearExportedResources_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClearExportedResources_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClearExportedResources_Response* New() const final {
    return CreateMaybeMessage<ClearExportedResources_Response>(nullptr);
  }

  ClearExportedResources_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClearExportedResources_Response>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ClearExportedResources_Response& from);
  void MergeFrom(const ClearExportedResources_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClearExportedResources_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.ClearExportedResources.Response";
  }
  protected:
  explicit ClearExportedResources_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.ClearExportedResources.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class ClearExportedResources PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.ClearExportedResources) */ {
 public:
  inline ClearExportedResources() : ClearExportedResources(nullptr) {};
  virtual ~ClearExportedResources();

  ClearExportedResources(const ClearExportedResources& from);
  ClearExportedResources(ClearExportedResources&& from) noexcept
    : ClearExportedResources() {
    *this = ::std::move(from);
  }

  inline ClearExportedResources& operator=(const ClearExportedResources& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClearExportedResources& operator=(ClearExportedResources&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ClearExportedResources& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClearExportedResources* internal_default_instance() {
    return reinterpret_cast<const ClearExportedResources*>(
               &_ClearExportedResources_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(ClearExportedResources& a, ClearExportedResources& b) {
    a.Swap(&b);
  }
  inline void Swap(ClearExportedResources* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClearExportedResources* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClearExportedResources* New() const final {
    return CreateMaybeMessage<ClearExportedResources>(nullptr);
  }

  ClearExportedResources* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClearExportedResources>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ClearExportedResources& from);
  void MergeFrom(const ClearExportedResources& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClearExportedResources* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.ClearExportedResources";
  }
  protected:
  explicit ClearExportedResources(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ClearExportedResources_Request Request;
  typedef ClearExportedResources_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.ClearExportedResources)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class DeleteAttachment_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.DeleteAttachment.Request) */ {
 public:
  inline DeleteAttachment_Request() : DeleteAttachment_Request(nullptr) {};
  virtual ~DeleteAttachment_Request();

  DeleteAttachment_Request(const DeleteAttachment_Request& from);
  DeleteAttachment_Request(DeleteAttachment_Request&& from) noexcept
    : DeleteAttachment_Request() {
    *this = ::std::move(from);
  }

  inline DeleteAttachment_Request& operator=(const DeleteAttachment_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteAttachment_Request& operator=(DeleteAttachment_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const DeleteAttachment_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteAttachment_Request* internal_default_instance() {
    return reinterpret_cast<const DeleteAttachment_Request*>(
               &_DeleteAttachment_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(DeleteAttachment_Request& a, DeleteAttachment_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteAttachment_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteAttachment_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteAttachment_Request* New() const final {
    return CreateMaybeMessage<DeleteAttachment_Request>(nullptr);
  }

  DeleteAttachment_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteAttachment_Request>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DeleteAttachment_Request& from);
  void MergeFrom(const DeleteAttachment_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeleteAttachment_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.DeleteAttachment.Request";
  }
  protected:
  explicit DeleteAttachment_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.DeleteAttachment.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class DeleteAttachment_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.DeleteAttachment.Response) */ {
 public:
  inline DeleteAttachment_Response() : DeleteAttachment_Response(nullptr) {};
  virtual ~DeleteAttachment_Response();

  DeleteAttachment_Response(const DeleteAttachment_Response& from);
  DeleteAttachment_Response(DeleteAttachment_Response&& from) noexcept
    : DeleteAttachment_Response() {
    *this = ::std::move(from);
  }

  inline DeleteAttachment_Response& operator=(const DeleteAttachment_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteAttachment_Response& operator=(DeleteAttachment_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const DeleteAttachment_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteAttachment_Response* internal_default_instance() {
    return reinterpret_cast<const DeleteAttachment_Response*>(
               &_DeleteAttachment_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(DeleteAttachment_Response& a, DeleteAttachment_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteAttachment_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteAttachment_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteAttachment_Response* New() const final {
    return CreateMaybeMessage<DeleteAttachment_Response>(nullptr);
  }

  DeleteAttachment_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteAttachment_Response>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DeleteAttachment_Response& from);
  void MergeFrom(const DeleteAttachment_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeleteAttachment_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.DeleteAttachment.Response";
  }
  protected:
  explicit DeleteAttachment_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeletedAttachmentFieldNumber = 1,
  };
  // .Orthanc.DatabasePluginMessages.FileInfo deleted_attachment = 1;
  bool has_deleted_attachment() const;
  private:
  bool _internal_has_deleted_attachment() const;
  public:
  void clear_deleted_attachment();
  const ::Orthanc::DatabasePluginMessages::FileInfo& deleted_attachment() const;
  ::Orthanc::DatabasePluginMessages::FileInfo* release_deleted_attachment();
  ::Orthanc::DatabasePluginMessages::FileInfo* mutable_deleted_attachment();
  void set_allocated_deleted_attachment(::Orthanc::DatabasePluginMessages::FileInfo* deleted_attachment);
  private:
  const ::Orthanc::DatabasePluginMessages::FileInfo& _internal_deleted_attachment() const;
  ::Orthanc::DatabasePluginMessages::FileInfo* _internal_mutable_deleted_attachment();
  public:
  void unsafe_arena_set_allocated_deleted_attachment(
      ::Orthanc::DatabasePluginMessages::FileInfo* deleted_attachment);
  ::Orthanc::DatabasePluginMessages::FileInfo* unsafe_arena_release_deleted_attachment();

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.DeleteAttachment.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Orthanc::DatabasePluginMessages::FileInfo* deleted_attachment_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class DeleteAttachment PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.DeleteAttachment) */ {
 public:
  inline DeleteAttachment() : DeleteAttachment(nullptr) {};
  virtual ~DeleteAttachment();

  DeleteAttachment(const DeleteAttachment& from);
  DeleteAttachment(DeleteAttachment&& from) noexcept
    : DeleteAttachment() {
    *this = ::std::move(from);
  }

  inline DeleteAttachment& operator=(const DeleteAttachment& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteAttachment& operator=(DeleteAttachment&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const DeleteAttachment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteAttachment* internal_default_instance() {
    return reinterpret_cast<const DeleteAttachment*>(
               &_DeleteAttachment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(DeleteAttachment& a, DeleteAttachment& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteAttachment* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteAttachment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteAttachment* New() const final {
    return CreateMaybeMessage<DeleteAttachment>(nullptr);
  }

  DeleteAttachment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteAttachment>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DeleteAttachment& from);
  void MergeFrom(const DeleteAttachment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeleteAttachment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.DeleteAttachment";
  }
  protected:
  explicit DeleteAttachment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef DeleteAttachment_Request Request;
  typedef DeleteAttachment_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.DeleteAttachment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class DeleteMetadata_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.DeleteMetadata.Request) */ {
 public:
  inline DeleteMetadata_Request() : DeleteMetadata_Request(nullptr) {};
  virtual ~DeleteMetadata_Request();

  DeleteMetadata_Request(const DeleteMetadata_Request& from);
  DeleteMetadata_Request(DeleteMetadata_Request&& from) noexcept
    : DeleteMetadata_Request() {
    *this = ::std::move(from);
  }

  inline DeleteMetadata_Request& operator=(const DeleteMetadata_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteMetadata_Request& operator=(DeleteMetadata_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const DeleteMetadata_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteMetadata_Request* internal_default_instance() {
    return reinterpret_cast<const DeleteMetadata_Request*>(
               &_DeleteMetadata_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(DeleteMetadata_Request& a, DeleteMetadata_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteMetadata_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteMetadata_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteMetadata_Request* New() const final {
    return CreateMaybeMessage<DeleteMetadata_Request>(nullptr);
  }

  DeleteMetadata_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteMetadata_Request>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DeleteMetadata_Request& from);
  void MergeFrom(const DeleteMetadata_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeleteMetadata_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.DeleteMetadata.Request";
  }
  protected:
  explicit DeleteMetadata_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.DeleteMetadata.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class DeleteMetadata_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.DeleteMetadata.Response) */ {
 public:
  inline DeleteMetadata_Response() : DeleteMetadata_Response(nullptr) {};
  virtual ~DeleteMetadata_Response();

  DeleteMetadata_Response(const DeleteMetadata_Response& from);
  DeleteMetadata_Response(DeleteMetadata_Response&& from) noexcept
    : DeleteMetadata_Response() {
    *this = ::std::move(from);
  }

  inline DeleteMetadata_Response& operator=(const DeleteMetadata_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteMetadata_Response& operator=(DeleteMetadata_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const DeleteMetadata_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteMetadata_Response* internal_default_instance() {
    return reinterpret_cast<const DeleteMetadata_Response*>(
               &_DeleteMetadata_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(DeleteMetadata_Response& a, DeleteMetadata_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteMetadata_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteMetadata_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteMetadata_Response* New() const final {
    return CreateMaybeMessage<DeleteMetadata_Response>(nullptr);
  }

  DeleteMetadata_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteMetadata_Response>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DeleteMetadata_Response& from);
  void MergeFrom(const DeleteMetadata_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeleteMetadata_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.DeleteMetadata.Response";
  }
  protected:
  explicit DeleteMetadata_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.DeleteMetadata.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class DeleteMetadata PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.DeleteMetadata) */ {
 public:
  inline DeleteMetadata() : DeleteMetadata(nullptr) {};
  virtual ~DeleteMetadata();

  DeleteMetadata(const DeleteMetadata& from);
  DeleteMetadata(DeleteMetadata&& from) noexcept
    : DeleteMetadata() {
    *this = ::std::move(from);
  }

  inline DeleteMetadata& operator=(const DeleteMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteMetadata& operator=(DeleteMetadata&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const DeleteMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteMetadata* internal_default_instance() {
    return reinterpret_cast<const DeleteMetadata*>(
               &_DeleteMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(DeleteMetadata& a, DeleteMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteMetadata* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteMetadata* New() const final {
    return CreateMaybeMessage<DeleteMetadata>(nullptr);
  }

  DeleteMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteMetadata>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DeleteMetadata& from);
  void MergeFrom(const DeleteMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeleteMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.DeleteMetadata";
  }
  protected:
  explicit DeleteMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef DeleteMetadata_Request Request;
  typedef DeleteMetadata_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.DeleteMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class DeleteResource_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.DeleteResource.Request) */ {
 public:
  inline DeleteResource_Request() : DeleteResource_Request(nullptr) {};
  virtual ~DeleteResource_Request();

  DeleteResource_Request(const DeleteResource_Request& from);
  DeleteResource_Request(DeleteResource_Request&& from) noexcept
    : DeleteResource_Request() {
    *this = ::std::move(from);
  }

  inline DeleteResource_Request& operator=(const DeleteResource_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteResource_Request& operator=(DeleteResource_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const DeleteResource_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteResource_Request* internal_default_instance() {
    return reinterpret_cast<const DeleteResource_Request*>(
               &_DeleteResource_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(DeleteResource_Request& a, DeleteResource_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteResource_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteResource_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteResource_Request* New() const final {
    return CreateMaybeMessage<DeleteResource_Request>(nullptr);
  }

  DeleteResource_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteResource_Request>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DeleteResource_Request& from);
  void MergeFrom(const DeleteResource_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeleteResource_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.DeleteResource.Request";
  }
  protected:
  explicit DeleteResource_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.DeleteResource.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class DeleteResource_Response_Resource PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.DeleteResource.Response.Resource) */ {
 public:
  inline DeleteResource_Response_Resource() : DeleteResource_Response_Resource(nullptr) {};
  virtual ~DeleteResource_Response_Resource();

  DeleteResource_Response_Resource(const DeleteResource_Response_Resource& from);
  DeleteResource_Response_Resource(DeleteResource_Response_Resource&& from) noexcept
    : DeleteResource_Response_Resource() {
    *this = ::std::move(from);
  }

  inline DeleteResource_Response_Resource& operator=(const DeleteResource_Response_Resource& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteResource_Response_Resource& operator=(DeleteResource_Response_Resource&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const DeleteResource_Response_Resource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteResource_Response_Resource* internal_default_instance() {
    return reinterpret_cast<const DeleteResource_Response_Resource*>(
               &_DeleteResource_Response_Resource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(DeleteResource_Response_Resource& a, DeleteResource_Response_Resource& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteResource_Response_Resource* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteResource_Response_Resource* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteResource_Response_Resource* New() const final {
    return CreateMaybeMessage<DeleteResource_Response_Resource>(nullptr);
  }

  DeleteResource_Response_Resource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteResource_Response_Resource>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DeleteResource_Response_Resource& from);
  void MergeFrom(const DeleteResource_Response_Resource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeleteResource_Response_Resource* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.DeleteResource.Response.Resource";
  }
  protected:
  explicit DeleteResource_Response_Resource(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicIdFieldNumber = 2,
    kLevelFieldNumber = 1,
  };
  // string public_id = 2;
  void clear_public_id();
  const std::string& public_id() const;
  void set_public_id(const std::string& value);
  void set_public_id(std::string&& value);
  void set_public_id(const char* value);
  void set_public_id(const char* value, size_t size);
  std::string* mutable_public_id();
  std::string* release_public_id();
  void set_allocated_public_id(std::string* public_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_public_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_public_id(
      std::string* public_id);
  private:
  const std::string& _internal_public_id() const;
  void _internal_set_public_id(const std::string& value);
  std::string* _internal_mutable_public_id();
  public:

  // .Orthanc.DatabasePluginMessages.ResourceType level = 1;
  void clear_level();
  ::Orthanc::DatabasePluginMessages::ResourceType level() const;
  void set_level(::Orthanc::DatabasePluginMessages::ResourceType value);
  private:
  ::Orthanc::DatabasePluginMessages::ResourceType _internal_level() const;
  void _internal_set_level(::Orthanc::DatabasePluginMessages::ResourceType value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.DeleteResource.Response.Resource)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_id_;
  int level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class DeleteResource_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.DeleteResource.Response) */ {
 public:
  inline DeleteResource_Response() : DeleteResource_Response(nullptr) {};
  virtual ~DeleteResource_Response();

  DeleteResource_Response(const DeleteResource_Response& from);
  DeleteResource_Response(DeleteResource_Response&& from) noexcept
    : DeleteResource_Response() {
    *this = ::std::move(from);
  }

  inline DeleteResource_Response& operator=(const DeleteResource_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteResource_Response& operator=(DeleteResource_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const DeleteResource_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteResource_Response* internal_default_instance() {
    return reinterpret_cast<const DeleteResource_Response*>(
               &_DeleteResource_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(DeleteResource_Response& a, DeleteResource_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteResource_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteResource_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteResource_Response* New() const final {
    return CreateMaybeMessage<DeleteResource_Response>(nullptr);
  }

  DeleteResource_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteResource_Response>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DeleteResource_Response& from);
  void MergeFrom(const DeleteResource_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeleteResource_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.DeleteResource.Response";
  }
  protected:
  explicit DeleteResource_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef DeleteResource_Response_Resource Resource;

  // accessors -------------------------------------------------------

  enum : int {
    kDeletedAttachmentsFieldNumber = 1,
    kDeletedResourcesFieldNumber = 2,
    kRemainingAncestorFieldNumber = 4,
    kIsRemainingAncestorFieldNumber = 3,
  };
  // repeated .Orthanc.DatabasePluginMessages.FileInfo deleted_attachments = 1;
  int deleted_attachments_size() const;
  private:
  int _internal_deleted_attachments_size() const;
  public:
  void clear_deleted_attachments();
  ::Orthanc::DatabasePluginMessages::FileInfo* mutable_deleted_attachments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Orthanc::DatabasePluginMessages::FileInfo >*
      mutable_deleted_attachments();
  private:
  const ::Orthanc::DatabasePluginMessages::FileInfo& _internal_deleted_attachments(int index) const;
  ::Orthanc::DatabasePluginMessages::FileInfo* _internal_add_deleted_attachments();
  public:
  const ::Orthanc::DatabasePluginMessages::FileInfo& deleted_attachments(int index) const;
  ::Orthanc::DatabasePluginMessages::FileInfo* add_deleted_attachments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Orthanc::DatabasePluginMessages::FileInfo >&
      deleted_attachments() const;

  // repeated .Orthanc.DatabasePluginMessages.DeleteResource.Response.Resource deleted_resources = 2;
  int deleted_resources_size() const;
  private:
  int _internal_deleted_resources_size() const;
  public:
  void clear_deleted_resources();
  ::Orthanc::DatabasePluginMessages::DeleteResource_Response_Resource* mutable_deleted_resources(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Orthanc::DatabasePluginMessages::DeleteResource_Response_Resource >*
      mutable_deleted_resources();
  private:
  const ::Orthanc::DatabasePluginMessages::DeleteResource_Response_Resource& _internal_deleted_resources(int index) const;
  ::Orthanc::DatabasePluginMessages::DeleteResource_Response_Resource* _internal_add_deleted_resources();
  public:
  const ::Orthanc::DatabasePluginMessages::DeleteResource_Response_Resource& deleted_resources(int index) const;
  ::Orthanc::DatabasePluginMessages::DeleteResource_Response_Resource* add_deleted_resources();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Orthanc::DatabasePluginMessages::DeleteResource_Response_Resource >&
      deleted_resources() const;

  // .Orthanc.DatabasePluginMessages.DeleteResource.Response.Resource remaining_ancestor = 4;
  bool has_remaining_ancestor() const;
  private:
  bool _internal_has_remaining_ancestor() const;
  public:
  void clear_remaining_ancestor();
  const ::Orthanc::DatabasePluginMessages::DeleteResource_Response_Resource& remaining_ancestor() const;
  ::Orthanc::DatabasePluginMessages::DeleteResource_Response_Resource* release_remaining_ancestor();
  ::Orthanc::DatabasePluginMessages::DeleteResource_Response_Resource* mutable_remaining_ancestor();
  void set_allocated_remaining_ancestor(::Orthanc::DatabasePluginMessages::DeleteResource_Response_Resource* remaining_ancestor);
  private:
  const ::Orthanc::DatabasePluginMessages::DeleteResource_Response_Resource& _internal_remaining_ancestor() const;
  ::Orthanc::DatabasePluginMessages::DeleteResource_Response_Resource* _internal_mutable_remaining_ancestor();
  public:
  void unsafe_arena_set_allocated_remaining_ancestor(
      ::Orthanc::DatabasePluginMessages::DeleteResource_Response_Resource* remaining_ancestor);
  ::Orthanc::DatabasePluginMessages::DeleteResource_Response_Resource* unsafe_arena_release_remaining_ancestor();

  // bool is_remaining_ancestor = 3;
  void clear_is_remaining_ancestor();
  bool is_remaining_ancestor() const;
  void set_is_remaining_ancestor(bool value);
  private:
  bool _internal_is_remaining_ancestor() const;
  void _internal_set_is_remaining_ancestor(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.DeleteResource.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Orthanc::DatabasePluginMessages::FileInfo > deleted_attachments_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Orthanc::DatabasePluginMessages::DeleteResource_Response_Resource > deleted_resources_;
  ::Orthanc::DatabasePluginMessages::DeleteResource_Response_Resource* remaining_ancestor_;
  bool is_remaining_ancestor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class DeleteResource PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.DeleteResource) */ {
 public:
  inline DeleteResource() : DeleteResource(nullptr) {};
  virtual ~DeleteResource();

  DeleteResource(const DeleteResource& from);
  DeleteResource(DeleteResource&& from) noexcept
    : DeleteResource() {
    *this = ::std::move(from);
  }

  inline DeleteResource& operator=(const DeleteResource& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteResource& operator=(DeleteResource&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const DeleteResource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteResource* internal_default_instance() {
    return reinterpret_cast<const DeleteResource*>(
               &_DeleteResource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(DeleteResource& a, DeleteResource& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteResource* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteResource* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteResource* New() const final {
    return CreateMaybeMessage<DeleteResource>(nullptr);
  }

  DeleteResource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteResource>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DeleteResource& from);
  void MergeFrom(const DeleteResource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeleteResource* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.DeleteResource";
  }
  protected:
  explicit DeleteResource(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef DeleteResource_Request Request;
  typedef DeleteResource_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.DeleteResource)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class GetAllMetadata_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.GetAllMetadata.Request) */ {
 public:
  inline GetAllMetadata_Request() : GetAllMetadata_Request(nullptr) {};
  virtual ~GetAllMetadata_Request();

  GetAllMetadata_Request(const GetAllMetadata_Request& from);
  GetAllMetadata_Request(GetAllMetadata_Request&& from) noexcept
    : GetAllMetadata_Request() {
    *this = ::std::move(from);
  }

  inline GetAllMetadata_Request& operator=(const GetAllMetadata_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAllMetadata_Request& operator=(GetAllMetadata_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GetAllMetadata_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAllMetadata_Request* internal_default_instance() {
    return reinterpret_cast<const GetAllMetadata_Request*>(
               &_GetAllMetadata_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(GetAllMetadata_Request& a, GetAllMetadata_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAllMetadata_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAllMetadata_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAllMetadata_Request* New() const final {
    return CreateMaybeMessage<GetAllMetadata_Request>(nullptr);
  }

  GetAllMetadata_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAllMetadata_Request>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GetAllMetadata_Request& from);
  void MergeFrom(const GetAllMetadata_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetAllMetadata_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.GetAllMetadata.Request";
  }
  protected:
  explicit GetAllMetadata_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.GetAllMetadata.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class GetAllMetadata_Response_Metadata PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.GetAllMetadata.Response.Metadata) */ {
 public:
  inline GetAllMetadata_Response_Metadata() : GetAllMetadata_Response_Metadata(nullptr) {};
  virtual ~GetAllMetadata_Response_Metadata();

  GetAllMetadata_Response_Metadata(const GetAllMetadata_Response_Metadata& from);
  GetAllMetadata_Response_Metadata(GetAllMetadata_Response_Metadata&& from) noexcept
    : GetAllMetadata_Response_Metadata() {
    *this = ::std::move(from);
  }

  inline GetAllMetadata_Response_Metadata& operator=(const GetAllMetadata_Response_Metadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAllMetadata_Response_Metadata& operator=(GetAllMetadata_Response_Metadata&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GetAllMetadata_Response_Metadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAllMetadata_Response_Metadata* internal_default_instance() {
    return reinterpret_cast<const GetAllMetadata_Response_Metadata*>(
               &_GetAllMetadata_Response_Metadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(GetAllMetadata_Response_Metadata& a, GetAllMetadata_Response_Metadata& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAllMetadata_Response_Metadata* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAllMetadata_Response_Metadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAllMetadata_Response_Metadata* New() const final {
    return CreateMaybeMessage<GetAllMetadata_Response_Metadata>(nullptr);
  }

  GetAllMetadata_Response_Metadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAllMetadata_Response_Metadata>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GetAllMetadata_Response_Metadata& from);
  void MergeFrom(const GetAllMetadata_Response_Metadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetAllMetadata_Response_Metadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.GetAllMetadata.Response.Metadata";
  }
  protected:
  explicit GetAllMetadata_Response_Metadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // int32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.GetAllMetadata.Response.Metadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class GetAllMetadata_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.GetAllMetadata.Response) */ {
 public:
  inline GetAllMetadata_Response() : GetAllMetadata_Response(nullptr) {};
  virtual ~GetAllMetadata_Response();

  GetAllMetadata_Response(const GetAllMetadata_Response& from);
  GetAllMetadata_Response(GetAllMetadata_Response&& from) noexcept
    : GetAllMetadata_Response() {
    *this = ::std::move(from);
  }

  inline GetAllMetadata_Response& operator=(const GetAllMetadata_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAllMetadata_Response& operator=(GetAllMetadata_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GetAllMetadata_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAllMetadata_Response* internal_default_instance() {
    return reinterpret_cast<const GetAllMetadata_Response*>(
               &_GetAllMetadata_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(GetAllMetadata_Response& a, GetAllMetadata_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAllMetadata_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAllMetadata_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAllMetadata_Response* New() const final {
    return CreateMaybeMessage<GetAllMetadata_Response>(nullptr);
  }

  GetAllMetadata_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAllMetadata_Response>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GetAllMetadata_Response& from);
  void MergeFrom(const GetAllMetadata_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetAllMetadata_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.GetAllMetadata.Response";
  }
  protected:
  explicit GetAllMetadata_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef GetAllMetadata_Response_Metadata Metadata;

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 1,
  };
  // repeated .Orthanc.DatabasePluginMessages.GetAllMetadata.Response.Metadata metadata = 1;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  ::Orthanc::DatabasePluginMessages::GetAllMetadata_Response_Metadata* mutable_metadata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Orthanc::DatabasePluginMessages::GetAllMetadata_Response_Metadata >*
      mutable_metadata();
  private:
  const ::Orthanc::DatabasePluginMessages::GetAllMetadata_Response_Metadata& _internal_metadata(int index) const;
  ::Orthanc::DatabasePluginMessages::GetAllMetadata_Response_Metadata* _internal_add_metadata();
  public:
  const ::Orthanc::DatabasePluginMessages::GetAllMetadata_Response_Metadata& metadata(int index) const;
  ::Orthanc::DatabasePluginMessages::GetAllMetadata_Response_Metadata* add_metadata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Orthanc::DatabasePluginMessages::GetAllMetadata_Response_Metadata >&
      metadata() const;

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.GetAllMetadata.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Orthanc::DatabasePluginMessages::GetAllMetadata_Response_Metadata > metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class GetAllMetadata PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.GetAllMetadata) */ {
 public:
  inline GetAllMetadata() : GetAllMetadata(nullptr) {};
  virtual ~GetAllMetadata();

  GetAllMetadata(const GetAllMetadata& from);
  GetAllMetadata(GetAllMetadata&& from) noexcept
    : GetAllMetadata() {
    *this = ::std::move(from);
  }

  inline GetAllMetadata& operator=(const GetAllMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAllMetadata& operator=(GetAllMetadata&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GetAllMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAllMetadata* internal_default_instance() {
    return reinterpret_cast<const GetAllMetadata*>(
               &_GetAllMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(GetAllMetadata& a, GetAllMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAllMetadata* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAllMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAllMetadata* New() const final {
    return CreateMaybeMessage<GetAllMetadata>(nullptr);
  }

  GetAllMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAllMetadata>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GetAllMetadata& from);
  void MergeFrom(const GetAllMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetAllMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.GetAllMetadata";
  }
  protected:
  explicit GetAllMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef GetAllMetadata_Request Request;
  typedef GetAllMetadata_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.GetAllMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class GetAllPublicIds_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.GetAllPublicIds.Request) */ {
 public:
  inline GetAllPublicIds_Request() : GetAllPublicIds_Request(nullptr) {};
  virtual ~GetAllPublicIds_Request();

  GetAllPublicIds_Request(const GetAllPublicIds_Request& from);
  GetAllPublicIds_Request(GetAllPublicIds_Request&& from) noexcept
    : GetAllPublicIds_Request() {
    *this = ::std::move(from);
  }

  inline GetAllPublicIds_Request& operator=(const GetAllPublicIds_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAllPublicIds_Request& operator=(GetAllPublicIds_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GetAllPublicIds_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAllPublicIds_Request* internal_default_instance() {
    return reinterpret_cast<const GetAllPublicIds_Request*>(
               &_GetAllPublicIds_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(GetAllPublicIds_Request& a, GetAllPublicIds_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAllPublicIds_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAllPublicIds_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAllPublicIds_Request* New() const final {
    return CreateMaybeMessage<GetAllPublicIds_Request>(nullptr);
  }

  GetAllPublicIds_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAllPublicIds_Request>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GetAllPublicIds_Request& from);
  void MergeFrom(const GetAllPublicIds_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetAllPublicIds_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.GetAllPublicIds.Request";
  }
  protected:
  explicit GetAllPublicIds_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourceTypeFieldNumber = 1,
  };
  // .Orthanc.DatabasePluginMessages.ResourceType resource_type = 1;
  void clear_resource_type();
  ::Orthanc::DatabasePluginMessages::ResourceType resource_type() const;
  void set_resource_type(::Orthanc::DatabasePluginMessages::ResourceType value);
  private:
  ::Orthanc::DatabasePluginMessages::ResourceType _internal_resource_type() const;
  void _internal_set_resource_type(::Orthanc::DatabasePluginMessages::ResourceType value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.GetAllPublicIds.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int resource_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class GetAllPublicIds_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.GetAllPublicIds.Response) */ {
 public:
  inline GetAllPublicIds_Response() : GetAllPublicIds_Response(nullptr) {};
  virtual ~GetAllPublicIds_Response();

  GetAllPublicIds_Response(const GetAllPublicIds_Response& from);
  GetAllPublicIds_Response(GetAllPublicIds_Response&& from) noexcept
    : GetAllPublicIds_Response() {
    *this = ::std::move(from);
  }

  inline GetAllPublicIds_Response& operator=(const GetAllPublicIds_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAllPublicIds_Response& operator=(GetAllPublicIds_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GetAllPublicIds_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAllPublicIds_Response* internal_default_instance() {
    return reinterpret_cast<const GetAllPublicIds_Response*>(
               &_GetAllPublicIds_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(GetAllPublicIds_Response& a, GetAllPublicIds_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAllPublicIds_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAllPublicIds_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAllPublicIds_Response* New() const final {
    return CreateMaybeMessage<GetAllPublicIds_Response>(nullptr);
  }

  GetAllPublicIds_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAllPublicIds_Response>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GetAllPublicIds_Response& from);
  void MergeFrom(const GetAllPublicIds_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetAllPublicIds_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.GetAllPublicIds.Response";
  }
  protected:
  explicit GetAllPublicIds_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 1,
  };
  // repeated string ids = 1;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  const std::string& ids(int index) const;
  std::string* mutable_ids(int index);
  void set_ids(int index, const std::string& value);
  void set_ids(int index, std::string&& value);
  void set_ids(int index, const char* value);
  void set_ids(int index, const char* value, size_t size);
  std::string* add_ids();
  void add_ids(const std::string& value);
  void add_ids(std::string&& value);
  void add_ids(const char* value);
  void add_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ids();
  private:
  const std::string& _internal_ids(int index) const;
  std::string* _internal_add_ids();
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.GetAllPublicIds.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class GetAllPublicIds PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.GetAllPublicIds) */ {
 public:
  inline GetAllPublicIds() : GetAllPublicIds(nullptr) {};
  virtual ~GetAllPublicIds();

  GetAllPublicIds(const GetAllPublicIds& from);
  GetAllPublicIds(GetAllPublicIds&& from) noexcept
    : GetAllPublicIds() {
    *this = ::std::move(from);
  }

  inline GetAllPublicIds& operator=(const GetAllPublicIds& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAllPublicIds& operator=(GetAllPublicIds&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GetAllPublicIds& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAllPublicIds* internal_default_instance() {
    return reinterpret_cast<const GetAllPublicIds*>(
               &_GetAllPublicIds_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(GetAllPublicIds& a, GetAllPublicIds& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAllPublicIds* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAllPublicIds* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAllPublicIds* New() const final {
    return CreateMaybeMessage<GetAllPublicIds>(nullptr);
  }

  GetAllPublicIds* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAllPublicIds>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GetAllPublicIds& from);
  void MergeFrom(const GetAllPublicIds& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetAllPublicIds* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.GetAllPublicIds";
  }
  protected:
  explicit GetAllPublicIds(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef GetAllPublicIds_Request Request;
  typedef GetAllPublicIds_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.GetAllPublicIds)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class GetAllPublicIdsWithLimits_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.GetAllPublicIdsWithLimits.Request) */ {
 public:
  inline GetAllPublicIdsWithLimits_Request() : GetAllPublicIdsWithLimits_Request(nullptr) {};
  virtual ~GetAllPublicIdsWithLimits_Request();

  GetAllPublicIdsWithLimits_Request(const GetAllPublicIdsWithLimits_Request& from);
  GetAllPublicIdsWithLimits_Request(GetAllPublicIdsWithLimits_Request&& from) noexcept
    : GetAllPublicIdsWithLimits_Request() {
    *this = ::std::move(from);
  }

  inline GetAllPublicIdsWithLimits_Request& operator=(const GetAllPublicIdsWithLimits_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAllPublicIdsWithLimits_Request& operator=(GetAllPublicIdsWithLimits_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GetAllPublicIdsWithLimits_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAllPublicIdsWithLimits_Request* internal_default_instance() {
    return reinterpret_cast<const GetAllPublicIdsWithLimits_Request*>(
               &_GetAllPublicIdsWithLimits_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(GetAllPublicIdsWithLimits_Request& a, GetAllPublicIdsWithLimits_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAllPublicIdsWithLimits_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAllPublicIdsWithLimits_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAllPublicIdsWithLimits_Request* New() const final {
    return CreateMaybeMessage<GetAllPublicIdsWithLimits_Request>(nullptr);
  }

  GetAllPublicIdsWithLimits_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAllPublicIdsWithLimits_Request>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GetAllPublicIdsWithLimits_Request& from);
  void MergeFrom(const GetAllPublicIdsWithLimits_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetAllPublicIdsWithLimits_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.GetAllPublicIdsWithLimits.Request";
  }
  protected:
  explicit GetAllPublicIdsWithLimits_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSinceFieldNumber = 2,
    kResourceTypeFieldNumber = 1,
    kLimitFieldNumber = 3,
  };
  // int64 since = 2;
  void clear_since();
  ::PROTOBUF_NAMESPACE_ID::int64 since() const;
  void set_since(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_since() const;
  void _internal_set_since(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .Orthanc.DatabasePluginMessages.ResourceType resource_type = 1;
  void clear_resource_type();
  ::Orthanc::DatabasePluginMessages::ResourceType resource_type() const;
  void set_resource_type(::Orthanc::DatabasePluginMessages::ResourceType value);
  private:
  ::Orthanc::DatabasePluginMessages::ResourceType _internal_resource_type() const;
  void _internal_set_resource_type(::Orthanc::DatabasePluginMessages::ResourceType value);
  public:

  // uint32 limit = 3;
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::uint32 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.GetAllPublicIdsWithLimits.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 since_;
  int resource_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class GetAllPublicIdsWithLimits_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.GetAllPublicIdsWithLimits.Response) */ {
 public:
  inline GetAllPublicIdsWithLimits_Response() : GetAllPublicIdsWithLimits_Response(nullptr) {};
  virtual ~GetAllPublicIdsWithLimits_Response();

  GetAllPublicIdsWithLimits_Response(const GetAllPublicIdsWithLimits_Response& from);
  GetAllPublicIdsWithLimits_Response(GetAllPublicIdsWithLimits_Response&& from) noexcept
    : GetAllPublicIdsWithLimits_Response() {
    *this = ::std::move(from);
  }

  inline GetAllPublicIdsWithLimits_Response& operator=(const GetAllPublicIdsWithLimits_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAllPublicIdsWithLimits_Response& operator=(GetAllPublicIdsWithLimits_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GetAllPublicIdsWithLimits_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAllPublicIdsWithLimits_Response* internal_default_instance() {
    return reinterpret_cast<const GetAllPublicIdsWithLimits_Response*>(
               &_GetAllPublicIdsWithLimits_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(GetAllPublicIdsWithLimits_Response& a, GetAllPublicIdsWithLimits_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAllPublicIdsWithLimits_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAllPublicIdsWithLimits_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAllPublicIdsWithLimits_Response* New() const final {
    return CreateMaybeMessage<GetAllPublicIdsWithLimits_Response>(nullptr);
  }

  GetAllPublicIdsWithLimits_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAllPublicIdsWithLimits_Response>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GetAllPublicIdsWithLimits_Response& from);
  void MergeFrom(const GetAllPublicIdsWithLimits_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetAllPublicIdsWithLimits_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.GetAllPublicIdsWithLimits.Response";
  }
  protected:
  explicit GetAllPublicIdsWithLimits_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 1,
  };
  // repeated string ids = 1;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  const std::string& ids(int index) const;
  std::string* mutable_ids(int index);
  void set_ids(int index, const std::string& value);
  void set_ids(int index, std::string&& value);
  void set_ids(int index, const char* value);
  void set_ids(int index, const char* value, size_t size);
  std::string* add_ids();
  void add_ids(const std::string& value);
  void add_ids(std::string&& value);
  void add_ids(const char* value);
  void add_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ids();
  private:
  const std::string& _internal_ids(int index) const;
  std::string* _internal_add_ids();
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.GetAllPublicIdsWithLimits.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class GetAllPublicIdsWithLimits PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.GetAllPublicIdsWithLimits) */ {
 public:
  inline GetAllPublicIdsWithLimits() : GetAllPublicIdsWithLimits(nullptr) {};
  virtual ~GetAllPublicIdsWithLimits();

  GetAllPublicIdsWithLimits(const GetAllPublicIdsWithLimits& from);
  GetAllPublicIdsWithLimits(GetAllPublicIdsWithLimits&& from) noexcept
    : GetAllPublicIdsWithLimits() {
    *this = ::std::move(from);
  }

  inline GetAllPublicIdsWithLimits& operator=(const GetAllPublicIdsWithLimits& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAllPublicIdsWithLimits& operator=(GetAllPublicIdsWithLimits&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GetAllPublicIdsWithLimits& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAllPublicIdsWithLimits* internal_default_instance() {
    return reinterpret_cast<const GetAllPublicIdsWithLimits*>(
               &_GetAllPublicIdsWithLimits_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(GetAllPublicIdsWithLimits& a, GetAllPublicIdsWithLimits& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAllPublicIdsWithLimits* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAllPublicIdsWithLimits* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAllPublicIdsWithLimits* New() const final {
    return CreateMaybeMessage<GetAllPublicIdsWithLimits>(nullptr);
  }

  GetAllPublicIdsWithLimits* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAllPublicIdsWithLimits>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GetAllPublicIdsWithLimits& from);
  void MergeFrom(const GetAllPublicIdsWithLimits& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetAllPublicIdsWithLimits* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.GetAllPublicIdsWithLimits";
  }
  protected:
  explicit GetAllPublicIdsWithLimits(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef GetAllPublicIdsWithLimits_Request Request;
  typedef GetAllPublicIdsWithLimits_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.GetAllPublicIdsWithLimits)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class GetChanges_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.GetChanges.Request) */ {
 public:
  inline GetChanges_Request() : GetChanges_Request(nullptr) {};
  virtual ~GetChanges_Request();

  GetChanges_Request(const GetChanges_Request& from);
  GetChanges_Request(GetChanges_Request&& from) noexcept
    : GetChanges_Request() {
    *this = ::std::move(from);
  }

  inline GetChanges_Request& operator=(const GetChanges_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetChanges_Request& operator=(GetChanges_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GetChanges_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetChanges_Request* internal_default_instance() {
    return reinterpret_cast<const GetChanges_Request*>(
               &_GetChanges_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(GetChanges_Request& a, GetChanges_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(GetChanges_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetChanges_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetChanges_Request* New() const final {
    return CreateMaybeMessage<GetChanges_Request>(nullptr);
  }

  GetChanges_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetChanges_Request>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GetChanges_Request& from);
  void MergeFrom(const GetChanges_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetChanges_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.GetChanges.Request";
  }
  protected:
  explicit GetChanges_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSinceFieldNumber = 1,
    kLimitFieldNumber = 2,
  };
  // int64 since = 1;
  void clear_since();
  ::PROTOBUF_NAMESPACE_ID::int64 since() const;
  void set_since(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_since() const;
  void _internal_set_since(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 limit = 2;
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::uint32 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.GetChanges.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 since_;
  ::PROTOBUF_NAMESPACE_ID::uint32 limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class GetChanges_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.GetChanges.Response) */ {
 public:
  inline GetChanges_Response() : GetChanges_Response(nullptr) {};
  virtual ~GetChanges_Response();

  GetChanges_Response(const GetChanges_Response& from);
  GetChanges_Response(GetChanges_Response&& from) noexcept
    : GetChanges_Response() {
    *this = ::std::move(from);
  }

  inline GetChanges_Response& operator=(const GetChanges_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetChanges_Response& operator=(GetChanges_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GetChanges_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetChanges_Response* internal_default_instance() {
    return reinterpret_cast<const GetChanges_Response*>(
               &_GetChanges_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(GetChanges_Response& a, GetChanges_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(GetChanges_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetChanges_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetChanges_Response* New() const final {
    return CreateMaybeMessage<GetChanges_Response>(nullptr);
  }

  GetChanges_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetChanges_Response>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GetChanges_Response& from);
  void MergeFrom(const GetChanges_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetChanges_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.GetChanges.Response";
  }
  protected:
  explicit GetChanges_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChangesFieldNumber = 1,
    kDoneFieldNumber = 2,
  };
  // repeated .Orthanc.DatabasePluginMessages.ServerIndexChange changes = 1;
  int changes_size() const;
  private:
  int _internal_changes_size() const;
  public:
  void clear_changes();
  ::Orthanc::DatabasePluginMessages::ServerIndexChange* mutable_changes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Orthanc::DatabasePluginMessages::ServerIndexChange >*
      mutable_changes();
  private:
  const ::Orthanc::DatabasePluginMessages::ServerIndexChange& _internal_changes(int index) const;
  ::Orthanc::DatabasePluginMessages::ServerIndexChange* _internal_add_changes();
  public:
  const ::Orthanc::DatabasePluginMessages::ServerIndexChange& changes(int index) const;
  ::Orthanc::DatabasePluginMessages::ServerIndexChange* add_changes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Orthanc::DatabasePluginMessages::ServerIndexChange >&
      changes() const;

  // bool done = 2;
  void clear_done();
  bool done() const;
  void set_done(bool value);
  private:
  bool _internal_done() const;
  void _internal_set_done(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.GetChanges.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Orthanc::DatabasePluginMessages::ServerIndexChange > changes_;
  bool done_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class GetChanges PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.GetChanges) */ {
 public:
  inline GetChanges() : GetChanges(nullptr) {};
  virtual ~GetChanges();

  GetChanges(const GetChanges& from);
  GetChanges(GetChanges&& from) noexcept
    : GetChanges() {
    *this = ::std::move(from);
  }

  inline GetChanges& operator=(const GetChanges& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetChanges& operator=(GetChanges&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GetChanges& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetChanges* internal_default_instance() {
    return reinterpret_cast<const GetChanges*>(
               &_GetChanges_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(GetChanges& a, GetChanges& b) {
    a.Swap(&b);
  }
  inline void Swap(GetChanges* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetChanges* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetChanges* New() const final {
    return CreateMaybeMessage<GetChanges>(nullptr);
  }

  GetChanges* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetChanges>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GetChanges& from);
  void MergeFrom(const GetChanges& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetChanges* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.GetChanges";
  }
  protected:
  explicit GetChanges(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef GetChanges_Request Request;
  typedef GetChanges_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.GetChanges)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class GetChildrenInternalId_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.GetChildrenInternalId.Request) */ {
 public:
  inline GetChildrenInternalId_Request() : GetChildrenInternalId_Request(nullptr) {};
  virtual ~GetChildrenInternalId_Request();

  GetChildrenInternalId_Request(const GetChildrenInternalId_Request& from);
  GetChildrenInternalId_Request(GetChildrenInternalId_Request&& from) noexcept
    : GetChildrenInternalId_Request() {
    *this = ::std::move(from);
  }

  inline GetChildrenInternalId_Request& operator=(const GetChildrenInternalId_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetChildrenInternalId_Request& operator=(GetChildrenInternalId_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GetChildrenInternalId_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetChildrenInternalId_Request* internal_default_instance() {
    return reinterpret_cast<const GetChildrenInternalId_Request*>(
               &_GetChildrenInternalId_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(GetChildrenInternalId_Request& a, GetChildrenInternalId_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(GetChildrenInternalId_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetChildrenInternalId_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetChildrenInternalId_Request* New() const final {
    return CreateMaybeMessage<GetChildrenInternalId_Request>(nullptr);
  }

  GetChildrenInternalId_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetChildrenInternalId_Request>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GetChildrenInternalId_Request& from);
  void MergeFrom(const GetChildrenInternalId_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetChildrenInternalId_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.GetChildrenInternalId.Request";
  }
  protected:
  explicit GetChildrenInternalId_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.GetChildrenInternalId.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class GetChildrenInternalId_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.GetChildrenInternalId.Response) */ {
 public:
  inline GetChildrenInternalId_Response() : GetChildrenInternalId_Response(nullptr) {};
  virtual ~GetChildrenInternalId_Response();

  GetChildrenInternalId_Response(const GetChildrenInternalId_Response& from);
  GetChildrenInternalId_Response(GetChildrenInternalId_Response&& from) noexcept
    : GetChildrenInternalId_Response() {
    *this = ::std::move(from);
  }

  inline GetChildrenInternalId_Response& operator=(const GetChildrenInternalId_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetChildrenInternalId_Response& operator=(GetChildrenInternalId_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GetChildrenInternalId_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetChildrenInternalId_Response* internal_default_instance() {
    return reinterpret_cast<const GetChildrenInternalId_Response*>(
               &_GetChildrenInternalId_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(GetChildrenInternalId_Response& a, GetChildrenInternalId_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(GetChildrenInternalId_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetChildrenInternalId_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetChildrenInternalId_Response* New() const final {
    return CreateMaybeMessage<GetChildrenInternalId_Response>(nullptr);
  }

  GetChildrenInternalId_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetChildrenInternalId_Response>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GetChildrenInternalId_Response& from);
  void MergeFrom(const GetChildrenInternalId_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetChildrenInternalId_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.GetChildrenInternalId.Response";
  }
  protected:
  explicit GetChildrenInternalId_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 1,
  };
  // repeated int64 ids = 1;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_ids() const;
  void _internal_add_ids(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 ids(int index) const;
  void set_ids(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_ids(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_ids();

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.GetChildrenInternalId.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > ids_;
  mutable std::atomic<int> _ids_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class GetChildrenInternalId PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.GetChildrenInternalId) */ {
 public:
  inline GetChildrenInternalId() : GetChildrenInternalId(nullptr) {};
  virtual ~GetChildrenInternalId();

  GetChildrenInternalId(const GetChildrenInternalId& from);
  GetChildrenInternalId(GetChildrenInternalId&& from) noexcept
    : GetChildrenInternalId() {
    *this = ::std::move(from);
  }

  inline GetChildrenInternalId& operator=(const GetChildrenInternalId& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetChildrenInternalId& operator=(GetChildrenInternalId&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GetChildrenInternalId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetChildrenInternalId* internal_default_instance() {
    return reinterpret_cast<const GetChildrenInternalId*>(
               &_GetChildrenInternalId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(GetChildrenInternalId& a, GetChildrenInternalId& b) {
    a.Swap(&b);
  }
  inline void Swap(GetChildrenInternalId* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetChildrenInternalId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetChildrenInternalId* New() const final {
    return CreateMaybeMessage<GetChildrenInternalId>(nullptr);
  }

  GetChildrenInternalId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetChildrenInternalId>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GetChildrenInternalId& from);
  void MergeFrom(const GetChildrenInternalId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetChildrenInternalId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.GetChildrenInternalId";
  }
  protected:
  explicit GetChildrenInternalId(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef GetChildrenInternalId_Request Request;
  typedef GetChildrenInternalId_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.GetChildrenInternalId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class GetChildrenPublicId_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.GetChildrenPublicId.Request) */ {
 public:
  inline GetChildrenPublicId_Request() : GetChildrenPublicId_Request(nullptr) {};
  virtual ~GetChildrenPublicId_Request();

  GetChildrenPublicId_Request(const GetChildrenPublicId_Request& from);
  GetChildrenPublicId_Request(GetChildrenPublicId_Request&& from) noexcept
    : GetChildrenPublicId_Request() {
    *this = ::std::move(from);
  }

  inline GetChildrenPublicId_Request& operator=(const GetChildrenPublicId_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetChildrenPublicId_Request& operator=(GetChildrenPublicId_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GetChildrenPublicId_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetChildrenPublicId_Request* internal_default_instance() {
    return reinterpret_cast<const GetChildrenPublicId_Request*>(
               &_GetChildrenPublicId_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(GetChildrenPublicId_Request& a, GetChildrenPublicId_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(GetChildrenPublicId_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetChildrenPublicId_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetChildrenPublicId_Request* New() const final {
    return CreateMaybeMessage<GetChildrenPublicId_Request>(nullptr);
  }

  GetChildrenPublicId_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetChildrenPublicId_Request>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GetChildrenPublicId_Request& from);
  void MergeFrom(const GetChildrenPublicId_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetChildrenPublicId_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.GetChildrenPublicId.Request";
  }
  protected:
  explicit GetChildrenPublicId_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.GetChildrenPublicId.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class GetChildrenPublicId_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.GetChildrenPublicId.Response) */ {
 public:
  inline GetChildrenPublicId_Response() : GetChildrenPublicId_Response(nullptr) {};
  virtual ~GetChildrenPublicId_Response();

  GetChildrenPublicId_Response(const GetChildrenPublicId_Response& from);
  GetChildrenPublicId_Response(GetChildrenPublicId_Response&& from) noexcept
    : GetChildrenPublicId_Response() {
    *this = ::std::move(from);
  }

  inline GetChildrenPublicId_Response& operator=(const GetChildrenPublicId_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetChildrenPublicId_Response& operator=(GetChildrenPublicId_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GetChildrenPublicId_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetChildrenPublicId_Response* internal_default_instance() {
    return reinterpret_cast<const GetChildrenPublicId_Response*>(
               &_GetChildrenPublicId_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(GetChildrenPublicId_Response& a, GetChildrenPublicId_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(GetChildrenPublicId_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetChildrenPublicId_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetChildrenPublicId_Response* New() const final {
    return CreateMaybeMessage<GetChildrenPublicId_Response>(nullptr);
  }

  GetChildrenPublicId_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetChildrenPublicId_Response>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GetChildrenPublicId_Response& from);
  void MergeFrom(const GetChildrenPublicId_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetChildrenPublicId_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.GetChildrenPublicId.Response";
  }
  protected:
  explicit GetChildrenPublicId_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 1,
  };
  // repeated string ids = 1;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  const std::string& ids(int index) const;
  std::string* mutable_ids(int index);
  void set_ids(int index, const std::string& value);
  void set_ids(int index, std::string&& value);
  void set_ids(int index, const char* value);
  void set_ids(int index, const char* value, size_t size);
  std::string* add_ids();
  void add_ids(const std::string& value);
  void add_ids(std::string&& value);
  void add_ids(const char* value);
  void add_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ids();
  private:
  const std::string& _internal_ids(int index) const;
  std::string* _internal_add_ids();
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.GetChildrenPublicId.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class GetChildrenPublicId PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.GetChildrenPublicId) */ {
 public:
  inline GetChildrenPublicId() : GetChildrenPublicId(nullptr) {};
  virtual ~GetChildrenPublicId();

  GetChildrenPublicId(const GetChildrenPublicId& from);
  GetChildrenPublicId(GetChildrenPublicId&& from) noexcept
    : GetChildrenPublicId() {
    *this = ::std::move(from);
  }

  inline GetChildrenPublicId& operator=(const GetChildrenPublicId& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetChildrenPublicId& operator=(GetChildrenPublicId&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GetChildrenPublicId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetChildrenPublicId* internal_default_instance() {
    return reinterpret_cast<const GetChildrenPublicId*>(
               &_GetChildrenPublicId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(GetChildrenPublicId& a, GetChildrenPublicId& b) {
    a.Swap(&b);
  }
  inline void Swap(GetChildrenPublicId* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetChildrenPublicId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetChildrenPublicId* New() const final {
    return CreateMaybeMessage<GetChildrenPublicId>(nullptr);
  }

  GetChildrenPublicId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetChildrenPublicId>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GetChildrenPublicId& from);
  void MergeFrom(const GetChildrenPublicId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetChildrenPublicId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.GetChildrenPublicId";
  }
  protected:
  explicit GetChildrenPublicId(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef GetChildrenPublicId_Request Request;
  typedef GetChildrenPublicId_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.GetChildrenPublicId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class GetExportedResources_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.GetExportedResources.Request) */ {
 public:
  inline GetExportedResources_Request() : GetExportedResources_Request(nullptr) {};
  virtual ~GetExportedResources_Request();

  GetExportedResources_Request(const GetExportedResources_Request& from);
  GetExportedResources_Request(GetExportedResources_Request&& from) noexcept
    : GetExportedResources_Request() {
    *this = ::std::move(from);
  }

  inline GetExportedResources_Request& operator=(const GetExportedResources_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetExportedResources_Request& operator=(GetExportedResources_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GetExportedResources_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetExportedResources_Request* internal_default_instance() {
    return reinterpret_cast<const GetExportedResources_Request*>(
               &_GetExportedResources_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(GetExportedResources_Request& a, GetExportedResources_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(GetExportedResources_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetExportedResources_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetExportedResources_Request* New() const final {
    return CreateMaybeMessage<GetExportedResources_Request>(nullptr);
  }

  GetExportedResources_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetExportedResources_Request>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GetExportedResources_Request& from);
  void MergeFrom(const GetExportedResources_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetExportedResources_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.GetExportedResources.Request";
  }
  protected:
  explicit GetExportedResources_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSinceFieldNumber = 1,
    kLimitFieldNumber = 2,
  };
  // int64 since = 1;
  void clear_since();
  ::PROTOBUF_NAMESPACE_ID::int64 since() const;
  void set_since(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_since() const;
  void _internal_set_since(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 limit = 2;
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::uint32 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.GetExportedResources.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 since_;
  ::PROTOBUF_NAMESPACE_ID::uint32 limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class GetExportedResources_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.GetExportedResources.Response) */ {
 public:
  inline GetExportedResources_Response() : GetExportedResources_Response(nullptr) {};
  virtual ~GetExportedResources_Response();

  GetExportedResources_Response(const GetExportedResources_Response& from);
  GetExportedResources_Response(GetExportedResources_Response&& from) noexcept
    : GetExportedResources_Response() {
    *this = ::std::move(from);
  }

  inline GetExportedResources_Response& operator=(const GetExportedResources_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetExportedResources_Response& operator=(GetExportedResources_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GetExportedResources_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetExportedResources_Response* internal_default_instance() {
    return reinterpret_cast<const GetExportedResources_Response*>(
               &_GetExportedResources_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(GetExportedResources_Response& a, GetExportedResources_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(GetExportedResources_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetExportedResources_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetExportedResources_Response* New() const final {
    return CreateMaybeMessage<GetExportedResources_Response>(nullptr);
  }

  GetExportedResources_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetExportedResources_Response>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GetExportedResources_Response& from);
  void MergeFrom(const GetExportedResources_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetExportedResources_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.GetExportedResources.Response";
  }
  protected:
  explicit GetExportedResources_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourcesFieldNumber = 1,
    kDoneFieldNumber = 2,
  };
  // repeated .Orthanc.DatabasePluginMessages.ExportedResource resources = 1;
  int resources_size() const;
  private:
  int _internal_resources_size() const;
  public:
  void clear_resources();
  ::Orthanc::DatabasePluginMessages::ExportedResource* mutable_resources(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Orthanc::DatabasePluginMessages::ExportedResource >*
      mutable_resources();
  private:
  const ::Orthanc::DatabasePluginMessages::ExportedResource& _internal_resources(int index) const;
  ::Orthanc::DatabasePluginMessages::ExportedResource* _internal_add_resources();
  public:
  const ::Orthanc::DatabasePluginMessages::ExportedResource& resources(int index) const;
  ::Orthanc::DatabasePluginMessages::ExportedResource* add_resources();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Orthanc::DatabasePluginMessages::ExportedResource >&
      resources() const;

  // bool done = 2;
  void clear_done();
  bool done() const;
  void set_done(bool value);
  private:
  bool _internal_done() const;
  void _internal_set_done(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.GetExportedResources.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Orthanc::DatabasePluginMessages::ExportedResource > resources_;
  bool done_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class GetExportedResources PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.GetExportedResources) */ {
 public:
  inline GetExportedResources() : GetExportedResources(nullptr) {};
  virtual ~GetExportedResources();

  GetExportedResources(const GetExportedResources& from);
  GetExportedResources(GetExportedResources&& from) noexcept
    : GetExportedResources() {
    *this = ::std::move(from);
  }

  inline GetExportedResources& operator=(const GetExportedResources& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetExportedResources& operator=(GetExportedResources&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GetExportedResources& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetExportedResources* internal_default_instance() {
    return reinterpret_cast<const GetExportedResources*>(
               &_GetExportedResources_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(GetExportedResources& a, GetExportedResources& b) {
    a.Swap(&b);
  }
  inline void Swap(GetExportedResources* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetExportedResources* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetExportedResources* New() const final {
    return CreateMaybeMessage<GetExportedResources>(nullptr);
  }

  GetExportedResources* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetExportedResources>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GetExportedResources& from);
  void MergeFrom(const GetExportedResources& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetExportedResources* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.GetExportedResources";
  }
  protected:
  explicit GetExportedResources(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef GetExportedResources_Request Request;
  typedef GetExportedResources_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.GetExportedResources)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class GetLastChange_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.GetLastChange.Request) */ {
 public:
  inline GetLastChange_Request() : GetLastChange_Request(nullptr) {};
  virtual ~GetLastChange_Request();

  GetLastChange_Request(const GetLastChange_Request& from);
  GetLastChange_Request(GetLastChange_Request&& from) noexcept
    : GetLastChange_Request() {
    *this = ::std::move(from);
  }

  inline GetLastChange_Request& operator=(const GetLastChange_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLastChange_Request& operator=(GetLastChange_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GetLastChange_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetLastChange_Request* internal_default_instance() {
    return reinterpret_cast<const GetLastChange_Request*>(
               &_GetLastChange_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(GetLastChange_Request& a, GetLastChange_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLastChange_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLastChange_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLastChange_Request* New() const final {
    return CreateMaybeMessage<GetLastChange_Request>(nullptr);
  }

  GetLastChange_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLastChange_Request>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GetLastChange_Request& from);
  void MergeFrom(const GetLastChange_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetLastChange_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.GetLastChange.Request";
  }
  protected:
  explicit GetLastChange_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.GetLastChange.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class GetLastChange_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.GetLastChange.Response) */ {
 public:
  inline GetLastChange_Response() : GetLastChange_Response(nullptr) {};
  virtual ~GetLastChange_Response();

  GetLastChange_Response(const GetLastChange_Response& from);
  GetLastChange_Response(GetLastChange_Response&& from) noexcept
    : GetLastChange_Response() {
    *this = ::std::move(from);
  }

  inline GetLastChange_Response& operator=(const GetLastChange_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLastChange_Response& operator=(GetLastChange_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GetLastChange_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetLastChange_Response* internal_default_instance() {
    return reinterpret_cast<const GetLastChange_Response*>(
               &_GetLastChange_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(GetLastChange_Response& a, GetLastChange_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLastChange_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLastChange_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLastChange_Response* New() const final {
    return CreateMaybeMessage<GetLastChange_Response>(nullptr);
  }

  GetLastChange_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLastChange_Response>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GetLastChange_Response& from);
  void MergeFrom(const GetLastChange_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetLastChange_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.GetLastChange.Response";
  }
  protected:
  explicit GetLastChange_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChangeFieldNumber = 2,
    kFoundFieldNumber = 1,
  };
  // .Orthanc.DatabasePluginMessages.ServerIndexChange change = 2;
  bool has_change() const;
  private:
  bool _internal_has_change() const;
  public:
  void clear_change();
  const ::Orthanc::DatabasePluginMessages::ServerIndexChange& change() const;
  ::Orthanc::DatabasePluginMessages::ServerIndexChange* release_change();
  ::Orthanc::DatabasePluginMessages::ServerIndexChange* mutable_change();
  void set_allocated_change(::Orthanc::DatabasePluginMessages::ServerIndexChange* change);
  private:
  const ::Orthanc::DatabasePluginMessages::ServerIndexChange& _internal_change() const;
  ::Orthanc::DatabasePluginMessages::ServerIndexChange* _internal_mutable_change();
  public:
  void unsafe_arena_set_allocated_change(
      ::Orthanc::DatabasePluginMessages::ServerIndexChange* change);
  ::Orthanc::DatabasePluginMessages::ServerIndexChange* unsafe_arena_release_change();

  // bool found = 1;
  void clear_found();
  bool found() const;
  void set_found(bool value);
  private:
  bool _internal_found() const;
  void _internal_set_found(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.GetLastChange.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Orthanc::DatabasePluginMessages::ServerIndexChange* change_;
  bool found_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class GetLastChange PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.GetLastChange) */ {
 public:
  inline GetLastChange() : GetLastChange(nullptr) {};
  virtual ~GetLastChange();

  GetLastChange(const GetLastChange& from);
  GetLastChange(GetLastChange&& from) noexcept
    : GetLastChange() {
    *this = ::std::move(from);
  }

  inline GetLastChange& operator=(const GetLastChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLastChange& operator=(GetLastChange&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GetLastChange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetLastChange* internal_default_instance() {
    return reinterpret_cast<const GetLastChange*>(
               &_GetLastChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(GetLastChange& a, GetLastChange& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLastChange* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLastChange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLastChange* New() const final {
    return CreateMaybeMessage<GetLastChange>(nullptr);
  }

  GetLastChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLastChange>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GetLastChange& from);
  void MergeFrom(const GetLastChange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetLastChange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.GetLastChange";
  }
  protected:
  explicit GetLastChange(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef GetLastChange_Request Request;
  typedef GetLastChange_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.GetLastChange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class GetLastExportedResource_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.GetLastExportedResource.Request) */ {
 public:
  inline GetLastExportedResource_Request() : GetLastExportedResource_Request(nullptr) {};
  virtual ~GetLastExportedResource_Request();

  GetLastExportedResource_Request(const GetLastExportedResource_Request& from);
  GetLastExportedResource_Request(GetLastExportedResource_Request&& from) noexcept
    : GetLastExportedResource_Request() {
    *this = ::std::move(from);
  }

  inline GetLastExportedResource_Request& operator=(const GetLastExportedResource_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLastExportedResource_Request& operator=(GetLastExportedResource_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GetLastExportedResource_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetLastExportedResource_Request* internal_default_instance() {
    return reinterpret_cast<const GetLastExportedResource_Request*>(
               &_GetLastExportedResource_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(GetLastExportedResource_Request& a, GetLastExportedResource_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLastExportedResource_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLastExportedResource_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLastExportedResource_Request* New() const final {
    return CreateMaybeMessage<GetLastExportedResource_Request>(nullptr);
  }

  GetLastExportedResource_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLastExportedResource_Request>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GetLastExportedResource_Request& from);
  void MergeFrom(const GetLastExportedResource_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetLastExportedResource_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.GetLastExportedResource.Request";
  }
  protected:
  explicit GetLastExportedResource_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.GetLastExportedResource.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class GetLastExportedResource_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.GetLastExportedResource.Response) */ {
 public:
  inline GetLastExportedResource_Response() : GetLastExportedResource_Response(nullptr) {};
  virtual ~GetLastExportedResource_Response();

  GetLastExportedResource_Response(const GetLastExportedResource_Response& from);
  GetLastExportedResource_Response(GetLastExportedResource_Response&& from) noexcept
    : GetLastExportedResource_Response() {
    *this = ::std::move(from);
  }

  inline GetLastExportedResource_Response& operator=(const GetLastExportedResource_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLastExportedResource_Response& operator=(GetLastExportedResource_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GetLastExportedResource_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetLastExportedResource_Response* internal_default_instance() {
    return reinterpret_cast<const GetLastExportedResource_Response*>(
               &_GetLastExportedResource_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(GetLastExportedResource_Response& a, GetLastExportedResource_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLastExportedResource_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLastExportedResource_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLastExportedResource_Response* New() const final {
    return CreateMaybeMessage<GetLastExportedResource_Response>(nullptr);
  }

  GetLastExportedResource_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLastExportedResource_Response>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GetLastExportedResource_Response& from);
  void MergeFrom(const GetLastExportedResource_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetLastExportedResource_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.GetLastExportedResource.Response";
  }
  protected:
  explicit GetLastExportedResource_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourceFieldNumber = 2,
    kFoundFieldNumber = 1,
  };
  // .Orthanc.DatabasePluginMessages.ExportedResource resource = 2;
  bool has_resource() const;
  private:
  bool _internal_has_resource() const;
  public:
  void clear_resource();
  const ::Orthanc::DatabasePluginMessages::ExportedResource& resource() const;
  ::Orthanc::DatabasePluginMessages::ExportedResource* release_resource();
  ::Orthanc::DatabasePluginMessages::ExportedResource* mutable_resource();
  void set_allocated_resource(::Orthanc::DatabasePluginMessages::ExportedResource* resource);
  private:
  const ::Orthanc::DatabasePluginMessages::ExportedResource& _internal_resource() const;
  ::Orthanc::DatabasePluginMessages::ExportedResource* _internal_mutable_resource();
  public:
  void unsafe_arena_set_allocated_resource(
      ::Orthanc::DatabasePluginMessages::ExportedResource* resource);
  ::Orthanc::DatabasePluginMessages::ExportedResource* unsafe_arena_release_resource();

  // bool found = 1;
  void clear_found();
  bool found() const;
  void set_found(bool value);
  private:
  bool _internal_found() const;
  void _internal_set_found(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.GetLastExportedResource.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Orthanc::DatabasePluginMessages::ExportedResource* resource_;
  bool found_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class GetLastExportedResource PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.GetLastExportedResource) */ {
 public:
  inline GetLastExportedResource() : GetLastExportedResource(nullptr) {};
  virtual ~GetLastExportedResource();

  GetLastExportedResource(const GetLastExportedResource& from);
  GetLastExportedResource(GetLastExportedResource&& from) noexcept
    : GetLastExportedResource() {
    *this = ::std::move(from);
  }

  inline GetLastExportedResource& operator=(const GetLastExportedResource& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLastExportedResource& operator=(GetLastExportedResource&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GetLastExportedResource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetLastExportedResource* internal_default_instance() {
    return reinterpret_cast<const GetLastExportedResource*>(
               &_GetLastExportedResource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(GetLastExportedResource& a, GetLastExportedResource& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLastExportedResource* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLastExportedResource* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLastExportedResource* New() const final {
    return CreateMaybeMessage<GetLastExportedResource>(nullptr);
  }

  GetLastExportedResource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLastExportedResource>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GetLastExportedResource& from);
  void MergeFrom(const GetLastExportedResource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetLastExportedResource* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.GetLastExportedResource";
  }
  protected:
  explicit GetLastExportedResource(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef GetLastExportedResource_Request Request;
  typedef GetLastExportedResource_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.GetLastExportedResource)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class GetMainDicomTags_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.GetMainDicomTags.Request) */ {
 public:
  inline GetMainDicomTags_Request() : GetMainDicomTags_Request(nullptr) {};
  virtual ~GetMainDicomTags_Request();

  GetMainDicomTags_Request(const GetMainDicomTags_Request& from);
  GetMainDicomTags_Request(GetMainDicomTags_Request&& from) noexcept
    : GetMainDicomTags_Request() {
    *this = ::std::move(from);
  }

  inline GetMainDicomTags_Request& operator=(const GetMainDicomTags_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMainDicomTags_Request& operator=(GetMainDicomTags_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GetMainDicomTags_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMainDicomTags_Request* internal_default_instance() {
    return reinterpret_cast<const GetMainDicomTags_Request*>(
               &_GetMainDicomTags_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(GetMainDicomTags_Request& a, GetMainDicomTags_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMainDicomTags_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMainDicomTags_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetMainDicomTags_Request* New() const final {
    return CreateMaybeMessage<GetMainDicomTags_Request>(nullptr);
  }

  GetMainDicomTags_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMainDicomTags_Request>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GetMainDicomTags_Request& from);
  void MergeFrom(const GetMainDicomTags_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetMainDicomTags_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.GetMainDicomTags.Request";
  }
  protected:
  explicit GetMainDicomTags_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.GetMainDicomTags.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class GetMainDicomTags_Response_Tag PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.GetMainDicomTags.Response.Tag) */ {
 public:
  inline GetMainDicomTags_Response_Tag() : GetMainDicomTags_Response_Tag(nullptr) {};
  virtual ~GetMainDicomTags_Response_Tag();

  GetMainDicomTags_Response_Tag(const GetMainDicomTags_Response_Tag& from);
  GetMainDicomTags_Response_Tag(GetMainDicomTags_Response_Tag&& from) noexcept
    : GetMainDicomTags_Response_Tag() {
    *this = ::std::move(from);
  }

  inline GetMainDicomTags_Response_Tag& operator=(const GetMainDicomTags_Response_Tag& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMainDicomTags_Response_Tag& operator=(GetMainDicomTags_Response_Tag&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GetMainDicomTags_Response_Tag& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMainDicomTags_Response_Tag* internal_default_instance() {
    return reinterpret_cast<const GetMainDicomTags_Response_Tag*>(
               &_GetMainDicomTags_Response_Tag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(GetMainDicomTags_Response_Tag& a, GetMainDicomTags_Response_Tag& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMainDicomTags_Response_Tag* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMainDicomTags_Response_Tag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetMainDicomTags_Response_Tag* New() const final {
    return CreateMaybeMessage<GetMainDicomTags_Response_Tag>(nullptr);
  }

  GetMainDicomTags_Response_Tag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMainDicomTags_Response_Tag>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GetMainDicomTags_Response_Tag& from);
  void MergeFrom(const GetMainDicomTags_Response_Tag& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetMainDicomTags_Response_Tag* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.GetMainDicomTags.Response.Tag";
  }
  protected:
  explicit GetMainDicomTags_Response_Tag(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 3,
    kGroupFieldNumber = 1,
    kElementFieldNumber = 2,
  };
  // string value = 3;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // uint32 group = 1;
  void clear_group();
  ::PROTOBUF_NAMESPACE_ID::uint32 group() const;
  void set_group(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_group() const;
  void _internal_set_group(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 element = 2;
  void clear_element();
  ::PROTOBUF_NAMESPACE_ID::uint32 element() const;
  void set_element(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_element() const;
  void _internal_set_element(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.GetMainDicomTags.Response.Tag)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 group_;
  ::PROTOBUF_NAMESPACE_ID::uint32 element_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class GetMainDicomTags_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.GetMainDicomTags.Response) */ {
 public:
  inline GetMainDicomTags_Response() : GetMainDicomTags_Response(nullptr) {};
  virtual ~GetMainDicomTags_Response();

  GetMainDicomTags_Response(const GetMainDicomTags_Response& from);
  GetMainDicomTags_Response(GetMainDicomTags_Response&& from) noexcept
    : GetMainDicomTags_Response() {
    *this = ::std::move(from);
  }

  inline GetMainDicomTags_Response& operator=(const GetMainDicomTags_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMainDicomTags_Response& operator=(GetMainDicomTags_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GetMainDicomTags_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMainDicomTags_Response* internal_default_instance() {
    return reinterpret_cast<const GetMainDicomTags_Response*>(
               &_GetMainDicomTags_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(GetMainDicomTags_Response& a, GetMainDicomTags_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMainDicomTags_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMainDicomTags_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetMainDicomTags_Response* New() const final {
    return CreateMaybeMessage<GetMainDicomTags_Response>(nullptr);
  }

  GetMainDicomTags_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMainDicomTags_Response>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GetMainDicomTags_Response& from);
  void MergeFrom(const GetMainDicomTags_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetMainDicomTags_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.GetMainDicomTags.Response";
  }
  protected:
  explicit GetMainDicomTags_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef GetMainDicomTags_Response_Tag Tag;

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 1,
  };
  // repeated .Orthanc.DatabasePluginMessages.GetMainDicomTags.Response.Tag tags = 1;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Response_Tag* mutable_tags(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Response_Tag >*
      mutable_tags();
  private:
  const ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Response_Tag& _internal_tags(int index) const;
  ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Response_Tag* _internal_add_tags();
  public:
  const ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Response_Tag& tags(int index) const;
  ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Response_Tag* add_tags();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Response_Tag >&
      tags() const;

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.GetMainDicomTags.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Response_Tag > tags_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class GetMainDicomTags PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.GetMainDicomTags) */ {
 public:
  inline GetMainDicomTags() : GetMainDicomTags(nullptr) {};
  virtual ~GetMainDicomTags();

  GetMainDicomTags(const GetMainDicomTags& from);
  GetMainDicomTags(GetMainDicomTags&& from) noexcept
    : GetMainDicomTags() {
    *this = ::std::move(from);
  }

  inline GetMainDicomTags& operator=(const GetMainDicomTags& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMainDicomTags& operator=(GetMainDicomTags&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GetMainDicomTags& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMainDicomTags* internal_default_instance() {
    return reinterpret_cast<const GetMainDicomTags*>(
               &_GetMainDicomTags_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(GetMainDicomTags& a, GetMainDicomTags& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMainDicomTags* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMainDicomTags* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetMainDicomTags* New() const final {
    return CreateMaybeMessage<GetMainDicomTags>(nullptr);
  }

  GetMainDicomTags* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMainDicomTags>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GetMainDicomTags& from);
  void MergeFrom(const GetMainDicomTags& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetMainDicomTags* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.GetMainDicomTags";
  }
  protected:
  explicit GetMainDicomTags(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef GetMainDicomTags_Request Request;
  typedef GetMainDicomTags_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.GetMainDicomTags)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class GetPublicId_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.GetPublicId.Request) */ {
 public:
  inline GetPublicId_Request() : GetPublicId_Request(nullptr) {};
  virtual ~GetPublicId_Request();

  GetPublicId_Request(const GetPublicId_Request& from);
  GetPublicId_Request(GetPublicId_Request&& from) noexcept
    : GetPublicId_Request() {
    *this = ::std::move(from);
  }

  inline GetPublicId_Request& operator=(const GetPublicId_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPublicId_Request& operator=(GetPublicId_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GetPublicId_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPublicId_Request* internal_default_instance() {
    return reinterpret_cast<const GetPublicId_Request*>(
               &_GetPublicId_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(GetPublicId_Request& a, GetPublicId_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPublicId_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPublicId_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPublicId_Request* New() const final {
    return CreateMaybeMessage<GetPublicId_Request>(nullptr);
  }

  GetPublicId_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPublicId_Request>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GetPublicId_Request& from);
  void MergeFrom(const GetPublicId_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetPublicId_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.GetPublicId.Request";
  }
  protected:
  explicit GetPublicId_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.GetPublicId.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class GetPublicId_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.GetPublicId.Response) */ {
 public:
  inline GetPublicId_Response() : GetPublicId_Response(nullptr) {};
  virtual ~GetPublicId_Response();

  GetPublicId_Response(const GetPublicId_Response& from);
  GetPublicId_Response(GetPublicId_Response&& from) noexcept
    : GetPublicId_Response() {
    *this = ::std::move(from);
  }

  inline GetPublicId_Response& operator=(const GetPublicId_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPublicId_Response& operator=(GetPublicId_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GetPublicId_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPublicId_Response* internal_default_instance() {
    return reinterpret_cast<const GetPublicId_Response*>(
               &_GetPublicId_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(GetPublicId_Response& a, GetPublicId_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPublicId_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPublicId_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPublicId_Response* New() const final {
    return CreateMaybeMessage<GetPublicId_Response>(nullptr);
  }

  GetPublicId_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPublicId_Response>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GetPublicId_Response& from);
  void MergeFrom(const GetPublicId_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetPublicId_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.GetPublicId.Response";
  }
  protected:
  explicit GetPublicId_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.GetPublicId.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class GetPublicId PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.GetPublicId) */ {
 public:
  inline GetPublicId() : GetPublicId(nullptr) {};
  virtual ~GetPublicId();

  GetPublicId(const GetPublicId& from);
  GetPublicId(GetPublicId&& from) noexcept
    : GetPublicId() {
    *this = ::std::move(from);
  }

  inline GetPublicId& operator=(const GetPublicId& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPublicId& operator=(GetPublicId&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GetPublicId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPublicId* internal_default_instance() {
    return reinterpret_cast<const GetPublicId*>(
               &_GetPublicId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(GetPublicId& a, GetPublicId& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPublicId* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPublicId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPublicId* New() const final {
    return CreateMaybeMessage<GetPublicId>(nullptr);
  }

  GetPublicId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPublicId>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GetPublicId& from);
  void MergeFrom(const GetPublicId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetPublicId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.GetPublicId";
  }
  protected:
  explicit GetPublicId(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef GetPublicId_Request Request;
  typedef GetPublicId_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.GetPublicId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class GetResourcesCount_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.GetResourcesCount.Request) */ {
 public:
  inline GetResourcesCount_Request() : GetResourcesCount_Request(nullptr) {};
  virtual ~GetResourcesCount_Request();

  GetResourcesCount_Request(const GetResourcesCount_Request& from);
  GetResourcesCount_Request(GetResourcesCount_Request&& from) noexcept
    : GetResourcesCount_Request() {
    *this = ::std::move(from);
  }

  inline GetResourcesCount_Request& operator=(const GetResourcesCount_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetResourcesCount_Request& operator=(GetResourcesCount_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GetResourcesCount_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetResourcesCount_Request* internal_default_instance() {
    return reinterpret_cast<const GetResourcesCount_Request*>(
               &_GetResourcesCount_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(GetResourcesCount_Request& a, GetResourcesCount_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(GetResourcesCount_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetResourcesCount_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetResourcesCount_Request* New() const final {
    return CreateMaybeMessage<GetResourcesCount_Request>(nullptr);
  }

  GetResourcesCount_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetResourcesCount_Request>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GetResourcesCount_Request& from);
  void MergeFrom(const GetResourcesCount_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetResourcesCount_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.GetResourcesCount.Request";
  }
  protected:
  explicit GetResourcesCount_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // .Orthanc.DatabasePluginMessages.ResourceType type = 1;
  void clear_type();
  ::Orthanc::DatabasePluginMessages::ResourceType type() const;
  void set_type(::Orthanc::DatabasePluginMessages::ResourceType value);
  private:
  ::Orthanc::DatabasePluginMessages::ResourceType _internal_type() const;
  void _internal_set_type(::Orthanc::DatabasePluginMessages::ResourceType value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.GetResourcesCount.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class GetResourcesCount_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.GetResourcesCount.Response) */ {
 public:
  inline GetResourcesCount_Response() : GetResourcesCount_Response(nullptr) {};
  virtual ~GetResourcesCount_Response();

  GetResourcesCount_Response(const GetResourcesCount_Response& from);
  GetResourcesCount_Response(GetResourcesCount_Response&& from) noexcept
    : GetResourcesCount_Response() {
    *this = ::std::move(from);
  }

  inline GetResourcesCount_Response& operator=(const GetResourcesCount_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetResourcesCount_Response& operator=(GetResourcesCount_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GetResourcesCount_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetResourcesCount_Response* internal_default_instance() {
    return reinterpret_cast<const GetResourcesCount_Response*>(
               &_GetResourcesCount_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(GetResourcesCount_Response& a, GetResourcesCount_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(GetResourcesCount_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetResourcesCount_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetResourcesCount_Response* New() const final {
    return CreateMaybeMessage<GetResourcesCount_Response>(nullptr);
  }

  GetResourcesCount_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetResourcesCount_Response>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GetResourcesCount_Response& from);
  void MergeFrom(const GetResourcesCount_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetResourcesCount_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.GetResourcesCount.Response";
  }
  protected:
  explicit GetResourcesCount_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountFieldNumber = 1,
  };
  // uint64 count = 1;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.GetResourcesCount.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class GetResourcesCount PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.GetResourcesCount) */ {
 public:
  inline GetResourcesCount() : GetResourcesCount(nullptr) {};
  virtual ~GetResourcesCount();

  GetResourcesCount(const GetResourcesCount& from);
  GetResourcesCount(GetResourcesCount&& from) noexcept
    : GetResourcesCount() {
    *this = ::std::move(from);
  }

  inline GetResourcesCount& operator=(const GetResourcesCount& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetResourcesCount& operator=(GetResourcesCount&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GetResourcesCount& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetResourcesCount* internal_default_instance() {
    return reinterpret_cast<const GetResourcesCount*>(
               &_GetResourcesCount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(GetResourcesCount& a, GetResourcesCount& b) {
    a.Swap(&b);
  }
  inline void Swap(GetResourcesCount* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetResourcesCount* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetResourcesCount* New() const final {
    return CreateMaybeMessage<GetResourcesCount>(nullptr);
  }

  GetResourcesCount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetResourcesCount>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GetResourcesCount& from);
  void MergeFrom(const GetResourcesCount& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetResourcesCount* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.GetResourcesCount";
  }
  protected:
  explicit GetResourcesCount(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef GetResourcesCount_Request Request;
  typedef GetResourcesCount_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.GetResourcesCount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class GetResourceType_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.GetResourceType.Request) */ {
 public:
  inline GetResourceType_Request() : GetResourceType_Request(nullptr) {};
  virtual ~GetResourceType_Request();

  GetResourceType_Request(const GetResourceType_Request& from);
  GetResourceType_Request(GetResourceType_Request&& from) noexcept
    : GetResourceType_Request() {
    *this = ::std::move(from);
  }

  inline GetResourceType_Request& operator=(const GetResourceType_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetResourceType_Request& operator=(GetResourceType_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GetResourceType_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetResourceType_Request* internal_default_instance() {
    return reinterpret_cast<const GetResourceType_Request*>(
               &_GetResourceType_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(GetResourceType_Request& a, GetResourceType_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(GetResourceType_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetResourceType_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetResourceType_Request* New() const final {
    return CreateMaybeMessage<GetResourceType_Request>(nullptr);
  }

  GetResourceType_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetResourceType_Request>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GetResourceType_Request& from);
  void MergeFrom(const GetResourceType_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetResourceType_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.GetResourceType.Request";
  }
  protected:
  explicit GetResourceType_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.GetResourceType.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class GetResourceType_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.GetResourceType.Response) */ {
 public:
  inline GetResourceType_Response() : GetResourceType_Response(nullptr) {};
  virtual ~GetResourceType_Response();

  GetResourceType_Response(const GetResourceType_Response& from);
  GetResourceType_Response(GetResourceType_Response&& from) noexcept
    : GetResourceType_Response() {
    *this = ::std::move(from);
  }

  inline GetResourceType_Response& operator=(const GetResourceType_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetResourceType_Response& operator=(GetResourceType_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GetResourceType_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetResourceType_Response* internal_default_instance() {
    return reinterpret_cast<const GetResourceType_Response*>(
               &_GetResourceType_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  friend void swap(GetResourceType_Response& a, GetResourceType_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(GetResourceType_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetResourceType_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetResourceType_Response* New() const final {
    return CreateMaybeMessage<GetResourceType_Response>(nullptr);
  }

  GetResourceType_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetResourceType_Response>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GetResourceType_Response& from);
  void MergeFrom(const GetResourceType_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetResourceType_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.GetResourceType.Response";
  }
  protected:
  explicit GetResourceType_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // .Orthanc.DatabasePluginMessages.ResourceType type = 1;
  void clear_type();
  ::Orthanc::DatabasePluginMessages::ResourceType type() const;
  void set_type(::Orthanc::DatabasePluginMessages::ResourceType value);
  private:
  ::Orthanc::DatabasePluginMessages::ResourceType _internal_type() const;
  void _internal_set_type(::Orthanc::DatabasePluginMessages::ResourceType value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.GetResourceType.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class GetResourceType PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.GetResourceType) */ {
 public:
  inline GetResourceType() : GetResourceType(nullptr) {};
  virtual ~GetResourceType();

  GetResourceType(const GetResourceType& from);
  GetResourceType(GetResourceType&& from) noexcept
    : GetResourceType() {
    *this = ::std::move(from);
  }

  inline GetResourceType& operator=(const GetResourceType& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetResourceType& operator=(GetResourceType&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GetResourceType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetResourceType* internal_default_instance() {
    return reinterpret_cast<const GetResourceType*>(
               &_GetResourceType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  friend void swap(GetResourceType& a, GetResourceType& b) {
    a.Swap(&b);
  }
  inline void Swap(GetResourceType* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetResourceType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetResourceType* New() const final {
    return CreateMaybeMessage<GetResourceType>(nullptr);
  }

  GetResourceType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetResourceType>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GetResourceType& from);
  void MergeFrom(const GetResourceType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetResourceType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.GetResourceType";
  }
  protected:
  explicit GetResourceType(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef GetResourceType_Request Request;
  typedef GetResourceType_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.GetResourceType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class GetTotalCompressedSize_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.GetTotalCompressedSize.Request) */ {
 public:
  inline GetTotalCompressedSize_Request() : GetTotalCompressedSize_Request(nullptr) {};
  virtual ~GetTotalCompressedSize_Request();

  GetTotalCompressedSize_Request(const GetTotalCompressedSize_Request& from);
  GetTotalCompressedSize_Request(GetTotalCompressedSize_Request&& from) noexcept
    : GetTotalCompressedSize_Request() {
    *this = ::std::move(from);
  }

  inline GetTotalCompressedSize_Request& operator=(const GetTotalCompressedSize_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTotalCompressedSize_Request& operator=(GetTotalCompressedSize_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GetTotalCompressedSize_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTotalCompressedSize_Request* internal_default_instance() {
    return reinterpret_cast<const GetTotalCompressedSize_Request*>(
               &_GetTotalCompressedSize_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  friend void swap(GetTotalCompressedSize_Request& a, GetTotalCompressedSize_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTotalCompressedSize_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTotalCompressedSize_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTotalCompressedSize_Request* New() const final {
    return CreateMaybeMessage<GetTotalCompressedSize_Request>(nullptr);
  }

  GetTotalCompressedSize_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTotalCompressedSize_Request>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GetTotalCompressedSize_Request& from);
  void MergeFrom(const GetTotalCompressedSize_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetTotalCompressedSize_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.GetTotalCompressedSize.Request";
  }
  protected:
  explicit GetTotalCompressedSize_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.GetTotalCompressedSize.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class GetTotalCompressedSize_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.GetTotalCompressedSize.Response) */ {
 public:
  inline GetTotalCompressedSize_Response() : GetTotalCompressedSize_Response(nullptr) {};
  virtual ~GetTotalCompressedSize_Response();

  GetTotalCompressedSize_Response(const GetTotalCompressedSize_Response& from);
  GetTotalCompressedSize_Response(GetTotalCompressedSize_Response&& from) noexcept
    : GetTotalCompressedSize_Response() {
    *this = ::std::move(from);
  }

  inline GetTotalCompressedSize_Response& operator=(const GetTotalCompressedSize_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTotalCompressedSize_Response& operator=(GetTotalCompressedSize_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GetTotalCompressedSize_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTotalCompressedSize_Response* internal_default_instance() {
    return reinterpret_cast<const GetTotalCompressedSize_Response*>(
               &_GetTotalCompressedSize_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  friend void swap(GetTotalCompressedSize_Response& a, GetTotalCompressedSize_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTotalCompressedSize_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTotalCompressedSize_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTotalCompressedSize_Response* New() const final {
    return CreateMaybeMessage<GetTotalCompressedSize_Response>(nullptr);
  }

  GetTotalCompressedSize_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTotalCompressedSize_Response>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GetTotalCompressedSize_Response& from);
  void MergeFrom(const GetTotalCompressedSize_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetTotalCompressedSize_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.GetTotalCompressedSize.Response";
  }
  protected:
  explicit GetTotalCompressedSize_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSizeFieldNumber = 1,
  };
  // uint64 size = 1;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.GetTotalCompressedSize.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class GetTotalCompressedSize PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.GetTotalCompressedSize) */ {
 public:
  inline GetTotalCompressedSize() : GetTotalCompressedSize(nullptr) {};
  virtual ~GetTotalCompressedSize();

  GetTotalCompressedSize(const GetTotalCompressedSize& from);
  GetTotalCompressedSize(GetTotalCompressedSize&& from) noexcept
    : GetTotalCompressedSize() {
    *this = ::std::move(from);
  }

  inline GetTotalCompressedSize& operator=(const GetTotalCompressedSize& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTotalCompressedSize& operator=(GetTotalCompressedSize&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GetTotalCompressedSize& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTotalCompressedSize* internal_default_instance() {
    return reinterpret_cast<const GetTotalCompressedSize*>(
               &_GetTotalCompressedSize_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  friend void swap(GetTotalCompressedSize& a, GetTotalCompressedSize& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTotalCompressedSize* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTotalCompressedSize* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTotalCompressedSize* New() const final {
    return CreateMaybeMessage<GetTotalCompressedSize>(nullptr);
  }

  GetTotalCompressedSize* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTotalCompressedSize>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GetTotalCompressedSize& from);
  void MergeFrom(const GetTotalCompressedSize& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetTotalCompressedSize* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.GetTotalCompressedSize";
  }
  protected:
  explicit GetTotalCompressedSize(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef GetTotalCompressedSize_Request Request;
  typedef GetTotalCompressedSize_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.GetTotalCompressedSize)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class GetTotalUncompressedSize_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.GetTotalUncompressedSize.Request) */ {
 public:
  inline GetTotalUncompressedSize_Request() : GetTotalUncompressedSize_Request(nullptr) {};
  virtual ~GetTotalUncompressedSize_Request();

  GetTotalUncompressedSize_Request(const GetTotalUncompressedSize_Request& from);
  GetTotalUncompressedSize_Request(GetTotalUncompressedSize_Request&& from) noexcept
    : GetTotalUncompressedSize_Request() {
    *this = ::std::move(from);
  }

  inline GetTotalUncompressedSize_Request& operator=(const GetTotalUncompressedSize_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTotalUncompressedSize_Request& operator=(GetTotalUncompressedSize_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GetTotalUncompressedSize_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTotalUncompressedSize_Request* internal_default_instance() {
    return reinterpret_cast<const GetTotalUncompressedSize_Request*>(
               &_GetTotalUncompressedSize_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  friend void swap(GetTotalUncompressedSize_Request& a, GetTotalUncompressedSize_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTotalUncompressedSize_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTotalUncompressedSize_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTotalUncompressedSize_Request* New() const final {
    return CreateMaybeMessage<GetTotalUncompressedSize_Request>(nullptr);
  }

  GetTotalUncompressedSize_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTotalUncompressedSize_Request>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GetTotalUncompressedSize_Request& from);
  void MergeFrom(const GetTotalUncompressedSize_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetTotalUncompressedSize_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.GetTotalUncompressedSize.Request";
  }
  protected:
  explicit GetTotalUncompressedSize_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.GetTotalUncompressedSize.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class GetTotalUncompressedSize_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.GetTotalUncompressedSize.Response) */ {
 public:
  inline GetTotalUncompressedSize_Response() : GetTotalUncompressedSize_Response(nullptr) {};
  virtual ~GetTotalUncompressedSize_Response();

  GetTotalUncompressedSize_Response(const GetTotalUncompressedSize_Response& from);
  GetTotalUncompressedSize_Response(GetTotalUncompressedSize_Response&& from) noexcept
    : GetTotalUncompressedSize_Response() {
    *this = ::std::move(from);
  }

  inline GetTotalUncompressedSize_Response& operator=(const GetTotalUncompressedSize_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTotalUncompressedSize_Response& operator=(GetTotalUncompressedSize_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GetTotalUncompressedSize_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTotalUncompressedSize_Response* internal_default_instance() {
    return reinterpret_cast<const GetTotalUncompressedSize_Response*>(
               &_GetTotalUncompressedSize_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  friend void swap(GetTotalUncompressedSize_Response& a, GetTotalUncompressedSize_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTotalUncompressedSize_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTotalUncompressedSize_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTotalUncompressedSize_Response* New() const final {
    return CreateMaybeMessage<GetTotalUncompressedSize_Response>(nullptr);
  }

  GetTotalUncompressedSize_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTotalUncompressedSize_Response>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GetTotalUncompressedSize_Response& from);
  void MergeFrom(const GetTotalUncompressedSize_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetTotalUncompressedSize_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.GetTotalUncompressedSize.Response";
  }
  protected:
  explicit GetTotalUncompressedSize_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSizeFieldNumber = 1,
  };
  // uint64 size = 1;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.GetTotalUncompressedSize.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class GetTotalUncompressedSize PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.GetTotalUncompressedSize) */ {
 public:
  inline GetTotalUncompressedSize() : GetTotalUncompressedSize(nullptr) {};
  virtual ~GetTotalUncompressedSize();

  GetTotalUncompressedSize(const GetTotalUncompressedSize& from);
  GetTotalUncompressedSize(GetTotalUncompressedSize&& from) noexcept
    : GetTotalUncompressedSize() {
    *this = ::std::move(from);
  }

  inline GetTotalUncompressedSize& operator=(const GetTotalUncompressedSize& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTotalUncompressedSize& operator=(GetTotalUncompressedSize&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GetTotalUncompressedSize& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTotalUncompressedSize* internal_default_instance() {
    return reinterpret_cast<const GetTotalUncompressedSize*>(
               &_GetTotalUncompressedSize_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  friend void swap(GetTotalUncompressedSize& a, GetTotalUncompressedSize& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTotalUncompressedSize* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTotalUncompressedSize* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTotalUncompressedSize* New() const final {
    return CreateMaybeMessage<GetTotalUncompressedSize>(nullptr);
  }

  GetTotalUncompressedSize* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTotalUncompressedSize>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GetTotalUncompressedSize& from);
  void MergeFrom(const GetTotalUncompressedSize& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetTotalUncompressedSize* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.GetTotalUncompressedSize";
  }
  protected:
  explicit GetTotalUncompressedSize(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef GetTotalUncompressedSize_Request Request;
  typedef GetTotalUncompressedSize_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.GetTotalUncompressedSize)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class IsProtectedPatient_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.IsProtectedPatient.Request) */ {
 public:
  inline IsProtectedPatient_Request() : IsProtectedPatient_Request(nullptr) {};
  virtual ~IsProtectedPatient_Request();

  IsProtectedPatient_Request(const IsProtectedPatient_Request& from);
  IsProtectedPatient_Request(IsProtectedPatient_Request&& from) noexcept
    : IsProtectedPatient_Request() {
    *this = ::std::move(from);
  }

  inline IsProtectedPatient_Request& operator=(const IsProtectedPatient_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline IsProtectedPatient_Request& operator=(IsProtectedPatient_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IsProtectedPatient_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IsProtectedPatient_Request* internal_default_instance() {
    return reinterpret_cast<const IsProtectedPatient_Request*>(
               &_IsProtectedPatient_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  friend void swap(IsProtectedPatient_Request& a, IsProtectedPatient_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(IsProtectedPatient_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IsProtectedPatient_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IsProtectedPatient_Request* New() const final {
    return CreateMaybeMessage<IsProtectedPatient_Request>(nullptr);
  }

  IsProtectedPatient_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IsProtectedPatient_Request>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IsProtectedPatient_Request& from);
  void MergeFrom(const IsProtectedPatient_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IsProtectedPatient_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.IsProtectedPatient.Request";
  }
  protected:
  explicit IsProtectedPatient_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPatientIdFieldNumber = 1,
  };
  // int64 patient_id = 1;
  void clear_patient_id();
  ::PROTOBUF_NAMESPACE_ID::int64 patient_id() const;
  void set_patient_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_patient_id() const;
  void _internal_set_patient_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.IsProtectedPatient.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 patient_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class IsProtectedPatient_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.IsProtectedPatient.Response) */ {
 public:
  inline IsProtectedPatient_Response() : IsProtectedPatient_Response(nullptr) {};
  virtual ~IsProtectedPatient_Response();

  IsProtectedPatient_Response(const IsProtectedPatient_Response& from);
  IsProtectedPatient_Response(IsProtectedPatient_Response&& from) noexcept
    : IsProtectedPatient_Response() {
    *this = ::std::move(from);
  }

  inline IsProtectedPatient_Response& operator=(const IsProtectedPatient_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline IsProtectedPatient_Response& operator=(IsProtectedPatient_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IsProtectedPatient_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IsProtectedPatient_Response* internal_default_instance() {
    return reinterpret_cast<const IsProtectedPatient_Response*>(
               &_IsProtectedPatient_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    104;

  friend void swap(IsProtectedPatient_Response& a, IsProtectedPatient_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(IsProtectedPatient_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IsProtectedPatient_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IsProtectedPatient_Response* New() const final {
    return CreateMaybeMessage<IsProtectedPatient_Response>(nullptr);
  }

  IsProtectedPatient_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IsProtectedPatient_Response>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IsProtectedPatient_Response& from);
  void MergeFrom(const IsProtectedPatient_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IsProtectedPatient_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.IsProtectedPatient.Response";
  }
  protected:
  explicit IsProtectedPatient_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProtectedPatientFieldNumber = 1,
  };
  // bool protected_patient = 1;
  void clear_protected_patient();
  bool protected_patient() const;
  void set_protected_patient(bool value);
  private:
  bool _internal_protected_patient() const;
  void _internal_set_protected_patient(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.IsProtectedPatient.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool protected_patient_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class IsProtectedPatient PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.IsProtectedPatient) */ {
 public:
  inline IsProtectedPatient() : IsProtectedPatient(nullptr) {};
  virtual ~IsProtectedPatient();

  IsProtectedPatient(const IsProtectedPatient& from);
  IsProtectedPatient(IsProtectedPatient&& from) noexcept
    : IsProtectedPatient() {
    *this = ::std::move(from);
  }

  inline IsProtectedPatient& operator=(const IsProtectedPatient& from) {
    CopyFrom(from);
    return *this;
  }
  inline IsProtectedPatient& operator=(IsProtectedPatient&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IsProtectedPatient& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IsProtectedPatient* internal_default_instance() {
    return reinterpret_cast<const IsProtectedPatient*>(
               &_IsProtectedPatient_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    105;

  friend void swap(IsProtectedPatient& a, IsProtectedPatient& b) {
    a.Swap(&b);
  }
  inline void Swap(IsProtectedPatient* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IsProtectedPatient* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IsProtectedPatient* New() const final {
    return CreateMaybeMessage<IsProtectedPatient>(nullptr);
  }

  IsProtectedPatient* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IsProtectedPatient>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IsProtectedPatient& from);
  void MergeFrom(const IsProtectedPatient& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IsProtectedPatient* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.IsProtectedPatient";
  }
  protected:
  explicit IsProtectedPatient(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef IsProtectedPatient_Request Request;
  typedef IsProtectedPatient_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.IsProtectedPatient)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class ListAvailableAttachments_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.ListAvailableAttachments.Request) */ {
 public:
  inline ListAvailableAttachments_Request() : ListAvailableAttachments_Request(nullptr) {};
  virtual ~ListAvailableAttachments_Request();

  ListAvailableAttachments_Request(const ListAvailableAttachments_Request& from);
  ListAvailableAttachments_Request(ListAvailableAttachments_Request&& from) noexcept
    : ListAvailableAttachments_Request() {
    *this = ::std::move(from);
  }

  inline ListAvailableAttachments_Request& operator=(const ListAvailableAttachments_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListAvailableAttachments_Request& operator=(ListAvailableAttachments_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ListAvailableAttachments_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListAvailableAttachments_Request* internal_default_instance() {
    return reinterpret_cast<const ListAvailableAttachments_Request*>(
               &_ListAvailableAttachments_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    106;

  friend void swap(ListAvailableAttachments_Request& a, ListAvailableAttachments_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(ListAvailableAttachments_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListAvailableAttachments_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListAvailableAttachments_Request* New() const final {
    return CreateMaybeMessage<ListAvailableAttachments_Request>(nullptr);
  }

  ListAvailableAttachments_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListAvailableAttachments_Request>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ListAvailableAttachments_Request& from);
  void MergeFrom(const ListAvailableAttachments_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ListAvailableAttachments_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.ListAvailableAttachments.Request";
  }
  protected:
  explicit ListAvailableAttachments_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.ListAvailableAttachments.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class ListAvailableAttachments_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.ListAvailableAttachments.Response) */ {
 public:
  inline ListAvailableAttachments_Response() : ListAvailableAttachments_Response(nullptr) {};
  virtual ~ListAvailableAttachments_Response();

  ListAvailableAttachments_Response(const ListAvailableAttachments_Response& from);
  ListAvailableAttachments_Response(ListAvailableAttachments_Response&& from) noexcept
    : ListAvailableAttachments_Response() {
    *this = ::std::move(from);
  }

  inline ListAvailableAttachments_Response& operator=(const ListAvailableAttachments_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListAvailableAttachments_Response& operator=(ListAvailableAttachments_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ListAvailableAttachments_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListAvailableAttachments_Response* internal_default_instance() {
    return reinterpret_cast<const ListAvailableAttachments_Response*>(
               &_ListAvailableAttachments_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    107;

  friend void swap(ListAvailableAttachments_Response& a, ListAvailableAttachments_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(ListAvailableAttachments_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListAvailableAttachments_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListAvailableAttachments_Response* New() const final {
    return CreateMaybeMessage<ListAvailableAttachments_Response>(nullptr);
  }

  ListAvailableAttachments_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListAvailableAttachments_Response>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ListAvailableAttachments_Response& from);
  void MergeFrom(const ListAvailableAttachments_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ListAvailableAttachments_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.ListAvailableAttachments.Response";
  }
  protected:
  explicit ListAvailableAttachments_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttachmentsFieldNumber = 1,
  };
  // repeated int32 attachments = 1;
  int attachments_size() const;
  private:
  int _internal_attachments_size() const;
  public:
  void clear_attachments();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_attachments(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_attachments() const;
  void _internal_add_attachments(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_attachments();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 attachments(int index) const;
  void set_attachments(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_attachments(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      attachments() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_attachments();

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.ListAvailableAttachments.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > attachments_;
  mutable std::atomic<int> _attachments_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class ListAvailableAttachments PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.ListAvailableAttachments) */ {
 public:
  inline ListAvailableAttachments() : ListAvailableAttachments(nullptr) {};
  virtual ~ListAvailableAttachments();

  ListAvailableAttachments(const ListAvailableAttachments& from);
  ListAvailableAttachments(ListAvailableAttachments&& from) noexcept
    : ListAvailableAttachments() {
    *this = ::std::move(from);
  }

  inline ListAvailableAttachments& operator=(const ListAvailableAttachments& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListAvailableAttachments& operator=(ListAvailableAttachments&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ListAvailableAttachments& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListAvailableAttachments* internal_default_instance() {
    return reinterpret_cast<const ListAvailableAttachments*>(
               &_ListAvailableAttachments_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    108;

  friend void swap(ListAvailableAttachments& a, ListAvailableAttachments& b) {
    a.Swap(&b);
  }
  inline void Swap(ListAvailableAttachments* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListAvailableAttachments* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListAvailableAttachments* New() const final {
    return CreateMaybeMessage<ListAvailableAttachments>(nullptr);
  }

  ListAvailableAttachments* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListAvailableAttachments>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ListAvailableAttachments& from);
  void MergeFrom(const ListAvailableAttachments& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ListAvailableAttachments* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.ListAvailableAttachments";
  }
  protected:
  explicit ListAvailableAttachments(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ListAvailableAttachments_Request Request;
  typedef ListAvailableAttachments_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.ListAvailableAttachments)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class LogChange_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.LogChange.Request) */ {
 public:
  inline LogChange_Request() : LogChange_Request(nullptr) {};
  virtual ~LogChange_Request();

  LogChange_Request(const LogChange_Request& from);
  LogChange_Request(LogChange_Request&& from) noexcept
    : LogChange_Request() {
    *this = ::std::move(from);
  }

  inline LogChange_Request& operator=(const LogChange_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogChange_Request& operator=(LogChange_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const LogChange_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogChange_Request* internal_default_instance() {
    return reinterpret_cast<const LogChange_Request*>(
               &_LogChange_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    109;

  friend void swap(LogChange_Request& a, LogChange_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(LogChange_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogChange_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogChange_Request* New() const final {
    return CreateMaybeMessage<LogChange_Request>(nullptr);
  }

  LogChange_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogChange_Request>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const LogChange_Request& from);
  void MergeFrom(const LogChange_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LogChange_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.LogChange.Request";
  }
  protected:
  explicit LogChange_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDateFieldNumber = 4,
    kChangeTypeFieldNumber = 1,
    kResourceTypeFieldNumber = 2,
    kResourceIdFieldNumber = 3,
  };
  // string date = 4;
  void clear_date();
  const std::string& date() const;
  void set_date(const std::string& value);
  void set_date(std::string&& value);
  void set_date(const char* value);
  void set_date(const char* value, size_t size);
  std::string* mutable_date();
  std::string* release_date();
  void set_allocated_date(std::string* date);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_date();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_date(
      std::string* date);
  private:
  const std::string& _internal_date() const;
  void _internal_set_date(const std::string& value);
  std::string* _internal_mutable_date();
  public:

  // int32 change_type = 1;
  void clear_change_type();
  ::PROTOBUF_NAMESPACE_ID::int32 change_type() const;
  void set_change_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_change_type() const;
  void _internal_set_change_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .Orthanc.DatabasePluginMessages.ResourceType resource_type = 2;
  void clear_resource_type();
  ::Orthanc::DatabasePluginMessages::ResourceType resource_type() const;
  void set_resource_type(::Orthanc::DatabasePluginMessages::ResourceType value);
  private:
  ::Orthanc::DatabasePluginMessages::ResourceType _internal_resource_type() const;
  void _internal_set_resource_type(::Orthanc::DatabasePluginMessages::ResourceType value);
  public:

  // int64 resource_id = 3;
  void clear_resource_id();
  ::PROTOBUF_NAMESPACE_ID::int64 resource_id() const;
  void set_resource_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_resource_id() const;
  void _internal_set_resource_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.LogChange.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr date_;
  ::PROTOBUF_NAMESPACE_ID::int32 change_type_;
  int resource_type_;
  ::PROTOBUF_NAMESPACE_ID::int64 resource_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class LogChange_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.LogChange.Response) */ {
 public:
  inline LogChange_Response() : LogChange_Response(nullptr) {};
  virtual ~LogChange_Response();

  LogChange_Response(const LogChange_Response& from);
  LogChange_Response(LogChange_Response&& from) noexcept
    : LogChange_Response() {
    *this = ::std::move(from);
  }

  inline LogChange_Response& operator=(const LogChange_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogChange_Response& operator=(LogChange_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const LogChange_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogChange_Response* internal_default_instance() {
    return reinterpret_cast<const LogChange_Response*>(
               &_LogChange_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    110;

  friend void swap(LogChange_Response& a, LogChange_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(LogChange_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogChange_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogChange_Response* New() const final {
    return CreateMaybeMessage<LogChange_Response>(nullptr);
  }

  LogChange_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogChange_Response>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const LogChange_Response& from);
  void MergeFrom(const LogChange_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LogChange_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.LogChange.Response";
  }
  protected:
  explicit LogChange_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.LogChange.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class LogChange PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.LogChange) */ {
 public:
  inline LogChange() : LogChange(nullptr) {};
  virtual ~LogChange();

  LogChange(const LogChange& from);
  LogChange(LogChange&& from) noexcept
    : LogChange() {
    *this = ::std::move(from);
  }

  inline LogChange& operator=(const LogChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogChange& operator=(LogChange&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const LogChange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogChange* internal_default_instance() {
    return reinterpret_cast<const LogChange*>(
               &_LogChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    111;

  friend void swap(LogChange& a, LogChange& b) {
    a.Swap(&b);
  }
  inline void Swap(LogChange* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogChange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogChange* New() const final {
    return CreateMaybeMessage<LogChange>(nullptr);
  }

  LogChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogChange>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const LogChange& from);
  void MergeFrom(const LogChange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LogChange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.LogChange";
  }
  protected:
  explicit LogChange(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef LogChange_Request Request;
  typedef LogChange_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.LogChange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class LogExportedResource_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.LogExportedResource.Request) */ {
 public:
  inline LogExportedResource_Request() : LogExportedResource_Request(nullptr) {};
  virtual ~LogExportedResource_Request();

  LogExportedResource_Request(const LogExportedResource_Request& from);
  LogExportedResource_Request(LogExportedResource_Request&& from) noexcept
    : LogExportedResource_Request() {
    *this = ::std::move(from);
  }

  inline LogExportedResource_Request& operator=(const LogExportedResource_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogExportedResource_Request& operator=(LogExportedResource_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const LogExportedResource_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogExportedResource_Request* internal_default_instance() {
    return reinterpret_cast<const LogExportedResource_Request*>(
               &_LogExportedResource_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    112;

  friend void swap(LogExportedResource_Request& a, LogExportedResource_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(LogExportedResource_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogExportedResource_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogExportedResource_Request* New() const final {
    return CreateMaybeMessage<LogExportedResource_Request>(nullptr);
  }

  LogExportedResource_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogExportedResource_Request>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const LogExportedResource_Request& from);
  void MergeFrom(const LogExportedResource_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LogExportedResource_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.LogExportedResource.Request";
  }
  protected:
  explicit LogExportedResource_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicIdFieldNumber = 2,
    kModalityFieldNumber = 3,
    kDateFieldNumber = 4,
    kPatientIdFieldNumber = 5,
    kStudyInstanceUidFieldNumber = 6,
    kSeriesInstanceUidFieldNumber = 7,
    kSopInstanceUidFieldNumber = 8,
    kResourceTypeFieldNumber = 1,
  };
  // string public_id = 2;
  void clear_public_id();
  const std::string& public_id() const;
  void set_public_id(const std::string& value);
  void set_public_id(std::string&& value);
  void set_public_id(const char* value);
  void set_public_id(const char* value, size_t size);
  std::string* mutable_public_id();
  std::string* release_public_id();
  void set_allocated_public_id(std::string* public_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_public_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_public_id(
      std::string* public_id);
  private:
  const std::string& _internal_public_id() const;
  void _internal_set_public_id(const std::string& value);
  std::string* _internal_mutable_public_id();
  public:

  // string modality = 3;
  void clear_modality();
  const std::string& modality() const;
  void set_modality(const std::string& value);
  void set_modality(std::string&& value);
  void set_modality(const char* value);
  void set_modality(const char* value, size_t size);
  std::string* mutable_modality();
  std::string* release_modality();
  void set_allocated_modality(std::string* modality);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_modality();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_modality(
      std::string* modality);
  private:
  const std::string& _internal_modality() const;
  void _internal_set_modality(const std::string& value);
  std::string* _internal_mutable_modality();
  public:

  // string date = 4;
  void clear_date();
  const std::string& date() const;
  void set_date(const std::string& value);
  void set_date(std::string&& value);
  void set_date(const char* value);
  void set_date(const char* value, size_t size);
  std::string* mutable_date();
  std::string* release_date();
  void set_allocated_date(std::string* date);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_date();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_date(
      std::string* date);
  private:
  const std::string& _internal_date() const;
  void _internal_set_date(const std::string& value);
  std::string* _internal_mutable_date();
  public:

  // string patient_id = 5;
  void clear_patient_id();
  const std::string& patient_id() const;
  void set_patient_id(const std::string& value);
  void set_patient_id(std::string&& value);
  void set_patient_id(const char* value);
  void set_patient_id(const char* value, size_t size);
  std::string* mutable_patient_id();
  std::string* release_patient_id();
  void set_allocated_patient_id(std::string* patient_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_patient_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_patient_id(
      std::string* patient_id);
  private:
  const std::string& _internal_patient_id() const;
  void _internal_set_patient_id(const std::string& value);
  std::string* _internal_mutable_patient_id();
  public:

  // string study_instance_uid = 6;
  void clear_study_instance_uid();
  const std::string& study_instance_uid() const;
  void set_study_instance_uid(const std::string& value);
  void set_study_instance_uid(std::string&& value);
  void set_study_instance_uid(const char* value);
  void set_study_instance_uid(const char* value, size_t size);
  std::string* mutable_study_instance_uid();
  std::string* release_study_instance_uid();
  void set_allocated_study_instance_uid(std::string* study_instance_uid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_study_instance_uid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_study_instance_uid(
      std::string* study_instance_uid);
  private:
  const std::string& _internal_study_instance_uid() const;
  void _internal_set_study_instance_uid(const std::string& value);
  std::string* _internal_mutable_study_instance_uid();
  public:

  // string series_instance_uid = 7;
  void clear_series_instance_uid();
  const std::string& series_instance_uid() const;
  void set_series_instance_uid(const std::string& value);
  void set_series_instance_uid(std::string&& value);
  void set_series_instance_uid(const char* value);
  void set_series_instance_uid(const char* value, size_t size);
  std::string* mutable_series_instance_uid();
  std::string* release_series_instance_uid();
  void set_allocated_series_instance_uid(std::string* series_instance_uid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_series_instance_uid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_series_instance_uid(
      std::string* series_instance_uid);
  private:
  const std::string& _internal_series_instance_uid() const;
  void _internal_set_series_instance_uid(const std::string& value);
  std::string* _internal_mutable_series_instance_uid();
  public:

  // string sop_instance_uid = 8;
  void clear_sop_instance_uid();
  const std::string& sop_instance_uid() const;
  void set_sop_instance_uid(const std::string& value);
  void set_sop_instance_uid(std::string&& value);
  void set_sop_instance_uid(const char* value);
  void set_sop_instance_uid(const char* value, size_t size);
  std::string* mutable_sop_instance_uid();
  std::string* release_sop_instance_uid();
  void set_allocated_sop_instance_uid(std::string* sop_instance_uid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_sop_instance_uid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sop_instance_uid(
      std::string* sop_instance_uid);
  private:
  const std::string& _internal_sop_instance_uid() const;
  void _internal_set_sop_instance_uid(const std::string& value);
  std::string* _internal_mutable_sop_instance_uid();
  public:

  // .Orthanc.DatabasePluginMessages.ResourceType resource_type = 1;
  void clear_resource_type();
  ::Orthanc::DatabasePluginMessages::ResourceType resource_type() const;
  void set_resource_type(::Orthanc::DatabasePluginMessages::ResourceType value);
  private:
  ::Orthanc::DatabasePluginMessages::ResourceType _internal_resource_type() const;
  void _internal_set_resource_type(::Orthanc::DatabasePluginMessages::ResourceType value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.LogExportedResource.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr modality_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr patient_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr study_instance_uid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr series_instance_uid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sop_instance_uid_;
  int resource_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class LogExportedResource_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.LogExportedResource.Response) */ {
 public:
  inline LogExportedResource_Response() : LogExportedResource_Response(nullptr) {};
  virtual ~LogExportedResource_Response();

  LogExportedResource_Response(const LogExportedResource_Response& from);
  LogExportedResource_Response(LogExportedResource_Response&& from) noexcept
    : LogExportedResource_Response() {
    *this = ::std::move(from);
  }

  inline LogExportedResource_Response& operator=(const LogExportedResource_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogExportedResource_Response& operator=(LogExportedResource_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const LogExportedResource_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogExportedResource_Response* internal_default_instance() {
    return reinterpret_cast<const LogExportedResource_Response*>(
               &_LogExportedResource_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    113;

  friend void swap(LogExportedResource_Response& a, LogExportedResource_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(LogExportedResource_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogExportedResource_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogExportedResource_Response* New() const final {
    return CreateMaybeMessage<LogExportedResource_Response>(nullptr);
  }

  LogExportedResource_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogExportedResource_Response>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const LogExportedResource_Response& from);
  void MergeFrom(const LogExportedResource_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LogExportedResource_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.LogExportedResource.Response";
  }
  protected:
  explicit LogExportedResource_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.LogExportedResource.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class LogExportedResource PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.LogExportedResource) */ {
 public:
  inline LogExportedResource() : LogExportedResource(nullptr) {};
  virtual ~LogExportedResource();

  LogExportedResource(const LogExportedResource& from);
  LogExportedResource(LogExportedResource&& from) noexcept
    : LogExportedResource() {
    *this = ::std::move(from);
  }

  inline LogExportedResource& operator=(const LogExportedResource& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogExportedResource& operator=(LogExportedResource&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const LogExportedResource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogExportedResource* internal_default_instance() {
    return reinterpret_cast<const LogExportedResource*>(
               &_LogExportedResource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    114;

  friend void swap(LogExportedResource& a, LogExportedResource& b) {
    a.Swap(&b);
  }
  inline void Swap(LogExportedResource* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogExportedResource* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogExportedResource* New() const final {
    return CreateMaybeMessage<LogExportedResource>(nullptr);
  }

  LogExportedResource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogExportedResource>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const LogExportedResource& from);
  void MergeFrom(const LogExportedResource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LogExportedResource* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.LogExportedResource";
  }
  protected:
  explicit LogExportedResource(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef LogExportedResource_Request Request;
  typedef LogExportedResource_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.LogExportedResource)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class LookupAttachment_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.LookupAttachment.Request) */ {
 public:
  inline LookupAttachment_Request() : LookupAttachment_Request(nullptr) {};
  virtual ~LookupAttachment_Request();

  LookupAttachment_Request(const LookupAttachment_Request& from);
  LookupAttachment_Request(LookupAttachment_Request&& from) noexcept
    : LookupAttachment_Request() {
    *this = ::std::move(from);
  }

  inline LookupAttachment_Request& operator=(const LookupAttachment_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline LookupAttachment_Request& operator=(LookupAttachment_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const LookupAttachment_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LookupAttachment_Request* internal_default_instance() {
    return reinterpret_cast<const LookupAttachment_Request*>(
               &_LookupAttachment_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    115;

  friend void swap(LookupAttachment_Request& a, LookupAttachment_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(LookupAttachment_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LookupAttachment_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LookupAttachment_Request* New() const final {
    return CreateMaybeMessage<LookupAttachment_Request>(nullptr);
  }

  LookupAttachment_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LookupAttachment_Request>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const LookupAttachment_Request& from);
  void MergeFrom(const LookupAttachment_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LookupAttachment_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.LookupAttachment.Request";
  }
  protected:
  explicit LookupAttachment_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kContentTypeFieldNumber = 2,
  };
  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 content_type = 2;
  void clear_content_type();
  ::PROTOBUF_NAMESPACE_ID::int32 content_type() const;
  void set_content_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_content_type() const;
  void _internal_set_content_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.LookupAttachment.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 content_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class LookupAttachment_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.LookupAttachment.Response) */ {
 public:
  inline LookupAttachment_Response() : LookupAttachment_Response(nullptr) {};
  virtual ~LookupAttachment_Response();

  LookupAttachment_Response(const LookupAttachment_Response& from);
  LookupAttachment_Response(LookupAttachment_Response&& from) noexcept
    : LookupAttachment_Response() {
    *this = ::std::move(from);
  }

  inline LookupAttachment_Response& operator=(const LookupAttachment_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline LookupAttachment_Response& operator=(LookupAttachment_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const LookupAttachment_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LookupAttachment_Response* internal_default_instance() {
    return reinterpret_cast<const LookupAttachment_Response*>(
               &_LookupAttachment_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    116;

  friend void swap(LookupAttachment_Response& a, LookupAttachment_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(LookupAttachment_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LookupAttachment_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LookupAttachment_Response* New() const final {
    return CreateMaybeMessage<LookupAttachment_Response>(nullptr);
  }

  LookupAttachment_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LookupAttachment_Response>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const LookupAttachment_Response& from);
  void MergeFrom(const LookupAttachment_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LookupAttachment_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.LookupAttachment.Response";
  }
  protected:
  explicit LookupAttachment_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttachmentFieldNumber = 2,
    kRevisionFieldNumber = 3,
    kFoundFieldNumber = 1,
  };
  // .Orthanc.DatabasePluginMessages.FileInfo attachment = 2;
  bool has_attachment() const;
  private:
  bool _internal_has_attachment() const;
  public:
  void clear_attachment();
  const ::Orthanc::DatabasePluginMessages::FileInfo& attachment() const;
  ::Orthanc::DatabasePluginMessages::FileInfo* release_attachment();
  ::Orthanc::DatabasePluginMessages::FileInfo* mutable_attachment();
  void set_allocated_attachment(::Orthanc::DatabasePluginMessages::FileInfo* attachment);
  private:
  const ::Orthanc::DatabasePluginMessages::FileInfo& _internal_attachment() const;
  ::Orthanc::DatabasePluginMessages::FileInfo* _internal_mutable_attachment();
  public:
  void unsafe_arena_set_allocated_attachment(
      ::Orthanc::DatabasePluginMessages::FileInfo* attachment);
  ::Orthanc::DatabasePluginMessages::FileInfo* unsafe_arena_release_attachment();

  // int64 revision = 3;
  void clear_revision();
  ::PROTOBUF_NAMESPACE_ID::int64 revision() const;
  void set_revision(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_revision() const;
  void _internal_set_revision(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool found = 1;
  void clear_found();
  bool found() const;
  void set_found(bool value);
  private:
  bool _internal_found() const;
  void _internal_set_found(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.LookupAttachment.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Orthanc::DatabasePluginMessages::FileInfo* attachment_;
  ::PROTOBUF_NAMESPACE_ID::int64 revision_;
  bool found_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class LookupAttachment PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.LookupAttachment) */ {
 public:
  inline LookupAttachment() : LookupAttachment(nullptr) {};
  virtual ~LookupAttachment();

  LookupAttachment(const LookupAttachment& from);
  LookupAttachment(LookupAttachment&& from) noexcept
    : LookupAttachment() {
    *this = ::std::move(from);
  }

  inline LookupAttachment& operator=(const LookupAttachment& from) {
    CopyFrom(from);
    return *this;
  }
  inline LookupAttachment& operator=(LookupAttachment&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const LookupAttachment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LookupAttachment* internal_default_instance() {
    return reinterpret_cast<const LookupAttachment*>(
               &_LookupAttachment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    117;

  friend void swap(LookupAttachment& a, LookupAttachment& b) {
    a.Swap(&b);
  }
  inline void Swap(LookupAttachment* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LookupAttachment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LookupAttachment* New() const final {
    return CreateMaybeMessage<LookupAttachment>(nullptr);
  }

  LookupAttachment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LookupAttachment>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const LookupAttachment& from);
  void MergeFrom(const LookupAttachment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LookupAttachment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.LookupAttachment";
  }
  protected:
  explicit LookupAttachment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef LookupAttachment_Request Request;
  typedef LookupAttachment_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.LookupAttachment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class LookupGlobalProperty_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.LookupGlobalProperty.Request) */ {
 public:
  inline LookupGlobalProperty_Request() : LookupGlobalProperty_Request(nullptr) {};
  virtual ~LookupGlobalProperty_Request();

  LookupGlobalProperty_Request(const LookupGlobalProperty_Request& from);
  LookupGlobalProperty_Request(LookupGlobalProperty_Request&& from) noexcept
    : LookupGlobalProperty_Request() {
    *this = ::std::move(from);
  }

  inline LookupGlobalProperty_Request& operator=(const LookupGlobalProperty_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline LookupGlobalProperty_Request& operator=(LookupGlobalProperty_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const LookupGlobalProperty_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LookupGlobalProperty_Request* internal_default_instance() {
    return reinterpret_cast<const LookupGlobalProperty_Request*>(
               &_LookupGlobalProperty_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    118;

  friend void swap(LookupGlobalProperty_Request& a, LookupGlobalProperty_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(LookupGlobalProperty_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LookupGlobalProperty_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LookupGlobalProperty_Request* New() const final {
    return CreateMaybeMessage<LookupGlobalProperty_Request>(nullptr);
  }

  LookupGlobalProperty_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LookupGlobalProperty_Request>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const LookupGlobalProperty_Request& from);
  void MergeFrom(const LookupGlobalProperty_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LookupGlobalProperty_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.LookupGlobalProperty.Request";
  }
  protected:
  explicit LookupGlobalProperty_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerIdFieldNumber = 1,
    kPropertyFieldNumber = 2,
  };
  // string server_id = 1;
  void clear_server_id();
  const std::string& server_id() const;
  void set_server_id(const std::string& value);
  void set_server_id(std::string&& value);
  void set_server_id(const char* value);
  void set_server_id(const char* value, size_t size);
  std::string* mutable_server_id();
  std::string* release_server_id();
  void set_allocated_server_id(std::string* server_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_server_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_server_id(
      std::string* server_id);
  private:
  const std::string& _internal_server_id() const;
  void _internal_set_server_id(const std::string& value);
  std::string* _internal_mutable_server_id();
  public:

  // int32 property = 2;
  void clear_property();
  ::PROTOBUF_NAMESPACE_ID::int32 property() const;
  void set_property(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_property() const;
  void _internal_set_property(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.LookupGlobalProperty.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 property_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class LookupGlobalProperty_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.LookupGlobalProperty.Response) */ {
 public:
  inline LookupGlobalProperty_Response() : LookupGlobalProperty_Response(nullptr) {};
  virtual ~LookupGlobalProperty_Response();

  LookupGlobalProperty_Response(const LookupGlobalProperty_Response& from);
  LookupGlobalProperty_Response(LookupGlobalProperty_Response&& from) noexcept
    : LookupGlobalProperty_Response() {
    *this = ::std::move(from);
  }

  inline LookupGlobalProperty_Response& operator=(const LookupGlobalProperty_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline LookupGlobalProperty_Response& operator=(LookupGlobalProperty_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const LookupGlobalProperty_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LookupGlobalProperty_Response* internal_default_instance() {
    return reinterpret_cast<const LookupGlobalProperty_Response*>(
               &_LookupGlobalProperty_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    119;

  friend void swap(LookupGlobalProperty_Response& a, LookupGlobalProperty_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(LookupGlobalProperty_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LookupGlobalProperty_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LookupGlobalProperty_Response* New() const final {
    return CreateMaybeMessage<LookupGlobalProperty_Response>(nullptr);
  }

  LookupGlobalProperty_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LookupGlobalProperty_Response>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const LookupGlobalProperty_Response& from);
  void MergeFrom(const LookupGlobalProperty_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LookupGlobalProperty_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.LookupGlobalProperty.Response";
  }
  protected:
  explicit LookupGlobalProperty_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kFoundFieldNumber = 1,
  };
  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // bool found = 1;
  void clear_found();
  bool found() const;
  void set_found(bool value);
  private:
  bool _internal_found() const;
  void _internal_set_found(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.LookupGlobalProperty.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  bool found_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class LookupGlobalProperty PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.LookupGlobalProperty) */ {
 public:
  inline LookupGlobalProperty() : LookupGlobalProperty(nullptr) {};
  virtual ~LookupGlobalProperty();

  LookupGlobalProperty(const LookupGlobalProperty& from);
  LookupGlobalProperty(LookupGlobalProperty&& from) noexcept
    : LookupGlobalProperty() {
    *this = ::std::move(from);
  }

  inline LookupGlobalProperty& operator=(const LookupGlobalProperty& from) {
    CopyFrom(from);
    return *this;
  }
  inline LookupGlobalProperty& operator=(LookupGlobalProperty&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const LookupGlobalProperty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LookupGlobalProperty* internal_default_instance() {
    return reinterpret_cast<const LookupGlobalProperty*>(
               &_LookupGlobalProperty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    120;

  friend void swap(LookupGlobalProperty& a, LookupGlobalProperty& b) {
    a.Swap(&b);
  }
  inline void Swap(LookupGlobalProperty* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LookupGlobalProperty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LookupGlobalProperty* New() const final {
    return CreateMaybeMessage<LookupGlobalProperty>(nullptr);
  }

  LookupGlobalProperty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LookupGlobalProperty>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const LookupGlobalProperty& from);
  void MergeFrom(const LookupGlobalProperty& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LookupGlobalProperty* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.LookupGlobalProperty";
  }
  protected:
  explicit LookupGlobalProperty(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef LookupGlobalProperty_Request Request;
  typedef LookupGlobalProperty_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.LookupGlobalProperty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class LookupMetadata_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.LookupMetadata.Request) */ {
 public:
  inline LookupMetadata_Request() : LookupMetadata_Request(nullptr) {};
  virtual ~LookupMetadata_Request();

  LookupMetadata_Request(const LookupMetadata_Request& from);
  LookupMetadata_Request(LookupMetadata_Request&& from) noexcept
    : LookupMetadata_Request() {
    *this = ::std::move(from);
  }

  inline LookupMetadata_Request& operator=(const LookupMetadata_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline LookupMetadata_Request& operator=(LookupMetadata_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const LookupMetadata_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LookupMetadata_Request* internal_default_instance() {
    return reinterpret_cast<const LookupMetadata_Request*>(
               &_LookupMetadata_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    121;

  friend void swap(LookupMetadata_Request& a, LookupMetadata_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(LookupMetadata_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LookupMetadata_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LookupMetadata_Request* New() const final {
    return CreateMaybeMessage<LookupMetadata_Request>(nullptr);
  }

  LookupMetadata_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LookupMetadata_Request>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const LookupMetadata_Request& from);
  void MergeFrom(const LookupMetadata_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LookupMetadata_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.LookupMetadata.Request";
  }
  protected:
  explicit LookupMetadata_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kMetadataTypeFieldNumber = 2,
  };
  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 metadata_type = 2;
  void clear_metadata_type();
  ::PROTOBUF_NAMESPACE_ID::int32 metadata_type() const;
  void set_metadata_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_metadata_type() const;
  void _internal_set_metadata_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.LookupMetadata.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 metadata_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class LookupMetadata_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.LookupMetadata.Response) */ {
 public:
  inline LookupMetadata_Response() : LookupMetadata_Response(nullptr) {};
  virtual ~LookupMetadata_Response();

  LookupMetadata_Response(const LookupMetadata_Response& from);
  LookupMetadata_Response(LookupMetadata_Response&& from) noexcept
    : LookupMetadata_Response() {
    *this = ::std::move(from);
  }

  inline LookupMetadata_Response& operator=(const LookupMetadata_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline LookupMetadata_Response& operator=(LookupMetadata_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const LookupMetadata_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LookupMetadata_Response* internal_default_instance() {
    return reinterpret_cast<const LookupMetadata_Response*>(
               &_LookupMetadata_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    122;

  friend void swap(LookupMetadata_Response& a, LookupMetadata_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(LookupMetadata_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LookupMetadata_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LookupMetadata_Response* New() const final {
    return CreateMaybeMessage<LookupMetadata_Response>(nullptr);
  }

  LookupMetadata_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LookupMetadata_Response>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const LookupMetadata_Response& from);
  void MergeFrom(const LookupMetadata_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LookupMetadata_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.LookupMetadata.Response";
  }
  protected:
  explicit LookupMetadata_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kRevisionFieldNumber = 3,
    kFoundFieldNumber = 1,
  };
  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // int64 revision = 3;
  void clear_revision();
  ::PROTOBUF_NAMESPACE_ID::int64 revision() const;
  void set_revision(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_revision() const;
  void _internal_set_revision(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool found = 1;
  void clear_found();
  bool found() const;
  void set_found(bool value);
  private:
  bool _internal_found() const;
  void _internal_set_found(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.LookupMetadata.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::int64 revision_;
  bool found_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class LookupMetadata PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.LookupMetadata) */ {
 public:
  inline LookupMetadata() : LookupMetadata(nullptr) {};
  virtual ~LookupMetadata();

  LookupMetadata(const LookupMetadata& from);
  LookupMetadata(LookupMetadata&& from) noexcept
    : LookupMetadata() {
    *this = ::std::move(from);
  }

  inline LookupMetadata& operator=(const LookupMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline LookupMetadata& operator=(LookupMetadata&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const LookupMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LookupMetadata* internal_default_instance() {
    return reinterpret_cast<const LookupMetadata*>(
               &_LookupMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    123;

  friend void swap(LookupMetadata& a, LookupMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(LookupMetadata* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LookupMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LookupMetadata* New() const final {
    return CreateMaybeMessage<LookupMetadata>(nullptr);
  }

  LookupMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LookupMetadata>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const LookupMetadata& from);
  void MergeFrom(const LookupMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LookupMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.LookupMetadata";
  }
  protected:
  explicit LookupMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef LookupMetadata_Request Request;
  typedef LookupMetadata_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.LookupMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class LookupParent_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.LookupParent.Request) */ {
 public:
  inline LookupParent_Request() : LookupParent_Request(nullptr) {};
  virtual ~LookupParent_Request();

  LookupParent_Request(const LookupParent_Request& from);
  LookupParent_Request(LookupParent_Request&& from) noexcept
    : LookupParent_Request() {
    *this = ::std::move(from);
  }

  inline LookupParent_Request& operator=(const LookupParent_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline LookupParent_Request& operator=(LookupParent_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const LookupParent_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LookupParent_Request* internal_default_instance() {
    return reinterpret_cast<const LookupParent_Request*>(
               &_LookupParent_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    124;

  friend void swap(LookupParent_Request& a, LookupParent_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(LookupParent_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LookupParent_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LookupParent_Request* New() const final {
    return CreateMaybeMessage<LookupParent_Request>(nullptr);
  }

  LookupParent_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LookupParent_Request>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const LookupParent_Request& from);
  void MergeFrom(const LookupParent_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LookupParent_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.LookupParent.Request";
  }
  protected:
  explicit LookupParent_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.LookupParent.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class LookupParent_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.LookupParent.Response) */ {
 public:
  inline LookupParent_Response() : LookupParent_Response(nullptr) {};
  virtual ~LookupParent_Response();

  LookupParent_Response(const LookupParent_Response& from);
  LookupParent_Response(LookupParent_Response&& from) noexcept
    : LookupParent_Response() {
    *this = ::std::move(from);
  }

  inline LookupParent_Response& operator=(const LookupParent_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline LookupParent_Response& operator=(LookupParent_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const LookupParent_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LookupParent_Response* internal_default_instance() {
    return reinterpret_cast<const LookupParent_Response*>(
               &_LookupParent_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    125;

  friend void swap(LookupParent_Response& a, LookupParent_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(LookupParent_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LookupParent_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LookupParent_Response* New() const final {
    return CreateMaybeMessage<LookupParent_Response>(nullptr);
  }

  LookupParent_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LookupParent_Response>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const LookupParent_Response& from);
  void MergeFrom(const LookupParent_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LookupParent_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.LookupParent.Response";
  }
  protected:
  explicit LookupParent_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 2,
    kFoundFieldNumber = 1,
  };
  // int64 parent = 2;
  void clear_parent();
  ::PROTOBUF_NAMESPACE_ID::int64 parent() const;
  void set_parent(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_parent() const;
  void _internal_set_parent(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool found = 1;
  void clear_found();
  bool found() const;
  void set_found(bool value);
  private:
  bool _internal_found() const;
  void _internal_set_found(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.LookupParent.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 parent_;
  bool found_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class LookupParent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.LookupParent) */ {
 public:
  inline LookupParent() : LookupParent(nullptr) {};
  virtual ~LookupParent();

  LookupParent(const LookupParent& from);
  LookupParent(LookupParent&& from) noexcept
    : LookupParent() {
    *this = ::std::move(from);
  }

  inline LookupParent& operator=(const LookupParent& from) {
    CopyFrom(from);
    return *this;
  }
  inline LookupParent& operator=(LookupParent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const LookupParent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LookupParent* internal_default_instance() {
    return reinterpret_cast<const LookupParent*>(
               &_LookupParent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    126;

  friend void swap(LookupParent& a, LookupParent& b) {
    a.Swap(&b);
  }
  inline void Swap(LookupParent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LookupParent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LookupParent* New() const final {
    return CreateMaybeMessage<LookupParent>(nullptr);
  }

  LookupParent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LookupParent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const LookupParent& from);
  void MergeFrom(const LookupParent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LookupParent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.LookupParent";
  }
  protected:
  explicit LookupParent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef LookupParent_Request Request;
  typedef LookupParent_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.LookupParent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class LookupResource_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.LookupResource.Request) */ {
 public:
  inline LookupResource_Request() : LookupResource_Request(nullptr) {};
  virtual ~LookupResource_Request();

  LookupResource_Request(const LookupResource_Request& from);
  LookupResource_Request(LookupResource_Request&& from) noexcept
    : LookupResource_Request() {
    *this = ::std::move(from);
  }

  inline LookupResource_Request& operator=(const LookupResource_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline LookupResource_Request& operator=(LookupResource_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const LookupResource_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LookupResource_Request* internal_default_instance() {
    return reinterpret_cast<const LookupResource_Request*>(
               &_LookupResource_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    127;

  friend void swap(LookupResource_Request& a, LookupResource_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(LookupResource_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LookupResource_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LookupResource_Request* New() const final {
    return CreateMaybeMessage<LookupResource_Request>(nullptr);
  }

  LookupResource_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LookupResource_Request>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const LookupResource_Request& from);
  void MergeFrom(const LookupResource_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LookupResource_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.LookupResource.Request";
  }
  protected:
  explicit LookupResource_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicIdFieldNumber = 1,
  };
  // string public_id = 1;
  void clear_public_id();
  const std::string& public_id() const;
  void set_public_id(const std::string& value);
  void set_public_id(std::string&& value);
  void set_public_id(const char* value);
  void set_public_id(const char* value, size_t size);
  std::string* mutable_public_id();
  std::string* release_public_id();
  void set_allocated_public_id(std::string* public_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_public_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_public_id(
      std::string* public_id);
  private:
  const std::string& _internal_public_id() const;
  void _internal_set_public_id(const std::string& value);
  std::string* _internal_mutable_public_id();
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.LookupResource.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class LookupResource_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.LookupResource.Response) */ {
 public:
  inline LookupResource_Response() : LookupResource_Response(nullptr) {};
  virtual ~LookupResource_Response();

  LookupResource_Response(const LookupResource_Response& from);
  LookupResource_Response(LookupResource_Response&& from) noexcept
    : LookupResource_Response() {
    *this = ::std::move(from);
  }

  inline LookupResource_Response& operator=(const LookupResource_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline LookupResource_Response& operator=(LookupResource_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const LookupResource_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LookupResource_Response* internal_default_instance() {
    return reinterpret_cast<const LookupResource_Response*>(
               &_LookupResource_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    128;

  friend void swap(LookupResource_Response& a, LookupResource_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(LookupResource_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LookupResource_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LookupResource_Response* New() const final {
    return CreateMaybeMessage<LookupResource_Response>(nullptr);
  }

  LookupResource_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LookupResource_Response>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const LookupResource_Response& from);
  void MergeFrom(const LookupResource_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LookupResource_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.LookupResource.Response";
  }
  protected:
  explicit LookupResource_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInternalIdFieldNumber = 2,
    kFoundFieldNumber = 1,
    kTypeFieldNumber = 3,
  };
  // int64 internal_id = 2;
  void clear_internal_id();
  ::PROTOBUF_NAMESPACE_ID::int64 internal_id() const;
  void set_internal_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_internal_id() const;
  void _internal_set_internal_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool found = 1;
  void clear_found();
  bool found() const;
  void set_found(bool value);
  private:
  bool _internal_found() const;
  void _internal_set_found(bool value);
  public:

  // .Orthanc.DatabasePluginMessages.ResourceType type = 3;
  void clear_type();
  ::Orthanc::DatabasePluginMessages::ResourceType type() const;
  void set_type(::Orthanc::DatabasePluginMessages::ResourceType value);
  private:
  ::Orthanc::DatabasePluginMessages::ResourceType _internal_type() const;
  void _internal_set_type(::Orthanc::DatabasePluginMessages::ResourceType value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.LookupResource.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 internal_id_;
  bool found_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class LookupResource PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.LookupResource) */ {
 public:
  inline LookupResource() : LookupResource(nullptr) {};
  virtual ~LookupResource();

  LookupResource(const LookupResource& from);
  LookupResource(LookupResource&& from) noexcept
    : LookupResource() {
    *this = ::std::move(from);
  }

  inline LookupResource& operator=(const LookupResource& from) {
    CopyFrom(from);
    return *this;
  }
  inline LookupResource& operator=(LookupResource&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const LookupResource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LookupResource* internal_default_instance() {
    return reinterpret_cast<const LookupResource*>(
               &_LookupResource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    129;

  friend void swap(LookupResource& a, LookupResource& b) {
    a.Swap(&b);
  }
  inline void Swap(LookupResource* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LookupResource* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LookupResource* New() const final {
    return CreateMaybeMessage<LookupResource>(nullptr);
  }

  LookupResource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LookupResource>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const LookupResource& from);
  void MergeFrom(const LookupResource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LookupResource* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.LookupResource";
  }
  protected:
  explicit LookupResource(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef LookupResource_Request Request;
  typedef LookupResource_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.LookupResource)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class SelectPatientToRecycle_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.SelectPatientToRecycle.Request) */ {
 public:
  inline SelectPatientToRecycle_Request() : SelectPatientToRecycle_Request(nullptr) {};
  virtual ~SelectPatientToRecycle_Request();

  SelectPatientToRecycle_Request(const SelectPatientToRecycle_Request& from);
  SelectPatientToRecycle_Request(SelectPatientToRecycle_Request&& from) noexcept
    : SelectPatientToRecycle_Request() {
    *this = ::std::move(from);
  }

  inline SelectPatientToRecycle_Request& operator=(const SelectPatientToRecycle_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelectPatientToRecycle_Request& operator=(SelectPatientToRecycle_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const SelectPatientToRecycle_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SelectPatientToRecycle_Request* internal_default_instance() {
    return reinterpret_cast<const SelectPatientToRecycle_Request*>(
               &_SelectPatientToRecycle_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    130;

  friend void swap(SelectPatientToRecycle_Request& a, SelectPatientToRecycle_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(SelectPatientToRecycle_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SelectPatientToRecycle_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SelectPatientToRecycle_Request* New() const final {
    return CreateMaybeMessage<SelectPatientToRecycle_Request>(nullptr);
  }

  SelectPatientToRecycle_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SelectPatientToRecycle_Request>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SelectPatientToRecycle_Request& from);
  void MergeFrom(const SelectPatientToRecycle_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SelectPatientToRecycle_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.SelectPatientToRecycle.Request";
  }
  protected:
  explicit SelectPatientToRecycle_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.SelectPatientToRecycle.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class SelectPatientToRecycle_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.SelectPatientToRecycle.Response) */ {
 public:
  inline SelectPatientToRecycle_Response() : SelectPatientToRecycle_Response(nullptr) {};
  virtual ~SelectPatientToRecycle_Response();

  SelectPatientToRecycle_Response(const SelectPatientToRecycle_Response& from);
  SelectPatientToRecycle_Response(SelectPatientToRecycle_Response&& from) noexcept
    : SelectPatientToRecycle_Response() {
    *this = ::std::move(from);
  }

  inline SelectPatientToRecycle_Response& operator=(const SelectPatientToRecycle_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelectPatientToRecycle_Response& operator=(SelectPatientToRecycle_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const SelectPatientToRecycle_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SelectPatientToRecycle_Response* internal_default_instance() {
    return reinterpret_cast<const SelectPatientToRecycle_Response*>(
               &_SelectPatientToRecycle_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    131;

  friend void swap(SelectPatientToRecycle_Response& a, SelectPatientToRecycle_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(SelectPatientToRecycle_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SelectPatientToRecycle_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SelectPatientToRecycle_Response* New() const final {
    return CreateMaybeMessage<SelectPatientToRecycle_Response>(nullptr);
  }

  SelectPatientToRecycle_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SelectPatientToRecycle_Response>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SelectPatientToRecycle_Response& from);
  void MergeFrom(const SelectPatientToRecycle_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SelectPatientToRecycle_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.SelectPatientToRecycle.Response";
  }
  protected:
  explicit SelectPatientToRecycle_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPatientIdFieldNumber = 2,
    kFoundFieldNumber = 1,
  };
  // int64 patient_id = 2;
  void clear_patient_id();
  ::PROTOBUF_NAMESPACE_ID::int64 patient_id() const;
  void set_patient_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_patient_id() const;
  void _internal_set_patient_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool found = 1;
  void clear_found();
  bool found() const;
  void set_found(bool value);
  private:
  bool _internal_found() const;
  void _internal_set_found(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.SelectPatientToRecycle.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 patient_id_;
  bool found_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class SelectPatientToRecycle PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.SelectPatientToRecycle) */ {
 public:
  inline SelectPatientToRecycle() : SelectPatientToRecycle(nullptr) {};
  virtual ~SelectPatientToRecycle();

  SelectPatientToRecycle(const SelectPatientToRecycle& from);
  SelectPatientToRecycle(SelectPatientToRecycle&& from) noexcept
    : SelectPatientToRecycle() {
    *this = ::std::move(from);
  }

  inline SelectPatientToRecycle& operator=(const SelectPatientToRecycle& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelectPatientToRecycle& operator=(SelectPatientToRecycle&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const SelectPatientToRecycle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SelectPatientToRecycle* internal_default_instance() {
    return reinterpret_cast<const SelectPatientToRecycle*>(
               &_SelectPatientToRecycle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    132;

  friend void swap(SelectPatientToRecycle& a, SelectPatientToRecycle& b) {
    a.Swap(&b);
  }
  inline void Swap(SelectPatientToRecycle* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SelectPatientToRecycle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SelectPatientToRecycle* New() const final {
    return CreateMaybeMessage<SelectPatientToRecycle>(nullptr);
  }

  SelectPatientToRecycle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SelectPatientToRecycle>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SelectPatientToRecycle& from);
  void MergeFrom(const SelectPatientToRecycle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SelectPatientToRecycle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.SelectPatientToRecycle";
  }
  protected:
  explicit SelectPatientToRecycle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef SelectPatientToRecycle_Request Request;
  typedef SelectPatientToRecycle_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.SelectPatientToRecycle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class SelectPatientToRecycleWithAvoid_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.SelectPatientToRecycleWithAvoid.Request) */ {
 public:
  inline SelectPatientToRecycleWithAvoid_Request() : SelectPatientToRecycleWithAvoid_Request(nullptr) {};
  virtual ~SelectPatientToRecycleWithAvoid_Request();

  SelectPatientToRecycleWithAvoid_Request(const SelectPatientToRecycleWithAvoid_Request& from);
  SelectPatientToRecycleWithAvoid_Request(SelectPatientToRecycleWithAvoid_Request&& from) noexcept
    : SelectPatientToRecycleWithAvoid_Request() {
    *this = ::std::move(from);
  }

  inline SelectPatientToRecycleWithAvoid_Request& operator=(const SelectPatientToRecycleWithAvoid_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelectPatientToRecycleWithAvoid_Request& operator=(SelectPatientToRecycleWithAvoid_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const SelectPatientToRecycleWithAvoid_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SelectPatientToRecycleWithAvoid_Request* internal_default_instance() {
    return reinterpret_cast<const SelectPatientToRecycleWithAvoid_Request*>(
               &_SelectPatientToRecycleWithAvoid_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    133;

  friend void swap(SelectPatientToRecycleWithAvoid_Request& a, SelectPatientToRecycleWithAvoid_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(SelectPatientToRecycleWithAvoid_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SelectPatientToRecycleWithAvoid_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SelectPatientToRecycleWithAvoid_Request* New() const final {
    return CreateMaybeMessage<SelectPatientToRecycleWithAvoid_Request>(nullptr);
  }

  SelectPatientToRecycleWithAvoid_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SelectPatientToRecycleWithAvoid_Request>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SelectPatientToRecycleWithAvoid_Request& from);
  void MergeFrom(const SelectPatientToRecycleWithAvoid_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SelectPatientToRecycleWithAvoid_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.SelectPatientToRecycleWithAvoid.Request";
  }
  protected:
  explicit SelectPatientToRecycleWithAvoid_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPatientIdToAvoidFieldNumber = 1,
  };
  // int64 patient_id_to_avoid = 1;
  void clear_patient_id_to_avoid();
  ::PROTOBUF_NAMESPACE_ID::int64 patient_id_to_avoid() const;
  void set_patient_id_to_avoid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_patient_id_to_avoid() const;
  void _internal_set_patient_id_to_avoid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.SelectPatientToRecycleWithAvoid.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 patient_id_to_avoid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class SelectPatientToRecycleWithAvoid_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.SelectPatientToRecycleWithAvoid.Response) */ {
 public:
  inline SelectPatientToRecycleWithAvoid_Response() : SelectPatientToRecycleWithAvoid_Response(nullptr) {};
  virtual ~SelectPatientToRecycleWithAvoid_Response();

  SelectPatientToRecycleWithAvoid_Response(const SelectPatientToRecycleWithAvoid_Response& from);
  SelectPatientToRecycleWithAvoid_Response(SelectPatientToRecycleWithAvoid_Response&& from) noexcept
    : SelectPatientToRecycleWithAvoid_Response() {
    *this = ::std::move(from);
  }

  inline SelectPatientToRecycleWithAvoid_Response& operator=(const SelectPatientToRecycleWithAvoid_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelectPatientToRecycleWithAvoid_Response& operator=(SelectPatientToRecycleWithAvoid_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const SelectPatientToRecycleWithAvoid_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SelectPatientToRecycleWithAvoid_Response* internal_default_instance() {
    return reinterpret_cast<const SelectPatientToRecycleWithAvoid_Response*>(
               &_SelectPatientToRecycleWithAvoid_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    134;

  friend void swap(SelectPatientToRecycleWithAvoid_Response& a, SelectPatientToRecycleWithAvoid_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(SelectPatientToRecycleWithAvoid_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SelectPatientToRecycleWithAvoid_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SelectPatientToRecycleWithAvoid_Response* New() const final {
    return CreateMaybeMessage<SelectPatientToRecycleWithAvoid_Response>(nullptr);
  }

  SelectPatientToRecycleWithAvoid_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SelectPatientToRecycleWithAvoid_Response>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SelectPatientToRecycleWithAvoid_Response& from);
  void MergeFrom(const SelectPatientToRecycleWithAvoid_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SelectPatientToRecycleWithAvoid_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.SelectPatientToRecycleWithAvoid.Response";
  }
  protected:
  explicit SelectPatientToRecycleWithAvoid_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPatientIdFieldNumber = 2,
    kFoundFieldNumber = 1,
  };
  // int64 patient_id = 2;
  void clear_patient_id();
  ::PROTOBUF_NAMESPACE_ID::int64 patient_id() const;
  void set_patient_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_patient_id() const;
  void _internal_set_patient_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool found = 1;
  void clear_found();
  bool found() const;
  void set_found(bool value);
  private:
  bool _internal_found() const;
  void _internal_set_found(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.SelectPatientToRecycleWithAvoid.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 patient_id_;
  bool found_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class SelectPatientToRecycleWithAvoid PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.SelectPatientToRecycleWithAvoid) */ {
 public:
  inline SelectPatientToRecycleWithAvoid() : SelectPatientToRecycleWithAvoid(nullptr) {};
  virtual ~SelectPatientToRecycleWithAvoid();

  SelectPatientToRecycleWithAvoid(const SelectPatientToRecycleWithAvoid& from);
  SelectPatientToRecycleWithAvoid(SelectPatientToRecycleWithAvoid&& from) noexcept
    : SelectPatientToRecycleWithAvoid() {
    *this = ::std::move(from);
  }

  inline SelectPatientToRecycleWithAvoid& operator=(const SelectPatientToRecycleWithAvoid& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelectPatientToRecycleWithAvoid& operator=(SelectPatientToRecycleWithAvoid&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const SelectPatientToRecycleWithAvoid& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SelectPatientToRecycleWithAvoid* internal_default_instance() {
    return reinterpret_cast<const SelectPatientToRecycleWithAvoid*>(
               &_SelectPatientToRecycleWithAvoid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    135;

  friend void swap(SelectPatientToRecycleWithAvoid& a, SelectPatientToRecycleWithAvoid& b) {
    a.Swap(&b);
  }
  inline void Swap(SelectPatientToRecycleWithAvoid* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SelectPatientToRecycleWithAvoid* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SelectPatientToRecycleWithAvoid* New() const final {
    return CreateMaybeMessage<SelectPatientToRecycleWithAvoid>(nullptr);
  }

  SelectPatientToRecycleWithAvoid* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SelectPatientToRecycleWithAvoid>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SelectPatientToRecycleWithAvoid& from);
  void MergeFrom(const SelectPatientToRecycleWithAvoid& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SelectPatientToRecycleWithAvoid* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.SelectPatientToRecycleWithAvoid";
  }
  protected:
  explicit SelectPatientToRecycleWithAvoid(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef SelectPatientToRecycleWithAvoid_Request Request;
  typedef SelectPatientToRecycleWithAvoid_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.SelectPatientToRecycleWithAvoid)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class SetGlobalProperty_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.SetGlobalProperty.Request) */ {
 public:
  inline SetGlobalProperty_Request() : SetGlobalProperty_Request(nullptr) {};
  virtual ~SetGlobalProperty_Request();

  SetGlobalProperty_Request(const SetGlobalProperty_Request& from);
  SetGlobalProperty_Request(SetGlobalProperty_Request&& from) noexcept
    : SetGlobalProperty_Request() {
    *this = ::std::move(from);
  }

  inline SetGlobalProperty_Request& operator=(const SetGlobalProperty_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetGlobalProperty_Request& operator=(SetGlobalProperty_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const SetGlobalProperty_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetGlobalProperty_Request* internal_default_instance() {
    return reinterpret_cast<const SetGlobalProperty_Request*>(
               &_SetGlobalProperty_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    136;

  friend void swap(SetGlobalProperty_Request& a, SetGlobalProperty_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(SetGlobalProperty_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetGlobalProperty_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetGlobalProperty_Request* New() const final {
    return CreateMaybeMessage<SetGlobalProperty_Request>(nullptr);
  }

  SetGlobalProperty_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetGlobalProperty_Request>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SetGlobalProperty_Request& from);
  void MergeFrom(const SetGlobalProperty_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetGlobalProperty_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.SetGlobalProperty.Request";
  }
  protected:
  explicit SetGlobalProperty_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerIdFieldNumber = 1,
    kValueFieldNumber = 3,
    kPropertyFieldNumber = 2,
  };
  // string server_id = 1;
  void clear_server_id();
  const std::string& server_id() const;
  void set_server_id(const std::string& value);
  void set_server_id(std::string&& value);
  void set_server_id(const char* value);
  void set_server_id(const char* value, size_t size);
  std::string* mutable_server_id();
  std::string* release_server_id();
  void set_allocated_server_id(std::string* server_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_server_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_server_id(
      std::string* server_id);
  private:
  const std::string& _internal_server_id() const;
  void _internal_set_server_id(const std::string& value);
  std::string* _internal_mutable_server_id();
  public:

  // string value = 3;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // int32 property = 2;
  void clear_property();
  ::PROTOBUF_NAMESPACE_ID::int32 property() const;
  void set_property(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_property() const;
  void _internal_set_property(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.SetGlobalProperty.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::int32 property_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class SetGlobalProperty_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.SetGlobalProperty.Response) */ {
 public:
  inline SetGlobalProperty_Response() : SetGlobalProperty_Response(nullptr) {};
  virtual ~SetGlobalProperty_Response();

  SetGlobalProperty_Response(const SetGlobalProperty_Response& from);
  SetGlobalProperty_Response(SetGlobalProperty_Response&& from) noexcept
    : SetGlobalProperty_Response() {
    *this = ::std::move(from);
  }

  inline SetGlobalProperty_Response& operator=(const SetGlobalProperty_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetGlobalProperty_Response& operator=(SetGlobalProperty_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const SetGlobalProperty_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetGlobalProperty_Response* internal_default_instance() {
    return reinterpret_cast<const SetGlobalProperty_Response*>(
               &_SetGlobalProperty_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    137;

  friend void swap(SetGlobalProperty_Response& a, SetGlobalProperty_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(SetGlobalProperty_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetGlobalProperty_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetGlobalProperty_Response* New() const final {
    return CreateMaybeMessage<SetGlobalProperty_Response>(nullptr);
  }

  SetGlobalProperty_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetGlobalProperty_Response>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SetGlobalProperty_Response& from);
  void MergeFrom(const SetGlobalProperty_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetGlobalProperty_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.SetGlobalProperty.Response";
  }
  protected:
  explicit SetGlobalProperty_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.SetGlobalProperty.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class SetGlobalProperty PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.SetGlobalProperty) */ {
 public:
  inline SetGlobalProperty() : SetGlobalProperty(nullptr) {};
  virtual ~SetGlobalProperty();

  SetGlobalProperty(const SetGlobalProperty& from);
  SetGlobalProperty(SetGlobalProperty&& from) noexcept
    : SetGlobalProperty() {
    *this = ::std::move(from);
  }

  inline SetGlobalProperty& operator=(const SetGlobalProperty& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetGlobalProperty& operator=(SetGlobalProperty&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const SetGlobalProperty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetGlobalProperty* internal_default_instance() {
    return reinterpret_cast<const SetGlobalProperty*>(
               &_SetGlobalProperty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    138;

  friend void swap(SetGlobalProperty& a, SetGlobalProperty& b) {
    a.Swap(&b);
  }
  inline void Swap(SetGlobalProperty* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetGlobalProperty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetGlobalProperty* New() const final {
    return CreateMaybeMessage<SetGlobalProperty>(nullptr);
  }

  SetGlobalProperty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetGlobalProperty>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SetGlobalProperty& from);
  void MergeFrom(const SetGlobalProperty& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetGlobalProperty* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.SetGlobalProperty";
  }
  protected:
  explicit SetGlobalProperty(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef SetGlobalProperty_Request Request;
  typedef SetGlobalProperty_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.SetGlobalProperty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class IncrementGlobalProperty_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.IncrementGlobalProperty.Request) */ {
 public:
  inline IncrementGlobalProperty_Request() : IncrementGlobalProperty_Request(nullptr) {};
  virtual ~IncrementGlobalProperty_Request();

  IncrementGlobalProperty_Request(const IncrementGlobalProperty_Request& from);
  IncrementGlobalProperty_Request(IncrementGlobalProperty_Request&& from) noexcept
    : IncrementGlobalProperty_Request() {
    *this = ::std::move(from);
  }

  inline IncrementGlobalProperty_Request& operator=(const IncrementGlobalProperty_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline IncrementGlobalProperty_Request& operator=(IncrementGlobalProperty_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IncrementGlobalProperty_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IncrementGlobalProperty_Request* internal_default_instance() {
    return reinterpret_cast<const IncrementGlobalProperty_Request*>(
               &_IncrementGlobalProperty_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    139;

  friend void swap(IncrementGlobalProperty_Request& a, IncrementGlobalProperty_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(IncrementGlobalProperty_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IncrementGlobalProperty_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IncrementGlobalProperty_Request* New() const final {
    return CreateMaybeMessage<IncrementGlobalProperty_Request>(nullptr);
  }

  IncrementGlobalProperty_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IncrementGlobalProperty_Request>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IncrementGlobalProperty_Request& from);
  void MergeFrom(const IncrementGlobalProperty_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IncrementGlobalProperty_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.IncrementGlobalProperty.Request";
  }
  protected:
  explicit IncrementGlobalProperty_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerIdFieldNumber = 1,
    kIncrementFieldNumber = 3,
    kPropertyFieldNumber = 2,
  };
  // string server_id = 1;
  void clear_server_id();
  const std::string& server_id() const;
  void set_server_id(const std::string& value);
  void set_server_id(std::string&& value);
  void set_server_id(const char* value);
  void set_server_id(const char* value, size_t size);
  std::string* mutable_server_id();
  std::string* release_server_id();
  void set_allocated_server_id(std::string* server_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_server_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_server_id(
      std::string* server_id);
  private:
  const std::string& _internal_server_id() const;
  void _internal_set_server_id(const std::string& value);
  std::string* _internal_mutable_server_id();
  public:

  // int64 increment = 3;
  void clear_increment();
  ::PROTOBUF_NAMESPACE_ID::int64 increment() const;
  void set_increment(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_increment() const;
  void _internal_set_increment(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 property = 2;
  void clear_property();
  ::PROTOBUF_NAMESPACE_ID::int32 property() const;
  void set_property(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_property() const;
  void _internal_set_property(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.IncrementGlobalProperty.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 increment_;
  ::PROTOBUF_NAMESPACE_ID::int32 property_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class IncrementGlobalProperty_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.IncrementGlobalProperty.Response) */ {
 public:
  inline IncrementGlobalProperty_Response() : IncrementGlobalProperty_Response(nullptr) {};
  virtual ~IncrementGlobalProperty_Response();

  IncrementGlobalProperty_Response(const IncrementGlobalProperty_Response& from);
  IncrementGlobalProperty_Response(IncrementGlobalProperty_Response&& from) noexcept
    : IncrementGlobalProperty_Response() {
    *this = ::std::move(from);
  }

  inline IncrementGlobalProperty_Response& operator=(const IncrementGlobalProperty_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline IncrementGlobalProperty_Response& operator=(IncrementGlobalProperty_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IncrementGlobalProperty_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IncrementGlobalProperty_Response* internal_default_instance() {
    return reinterpret_cast<const IncrementGlobalProperty_Response*>(
               &_IncrementGlobalProperty_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    140;

  friend void swap(IncrementGlobalProperty_Response& a, IncrementGlobalProperty_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(IncrementGlobalProperty_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IncrementGlobalProperty_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IncrementGlobalProperty_Response* New() const final {
    return CreateMaybeMessage<IncrementGlobalProperty_Response>(nullptr);
  }

  IncrementGlobalProperty_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IncrementGlobalProperty_Response>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IncrementGlobalProperty_Response& from);
  void MergeFrom(const IncrementGlobalProperty_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IncrementGlobalProperty_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.IncrementGlobalProperty.Response";
  }
  protected:
  explicit IncrementGlobalProperty_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewValueFieldNumber = 1,
  };
  // int64 new_value = 1;
  void clear_new_value();
  ::PROTOBUF_NAMESPACE_ID::int64 new_value() const;
  void set_new_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_new_value() const;
  void _internal_set_new_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.IncrementGlobalProperty.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 new_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class IncrementGlobalProperty PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.IncrementGlobalProperty) */ {
 public:
  inline IncrementGlobalProperty() : IncrementGlobalProperty(nullptr) {};
  virtual ~IncrementGlobalProperty();

  IncrementGlobalProperty(const IncrementGlobalProperty& from);
  IncrementGlobalProperty(IncrementGlobalProperty&& from) noexcept
    : IncrementGlobalProperty() {
    *this = ::std::move(from);
  }

  inline IncrementGlobalProperty& operator=(const IncrementGlobalProperty& from) {
    CopyFrom(from);
    return *this;
  }
  inline IncrementGlobalProperty& operator=(IncrementGlobalProperty&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IncrementGlobalProperty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IncrementGlobalProperty* internal_default_instance() {
    return reinterpret_cast<const IncrementGlobalProperty*>(
               &_IncrementGlobalProperty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    141;

  friend void swap(IncrementGlobalProperty& a, IncrementGlobalProperty& b) {
    a.Swap(&b);
  }
  inline void Swap(IncrementGlobalProperty* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IncrementGlobalProperty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IncrementGlobalProperty* New() const final {
    return CreateMaybeMessage<IncrementGlobalProperty>(nullptr);
  }

  IncrementGlobalProperty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IncrementGlobalProperty>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IncrementGlobalProperty& from);
  void MergeFrom(const IncrementGlobalProperty& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IncrementGlobalProperty* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.IncrementGlobalProperty";
  }
  protected:
  explicit IncrementGlobalProperty(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef IncrementGlobalProperty_Request Request;
  typedef IncrementGlobalProperty_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.IncrementGlobalProperty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class UpdateAndGetStatistics_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.UpdateAndGetStatistics.Request) */ {
 public:
  inline UpdateAndGetStatistics_Request() : UpdateAndGetStatistics_Request(nullptr) {};
  virtual ~UpdateAndGetStatistics_Request();

  UpdateAndGetStatistics_Request(const UpdateAndGetStatistics_Request& from);
  UpdateAndGetStatistics_Request(UpdateAndGetStatistics_Request&& from) noexcept
    : UpdateAndGetStatistics_Request() {
    *this = ::std::move(from);
  }

  inline UpdateAndGetStatistics_Request& operator=(const UpdateAndGetStatistics_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateAndGetStatistics_Request& operator=(UpdateAndGetStatistics_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const UpdateAndGetStatistics_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateAndGetStatistics_Request* internal_default_instance() {
    return reinterpret_cast<const UpdateAndGetStatistics_Request*>(
               &_UpdateAndGetStatistics_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    142;

  friend void swap(UpdateAndGetStatistics_Request& a, UpdateAndGetStatistics_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateAndGetStatistics_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateAndGetStatistics_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateAndGetStatistics_Request* New() const final {
    return CreateMaybeMessage<UpdateAndGetStatistics_Request>(nullptr);
  }

  UpdateAndGetStatistics_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateAndGetStatistics_Request>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UpdateAndGetStatistics_Request& from);
  void MergeFrom(const UpdateAndGetStatistics_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UpdateAndGetStatistics_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.UpdateAndGetStatistics.Request";
  }
  protected:
  explicit UpdateAndGetStatistics_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.UpdateAndGetStatistics.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class UpdateAndGetStatistics_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.UpdateAndGetStatistics.Response) */ {
 public:
  inline UpdateAndGetStatistics_Response() : UpdateAndGetStatistics_Response(nullptr) {};
  virtual ~UpdateAndGetStatistics_Response();

  UpdateAndGetStatistics_Response(const UpdateAndGetStatistics_Response& from);
  UpdateAndGetStatistics_Response(UpdateAndGetStatistics_Response&& from) noexcept
    : UpdateAndGetStatistics_Response() {
    *this = ::std::move(from);
  }

  inline UpdateAndGetStatistics_Response& operator=(const UpdateAndGetStatistics_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateAndGetStatistics_Response& operator=(UpdateAndGetStatistics_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const UpdateAndGetStatistics_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateAndGetStatistics_Response* internal_default_instance() {
    return reinterpret_cast<const UpdateAndGetStatistics_Response*>(
               &_UpdateAndGetStatistics_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    143;

  friend void swap(UpdateAndGetStatistics_Response& a, UpdateAndGetStatistics_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateAndGetStatistics_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateAndGetStatistics_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateAndGetStatistics_Response* New() const final {
    return CreateMaybeMessage<UpdateAndGetStatistics_Response>(nullptr);
  }

  UpdateAndGetStatistics_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateAndGetStatistics_Response>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UpdateAndGetStatistics_Response& from);
  void MergeFrom(const UpdateAndGetStatistics_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UpdateAndGetStatistics_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.UpdateAndGetStatistics.Response";
  }
  protected:
  explicit UpdateAndGetStatistics_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPatientsCountFieldNumber = 1,
    kStudiesCountFieldNumber = 2,
    kSeriesCountFieldNumber = 3,
    kInstancesCountFieldNumber = 4,
    kTotalCompressedSizeFieldNumber = 5,
    kTotalUncompressedSizeFieldNumber = 6,
  };
  // int64 patients_count = 1;
  void clear_patients_count();
  ::PROTOBUF_NAMESPACE_ID::int64 patients_count() const;
  void set_patients_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_patients_count() const;
  void _internal_set_patients_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 studies_count = 2;
  void clear_studies_count();
  ::PROTOBUF_NAMESPACE_ID::int64 studies_count() const;
  void set_studies_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_studies_count() const;
  void _internal_set_studies_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 series_count = 3;
  void clear_series_count();
  ::PROTOBUF_NAMESPACE_ID::int64 series_count() const;
  void set_series_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_series_count() const;
  void _internal_set_series_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 instances_count = 4;
  void clear_instances_count();
  ::PROTOBUF_NAMESPACE_ID::int64 instances_count() const;
  void set_instances_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_instances_count() const;
  void _internal_set_instances_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 total_compressed_size = 5;
  void clear_total_compressed_size();
  ::PROTOBUF_NAMESPACE_ID::int64 total_compressed_size() const;
  void set_total_compressed_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_total_compressed_size() const;
  void _internal_set_total_compressed_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 total_uncompressed_size = 6;
  void clear_total_uncompressed_size();
  ::PROTOBUF_NAMESPACE_ID::int64 total_uncompressed_size() const;
  void set_total_uncompressed_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_total_uncompressed_size() const;
  void _internal_set_total_uncompressed_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.UpdateAndGetStatistics.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 patients_count_;
  ::PROTOBUF_NAMESPACE_ID::int64 studies_count_;
  ::PROTOBUF_NAMESPACE_ID::int64 series_count_;
  ::PROTOBUF_NAMESPACE_ID::int64 instances_count_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_compressed_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_uncompressed_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class UpdateAndGetStatistics PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.UpdateAndGetStatistics) */ {
 public:
  inline UpdateAndGetStatistics() : UpdateAndGetStatistics(nullptr) {};
  virtual ~UpdateAndGetStatistics();

  UpdateAndGetStatistics(const UpdateAndGetStatistics& from);
  UpdateAndGetStatistics(UpdateAndGetStatistics&& from) noexcept
    : UpdateAndGetStatistics() {
    *this = ::std::move(from);
  }

  inline UpdateAndGetStatistics& operator=(const UpdateAndGetStatistics& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateAndGetStatistics& operator=(UpdateAndGetStatistics&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const UpdateAndGetStatistics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateAndGetStatistics* internal_default_instance() {
    return reinterpret_cast<const UpdateAndGetStatistics*>(
               &_UpdateAndGetStatistics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    144;

  friend void swap(UpdateAndGetStatistics& a, UpdateAndGetStatistics& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateAndGetStatistics* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateAndGetStatistics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateAndGetStatistics* New() const final {
    return CreateMaybeMessage<UpdateAndGetStatistics>(nullptr);
  }

  UpdateAndGetStatistics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateAndGetStatistics>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UpdateAndGetStatistics& from);
  void MergeFrom(const UpdateAndGetStatistics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UpdateAndGetStatistics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.UpdateAndGetStatistics";
  }
  protected:
  explicit UpdateAndGetStatistics(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef UpdateAndGetStatistics_Request Request;
  typedef UpdateAndGetStatistics_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.UpdateAndGetStatistics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class ClearMainDicomTags_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.ClearMainDicomTags.Request) */ {
 public:
  inline ClearMainDicomTags_Request() : ClearMainDicomTags_Request(nullptr) {};
  virtual ~ClearMainDicomTags_Request();

  ClearMainDicomTags_Request(const ClearMainDicomTags_Request& from);
  ClearMainDicomTags_Request(ClearMainDicomTags_Request&& from) noexcept
    : ClearMainDicomTags_Request() {
    *this = ::std::move(from);
  }

  inline ClearMainDicomTags_Request& operator=(const ClearMainDicomTags_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClearMainDicomTags_Request& operator=(ClearMainDicomTags_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ClearMainDicomTags_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClearMainDicomTags_Request* internal_default_instance() {
    return reinterpret_cast<const ClearMainDicomTags_Request*>(
               &_ClearMainDicomTags_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    145;

  friend void swap(ClearMainDicomTags_Request& a, ClearMainDicomTags_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(ClearMainDicomTags_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClearMainDicomTags_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClearMainDicomTags_Request* New() const final {
    return CreateMaybeMessage<ClearMainDicomTags_Request>(nullptr);
  }

  ClearMainDicomTags_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClearMainDicomTags_Request>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ClearMainDicomTags_Request& from);
  void MergeFrom(const ClearMainDicomTags_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClearMainDicomTags_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.ClearMainDicomTags.Request";
  }
  protected:
  explicit ClearMainDicomTags_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.ClearMainDicomTags.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class ClearMainDicomTags_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.ClearMainDicomTags.Response) */ {
 public:
  inline ClearMainDicomTags_Response() : ClearMainDicomTags_Response(nullptr) {};
  virtual ~ClearMainDicomTags_Response();

  ClearMainDicomTags_Response(const ClearMainDicomTags_Response& from);
  ClearMainDicomTags_Response(ClearMainDicomTags_Response&& from) noexcept
    : ClearMainDicomTags_Response() {
    *this = ::std::move(from);
  }

  inline ClearMainDicomTags_Response& operator=(const ClearMainDicomTags_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClearMainDicomTags_Response& operator=(ClearMainDicomTags_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ClearMainDicomTags_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClearMainDicomTags_Response* internal_default_instance() {
    return reinterpret_cast<const ClearMainDicomTags_Response*>(
               &_ClearMainDicomTags_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    146;

  friend void swap(ClearMainDicomTags_Response& a, ClearMainDicomTags_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(ClearMainDicomTags_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClearMainDicomTags_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClearMainDicomTags_Response* New() const final {
    return CreateMaybeMessage<ClearMainDicomTags_Response>(nullptr);
  }

  ClearMainDicomTags_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClearMainDicomTags_Response>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ClearMainDicomTags_Response& from);
  void MergeFrom(const ClearMainDicomTags_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClearMainDicomTags_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.ClearMainDicomTags.Response";
  }
  protected:
  explicit ClearMainDicomTags_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.ClearMainDicomTags.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class ClearMainDicomTags PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.ClearMainDicomTags) */ {
 public:
  inline ClearMainDicomTags() : ClearMainDicomTags(nullptr) {};
  virtual ~ClearMainDicomTags();

  ClearMainDicomTags(const ClearMainDicomTags& from);
  ClearMainDicomTags(ClearMainDicomTags&& from) noexcept
    : ClearMainDicomTags() {
    *this = ::std::move(from);
  }

  inline ClearMainDicomTags& operator=(const ClearMainDicomTags& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClearMainDicomTags& operator=(ClearMainDicomTags&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ClearMainDicomTags& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClearMainDicomTags* internal_default_instance() {
    return reinterpret_cast<const ClearMainDicomTags*>(
               &_ClearMainDicomTags_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    147;

  friend void swap(ClearMainDicomTags& a, ClearMainDicomTags& b) {
    a.Swap(&b);
  }
  inline void Swap(ClearMainDicomTags* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClearMainDicomTags* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClearMainDicomTags* New() const final {
    return CreateMaybeMessage<ClearMainDicomTags>(nullptr);
  }

  ClearMainDicomTags* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClearMainDicomTags>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ClearMainDicomTags& from);
  void MergeFrom(const ClearMainDicomTags& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClearMainDicomTags* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.ClearMainDicomTags";
  }
  protected:
  explicit ClearMainDicomTags(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ClearMainDicomTags_Request Request;
  typedef ClearMainDicomTags_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.ClearMainDicomTags)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class SetMetadata_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.SetMetadata.Request) */ {
 public:
  inline SetMetadata_Request() : SetMetadata_Request(nullptr) {};
  virtual ~SetMetadata_Request();

  SetMetadata_Request(const SetMetadata_Request& from);
  SetMetadata_Request(SetMetadata_Request&& from) noexcept
    : SetMetadata_Request() {
    *this = ::std::move(from);
  }

  inline SetMetadata_Request& operator=(const SetMetadata_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetMetadata_Request& operator=(SetMetadata_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const SetMetadata_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetMetadata_Request* internal_default_instance() {
    return reinterpret_cast<const SetMetadata_Request*>(
               &_SetMetadata_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    148;

  friend void swap(SetMetadata_Request& a, SetMetadata_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(SetMetadata_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetMetadata_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetMetadata_Request* New() const final {
    return CreateMaybeMessage<SetMetadata_Request>(nullptr);
  }

  SetMetadata_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetMetadata_Request>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SetMetadata_Request& from);
  void MergeFrom(const SetMetadata_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetMetadata_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.SetMetadata.Request";
  }
  protected:
  explicit SetMetadata_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 3,
    kIdFieldNumber = 1,
    kRevisionFieldNumber = 4,
    kMetadataTypeFieldNumber = 2,
  };
  // string value = 3;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 revision = 4;
  void clear_revision();
  ::PROTOBUF_NAMESPACE_ID::int64 revision() const;
  void set_revision(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_revision() const;
  void _internal_set_revision(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 metadata_type = 2;
  void clear_metadata_type();
  ::PROTOBUF_NAMESPACE_ID::int32 metadata_type() const;
  void set_metadata_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_metadata_type() const;
  void _internal_set_metadata_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.SetMetadata.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 revision_;
  ::PROTOBUF_NAMESPACE_ID::int32 metadata_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class SetMetadata_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.SetMetadata.Response) */ {
 public:
  inline SetMetadata_Response() : SetMetadata_Response(nullptr) {};
  virtual ~SetMetadata_Response();

  SetMetadata_Response(const SetMetadata_Response& from);
  SetMetadata_Response(SetMetadata_Response&& from) noexcept
    : SetMetadata_Response() {
    *this = ::std::move(from);
  }

  inline SetMetadata_Response& operator=(const SetMetadata_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetMetadata_Response& operator=(SetMetadata_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const SetMetadata_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetMetadata_Response* internal_default_instance() {
    return reinterpret_cast<const SetMetadata_Response*>(
               &_SetMetadata_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    149;

  friend void swap(SetMetadata_Response& a, SetMetadata_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(SetMetadata_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetMetadata_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetMetadata_Response* New() const final {
    return CreateMaybeMessage<SetMetadata_Response>(nullptr);
  }

  SetMetadata_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetMetadata_Response>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SetMetadata_Response& from);
  void MergeFrom(const SetMetadata_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetMetadata_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.SetMetadata.Response";
  }
  protected:
  explicit SetMetadata_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.SetMetadata.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class SetMetadata PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.SetMetadata) */ {
 public:
  inline SetMetadata() : SetMetadata(nullptr) {};
  virtual ~SetMetadata();

  SetMetadata(const SetMetadata& from);
  SetMetadata(SetMetadata&& from) noexcept
    : SetMetadata() {
    *this = ::std::move(from);
  }

  inline SetMetadata& operator=(const SetMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetMetadata& operator=(SetMetadata&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const SetMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetMetadata* internal_default_instance() {
    return reinterpret_cast<const SetMetadata*>(
               &_SetMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    150;

  friend void swap(SetMetadata& a, SetMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(SetMetadata* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetMetadata* New() const final {
    return CreateMaybeMessage<SetMetadata>(nullptr);
  }

  SetMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetMetadata>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SetMetadata& from);
  void MergeFrom(const SetMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.SetMetadata";
  }
  protected:
  explicit SetMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef SetMetadata_Request Request;
  typedef SetMetadata_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.SetMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class SetProtectedPatient_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.SetProtectedPatient.Request) */ {
 public:
  inline SetProtectedPatient_Request() : SetProtectedPatient_Request(nullptr) {};
  virtual ~SetProtectedPatient_Request();

  SetProtectedPatient_Request(const SetProtectedPatient_Request& from);
  SetProtectedPatient_Request(SetProtectedPatient_Request&& from) noexcept
    : SetProtectedPatient_Request() {
    *this = ::std::move(from);
  }

  inline SetProtectedPatient_Request& operator=(const SetProtectedPatient_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetProtectedPatient_Request& operator=(SetProtectedPatient_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const SetProtectedPatient_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetProtectedPatient_Request* internal_default_instance() {
    return reinterpret_cast<const SetProtectedPatient_Request*>(
               &_SetProtectedPatient_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    151;

  friend void swap(SetProtectedPatient_Request& a, SetProtectedPatient_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(SetProtectedPatient_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetProtectedPatient_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetProtectedPatient_Request* New() const final {
    return CreateMaybeMessage<SetProtectedPatient_Request>(nullptr);
  }

  SetProtectedPatient_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetProtectedPatient_Request>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SetProtectedPatient_Request& from);
  void MergeFrom(const SetProtectedPatient_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetProtectedPatient_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.SetProtectedPatient.Request";
  }
  protected:
  explicit SetProtectedPatient_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPatientIdFieldNumber = 1,
    kProtectedPatientFieldNumber = 2,
  };
  // int64 patient_id = 1;
  void clear_patient_id();
  ::PROTOBUF_NAMESPACE_ID::int64 patient_id() const;
  void set_patient_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_patient_id() const;
  void _internal_set_patient_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool protected_patient = 2;
  void clear_protected_patient();
  bool protected_patient() const;
  void set_protected_patient(bool value);
  private:
  bool _internal_protected_patient() const;
  void _internal_set_protected_patient(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.SetProtectedPatient.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 patient_id_;
  bool protected_patient_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class SetProtectedPatient_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.SetProtectedPatient.Response) */ {
 public:
  inline SetProtectedPatient_Response() : SetProtectedPatient_Response(nullptr) {};
  virtual ~SetProtectedPatient_Response();

  SetProtectedPatient_Response(const SetProtectedPatient_Response& from);
  SetProtectedPatient_Response(SetProtectedPatient_Response&& from) noexcept
    : SetProtectedPatient_Response() {
    *this = ::std::move(from);
  }

  inline SetProtectedPatient_Response& operator=(const SetProtectedPatient_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetProtectedPatient_Response& operator=(SetProtectedPatient_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const SetProtectedPatient_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetProtectedPatient_Response* internal_default_instance() {
    return reinterpret_cast<const SetProtectedPatient_Response*>(
               &_SetProtectedPatient_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    152;

  friend void swap(SetProtectedPatient_Response& a, SetProtectedPatient_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(SetProtectedPatient_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetProtectedPatient_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetProtectedPatient_Response* New() const final {
    return CreateMaybeMessage<SetProtectedPatient_Response>(nullptr);
  }

  SetProtectedPatient_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetProtectedPatient_Response>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SetProtectedPatient_Response& from);
  void MergeFrom(const SetProtectedPatient_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetProtectedPatient_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.SetProtectedPatient.Response";
  }
  protected:
  explicit SetProtectedPatient_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.SetProtectedPatient.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class SetProtectedPatient PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.SetProtectedPatient) */ {
 public:
  inline SetProtectedPatient() : SetProtectedPatient(nullptr) {};
  virtual ~SetProtectedPatient();

  SetProtectedPatient(const SetProtectedPatient& from);
  SetProtectedPatient(SetProtectedPatient&& from) noexcept
    : SetProtectedPatient() {
    *this = ::std::move(from);
  }

  inline SetProtectedPatient& operator=(const SetProtectedPatient& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetProtectedPatient& operator=(SetProtectedPatient&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const SetProtectedPatient& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetProtectedPatient* internal_default_instance() {
    return reinterpret_cast<const SetProtectedPatient*>(
               &_SetProtectedPatient_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    153;

  friend void swap(SetProtectedPatient& a, SetProtectedPatient& b) {
    a.Swap(&b);
  }
  inline void Swap(SetProtectedPatient* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetProtectedPatient* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetProtectedPatient* New() const final {
    return CreateMaybeMessage<SetProtectedPatient>(nullptr);
  }

  SetProtectedPatient* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetProtectedPatient>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SetProtectedPatient& from);
  void MergeFrom(const SetProtectedPatient& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetProtectedPatient* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.SetProtectedPatient";
  }
  protected:
  explicit SetProtectedPatient(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef SetProtectedPatient_Request Request;
  typedef SetProtectedPatient_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.SetProtectedPatient)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class IsDiskSizeAbove_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.IsDiskSizeAbove.Request) */ {
 public:
  inline IsDiskSizeAbove_Request() : IsDiskSizeAbove_Request(nullptr) {};
  virtual ~IsDiskSizeAbove_Request();

  IsDiskSizeAbove_Request(const IsDiskSizeAbove_Request& from);
  IsDiskSizeAbove_Request(IsDiskSizeAbove_Request&& from) noexcept
    : IsDiskSizeAbove_Request() {
    *this = ::std::move(from);
  }

  inline IsDiskSizeAbove_Request& operator=(const IsDiskSizeAbove_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline IsDiskSizeAbove_Request& operator=(IsDiskSizeAbove_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IsDiskSizeAbove_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IsDiskSizeAbove_Request* internal_default_instance() {
    return reinterpret_cast<const IsDiskSizeAbove_Request*>(
               &_IsDiskSizeAbove_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    154;

  friend void swap(IsDiskSizeAbove_Request& a, IsDiskSizeAbove_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(IsDiskSizeAbove_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IsDiskSizeAbove_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IsDiskSizeAbove_Request* New() const final {
    return CreateMaybeMessage<IsDiskSizeAbove_Request>(nullptr);
  }

  IsDiskSizeAbove_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IsDiskSizeAbove_Request>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IsDiskSizeAbove_Request& from);
  void MergeFrom(const IsDiskSizeAbove_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IsDiskSizeAbove_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.IsDiskSizeAbove.Request";
  }
  protected:
  explicit IsDiskSizeAbove_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kThresholdFieldNumber = 1,
  };
  // uint64 threshold = 1;
  void clear_threshold();
  ::PROTOBUF_NAMESPACE_ID::uint64 threshold() const;
  void set_threshold(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_threshold() const;
  void _internal_set_threshold(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.IsDiskSizeAbove.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 threshold_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class IsDiskSizeAbove_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.IsDiskSizeAbove.Response) */ {
 public:
  inline IsDiskSizeAbove_Response() : IsDiskSizeAbove_Response(nullptr) {};
  virtual ~IsDiskSizeAbove_Response();

  IsDiskSizeAbove_Response(const IsDiskSizeAbove_Response& from);
  IsDiskSizeAbove_Response(IsDiskSizeAbove_Response&& from) noexcept
    : IsDiskSizeAbove_Response() {
    *this = ::std::move(from);
  }

  inline IsDiskSizeAbove_Response& operator=(const IsDiskSizeAbove_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline IsDiskSizeAbove_Response& operator=(IsDiskSizeAbove_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IsDiskSizeAbove_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IsDiskSizeAbove_Response* internal_default_instance() {
    return reinterpret_cast<const IsDiskSizeAbove_Response*>(
               &_IsDiskSizeAbove_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    155;

  friend void swap(IsDiskSizeAbove_Response& a, IsDiskSizeAbove_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(IsDiskSizeAbove_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IsDiskSizeAbove_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IsDiskSizeAbove_Response* New() const final {
    return CreateMaybeMessage<IsDiskSizeAbove_Response>(nullptr);
  }

  IsDiskSizeAbove_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IsDiskSizeAbove_Response>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IsDiskSizeAbove_Response& from);
  void MergeFrom(const IsDiskSizeAbove_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IsDiskSizeAbove_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.IsDiskSizeAbove.Response";
  }
  protected:
  explicit IsDiskSizeAbove_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.IsDiskSizeAbove.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class IsDiskSizeAbove PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.IsDiskSizeAbove) */ {
 public:
  inline IsDiskSizeAbove() : IsDiskSizeAbove(nullptr) {};
  virtual ~IsDiskSizeAbove();

  IsDiskSizeAbove(const IsDiskSizeAbove& from);
  IsDiskSizeAbove(IsDiskSizeAbove&& from) noexcept
    : IsDiskSizeAbove() {
    *this = ::std::move(from);
  }

  inline IsDiskSizeAbove& operator=(const IsDiskSizeAbove& from) {
    CopyFrom(from);
    return *this;
  }
  inline IsDiskSizeAbove& operator=(IsDiskSizeAbove&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IsDiskSizeAbove& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IsDiskSizeAbove* internal_default_instance() {
    return reinterpret_cast<const IsDiskSizeAbove*>(
               &_IsDiskSizeAbove_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    156;

  friend void swap(IsDiskSizeAbove& a, IsDiskSizeAbove& b) {
    a.Swap(&b);
  }
  inline void Swap(IsDiskSizeAbove* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IsDiskSizeAbove* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IsDiskSizeAbove* New() const final {
    return CreateMaybeMessage<IsDiskSizeAbove>(nullptr);
  }

  IsDiskSizeAbove* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IsDiskSizeAbove>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IsDiskSizeAbove& from);
  void MergeFrom(const IsDiskSizeAbove& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IsDiskSizeAbove* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.IsDiskSizeAbove";
  }
  protected:
  explicit IsDiskSizeAbove(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef IsDiskSizeAbove_Request Request;
  typedef IsDiskSizeAbove_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.IsDiskSizeAbove)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class LookupResources_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.LookupResources.Request) */ {
 public:
  inline LookupResources_Request() : LookupResources_Request(nullptr) {};
  virtual ~LookupResources_Request();

  LookupResources_Request(const LookupResources_Request& from);
  LookupResources_Request(LookupResources_Request&& from) noexcept
    : LookupResources_Request() {
    *this = ::std::move(from);
  }

  inline LookupResources_Request& operator=(const LookupResources_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline LookupResources_Request& operator=(LookupResources_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const LookupResources_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LookupResources_Request* internal_default_instance() {
    return reinterpret_cast<const LookupResources_Request*>(
               &_LookupResources_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    157;

  friend void swap(LookupResources_Request& a, LookupResources_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(LookupResources_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LookupResources_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LookupResources_Request* New() const final {
    return CreateMaybeMessage<LookupResources_Request>(nullptr);
  }

  LookupResources_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LookupResources_Request>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const LookupResources_Request& from);
  void MergeFrom(const LookupResources_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LookupResources_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.LookupResources.Request";
  }
  protected:
  explicit LookupResources_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLookupFieldNumber = 1,
    kLabelsFieldNumber = 5,
    kQueryLevelFieldNumber = 2,
    kLimitFieldNumber = 3,
    kRetrieveInstancesIdsFieldNumber = 4,
    kLabelsConstraintFieldNumber = 6,
  };
  // repeated .Orthanc.DatabasePluginMessages.DatabaseConstraint lookup = 1;
  int lookup_size() const;
  private:
  int _internal_lookup_size() const;
  public:
  void clear_lookup();
  ::Orthanc::DatabasePluginMessages::DatabaseConstraint* mutable_lookup(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Orthanc::DatabasePluginMessages::DatabaseConstraint >*
      mutable_lookup();
  private:
  const ::Orthanc::DatabasePluginMessages::DatabaseConstraint& _internal_lookup(int index) const;
  ::Orthanc::DatabasePluginMessages::DatabaseConstraint* _internal_add_lookup();
  public:
  const ::Orthanc::DatabasePluginMessages::DatabaseConstraint& lookup(int index) const;
  ::Orthanc::DatabasePluginMessages::DatabaseConstraint* add_lookup();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Orthanc::DatabasePluginMessages::DatabaseConstraint >&
      lookup() const;

  // repeated string labels = 5;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  const std::string& labels(int index) const;
  std::string* mutable_labels(int index);
  void set_labels(int index, const std::string& value);
  void set_labels(int index, std::string&& value);
  void set_labels(int index, const char* value);
  void set_labels(int index, const char* value, size_t size);
  std::string* add_labels();
  void add_labels(const std::string& value);
  void add_labels(std::string&& value);
  void add_labels(const char* value);
  void add_labels(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& labels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_labels();
  private:
  const std::string& _internal_labels(int index) const;
  std::string* _internal_add_labels();
  public:

  // .Orthanc.DatabasePluginMessages.ResourceType query_level = 2;
  void clear_query_level();
  ::Orthanc::DatabasePluginMessages::ResourceType query_level() const;
  void set_query_level(::Orthanc::DatabasePluginMessages::ResourceType value);
  private:
  ::Orthanc::DatabasePluginMessages::ResourceType _internal_query_level() const;
  void _internal_set_query_level(::Orthanc::DatabasePluginMessages::ResourceType value);
  public:

  // uint32 limit = 3;
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::uint32 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool retrieve_instances_ids = 4;
  void clear_retrieve_instances_ids();
  bool retrieve_instances_ids() const;
  void set_retrieve_instances_ids(bool value);
  private:
  bool _internal_retrieve_instances_ids() const;
  void _internal_set_retrieve_instances_ids(bool value);
  public:

  // .Orthanc.DatabasePluginMessages.LabelsConstraintType labels_constraint = 6;
  void clear_labels_constraint();
  ::Orthanc::DatabasePluginMessages::LabelsConstraintType labels_constraint() const;
  void set_labels_constraint(::Orthanc::DatabasePluginMessages::LabelsConstraintType value);
  private:
  ::Orthanc::DatabasePluginMessages::LabelsConstraintType _internal_labels_constraint() const;
  void _internal_set_labels_constraint(::Orthanc::DatabasePluginMessages::LabelsConstraintType value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.LookupResources.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Orthanc::DatabasePluginMessages::DatabaseConstraint > lookup_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> labels_;
  int query_level_;
  ::PROTOBUF_NAMESPACE_ID::uint32 limit_;
  bool retrieve_instances_ids_;
  int labels_constraint_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class LookupResources_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.LookupResources.Response) */ {
 public:
  inline LookupResources_Response() : LookupResources_Response(nullptr) {};
  virtual ~LookupResources_Response();

  LookupResources_Response(const LookupResources_Response& from);
  LookupResources_Response(LookupResources_Response&& from) noexcept
    : LookupResources_Response() {
    *this = ::std::move(from);
  }

  inline LookupResources_Response& operator=(const LookupResources_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline LookupResources_Response& operator=(LookupResources_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const LookupResources_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LookupResources_Response* internal_default_instance() {
    return reinterpret_cast<const LookupResources_Response*>(
               &_LookupResources_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    158;

  friend void swap(LookupResources_Response& a, LookupResources_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(LookupResources_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LookupResources_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LookupResources_Response* New() const final {
    return CreateMaybeMessage<LookupResources_Response>(nullptr);
  }

  LookupResources_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LookupResources_Response>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const LookupResources_Response& from);
  void MergeFrom(const LookupResources_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LookupResources_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.LookupResources.Response";
  }
  protected:
  explicit LookupResources_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourcesIdsFieldNumber = 1,
    kInstancesIdsFieldNumber = 2,
  };
  // repeated string resources_ids = 1;
  int resources_ids_size() const;
  private:
  int _internal_resources_ids_size() const;
  public:
  void clear_resources_ids();
  const std::string& resources_ids(int index) const;
  std::string* mutable_resources_ids(int index);
  void set_resources_ids(int index, const std::string& value);
  void set_resources_ids(int index, std::string&& value);
  void set_resources_ids(int index, const char* value);
  void set_resources_ids(int index, const char* value, size_t size);
  std::string* add_resources_ids();
  void add_resources_ids(const std::string& value);
  void add_resources_ids(std::string&& value);
  void add_resources_ids(const char* value);
  void add_resources_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& resources_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_resources_ids();
  private:
  const std::string& _internal_resources_ids(int index) const;
  std::string* _internal_add_resources_ids();
  public:

  // repeated string instances_ids = 2;
  int instances_ids_size() const;
  private:
  int _internal_instances_ids_size() const;
  public:
  void clear_instances_ids();
  const std::string& instances_ids(int index) const;
  std::string* mutable_instances_ids(int index);
  void set_instances_ids(int index, const std::string& value);
  void set_instances_ids(int index, std::string&& value);
  void set_instances_ids(int index, const char* value);
  void set_instances_ids(int index, const char* value, size_t size);
  std::string* add_instances_ids();
  void add_instances_ids(const std::string& value);
  void add_instances_ids(std::string&& value);
  void add_instances_ids(const char* value);
  void add_instances_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& instances_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_instances_ids();
  private:
  const std::string& _internal_instances_ids(int index) const;
  std::string* _internal_add_instances_ids();
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.LookupResources.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> resources_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> instances_ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class LookupResources PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.LookupResources) */ {
 public:
  inline LookupResources() : LookupResources(nullptr) {};
  virtual ~LookupResources();

  LookupResources(const LookupResources& from);
  LookupResources(LookupResources&& from) noexcept
    : LookupResources() {
    *this = ::std::move(from);
  }

  inline LookupResources& operator=(const LookupResources& from) {
    CopyFrom(from);
    return *this;
  }
  inline LookupResources& operator=(LookupResources&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const LookupResources& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LookupResources* internal_default_instance() {
    return reinterpret_cast<const LookupResources*>(
               &_LookupResources_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    159;

  friend void swap(LookupResources& a, LookupResources& b) {
    a.Swap(&b);
  }
  inline void Swap(LookupResources* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LookupResources* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LookupResources* New() const final {
    return CreateMaybeMessage<LookupResources>(nullptr);
  }

  LookupResources* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LookupResources>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const LookupResources& from);
  void MergeFrom(const LookupResources& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LookupResources* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.LookupResources";
  }
  protected:
  explicit LookupResources(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef LookupResources_Request Request;
  typedef LookupResources_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.LookupResources)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class CreateInstance_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.CreateInstance.Request) */ {
 public:
  inline CreateInstance_Request() : CreateInstance_Request(nullptr) {};
  virtual ~CreateInstance_Request();

  CreateInstance_Request(const CreateInstance_Request& from);
  CreateInstance_Request(CreateInstance_Request&& from) noexcept
    : CreateInstance_Request() {
    *this = ::std::move(from);
  }

  inline CreateInstance_Request& operator=(const CreateInstance_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateInstance_Request& operator=(CreateInstance_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const CreateInstance_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateInstance_Request* internal_default_instance() {
    return reinterpret_cast<const CreateInstance_Request*>(
               &_CreateInstance_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    160;

  friend void swap(CreateInstance_Request& a, CreateInstance_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateInstance_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateInstance_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateInstance_Request* New() const final {
    return CreateMaybeMessage<CreateInstance_Request>(nullptr);
  }

  CreateInstance_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateInstance_Request>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CreateInstance_Request& from);
  void MergeFrom(const CreateInstance_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CreateInstance_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.CreateInstance.Request";
  }
  protected:
  explicit CreateInstance_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPatientFieldNumber = 1,
    kStudyFieldNumber = 2,
    kSeriesFieldNumber = 3,
    kInstanceFieldNumber = 4,
  };
  // string patient = 1;
  void clear_patient();
  const std::string& patient() const;
  void set_patient(const std::string& value);
  void set_patient(std::string&& value);
  void set_patient(const char* value);
  void set_patient(const char* value, size_t size);
  std::string* mutable_patient();
  std::string* release_patient();
  void set_allocated_patient(std::string* patient);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_patient();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_patient(
      std::string* patient);
  private:
  const std::string& _internal_patient() const;
  void _internal_set_patient(const std::string& value);
  std::string* _internal_mutable_patient();
  public:

  // string study = 2;
  void clear_study();
  const std::string& study() const;
  void set_study(const std::string& value);
  void set_study(std::string&& value);
  void set_study(const char* value);
  void set_study(const char* value, size_t size);
  std::string* mutable_study();
  std::string* release_study();
  void set_allocated_study(std::string* study);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_study();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_study(
      std::string* study);
  private:
  const std::string& _internal_study() const;
  void _internal_set_study(const std::string& value);
  std::string* _internal_mutable_study();
  public:

  // string series = 3;
  void clear_series();
  const std::string& series() const;
  void set_series(const std::string& value);
  void set_series(std::string&& value);
  void set_series(const char* value);
  void set_series(const char* value, size_t size);
  std::string* mutable_series();
  std::string* release_series();
  void set_allocated_series(std::string* series);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_series();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_series(
      std::string* series);
  private:
  const std::string& _internal_series() const;
  void _internal_set_series(const std::string& value);
  std::string* _internal_mutable_series();
  public:

  // string instance = 4;
  void clear_instance();
  const std::string& instance() const;
  void set_instance(const std::string& value);
  void set_instance(std::string&& value);
  void set_instance(const char* value);
  void set_instance(const char* value, size_t size);
  std::string* mutable_instance();
  std::string* release_instance();
  void set_allocated_instance(std::string* instance);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_instance();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_instance(
      std::string* instance);
  private:
  const std::string& _internal_instance() const;
  void _internal_set_instance(const std::string& value);
  std::string* _internal_mutable_instance();
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.CreateInstance.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr patient_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr study_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr series_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class CreateInstance_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.CreateInstance.Response) */ {
 public:
  inline CreateInstance_Response() : CreateInstance_Response(nullptr) {};
  virtual ~CreateInstance_Response();

  CreateInstance_Response(const CreateInstance_Response& from);
  CreateInstance_Response(CreateInstance_Response&& from) noexcept
    : CreateInstance_Response() {
    *this = ::std::move(from);
  }

  inline CreateInstance_Response& operator=(const CreateInstance_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateInstance_Response& operator=(CreateInstance_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const CreateInstance_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateInstance_Response* internal_default_instance() {
    return reinterpret_cast<const CreateInstance_Response*>(
               &_CreateInstance_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    161;

  friend void swap(CreateInstance_Response& a, CreateInstance_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateInstance_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateInstance_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateInstance_Response* New() const final {
    return CreateMaybeMessage<CreateInstance_Response>(nullptr);
  }

  CreateInstance_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateInstance_Response>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CreateInstance_Response& from);
  void MergeFrom(const CreateInstance_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CreateInstance_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.CreateInstance.Response";
  }
  protected:
  explicit CreateInstance_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstanceIdFieldNumber = 2,
    kPatientIdFieldNumber = 6,
    kStudyIdFieldNumber = 7,
    kSeriesIdFieldNumber = 8,
    kIsNewInstanceFieldNumber = 1,
    kIsNewPatientFieldNumber = 3,
    kIsNewStudyFieldNumber = 4,
    kIsNewSeriesFieldNumber = 5,
  };
  // int64 instance_id = 2;
  void clear_instance_id();
  ::PROTOBUF_NAMESPACE_ID::int64 instance_id() const;
  void set_instance_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_instance_id() const;
  void _internal_set_instance_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 patient_id = 6;
  void clear_patient_id();
  ::PROTOBUF_NAMESPACE_ID::int64 patient_id() const;
  void set_patient_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_patient_id() const;
  void _internal_set_patient_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 study_id = 7;
  void clear_study_id();
  ::PROTOBUF_NAMESPACE_ID::int64 study_id() const;
  void set_study_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_study_id() const;
  void _internal_set_study_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 series_id = 8;
  void clear_series_id();
  ::PROTOBUF_NAMESPACE_ID::int64 series_id() const;
  void set_series_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_series_id() const;
  void _internal_set_series_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool is_new_instance = 1;
  void clear_is_new_instance();
  bool is_new_instance() const;
  void set_is_new_instance(bool value);
  private:
  bool _internal_is_new_instance() const;
  void _internal_set_is_new_instance(bool value);
  public:

  // bool is_new_patient = 3;
  void clear_is_new_patient();
  bool is_new_patient() const;
  void set_is_new_patient(bool value);
  private:
  bool _internal_is_new_patient() const;
  void _internal_set_is_new_patient(bool value);
  public:

  // bool is_new_study = 4;
  void clear_is_new_study();
  bool is_new_study() const;
  void set_is_new_study(bool value);
  private:
  bool _internal_is_new_study() const;
  void _internal_set_is_new_study(bool value);
  public:

  // bool is_new_series = 5;
  void clear_is_new_series();
  bool is_new_series() const;
  void set_is_new_series(bool value);
  private:
  bool _internal_is_new_series() const;
  void _internal_set_is_new_series(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.CreateInstance.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 instance_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 patient_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 study_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 series_id_;
  bool is_new_instance_;
  bool is_new_patient_;
  bool is_new_study_;
  bool is_new_series_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class CreateInstance PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.CreateInstance) */ {
 public:
  inline CreateInstance() : CreateInstance(nullptr) {};
  virtual ~CreateInstance();

  CreateInstance(const CreateInstance& from);
  CreateInstance(CreateInstance&& from) noexcept
    : CreateInstance() {
    *this = ::std::move(from);
  }

  inline CreateInstance& operator=(const CreateInstance& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateInstance& operator=(CreateInstance&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const CreateInstance& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateInstance* internal_default_instance() {
    return reinterpret_cast<const CreateInstance*>(
               &_CreateInstance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    162;

  friend void swap(CreateInstance& a, CreateInstance& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateInstance* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateInstance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateInstance* New() const final {
    return CreateMaybeMessage<CreateInstance>(nullptr);
  }

  CreateInstance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateInstance>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CreateInstance& from);
  void MergeFrom(const CreateInstance& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CreateInstance* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.CreateInstance";
  }
  protected:
  explicit CreateInstance(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef CreateInstance_Request Request;
  typedef CreateInstance_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.CreateInstance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class SetResourcesContent_Request_Tag PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.SetResourcesContent.Request.Tag) */ {
 public:
  inline SetResourcesContent_Request_Tag() : SetResourcesContent_Request_Tag(nullptr) {};
  virtual ~SetResourcesContent_Request_Tag();

  SetResourcesContent_Request_Tag(const SetResourcesContent_Request_Tag& from);
  SetResourcesContent_Request_Tag(SetResourcesContent_Request_Tag&& from) noexcept
    : SetResourcesContent_Request_Tag() {
    *this = ::std::move(from);
  }

  inline SetResourcesContent_Request_Tag& operator=(const SetResourcesContent_Request_Tag& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetResourcesContent_Request_Tag& operator=(SetResourcesContent_Request_Tag&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const SetResourcesContent_Request_Tag& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetResourcesContent_Request_Tag* internal_default_instance() {
    return reinterpret_cast<const SetResourcesContent_Request_Tag*>(
               &_SetResourcesContent_Request_Tag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    163;

  friend void swap(SetResourcesContent_Request_Tag& a, SetResourcesContent_Request_Tag& b) {
    a.Swap(&b);
  }
  inline void Swap(SetResourcesContent_Request_Tag* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetResourcesContent_Request_Tag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetResourcesContent_Request_Tag* New() const final {
    return CreateMaybeMessage<SetResourcesContent_Request_Tag>(nullptr);
  }

  SetResourcesContent_Request_Tag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetResourcesContent_Request_Tag>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SetResourcesContent_Request_Tag& from);
  void MergeFrom(const SetResourcesContent_Request_Tag& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetResourcesContent_Request_Tag* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.SetResourcesContent.Request.Tag";
  }
  protected:
  explicit SetResourcesContent_Request_Tag(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 5,
    kResourceIdFieldNumber = 1,
    kIsIdentifierFieldNumber = 2,
    kGroupFieldNumber = 3,
    kElementFieldNumber = 4,
  };
  // string value = 5;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // int64 resource_id = 1;
  void clear_resource_id();
  ::PROTOBUF_NAMESPACE_ID::int64 resource_id() const;
  void set_resource_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_resource_id() const;
  void _internal_set_resource_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool is_identifier = 2;
  void clear_is_identifier();
  bool is_identifier() const;
  void set_is_identifier(bool value);
  private:
  bool _internal_is_identifier() const;
  void _internal_set_is_identifier(bool value);
  public:

  // uint32 group = 3;
  void clear_group();
  ::PROTOBUF_NAMESPACE_ID::uint32 group() const;
  void set_group(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_group() const;
  void _internal_set_group(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 element = 4;
  void clear_element();
  ::PROTOBUF_NAMESPACE_ID::uint32 element() const;
  void set_element(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_element() const;
  void _internal_set_element(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.SetResourcesContent.Request.Tag)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::int64 resource_id_;
  bool is_identifier_;
  ::PROTOBUF_NAMESPACE_ID::uint32 group_;
  ::PROTOBUF_NAMESPACE_ID::uint32 element_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class SetResourcesContent_Request_Metadata PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.SetResourcesContent.Request.Metadata) */ {
 public:
  inline SetResourcesContent_Request_Metadata() : SetResourcesContent_Request_Metadata(nullptr) {};
  virtual ~SetResourcesContent_Request_Metadata();

  SetResourcesContent_Request_Metadata(const SetResourcesContent_Request_Metadata& from);
  SetResourcesContent_Request_Metadata(SetResourcesContent_Request_Metadata&& from) noexcept
    : SetResourcesContent_Request_Metadata() {
    *this = ::std::move(from);
  }

  inline SetResourcesContent_Request_Metadata& operator=(const SetResourcesContent_Request_Metadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetResourcesContent_Request_Metadata& operator=(SetResourcesContent_Request_Metadata&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const SetResourcesContent_Request_Metadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetResourcesContent_Request_Metadata* internal_default_instance() {
    return reinterpret_cast<const SetResourcesContent_Request_Metadata*>(
               &_SetResourcesContent_Request_Metadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    164;

  friend void swap(SetResourcesContent_Request_Metadata& a, SetResourcesContent_Request_Metadata& b) {
    a.Swap(&b);
  }
  inline void Swap(SetResourcesContent_Request_Metadata* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetResourcesContent_Request_Metadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetResourcesContent_Request_Metadata* New() const final {
    return CreateMaybeMessage<SetResourcesContent_Request_Metadata>(nullptr);
  }

  SetResourcesContent_Request_Metadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetResourcesContent_Request_Metadata>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SetResourcesContent_Request_Metadata& from);
  void MergeFrom(const SetResourcesContent_Request_Metadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetResourcesContent_Request_Metadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.SetResourcesContent.Request.Metadata";
  }
  protected:
  explicit SetResourcesContent_Request_Metadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 3,
    kResourceIdFieldNumber = 1,
    kMetadataFieldNumber = 2,
  };
  // string value = 3;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // int64 resource_id = 1;
  void clear_resource_id();
  ::PROTOBUF_NAMESPACE_ID::int64 resource_id() const;
  void set_resource_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_resource_id() const;
  void _internal_set_resource_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 metadata = 2;
  void clear_metadata();
  ::PROTOBUF_NAMESPACE_ID::int32 metadata() const;
  void set_metadata(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_metadata() const;
  void _internal_set_metadata(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.SetResourcesContent.Request.Metadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::int64 resource_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class SetResourcesContent_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.SetResourcesContent.Request) */ {
 public:
  inline SetResourcesContent_Request() : SetResourcesContent_Request(nullptr) {};
  virtual ~SetResourcesContent_Request();

  SetResourcesContent_Request(const SetResourcesContent_Request& from);
  SetResourcesContent_Request(SetResourcesContent_Request&& from) noexcept
    : SetResourcesContent_Request() {
    *this = ::std::move(from);
  }

  inline SetResourcesContent_Request& operator=(const SetResourcesContent_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetResourcesContent_Request& operator=(SetResourcesContent_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const SetResourcesContent_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetResourcesContent_Request* internal_default_instance() {
    return reinterpret_cast<const SetResourcesContent_Request*>(
               &_SetResourcesContent_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    165;

  friend void swap(SetResourcesContent_Request& a, SetResourcesContent_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(SetResourcesContent_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetResourcesContent_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetResourcesContent_Request* New() const final {
    return CreateMaybeMessage<SetResourcesContent_Request>(nullptr);
  }

  SetResourcesContent_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetResourcesContent_Request>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SetResourcesContent_Request& from);
  void MergeFrom(const SetResourcesContent_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetResourcesContent_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.SetResourcesContent.Request";
  }
  protected:
  explicit SetResourcesContent_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef SetResourcesContent_Request_Tag Tag;
  typedef SetResourcesContent_Request_Metadata Metadata;

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 1,
    kMetadataFieldNumber = 2,
  };
  // repeated .Orthanc.DatabasePluginMessages.SetResourcesContent.Request.Tag tags = 1;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  ::Orthanc::DatabasePluginMessages::SetResourcesContent_Request_Tag* mutable_tags(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Orthanc::DatabasePluginMessages::SetResourcesContent_Request_Tag >*
      mutable_tags();
  private:
  const ::Orthanc::DatabasePluginMessages::SetResourcesContent_Request_Tag& _internal_tags(int index) const;
  ::Orthanc::DatabasePluginMessages::SetResourcesContent_Request_Tag* _internal_add_tags();
  public:
  const ::Orthanc::DatabasePluginMessages::SetResourcesContent_Request_Tag& tags(int index) const;
  ::Orthanc::DatabasePluginMessages::SetResourcesContent_Request_Tag* add_tags();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Orthanc::DatabasePluginMessages::SetResourcesContent_Request_Tag >&
      tags() const;

  // repeated .Orthanc.DatabasePluginMessages.SetResourcesContent.Request.Metadata metadata = 2;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  ::Orthanc::DatabasePluginMessages::SetResourcesContent_Request_Metadata* mutable_metadata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Orthanc::DatabasePluginMessages::SetResourcesContent_Request_Metadata >*
      mutable_metadata();
  private:
  const ::Orthanc::DatabasePluginMessages::SetResourcesContent_Request_Metadata& _internal_metadata(int index) const;
  ::Orthanc::DatabasePluginMessages::SetResourcesContent_Request_Metadata* _internal_add_metadata();
  public:
  const ::Orthanc::DatabasePluginMessages::SetResourcesContent_Request_Metadata& metadata(int index) const;
  ::Orthanc::DatabasePluginMessages::SetResourcesContent_Request_Metadata* add_metadata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Orthanc::DatabasePluginMessages::SetResourcesContent_Request_Metadata >&
      metadata() const;

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.SetResourcesContent.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Orthanc::DatabasePluginMessages::SetResourcesContent_Request_Tag > tags_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Orthanc::DatabasePluginMessages::SetResourcesContent_Request_Metadata > metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class SetResourcesContent_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.SetResourcesContent.Response) */ {
 public:
  inline SetResourcesContent_Response() : SetResourcesContent_Response(nullptr) {};
  virtual ~SetResourcesContent_Response();

  SetResourcesContent_Response(const SetResourcesContent_Response& from);
  SetResourcesContent_Response(SetResourcesContent_Response&& from) noexcept
    : SetResourcesContent_Response() {
    *this = ::std::move(from);
  }

  inline SetResourcesContent_Response& operator=(const SetResourcesContent_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetResourcesContent_Response& operator=(SetResourcesContent_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const SetResourcesContent_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetResourcesContent_Response* internal_default_instance() {
    return reinterpret_cast<const SetResourcesContent_Response*>(
               &_SetResourcesContent_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    166;

  friend void swap(SetResourcesContent_Response& a, SetResourcesContent_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(SetResourcesContent_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetResourcesContent_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetResourcesContent_Response* New() const final {
    return CreateMaybeMessage<SetResourcesContent_Response>(nullptr);
  }

  SetResourcesContent_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetResourcesContent_Response>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SetResourcesContent_Response& from);
  void MergeFrom(const SetResourcesContent_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetResourcesContent_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.SetResourcesContent.Response";
  }
  protected:
  explicit SetResourcesContent_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.SetResourcesContent.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class SetResourcesContent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.SetResourcesContent) */ {
 public:
  inline SetResourcesContent() : SetResourcesContent(nullptr) {};
  virtual ~SetResourcesContent();

  SetResourcesContent(const SetResourcesContent& from);
  SetResourcesContent(SetResourcesContent&& from) noexcept
    : SetResourcesContent() {
    *this = ::std::move(from);
  }

  inline SetResourcesContent& operator=(const SetResourcesContent& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetResourcesContent& operator=(SetResourcesContent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const SetResourcesContent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetResourcesContent* internal_default_instance() {
    return reinterpret_cast<const SetResourcesContent*>(
               &_SetResourcesContent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    167;

  friend void swap(SetResourcesContent& a, SetResourcesContent& b) {
    a.Swap(&b);
  }
  inline void Swap(SetResourcesContent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetResourcesContent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetResourcesContent* New() const final {
    return CreateMaybeMessage<SetResourcesContent>(nullptr);
  }

  SetResourcesContent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetResourcesContent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SetResourcesContent& from);
  void MergeFrom(const SetResourcesContent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetResourcesContent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.SetResourcesContent";
  }
  protected:
  explicit SetResourcesContent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef SetResourcesContent_Request Request;
  typedef SetResourcesContent_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.SetResourcesContent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class GetChildrenMetadata_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.GetChildrenMetadata.Request) */ {
 public:
  inline GetChildrenMetadata_Request() : GetChildrenMetadata_Request(nullptr) {};
  virtual ~GetChildrenMetadata_Request();

  GetChildrenMetadata_Request(const GetChildrenMetadata_Request& from);
  GetChildrenMetadata_Request(GetChildrenMetadata_Request&& from) noexcept
    : GetChildrenMetadata_Request() {
    *this = ::std::move(from);
  }

  inline GetChildrenMetadata_Request& operator=(const GetChildrenMetadata_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetChildrenMetadata_Request& operator=(GetChildrenMetadata_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GetChildrenMetadata_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetChildrenMetadata_Request* internal_default_instance() {
    return reinterpret_cast<const GetChildrenMetadata_Request*>(
               &_GetChildrenMetadata_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    168;

  friend void swap(GetChildrenMetadata_Request& a, GetChildrenMetadata_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(GetChildrenMetadata_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetChildrenMetadata_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetChildrenMetadata_Request* New() const final {
    return CreateMaybeMessage<GetChildrenMetadata_Request>(nullptr);
  }

  GetChildrenMetadata_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetChildrenMetadata_Request>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GetChildrenMetadata_Request& from);
  void MergeFrom(const GetChildrenMetadata_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetChildrenMetadata_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.GetChildrenMetadata.Request";
  }
  protected:
  explicit GetChildrenMetadata_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kMetadataFieldNumber = 2,
  };
  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 metadata = 2;
  void clear_metadata();
  ::PROTOBUF_NAMESPACE_ID::int32 metadata() const;
  void set_metadata(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_metadata() const;
  void _internal_set_metadata(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.GetChildrenMetadata.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class GetChildrenMetadata_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.GetChildrenMetadata.Response) */ {
 public:
  inline GetChildrenMetadata_Response() : GetChildrenMetadata_Response(nullptr) {};
  virtual ~GetChildrenMetadata_Response();

  GetChildrenMetadata_Response(const GetChildrenMetadata_Response& from);
  GetChildrenMetadata_Response(GetChildrenMetadata_Response&& from) noexcept
    : GetChildrenMetadata_Response() {
    *this = ::std::move(from);
  }

  inline GetChildrenMetadata_Response& operator=(const GetChildrenMetadata_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetChildrenMetadata_Response& operator=(GetChildrenMetadata_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GetChildrenMetadata_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetChildrenMetadata_Response* internal_default_instance() {
    return reinterpret_cast<const GetChildrenMetadata_Response*>(
               &_GetChildrenMetadata_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    169;

  friend void swap(GetChildrenMetadata_Response& a, GetChildrenMetadata_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(GetChildrenMetadata_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetChildrenMetadata_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetChildrenMetadata_Response* New() const final {
    return CreateMaybeMessage<GetChildrenMetadata_Response>(nullptr);
  }

  GetChildrenMetadata_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetChildrenMetadata_Response>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GetChildrenMetadata_Response& from);
  void MergeFrom(const GetChildrenMetadata_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetChildrenMetadata_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.GetChildrenMetadata.Response";
  }
  protected:
  explicit GetChildrenMetadata_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated string values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  const std::string& values(int index) const;
  std::string* mutable_values(int index);
  void set_values(int index, const std::string& value);
  void set_values(int index, std::string&& value);
  void set_values(int index, const char* value);
  void set_values(int index, const char* value, size_t size);
  std::string* add_values();
  void add_values(const std::string& value);
  void add_values(std::string&& value);
  void add_values(const char* value);
  void add_values(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_values();
  private:
  const std::string& _internal_values(int index) const;
  std::string* _internal_add_values();
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.GetChildrenMetadata.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> values_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class GetChildrenMetadata PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.GetChildrenMetadata) */ {
 public:
  inline GetChildrenMetadata() : GetChildrenMetadata(nullptr) {};
  virtual ~GetChildrenMetadata();

  GetChildrenMetadata(const GetChildrenMetadata& from);
  GetChildrenMetadata(GetChildrenMetadata&& from) noexcept
    : GetChildrenMetadata() {
    *this = ::std::move(from);
  }

  inline GetChildrenMetadata& operator=(const GetChildrenMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetChildrenMetadata& operator=(GetChildrenMetadata&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GetChildrenMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetChildrenMetadata* internal_default_instance() {
    return reinterpret_cast<const GetChildrenMetadata*>(
               &_GetChildrenMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    170;

  friend void swap(GetChildrenMetadata& a, GetChildrenMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(GetChildrenMetadata* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetChildrenMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetChildrenMetadata* New() const final {
    return CreateMaybeMessage<GetChildrenMetadata>(nullptr);
  }

  GetChildrenMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetChildrenMetadata>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GetChildrenMetadata& from);
  void MergeFrom(const GetChildrenMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetChildrenMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.GetChildrenMetadata";
  }
  protected:
  explicit GetChildrenMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef GetChildrenMetadata_Request Request;
  typedef GetChildrenMetadata_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.GetChildrenMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class GetLastChangeIndex_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.GetLastChangeIndex.Request) */ {
 public:
  inline GetLastChangeIndex_Request() : GetLastChangeIndex_Request(nullptr) {};
  virtual ~GetLastChangeIndex_Request();

  GetLastChangeIndex_Request(const GetLastChangeIndex_Request& from);
  GetLastChangeIndex_Request(GetLastChangeIndex_Request&& from) noexcept
    : GetLastChangeIndex_Request() {
    *this = ::std::move(from);
  }

  inline GetLastChangeIndex_Request& operator=(const GetLastChangeIndex_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLastChangeIndex_Request& operator=(GetLastChangeIndex_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GetLastChangeIndex_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetLastChangeIndex_Request* internal_default_instance() {
    return reinterpret_cast<const GetLastChangeIndex_Request*>(
               &_GetLastChangeIndex_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    171;

  friend void swap(GetLastChangeIndex_Request& a, GetLastChangeIndex_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLastChangeIndex_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLastChangeIndex_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLastChangeIndex_Request* New() const final {
    return CreateMaybeMessage<GetLastChangeIndex_Request>(nullptr);
  }

  GetLastChangeIndex_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLastChangeIndex_Request>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GetLastChangeIndex_Request& from);
  void MergeFrom(const GetLastChangeIndex_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetLastChangeIndex_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.GetLastChangeIndex.Request";
  }
  protected:
  explicit GetLastChangeIndex_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.GetLastChangeIndex.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class GetLastChangeIndex_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.GetLastChangeIndex.Response) */ {
 public:
  inline GetLastChangeIndex_Response() : GetLastChangeIndex_Response(nullptr) {};
  virtual ~GetLastChangeIndex_Response();

  GetLastChangeIndex_Response(const GetLastChangeIndex_Response& from);
  GetLastChangeIndex_Response(GetLastChangeIndex_Response&& from) noexcept
    : GetLastChangeIndex_Response() {
    *this = ::std::move(from);
  }

  inline GetLastChangeIndex_Response& operator=(const GetLastChangeIndex_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLastChangeIndex_Response& operator=(GetLastChangeIndex_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GetLastChangeIndex_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetLastChangeIndex_Response* internal_default_instance() {
    return reinterpret_cast<const GetLastChangeIndex_Response*>(
               &_GetLastChangeIndex_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    172;

  friend void swap(GetLastChangeIndex_Response& a, GetLastChangeIndex_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLastChangeIndex_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLastChangeIndex_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLastChangeIndex_Response* New() const final {
    return CreateMaybeMessage<GetLastChangeIndex_Response>(nullptr);
  }

  GetLastChangeIndex_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLastChangeIndex_Response>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GetLastChangeIndex_Response& from);
  void MergeFrom(const GetLastChangeIndex_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetLastChangeIndex_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.GetLastChangeIndex.Response";
  }
  protected:
  explicit GetLastChangeIndex_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // int64 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int64 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.GetLastChangeIndex.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class GetLastChangeIndex PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.GetLastChangeIndex) */ {
 public:
  inline GetLastChangeIndex() : GetLastChangeIndex(nullptr) {};
  virtual ~GetLastChangeIndex();

  GetLastChangeIndex(const GetLastChangeIndex& from);
  GetLastChangeIndex(GetLastChangeIndex&& from) noexcept
    : GetLastChangeIndex() {
    *this = ::std::move(from);
  }

  inline GetLastChangeIndex& operator=(const GetLastChangeIndex& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLastChangeIndex& operator=(GetLastChangeIndex&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GetLastChangeIndex& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetLastChangeIndex* internal_default_instance() {
    return reinterpret_cast<const GetLastChangeIndex*>(
               &_GetLastChangeIndex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    173;

  friend void swap(GetLastChangeIndex& a, GetLastChangeIndex& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLastChangeIndex* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLastChangeIndex* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLastChangeIndex* New() const final {
    return CreateMaybeMessage<GetLastChangeIndex>(nullptr);
  }

  GetLastChangeIndex* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLastChangeIndex>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GetLastChangeIndex& from);
  void MergeFrom(const GetLastChangeIndex& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetLastChangeIndex* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.GetLastChangeIndex";
  }
  protected:
  explicit GetLastChangeIndex(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef GetLastChangeIndex_Request Request;
  typedef GetLastChangeIndex_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.GetLastChangeIndex)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class LookupResourceAndParent_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.LookupResourceAndParent.Request) */ {
 public:
  inline LookupResourceAndParent_Request() : LookupResourceAndParent_Request(nullptr) {};
  virtual ~LookupResourceAndParent_Request();

  LookupResourceAndParent_Request(const LookupResourceAndParent_Request& from);
  LookupResourceAndParent_Request(LookupResourceAndParent_Request&& from) noexcept
    : LookupResourceAndParent_Request() {
    *this = ::std::move(from);
  }

  inline LookupResourceAndParent_Request& operator=(const LookupResourceAndParent_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline LookupResourceAndParent_Request& operator=(LookupResourceAndParent_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const LookupResourceAndParent_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LookupResourceAndParent_Request* internal_default_instance() {
    return reinterpret_cast<const LookupResourceAndParent_Request*>(
               &_LookupResourceAndParent_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    174;

  friend void swap(LookupResourceAndParent_Request& a, LookupResourceAndParent_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(LookupResourceAndParent_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LookupResourceAndParent_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LookupResourceAndParent_Request* New() const final {
    return CreateMaybeMessage<LookupResourceAndParent_Request>(nullptr);
  }

  LookupResourceAndParent_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LookupResourceAndParent_Request>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const LookupResourceAndParent_Request& from);
  void MergeFrom(const LookupResourceAndParent_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LookupResourceAndParent_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.LookupResourceAndParent.Request";
  }
  protected:
  explicit LookupResourceAndParent_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicIdFieldNumber = 1,
  };
  // string public_id = 1;
  void clear_public_id();
  const std::string& public_id() const;
  void set_public_id(const std::string& value);
  void set_public_id(std::string&& value);
  void set_public_id(const char* value);
  void set_public_id(const char* value, size_t size);
  std::string* mutable_public_id();
  std::string* release_public_id();
  void set_allocated_public_id(std::string* public_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_public_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_public_id(
      std::string* public_id);
  private:
  const std::string& _internal_public_id() const;
  void _internal_set_public_id(const std::string& value);
  std::string* _internal_mutable_public_id();
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.LookupResourceAndParent.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class LookupResourceAndParent_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.LookupResourceAndParent.Response) */ {
 public:
  inline LookupResourceAndParent_Response() : LookupResourceAndParent_Response(nullptr) {};
  virtual ~LookupResourceAndParent_Response();

  LookupResourceAndParent_Response(const LookupResourceAndParent_Response& from);
  LookupResourceAndParent_Response(LookupResourceAndParent_Response&& from) noexcept
    : LookupResourceAndParent_Response() {
    *this = ::std::move(from);
  }

  inline LookupResourceAndParent_Response& operator=(const LookupResourceAndParent_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline LookupResourceAndParent_Response& operator=(LookupResourceAndParent_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const LookupResourceAndParent_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LookupResourceAndParent_Response* internal_default_instance() {
    return reinterpret_cast<const LookupResourceAndParent_Response*>(
               &_LookupResourceAndParent_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    175;

  friend void swap(LookupResourceAndParent_Response& a, LookupResourceAndParent_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(LookupResourceAndParent_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LookupResourceAndParent_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LookupResourceAndParent_Response* New() const final {
    return CreateMaybeMessage<LookupResourceAndParent_Response>(nullptr);
  }

  LookupResourceAndParent_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LookupResourceAndParent_Response>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const LookupResourceAndParent_Response& from);
  void MergeFrom(const LookupResourceAndParent_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LookupResourceAndParent_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.LookupResourceAndParent.Response";
  }
  protected:
  explicit LookupResourceAndParent_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentPublicIdFieldNumber = 4,
    kIdFieldNumber = 2,
    kFoundFieldNumber = 1,
    kTypeFieldNumber = 3,
  };
  // string parent_public_id = 4;
  void clear_parent_public_id();
  const std::string& parent_public_id() const;
  void set_parent_public_id(const std::string& value);
  void set_parent_public_id(std::string&& value);
  void set_parent_public_id(const char* value);
  void set_parent_public_id(const char* value, size_t size);
  std::string* mutable_parent_public_id();
  std::string* release_parent_public_id();
  void set_allocated_parent_public_id(std::string* parent_public_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_parent_public_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_parent_public_id(
      std::string* parent_public_id);
  private:
  const std::string& _internal_parent_public_id() const;
  void _internal_set_parent_public_id(const std::string& value);
  std::string* _internal_mutable_parent_public_id();
  public:

  // int64 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool found = 1;
  void clear_found();
  bool found() const;
  void set_found(bool value);
  private:
  bool _internal_found() const;
  void _internal_set_found(bool value);
  public:

  // .Orthanc.DatabasePluginMessages.ResourceType type = 3;
  void clear_type();
  ::Orthanc::DatabasePluginMessages::ResourceType type() const;
  void set_type(::Orthanc::DatabasePluginMessages::ResourceType value);
  private:
  ::Orthanc::DatabasePluginMessages::ResourceType _internal_type() const;
  void _internal_set_type(::Orthanc::DatabasePluginMessages::ResourceType value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.LookupResourceAndParent.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_public_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  bool found_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class LookupResourceAndParent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.LookupResourceAndParent) */ {
 public:
  inline LookupResourceAndParent() : LookupResourceAndParent(nullptr) {};
  virtual ~LookupResourceAndParent();

  LookupResourceAndParent(const LookupResourceAndParent& from);
  LookupResourceAndParent(LookupResourceAndParent&& from) noexcept
    : LookupResourceAndParent() {
    *this = ::std::move(from);
  }

  inline LookupResourceAndParent& operator=(const LookupResourceAndParent& from) {
    CopyFrom(from);
    return *this;
  }
  inline LookupResourceAndParent& operator=(LookupResourceAndParent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const LookupResourceAndParent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LookupResourceAndParent* internal_default_instance() {
    return reinterpret_cast<const LookupResourceAndParent*>(
               &_LookupResourceAndParent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    176;

  friend void swap(LookupResourceAndParent& a, LookupResourceAndParent& b) {
    a.Swap(&b);
  }
  inline void Swap(LookupResourceAndParent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LookupResourceAndParent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LookupResourceAndParent* New() const final {
    return CreateMaybeMessage<LookupResourceAndParent>(nullptr);
  }

  LookupResourceAndParent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LookupResourceAndParent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const LookupResourceAndParent& from);
  void MergeFrom(const LookupResourceAndParent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LookupResourceAndParent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.LookupResourceAndParent";
  }
  protected:
  explicit LookupResourceAndParent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef LookupResourceAndParent_Request Request;
  typedef LookupResourceAndParent_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.LookupResourceAndParent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class AddLabel_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.AddLabel.Request) */ {
 public:
  inline AddLabel_Request() : AddLabel_Request(nullptr) {};
  virtual ~AddLabel_Request();

  AddLabel_Request(const AddLabel_Request& from);
  AddLabel_Request(AddLabel_Request&& from) noexcept
    : AddLabel_Request() {
    *this = ::std::move(from);
  }

  inline AddLabel_Request& operator=(const AddLabel_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddLabel_Request& operator=(AddLabel_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const AddLabel_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddLabel_Request* internal_default_instance() {
    return reinterpret_cast<const AddLabel_Request*>(
               &_AddLabel_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    177;

  friend void swap(AddLabel_Request& a, AddLabel_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(AddLabel_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddLabel_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddLabel_Request* New() const final {
    return CreateMaybeMessage<AddLabel_Request>(nullptr);
  }

  AddLabel_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddLabel_Request>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AddLabel_Request& from);
  void MergeFrom(const AddLabel_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AddLabel_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.AddLabel.Request";
  }
  protected:
  explicit AddLabel_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // string label = 2;
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_label();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_label(
      std::string* label);
  private:
  const std::string& _internal_label() const;
  void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.AddLabel.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class AddLabel_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.AddLabel.Response) */ {
 public:
  inline AddLabel_Response() : AddLabel_Response(nullptr) {};
  virtual ~AddLabel_Response();

  AddLabel_Response(const AddLabel_Response& from);
  AddLabel_Response(AddLabel_Response&& from) noexcept
    : AddLabel_Response() {
    *this = ::std::move(from);
  }

  inline AddLabel_Response& operator=(const AddLabel_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddLabel_Response& operator=(AddLabel_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const AddLabel_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddLabel_Response* internal_default_instance() {
    return reinterpret_cast<const AddLabel_Response*>(
               &_AddLabel_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    178;

  friend void swap(AddLabel_Response& a, AddLabel_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(AddLabel_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddLabel_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddLabel_Response* New() const final {
    return CreateMaybeMessage<AddLabel_Response>(nullptr);
  }

  AddLabel_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddLabel_Response>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AddLabel_Response& from);
  void MergeFrom(const AddLabel_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AddLabel_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.AddLabel.Response";
  }
  protected:
  explicit AddLabel_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.AddLabel.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class AddLabel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.AddLabel) */ {
 public:
  inline AddLabel() : AddLabel(nullptr) {};
  virtual ~AddLabel();

  AddLabel(const AddLabel& from);
  AddLabel(AddLabel&& from) noexcept
    : AddLabel() {
    *this = ::std::move(from);
  }

  inline AddLabel& operator=(const AddLabel& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddLabel& operator=(AddLabel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const AddLabel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddLabel* internal_default_instance() {
    return reinterpret_cast<const AddLabel*>(
               &_AddLabel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    179;

  friend void swap(AddLabel& a, AddLabel& b) {
    a.Swap(&b);
  }
  inline void Swap(AddLabel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddLabel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddLabel* New() const final {
    return CreateMaybeMessage<AddLabel>(nullptr);
  }

  AddLabel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddLabel>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AddLabel& from);
  void MergeFrom(const AddLabel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AddLabel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.AddLabel";
  }
  protected:
  explicit AddLabel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef AddLabel_Request Request;
  typedef AddLabel_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.AddLabel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class RemoveLabel_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.RemoveLabel.Request) */ {
 public:
  inline RemoveLabel_Request() : RemoveLabel_Request(nullptr) {};
  virtual ~RemoveLabel_Request();

  RemoveLabel_Request(const RemoveLabel_Request& from);
  RemoveLabel_Request(RemoveLabel_Request&& from) noexcept
    : RemoveLabel_Request() {
    *this = ::std::move(from);
  }

  inline RemoveLabel_Request& operator=(const RemoveLabel_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveLabel_Request& operator=(RemoveLabel_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const RemoveLabel_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveLabel_Request* internal_default_instance() {
    return reinterpret_cast<const RemoveLabel_Request*>(
               &_RemoveLabel_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    180;

  friend void swap(RemoveLabel_Request& a, RemoveLabel_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveLabel_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveLabel_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveLabel_Request* New() const final {
    return CreateMaybeMessage<RemoveLabel_Request>(nullptr);
  }

  RemoveLabel_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveLabel_Request>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const RemoveLabel_Request& from);
  void MergeFrom(const RemoveLabel_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RemoveLabel_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.RemoveLabel.Request";
  }
  protected:
  explicit RemoveLabel_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // string label = 2;
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_label();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_label(
      std::string* label);
  private:
  const std::string& _internal_label() const;
  void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.RemoveLabel.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class RemoveLabel_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.RemoveLabel.Response) */ {
 public:
  inline RemoveLabel_Response() : RemoveLabel_Response(nullptr) {};
  virtual ~RemoveLabel_Response();

  RemoveLabel_Response(const RemoveLabel_Response& from);
  RemoveLabel_Response(RemoveLabel_Response&& from) noexcept
    : RemoveLabel_Response() {
    *this = ::std::move(from);
  }

  inline RemoveLabel_Response& operator=(const RemoveLabel_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveLabel_Response& operator=(RemoveLabel_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const RemoveLabel_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveLabel_Response* internal_default_instance() {
    return reinterpret_cast<const RemoveLabel_Response*>(
               &_RemoveLabel_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    181;

  friend void swap(RemoveLabel_Response& a, RemoveLabel_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveLabel_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveLabel_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveLabel_Response* New() const final {
    return CreateMaybeMessage<RemoveLabel_Response>(nullptr);
  }

  RemoveLabel_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveLabel_Response>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const RemoveLabel_Response& from);
  void MergeFrom(const RemoveLabel_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RemoveLabel_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.RemoveLabel.Response";
  }
  protected:
  explicit RemoveLabel_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.RemoveLabel.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class RemoveLabel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.RemoveLabel) */ {
 public:
  inline RemoveLabel() : RemoveLabel(nullptr) {};
  virtual ~RemoveLabel();

  RemoveLabel(const RemoveLabel& from);
  RemoveLabel(RemoveLabel&& from) noexcept
    : RemoveLabel() {
    *this = ::std::move(from);
  }

  inline RemoveLabel& operator=(const RemoveLabel& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveLabel& operator=(RemoveLabel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const RemoveLabel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveLabel* internal_default_instance() {
    return reinterpret_cast<const RemoveLabel*>(
               &_RemoveLabel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    182;

  friend void swap(RemoveLabel& a, RemoveLabel& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveLabel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveLabel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveLabel* New() const final {
    return CreateMaybeMessage<RemoveLabel>(nullptr);
  }

  RemoveLabel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveLabel>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const RemoveLabel& from);
  void MergeFrom(const RemoveLabel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RemoveLabel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.RemoveLabel";
  }
  protected:
  explicit RemoveLabel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef RemoveLabel_Request Request;
  typedef RemoveLabel_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.RemoveLabel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class ListLabels_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.ListLabels.Request) */ {
 public:
  inline ListLabels_Request() : ListLabels_Request(nullptr) {};
  virtual ~ListLabels_Request();

  ListLabels_Request(const ListLabels_Request& from);
  ListLabels_Request(ListLabels_Request&& from) noexcept
    : ListLabels_Request() {
    *this = ::std::move(from);
  }

  inline ListLabels_Request& operator=(const ListLabels_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListLabels_Request& operator=(ListLabels_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ListLabels_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListLabels_Request* internal_default_instance() {
    return reinterpret_cast<const ListLabels_Request*>(
               &_ListLabels_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    183;

  friend void swap(ListLabels_Request& a, ListLabels_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(ListLabels_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListLabels_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListLabels_Request* New() const final {
    return CreateMaybeMessage<ListLabels_Request>(nullptr);
  }

  ListLabels_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListLabels_Request>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ListLabels_Request& from);
  void MergeFrom(const ListLabels_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ListLabels_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.ListLabels.Request";
  }
  protected:
  explicit ListLabels_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 2,
    kSingleResourceFieldNumber = 1,
  };
  // int64 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool single_resource = 1;
  void clear_single_resource();
  bool single_resource() const;
  void set_single_resource(bool value);
  private:
  bool _internal_single_resource() const;
  void _internal_set_single_resource(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.ListLabels.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  bool single_resource_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class ListLabels_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.ListLabels.Response) */ {
 public:
  inline ListLabels_Response() : ListLabels_Response(nullptr) {};
  virtual ~ListLabels_Response();

  ListLabels_Response(const ListLabels_Response& from);
  ListLabels_Response(ListLabels_Response&& from) noexcept
    : ListLabels_Response() {
    *this = ::std::move(from);
  }

  inline ListLabels_Response& operator=(const ListLabels_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListLabels_Response& operator=(ListLabels_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ListLabels_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListLabels_Response* internal_default_instance() {
    return reinterpret_cast<const ListLabels_Response*>(
               &_ListLabels_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    184;

  friend void swap(ListLabels_Response& a, ListLabels_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(ListLabels_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListLabels_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListLabels_Response* New() const final {
    return CreateMaybeMessage<ListLabels_Response>(nullptr);
  }

  ListLabels_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListLabels_Response>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ListLabels_Response& from);
  void MergeFrom(const ListLabels_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ListLabels_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.ListLabels.Response";
  }
  protected:
  explicit ListLabels_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 1,
  };
  // repeated string labels = 1;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  const std::string& labels(int index) const;
  std::string* mutable_labels(int index);
  void set_labels(int index, const std::string& value);
  void set_labels(int index, std::string&& value);
  void set_labels(int index, const char* value);
  void set_labels(int index, const char* value, size_t size);
  std::string* add_labels();
  void add_labels(const std::string& value);
  void add_labels(std::string&& value);
  void add_labels(const char* value);
  void add_labels(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& labels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_labels();
  private:
  const std::string& _internal_labels(int index) const;
  std::string* _internal_add_labels();
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.ListLabels.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> labels_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class ListLabels PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.ListLabels) */ {
 public:
  inline ListLabels() : ListLabels(nullptr) {};
  virtual ~ListLabels();

  ListLabels(const ListLabels& from);
  ListLabels(ListLabels&& from) noexcept
    : ListLabels() {
    *this = ::std::move(from);
  }

  inline ListLabels& operator=(const ListLabels& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListLabels& operator=(ListLabels&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ListLabels& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListLabels* internal_default_instance() {
    return reinterpret_cast<const ListLabels*>(
               &_ListLabels_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    185;

  friend void swap(ListLabels& a, ListLabels& b) {
    a.Swap(&b);
  }
  inline void Swap(ListLabels* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListLabels* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListLabels* New() const final {
    return CreateMaybeMessage<ListLabels>(nullptr);
  }

  ListLabels* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListLabels>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ListLabels& from);
  void MergeFrom(const ListLabels& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ListLabels* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.ListLabels";
  }
  protected:
  explicit ListLabels(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ListLabels_Request Request;
  typedef ListLabels_Response Response;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.ListLabels)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class TransactionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.TransactionRequest) */ {
 public:
  inline TransactionRequest() : TransactionRequest(nullptr) {};
  virtual ~TransactionRequest();

  TransactionRequest(const TransactionRequest& from);
  TransactionRequest(TransactionRequest&& from) noexcept
    : TransactionRequest() {
    *this = ::std::move(from);
  }

  inline TransactionRequest& operator=(const TransactionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionRequest& operator=(TransactionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const TransactionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransactionRequest* internal_default_instance() {
    return reinterpret_cast<const TransactionRequest*>(
               &_TransactionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    186;

  friend void swap(TransactionRequest& a, TransactionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransactionRequest* New() const final {
    return CreateMaybeMessage<TransactionRequest>(nullptr);
  }

  TransactionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransactionRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TransactionRequest& from);
  void MergeFrom(const TransactionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TransactionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.TransactionRequest";
  }
  protected:
  explicit TransactionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRollbackFieldNumber = 100,
    kCommitFieldNumber = 101,
    kAddAttachmentFieldNumber = 102,
    kClearChangesFieldNumber = 103,
    kClearExportedResourcesFieldNumber = 104,
    kDeleteAttachmentFieldNumber = 105,
    kDeleteMetadataFieldNumber = 106,
    kDeleteResourceFieldNumber = 107,
    kGetAllMetadataFieldNumber = 108,
    kGetAllPublicIdsFieldNumber = 109,
    kGetAllPublicIdsWithLimitsFieldNumber = 110,
    kGetChangesFieldNumber = 111,
    kGetChildrenInternalIdFieldNumber = 112,
    kGetChildrenPublicIdFieldNumber = 113,
    kGetExportedResourcesFieldNumber = 114,
    kGetLastChangeFieldNumber = 115,
    kGetLastExportedResourceFieldNumber = 116,
    kGetMainDicomTagsFieldNumber = 117,
    kGetPublicIdFieldNumber = 118,
    kGetResourcesCountFieldNumber = 119,
    kGetResourceTypeFieldNumber = 120,
    kGetTotalCompressedSizeFieldNumber = 121,
    kGetTotalUncompressedSizeFieldNumber = 122,
    kIsProtectedPatientFieldNumber = 123,
    kListAvailableAttachmentsFieldNumber = 124,
    kLogChangeFieldNumber = 125,
    kLogExportedResourceFieldNumber = 126,
    kLookupAttachmentFieldNumber = 127,
    kLookupGlobalPropertyFieldNumber = 128,
    kLookupMetadataFieldNumber = 129,
    kLookupParentFieldNumber = 130,
    kLookupResourceFieldNumber = 131,
    kSelectPatientToRecycleFieldNumber = 132,
    kSelectPatientToRecycleWithAvoidFieldNumber = 133,
    kSetGlobalPropertyFieldNumber = 134,
    kClearMainDicomTagsFieldNumber = 135,
    kSetMetadataFieldNumber = 136,
    kSetProtectedPatientFieldNumber = 137,
    kIsDiskSizeAboveFieldNumber = 138,
    kLookupResourcesFieldNumber = 139,
    kCreateInstanceFieldNumber = 140,
    kSetResourcesContentFieldNumber = 141,
    kGetChildrenMetadataFieldNumber = 142,
    kGetLastChangeIndexFieldNumber = 143,
    kLookupResourceAndParentFieldNumber = 144,
    kAddLabelFieldNumber = 145,
    kRemoveLabelFieldNumber = 146,
    kListLabelsFieldNumber = 147,
    kIncrementGlobalPropertyFieldNumber = 148,
    kUpdateAndGetStatisticsFieldNumber = 149,
    kTransactionFieldNumber = 1,
    kOperationFieldNumber = 2,
  };
  // .Orthanc.DatabasePluginMessages.Rollback.Request rollback = 100;
  bool has_rollback() const;
  private:
  bool _internal_has_rollback() const;
  public:
  void clear_rollback();
  const ::Orthanc::DatabasePluginMessages::Rollback_Request& rollback() const;
  ::Orthanc::DatabasePluginMessages::Rollback_Request* release_rollback();
  ::Orthanc::DatabasePluginMessages::Rollback_Request* mutable_rollback();
  void set_allocated_rollback(::Orthanc::DatabasePluginMessages::Rollback_Request* rollback);
  private:
  const ::Orthanc::DatabasePluginMessages::Rollback_Request& _internal_rollback() const;
  ::Orthanc::DatabasePluginMessages::Rollback_Request* _internal_mutable_rollback();
  public:
  void unsafe_arena_set_allocated_rollback(
      ::Orthanc::DatabasePluginMessages::Rollback_Request* rollback);
  ::Orthanc::DatabasePluginMessages::Rollback_Request* unsafe_arena_release_rollback();

  // .Orthanc.DatabasePluginMessages.Commit.Request commit = 101;
  bool has_commit() const;
  private:
  bool _internal_has_commit() const;
  public:
  void clear_commit();
  const ::Orthanc::DatabasePluginMessages::Commit_Request& commit() const;
  ::Orthanc::DatabasePluginMessages::Commit_Request* release_commit();
  ::Orthanc::DatabasePluginMessages::Commit_Request* mutable_commit();
  void set_allocated_commit(::Orthanc::DatabasePluginMessages::Commit_Request* commit);
  private:
  const ::Orthanc::DatabasePluginMessages::Commit_Request& _internal_commit() const;
  ::Orthanc::DatabasePluginMessages::Commit_Request* _internal_mutable_commit();
  public:
  void unsafe_arena_set_allocated_commit(
      ::Orthanc::DatabasePluginMessages::Commit_Request* commit);
  ::Orthanc::DatabasePluginMessages::Commit_Request* unsafe_arena_release_commit();

  // .Orthanc.DatabasePluginMessages.AddAttachment.Request add_attachment = 102;
  bool has_add_attachment() const;
  private:
  bool _internal_has_add_attachment() const;
  public:
  void clear_add_attachment();
  const ::Orthanc::DatabasePluginMessages::AddAttachment_Request& add_attachment() const;
  ::Orthanc::DatabasePluginMessages::AddAttachment_Request* release_add_attachment();
  ::Orthanc::DatabasePluginMessages::AddAttachment_Request* mutable_add_attachment();
  void set_allocated_add_attachment(::Orthanc::DatabasePluginMessages::AddAttachment_Request* add_attachment);
  private:
  const ::Orthanc::DatabasePluginMessages::AddAttachment_Request& _internal_add_attachment() const;
  ::Orthanc::DatabasePluginMessages::AddAttachment_Request* _internal_mutable_add_attachment();
  public:
  void unsafe_arena_set_allocated_add_attachment(
      ::Orthanc::DatabasePluginMessages::AddAttachment_Request* add_attachment);
  ::Orthanc::DatabasePluginMessages::AddAttachment_Request* unsafe_arena_release_add_attachment();

  // .Orthanc.DatabasePluginMessages.ClearChanges.Request clear_changes = 103;
  bool has_clear_changes() const;
  private:
  bool _internal_has_clear_changes() const;
  public:
  void clear_clear_changes();
  const ::Orthanc::DatabasePluginMessages::ClearChanges_Request& clear_changes() const;
  ::Orthanc::DatabasePluginMessages::ClearChanges_Request* release_clear_changes();
  ::Orthanc::DatabasePluginMessages::ClearChanges_Request* mutable_clear_changes();
  void set_allocated_clear_changes(::Orthanc::DatabasePluginMessages::ClearChanges_Request* clear_changes);
  private:
  const ::Orthanc::DatabasePluginMessages::ClearChanges_Request& _internal_clear_changes() const;
  ::Orthanc::DatabasePluginMessages::ClearChanges_Request* _internal_mutable_clear_changes();
  public:
  void unsafe_arena_set_allocated_clear_changes(
      ::Orthanc::DatabasePluginMessages::ClearChanges_Request* clear_changes);
  ::Orthanc::DatabasePluginMessages::ClearChanges_Request* unsafe_arena_release_clear_changes();

  // .Orthanc.DatabasePluginMessages.ClearExportedResources.Request clear_exported_resources = 104;
  bool has_clear_exported_resources() const;
  private:
  bool _internal_has_clear_exported_resources() const;
  public:
  void clear_clear_exported_resources();
  const ::Orthanc::DatabasePluginMessages::ClearExportedResources_Request& clear_exported_resources() const;
  ::Orthanc::DatabasePluginMessages::ClearExportedResources_Request* release_clear_exported_resources();
  ::Orthanc::DatabasePluginMessages::ClearExportedResources_Request* mutable_clear_exported_resources();
  void set_allocated_clear_exported_resources(::Orthanc::DatabasePluginMessages::ClearExportedResources_Request* clear_exported_resources);
  private:
  const ::Orthanc::DatabasePluginMessages::ClearExportedResources_Request& _internal_clear_exported_resources() const;
  ::Orthanc::DatabasePluginMessages::ClearExportedResources_Request* _internal_mutable_clear_exported_resources();
  public:
  void unsafe_arena_set_allocated_clear_exported_resources(
      ::Orthanc::DatabasePluginMessages::ClearExportedResources_Request* clear_exported_resources);
  ::Orthanc::DatabasePluginMessages::ClearExportedResources_Request* unsafe_arena_release_clear_exported_resources();

  // .Orthanc.DatabasePluginMessages.DeleteAttachment.Request delete_attachment = 105;
  bool has_delete_attachment() const;
  private:
  bool _internal_has_delete_attachment() const;
  public:
  void clear_delete_attachment();
  const ::Orthanc::DatabasePluginMessages::DeleteAttachment_Request& delete_attachment() const;
  ::Orthanc::DatabasePluginMessages::DeleteAttachment_Request* release_delete_attachment();
  ::Orthanc::DatabasePluginMessages::DeleteAttachment_Request* mutable_delete_attachment();
  void set_allocated_delete_attachment(::Orthanc::DatabasePluginMessages::DeleteAttachment_Request* delete_attachment);
  private:
  const ::Orthanc::DatabasePluginMessages::DeleteAttachment_Request& _internal_delete_attachment() const;
  ::Orthanc::DatabasePluginMessages::DeleteAttachment_Request* _internal_mutable_delete_attachment();
  public:
  void unsafe_arena_set_allocated_delete_attachment(
      ::Orthanc::DatabasePluginMessages::DeleteAttachment_Request* delete_attachment);
  ::Orthanc::DatabasePluginMessages::DeleteAttachment_Request* unsafe_arena_release_delete_attachment();

  // .Orthanc.DatabasePluginMessages.DeleteMetadata.Request delete_metadata = 106;
  bool has_delete_metadata() const;
  private:
  bool _internal_has_delete_metadata() const;
  public:
  void clear_delete_metadata();
  const ::Orthanc::DatabasePluginMessages::DeleteMetadata_Request& delete_metadata() const;
  ::Orthanc::DatabasePluginMessages::DeleteMetadata_Request* release_delete_metadata();
  ::Orthanc::DatabasePluginMessages::DeleteMetadata_Request* mutable_delete_metadata();
  void set_allocated_delete_metadata(::Orthanc::DatabasePluginMessages::DeleteMetadata_Request* delete_metadata);
  private:
  const ::Orthanc::DatabasePluginMessages::DeleteMetadata_Request& _internal_delete_metadata() const;
  ::Orthanc::DatabasePluginMessages::DeleteMetadata_Request* _internal_mutable_delete_metadata();
  public:
  void unsafe_arena_set_allocated_delete_metadata(
      ::Orthanc::DatabasePluginMessages::DeleteMetadata_Request* delete_metadata);
  ::Orthanc::DatabasePluginMessages::DeleteMetadata_Request* unsafe_arena_release_delete_metadata();

  // .Orthanc.DatabasePluginMessages.DeleteResource.Request delete_resource = 107;
  bool has_delete_resource() const;
  private:
  bool _internal_has_delete_resource() const;
  public:
  void clear_delete_resource();
  const ::Orthanc::DatabasePluginMessages::DeleteResource_Request& delete_resource() const;
  ::Orthanc::DatabasePluginMessages::DeleteResource_Request* release_delete_resource();
  ::Orthanc::DatabasePluginMessages::DeleteResource_Request* mutable_delete_resource();
  void set_allocated_delete_resource(::Orthanc::DatabasePluginMessages::DeleteResource_Request* delete_resource);
  private:
  const ::Orthanc::DatabasePluginMessages::DeleteResource_Request& _internal_delete_resource() const;
  ::Orthanc::DatabasePluginMessages::DeleteResource_Request* _internal_mutable_delete_resource();
  public:
  void unsafe_arena_set_allocated_delete_resource(
      ::Orthanc::DatabasePluginMessages::DeleteResource_Request* delete_resource);
  ::Orthanc::DatabasePluginMessages::DeleteResource_Request* unsafe_arena_release_delete_resource();

  // .Orthanc.DatabasePluginMessages.GetAllMetadata.Request get_all_metadata = 108;
  bool has_get_all_metadata() const;
  private:
  bool _internal_has_get_all_metadata() const;
  public:
  void clear_get_all_metadata();
  const ::Orthanc::DatabasePluginMessages::GetAllMetadata_Request& get_all_metadata() const;
  ::Orthanc::DatabasePluginMessages::GetAllMetadata_Request* release_get_all_metadata();
  ::Orthanc::DatabasePluginMessages::GetAllMetadata_Request* mutable_get_all_metadata();
  void set_allocated_get_all_metadata(::Orthanc::DatabasePluginMessages::GetAllMetadata_Request* get_all_metadata);
  private:
  const ::Orthanc::DatabasePluginMessages::GetAllMetadata_Request& _internal_get_all_metadata() const;
  ::Orthanc::DatabasePluginMessages::GetAllMetadata_Request* _internal_mutable_get_all_metadata();
  public:
  void unsafe_arena_set_allocated_get_all_metadata(
      ::Orthanc::DatabasePluginMessages::GetAllMetadata_Request* get_all_metadata);
  ::Orthanc::DatabasePluginMessages::GetAllMetadata_Request* unsafe_arena_release_get_all_metadata();

  // .Orthanc.DatabasePluginMessages.GetAllPublicIds.Request get_all_public_ids = 109;
  bool has_get_all_public_ids() const;
  private:
  bool _internal_has_get_all_public_ids() const;
  public:
  void clear_get_all_public_ids();
  const ::Orthanc::DatabasePluginMessages::GetAllPublicIds_Request& get_all_public_ids() const;
  ::Orthanc::DatabasePluginMessages::GetAllPublicIds_Request* release_get_all_public_ids();
  ::Orthanc::DatabasePluginMessages::GetAllPublicIds_Request* mutable_get_all_public_ids();
  void set_allocated_get_all_public_ids(::Orthanc::DatabasePluginMessages::GetAllPublicIds_Request* get_all_public_ids);
  private:
  const ::Orthanc::DatabasePluginMessages::GetAllPublicIds_Request& _internal_get_all_public_ids() const;
  ::Orthanc::DatabasePluginMessages::GetAllPublicIds_Request* _internal_mutable_get_all_public_ids();
  public:
  void unsafe_arena_set_allocated_get_all_public_ids(
      ::Orthanc::DatabasePluginMessages::GetAllPublicIds_Request* get_all_public_ids);
  ::Orthanc::DatabasePluginMessages::GetAllPublicIds_Request* unsafe_arena_release_get_all_public_ids();

  // .Orthanc.DatabasePluginMessages.GetAllPublicIdsWithLimits.Request get_all_public_ids_with_limits = 110;
  bool has_get_all_public_ids_with_limits() const;
  private:
  bool _internal_has_get_all_public_ids_with_limits() const;
  public:
  void clear_get_all_public_ids_with_limits();
  const ::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits_Request& get_all_public_ids_with_limits() const;
  ::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits_Request* release_get_all_public_ids_with_limits();
  ::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits_Request* mutable_get_all_public_ids_with_limits();
  void set_allocated_get_all_public_ids_with_limits(::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits_Request* get_all_public_ids_with_limits);
  private:
  const ::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits_Request& _internal_get_all_public_ids_with_limits() const;
  ::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits_Request* _internal_mutable_get_all_public_ids_with_limits();
  public:
  void unsafe_arena_set_allocated_get_all_public_ids_with_limits(
      ::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits_Request* get_all_public_ids_with_limits);
  ::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits_Request* unsafe_arena_release_get_all_public_ids_with_limits();

  // .Orthanc.DatabasePluginMessages.GetChanges.Request get_changes = 111;
  bool has_get_changes() const;
  private:
  bool _internal_has_get_changes() const;
  public:
  void clear_get_changes();
  const ::Orthanc::DatabasePluginMessages::GetChanges_Request& get_changes() const;
  ::Orthanc::DatabasePluginMessages::GetChanges_Request* release_get_changes();
  ::Orthanc::DatabasePluginMessages::GetChanges_Request* mutable_get_changes();
  void set_allocated_get_changes(::Orthanc::DatabasePluginMessages::GetChanges_Request* get_changes);
  private:
  const ::Orthanc::DatabasePluginMessages::GetChanges_Request& _internal_get_changes() const;
  ::Orthanc::DatabasePluginMessages::GetChanges_Request* _internal_mutable_get_changes();
  public:
  void unsafe_arena_set_allocated_get_changes(
      ::Orthanc::DatabasePluginMessages::GetChanges_Request* get_changes);
  ::Orthanc::DatabasePluginMessages::GetChanges_Request* unsafe_arena_release_get_changes();

  // .Orthanc.DatabasePluginMessages.GetChildrenInternalId.Request get_children_internal_id = 112;
  bool has_get_children_internal_id() const;
  private:
  bool _internal_has_get_children_internal_id() const;
  public:
  void clear_get_children_internal_id();
  const ::Orthanc::DatabasePluginMessages::GetChildrenInternalId_Request& get_children_internal_id() const;
  ::Orthanc::DatabasePluginMessages::GetChildrenInternalId_Request* release_get_children_internal_id();
  ::Orthanc::DatabasePluginMessages::GetChildrenInternalId_Request* mutable_get_children_internal_id();
  void set_allocated_get_children_internal_id(::Orthanc::DatabasePluginMessages::GetChildrenInternalId_Request* get_children_internal_id);
  private:
  const ::Orthanc::DatabasePluginMessages::GetChildrenInternalId_Request& _internal_get_children_internal_id() const;
  ::Orthanc::DatabasePluginMessages::GetChildrenInternalId_Request* _internal_mutable_get_children_internal_id();
  public:
  void unsafe_arena_set_allocated_get_children_internal_id(
      ::Orthanc::DatabasePluginMessages::GetChildrenInternalId_Request* get_children_internal_id);
  ::Orthanc::DatabasePluginMessages::GetChildrenInternalId_Request* unsafe_arena_release_get_children_internal_id();

  // .Orthanc.DatabasePluginMessages.GetChildrenPublicId.Request get_children_public_id = 113;
  bool has_get_children_public_id() const;
  private:
  bool _internal_has_get_children_public_id() const;
  public:
  void clear_get_children_public_id();
  const ::Orthanc::DatabasePluginMessages::GetChildrenPublicId_Request& get_children_public_id() const;
  ::Orthanc::DatabasePluginMessages::GetChildrenPublicId_Request* release_get_children_public_id();
  ::Orthanc::DatabasePluginMessages::GetChildrenPublicId_Request* mutable_get_children_public_id();
  void set_allocated_get_children_public_id(::Orthanc::DatabasePluginMessages::GetChildrenPublicId_Request* get_children_public_id);
  private:
  const ::Orthanc::DatabasePluginMessages::GetChildrenPublicId_Request& _internal_get_children_public_id() const;
  ::Orthanc::DatabasePluginMessages::GetChildrenPublicId_Request* _internal_mutable_get_children_public_id();
  public:
  void unsafe_arena_set_allocated_get_children_public_id(
      ::Orthanc::DatabasePluginMessages::GetChildrenPublicId_Request* get_children_public_id);
  ::Orthanc::DatabasePluginMessages::GetChildrenPublicId_Request* unsafe_arena_release_get_children_public_id();

  // .Orthanc.DatabasePluginMessages.GetExportedResources.Request get_exported_resources = 114;
  bool has_get_exported_resources() const;
  private:
  bool _internal_has_get_exported_resources() const;
  public:
  void clear_get_exported_resources();
  const ::Orthanc::DatabasePluginMessages::GetExportedResources_Request& get_exported_resources() const;
  ::Orthanc::DatabasePluginMessages::GetExportedResources_Request* release_get_exported_resources();
  ::Orthanc::DatabasePluginMessages::GetExportedResources_Request* mutable_get_exported_resources();
  void set_allocated_get_exported_resources(::Orthanc::DatabasePluginMessages::GetExportedResources_Request* get_exported_resources);
  private:
  const ::Orthanc::DatabasePluginMessages::GetExportedResources_Request& _internal_get_exported_resources() const;
  ::Orthanc::DatabasePluginMessages::GetExportedResources_Request* _internal_mutable_get_exported_resources();
  public:
  void unsafe_arena_set_allocated_get_exported_resources(
      ::Orthanc::DatabasePluginMessages::GetExportedResources_Request* get_exported_resources);
  ::Orthanc::DatabasePluginMessages::GetExportedResources_Request* unsafe_arena_release_get_exported_resources();

  // .Orthanc.DatabasePluginMessages.GetLastChange.Request get_last_change = 115;
  bool has_get_last_change() const;
  private:
  bool _internal_has_get_last_change() const;
  public:
  void clear_get_last_change();
  const ::Orthanc::DatabasePluginMessages::GetLastChange_Request& get_last_change() const;
  ::Orthanc::DatabasePluginMessages::GetLastChange_Request* release_get_last_change();
  ::Orthanc::DatabasePluginMessages::GetLastChange_Request* mutable_get_last_change();
  void set_allocated_get_last_change(::Orthanc::DatabasePluginMessages::GetLastChange_Request* get_last_change);
  private:
  const ::Orthanc::DatabasePluginMessages::GetLastChange_Request& _internal_get_last_change() const;
  ::Orthanc::DatabasePluginMessages::GetLastChange_Request* _internal_mutable_get_last_change();
  public:
  void unsafe_arena_set_allocated_get_last_change(
      ::Orthanc::DatabasePluginMessages::GetLastChange_Request* get_last_change);
  ::Orthanc::DatabasePluginMessages::GetLastChange_Request* unsafe_arena_release_get_last_change();

  // .Orthanc.DatabasePluginMessages.GetLastExportedResource.Request get_last_exported_resource = 116;
  bool has_get_last_exported_resource() const;
  private:
  bool _internal_has_get_last_exported_resource() const;
  public:
  void clear_get_last_exported_resource();
  const ::Orthanc::DatabasePluginMessages::GetLastExportedResource_Request& get_last_exported_resource() const;
  ::Orthanc::DatabasePluginMessages::GetLastExportedResource_Request* release_get_last_exported_resource();
  ::Orthanc::DatabasePluginMessages::GetLastExportedResource_Request* mutable_get_last_exported_resource();
  void set_allocated_get_last_exported_resource(::Orthanc::DatabasePluginMessages::GetLastExportedResource_Request* get_last_exported_resource);
  private:
  const ::Orthanc::DatabasePluginMessages::GetLastExportedResource_Request& _internal_get_last_exported_resource() const;
  ::Orthanc::DatabasePluginMessages::GetLastExportedResource_Request* _internal_mutable_get_last_exported_resource();
  public:
  void unsafe_arena_set_allocated_get_last_exported_resource(
      ::Orthanc::DatabasePluginMessages::GetLastExportedResource_Request* get_last_exported_resource);
  ::Orthanc::DatabasePluginMessages::GetLastExportedResource_Request* unsafe_arena_release_get_last_exported_resource();

  // .Orthanc.DatabasePluginMessages.GetMainDicomTags.Request get_main_dicom_tags = 117;
  bool has_get_main_dicom_tags() const;
  private:
  bool _internal_has_get_main_dicom_tags() const;
  public:
  void clear_get_main_dicom_tags();
  const ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Request& get_main_dicom_tags() const;
  ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Request* release_get_main_dicom_tags();
  ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Request* mutable_get_main_dicom_tags();
  void set_allocated_get_main_dicom_tags(::Orthanc::DatabasePluginMessages::GetMainDicomTags_Request* get_main_dicom_tags);
  private:
  const ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Request& _internal_get_main_dicom_tags() const;
  ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Request* _internal_mutable_get_main_dicom_tags();
  public:
  void unsafe_arena_set_allocated_get_main_dicom_tags(
      ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Request* get_main_dicom_tags);
  ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Request* unsafe_arena_release_get_main_dicom_tags();

  // .Orthanc.DatabasePluginMessages.GetPublicId.Request get_public_id = 118;
  bool has_get_public_id() const;
  private:
  bool _internal_has_get_public_id() const;
  public:
  void clear_get_public_id();
  const ::Orthanc::DatabasePluginMessages::GetPublicId_Request& get_public_id() const;
  ::Orthanc::DatabasePluginMessages::GetPublicId_Request* release_get_public_id();
  ::Orthanc::DatabasePluginMessages::GetPublicId_Request* mutable_get_public_id();
  void set_allocated_get_public_id(::Orthanc::DatabasePluginMessages::GetPublicId_Request* get_public_id);
  private:
  const ::Orthanc::DatabasePluginMessages::GetPublicId_Request& _internal_get_public_id() const;
  ::Orthanc::DatabasePluginMessages::GetPublicId_Request* _internal_mutable_get_public_id();
  public:
  void unsafe_arena_set_allocated_get_public_id(
      ::Orthanc::DatabasePluginMessages::GetPublicId_Request* get_public_id);
  ::Orthanc::DatabasePluginMessages::GetPublicId_Request* unsafe_arena_release_get_public_id();

  // .Orthanc.DatabasePluginMessages.GetResourcesCount.Request get_resources_count = 119;
  bool has_get_resources_count() const;
  private:
  bool _internal_has_get_resources_count() const;
  public:
  void clear_get_resources_count();
  const ::Orthanc::DatabasePluginMessages::GetResourcesCount_Request& get_resources_count() const;
  ::Orthanc::DatabasePluginMessages::GetResourcesCount_Request* release_get_resources_count();
  ::Orthanc::DatabasePluginMessages::GetResourcesCount_Request* mutable_get_resources_count();
  void set_allocated_get_resources_count(::Orthanc::DatabasePluginMessages::GetResourcesCount_Request* get_resources_count);
  private:
  const ::Orthanc::DatabasePluginMessages::GetResourcesCount_Request& _internal_get_resources_count() const;
  ::Orthanc::DatabasePluginMessages::GetResourcesCount_Request* _internal_mutable_get_resources_count();
  public:
  void unsafe_arena_set_allocated_get_resources_count(
      ::Orthanc::DatabasePluginMessages::GetResourcesCount_Request* get_resources_count);
  ::Orthanc::DatabasePluginMessages::GetResourcesCount_Request* unsafe_arena_release_get_resources_count();

  // .Orthanc.DatabasePluginMessages.GetResourceType.Request get_resource_type = 120;
  bool has_get_resource_type() const;
  private:
  bool _internal_has_get_resource_type() const;
  public:
  void clear_get_resource_type();
  const ::Orthanc::DatabasePluginMessages::GetResourceType_Request& get_resource_type() const;
  ::Orthanc::DatabasePluginMessages::GetResourceType_Request* release_get_resource_type();
  ::Orthanc::DatabasePluginMessages::GetResourceType_Request* mutable_get_resource_type();
  void set_allocated_get_resource_type(::Orthanc::DatabasePluginMessages::GetResourceType_Request* get_resource_type);
  private:
  const ::Orthanc::DatabasePluginMessages::GetResourceType_Request& _internal_get_resource_type() const;
  ::Orthanc::DatabasePluginMessages::GetResourceType_Request* _internal_mutable_get_resource_type();
  public:
  void unsafe_arena_set_allocated_get_resource_type(
      ::Orthanc::DatabasePluginMessages::GetResourceType_Request* get_resource_type);
  ::Orthanc::DatabasePluginMessages::GetResourceType_Request* unsafe_arena_release_get_resource_type();

  // .Orthanc.DatabasePluginMessages.GetTotalCompressedSize.Request get_total_compressed_size = 121;
  bool has_get_total_compressed_size() const;
  private:
  bool _internal_has_get_total_compressed_size() const;
  public:
  void clear_get_total_compressed_size();
  const ::Orthanc::DatabasePluginMessages::GetTotalCompressedSize_Request& get_total_compressed_size() const;
  ::Orthanc::DatabasePluginMessages::GetTotalCompressedSize_Request* release_get_total_compressed_size();
  ::Orthanc::DatabasePluginMessages::GetTotalCompressedSize_Request* mutable_get_total_compressed_size();
  void set_allocated_get_total_compressed_size(::Orthanc::DatabasePluginMessages::GetTotalCompressedSize_Request* get_total_compressed_size);
  private:
  const ::Orthanc::DatabasePluginMessages::GetTotalCompressedSize_Request& _internal_get_total_compressed_size() const;
  ::Orthanc::DatabasePluginMessages::GetTotalCompressedSize_Request* _internal_mutable_get_total_compressed_size();
  public:
  void unsafe_arena_set_allocated_get_total_compressed_size(
      ::Orthanc::DatabasePluginMessages::GetTotalCompressedSize_Request* get_total_compressed_size);
  ::Orthanc::DatabasePluginMessages::GetTotalCompressedSize_Request* unsafe_arena_release_get_total_compressed_size();

  // .Orthanc.DatabasePluginMessages.GetTotalUncompressedSize.Request get_total_uncompressed_size = 122;
  bool has_get_total_uncompressed_size() const;
  private:
  bool _internal_has_get_total_uncompressed_size() const;
  public:
  void clear_get_total_uncompressed_size();
  const ::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize_Request& get_total_uncompressed_size() const;
  ::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize_Request* release_get_total_uncompressed_size();
  ::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize_Request* mutable_get_total_uncompressed_size();
  void set_allocated_get_total_uncompressed_size(::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize_Request* get_total_uncompressed_size);
  private:
  const ::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize_Request& _internal_get_total_uncompressed_size() const;
  ::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize_Request* _internal_mutable_get_total_uncompressed_size();
  public:
  void unsafe_arena_set_allocated_get_total_uncompressed_size(
      ::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize_Request* get_total_uncompressed_size);
  ::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize_Request* unsafe_arena_release_get_total_uncompressed_size();

  // .Orthanc.DatabasePluginMessages.IsProtectedPatient.Request is_protected_patient = 123;
  bool has_is_protected_patient() const;
  private:
  bool _internal_has_is_protected_patient() const;
  public:
  void clear_is_protected_patient();
  const ::Orthanc::DatabasePluginMessages::IsProtectedPatient_Request& is_protected_patient() const;
  ::Orthanc::DatabasePluginMessages::IsProtectedPatient_Request* release_is_protected_patient();
  ::Orthanc::DatabasePluginMessages::IsProtectedPatient_Request* mutable_is_protected_patient();
  void set_allocated_is_protected_patient(::Orthanc::DatabasePluginMessages::IsProtectedPatient_Request* is_protected_patient);
  private:
  const ::Orthanc::DatabasePluginMessages::IsProtectedPatient_Request& _internal_is_protected_patient() const;
  ::Orthanc::DatabasePluginMessages::IsProtectedPatient_Request* _internal_mutable_is_protected_patient();
  public:
  void unsafe_arena_set_allocated_is_protected_patient(
      ::Orthanc::DatabasePluginMessages::IsProtectedPatient_Request* is_protected_patient);
  ::Orthanc::DatabasePluginMessages::IsProtectedPatient_Request* unsafe_arena_release_is_protected_patient();

  // .Orthanc.DatabasePluginMessages.ListAvailableAttachments.Request list_available_attachments = 124;
  bool has_list_available_attachments() const;
  private:
  bool _internal_has_list_available_attachments() const;
  public:
  void clear_list_available_attachments();
  const ::Orthanc::DatabasePluginMessages::ListAvailableAttachments_Request& list_available_attachments() const;
  ::Orthanc::DatabasePluginMessages::ListAvailableAttachments_Request* release_list_available_attachments();
  ::Orthanc::DatabasePluginMessages::ListAvailableAttachments_Request* mutable_list_available_attachments();
  void set_allocated_list_available_attachments(::Orthanc::DatabasePluginMessages::ListAvailableAttachments_Request* list_available_attachments);
  private:
  const ::Orthanc::DatabasePluginMessages::ListAvailableAttachments_Request& _internal_list_available_attachments() const;
  ::Orthanc::DatabasePluginMessages::ListAvailableAttachments_Request* _internal_mutable_list_available_attachments();
  public:
  void unsafe_arena_set_allocated_list_available_attachments(
      ::Orthanc::DatabasePluginMessages::ListAvailableAttachments_Request* list_available_attachments);
  ::Orthanc::DatabasePluginMessages::ListAvailableAttachments_Request* unsafe_arena_release_list_available_attachments();

  // .Orthanc.DatabasePluginMessages.LogChange.Request log_change = 125;
  bool has_log_change() const;
  private:
  bool _internal_has_log_change() const;
  public:
  void clear_log_change();
  const ::Orthanc::DatabasePluginMessages::LogChange_Request& log_change() const;
  ::Orthanc::DatabasePluginMessages::LogChange_Request* release_log_change();
  ::Orthanc::DatabasePluginMessages::LogChange_Request* mutable_log_change();
  void set_allocated_log_change(::Orthanc::DatabasePluginMessages::LogChange_Request* log_change);
  private:
  const ::Orthanc::DatabasePluginMessages::LogChange_Request& _internal_log_change() const;
  ::Orthanc::DatabasePluginMessages::LogChange_Request* _internal_mutable_log_change();
  public:
  void unsafe_arena_set_allocated_log_change(
      ::Orthanc::DatabasePluginMessages::LogChange_Request* log_change);
  ::Orthanc::DatabasePluginMessages::LogChange_Request* unsafe_arena_release_log_change();

  // .Orthanc.DatabasePluginMessages.LogExportedResource.Request log_exported_resource = 126;
  bool has_log_exported_resource() const;
  private:
  bool _internal_has_log_exported_resource() const;
  public:
  void clear_log_exported_resource();
  const ::Orthanc::DatabasePluginMessages::LogExportedResource_Request& log_exported_resource() const;
  ::Orthanc::DatabasePluginMessages::LogExportedResource_Request* release_log_exported_resource();
  ::Orthanc::DatabasePluginMessages::LogExportedResource_Request* mutable_log_exported_resource();
  void set_allocated_log_exported_resource(::Orthanc::DatabasePluginMessages::LogExportedResource_Request* log_exported_resource);
  private:
  const ::Orthanc::DatabasePluginMessages::LogExportedResource_Request& _internal_log_exported_resource() const;
  ::Orthanc::DatabasePluginMessages::LogExportedResource_Request* _internal_mutable_log_exported_resource();
  public:
  void unsafe_arena_set_allocated_log_exported_resource(
      ::Orthanc::DatabasePluginMessages::LogExportedResource_Request* log_exported_resource);
  ::Orthanc::DatabasePluginMessages::LogExportedResource_Request* unsafe_arena_release_log_exported_resource();

  // .Orthanc.DatabasePluginMessages.LookupAttachment.Request lookup_attachment = 127;
  bool has_lookup_attachment() const;
  private:
  bool _internal_has_lookup_attachment() const;
  public:
  void clear_lookup_attachment();
  const ::Orthanc::DatabasePluginMessages::LookupAttachment_Request& lookup_attachment() const;
  ::Orthanc::DatabasePluginMessages::LookupAttachment_Request* release_lookup_attachment();
  ::Orthanc::DatabasePluginMessages::LookupAttachment_Request* mutable_lookup_attachment();
  void set_allocated_lookup_attachment(::Orthanc::DatabasePluginMessages::LookupAttachment_Request* lookup_attachment);
  private:
  const ::Orthanc::DatabasePluginMessages::LookupAttachment_Request& _internal_lookup_attachment() const;
  ::Orthanc::DatabasePluginMessages::LookupAttachment_Request* _internal_mutable_lookup_attachment();
  public:
  void unsafe_arena_set_allocated_lookup_attachment(
      ::Orthanc::DatabasePluginMessages::LookupAttachment_Request* lookup_attachment);
  ::Orthanc::DatabasePluginMessages::LookupAttachment_Request* unsafe_arena_release_lookup_attachment();

  // .Orthanc.DatabasePluginMessages.LookupGlobalProperty.Request lookup_global_property = 128;
  bool has_lookup_global_property() const;
  private:
  bool _internal_has_lookup_global_property() const;
  public:
  void clear_lookup_global_property();
  const ::Orthanc::DatabasePluginMessages::LookupGlobalProperty_Request& lookup_global_property() const;
  ::Orthanc::DatabasePluginMessages::LookupGlobalProperty_Request* release_lookup_global_property();
  ::Orthanc::DatabasePluginMessages::LookupGlobalProperty_Request* mutable_lookup_global_property();
  void set_allocated_lookup_global_property(::Orthanc::DatabasePluginMessages::LookupGlobalProperty_Request* lookup_global_property);
  private:
  const ::Orthanc::DatabasePluginMessages::LookupGlobalProperty_Request& _internal_lookup_global_property() const;
  ::Orthanc::DatabasePluginMessages::LookupGlobalProperty_Request* _internal_mutable_lookup_global_property();
  public:
  void unsafe_arena_set_allocated_lookup_global_property(
      ::Orthanc::DatabasePluginMessages::LookupGlobalProperty_Request* lookup_global_property);
  ::Orthanc::DatabasePluginMessages::LookupGlobalProperty_Request* unsafe_arena_release_lookup_global_property();

  // .Orthanc.DatabasePluginMessages.LookupMetadata.Request lookup_metadata = 129;
  bool has_lookup_metadata() const;
  private:
  bool _internal_has_lookup_metadata() const;
  public:
  void clear_lookup_metadata();
  const ::Orthanc::DatabasePluginMessages::LookupMetadata_Request& lookup_metadata() const;
  ::Orthanc::DatabasePluginMessages::LookupMetadata_Request* release_lookup_metadata();
  ::Orthanc::DatabasePluginMessages::LookupMetadata_Request* mutable_lookup_metadata();
  void set_allocated_lookup_metadata(::Orthanc::DatabasePluginMessages::LookupMetadata_Request* lookup_metadata);
  private:
  const ::Orthanc::DatabasePluginMessages::LookupMetadata_Request& _internal_lookup_metadata() const;
  ::Orthanc::DatabasePluginMessages::LookupMetadata_Request* _internal_mutable_lookup_metadata();
  public:
  void unsafe_arena_set_allocated_lookup_metadata(
      ::Orthanc::DatabasePluginMessages::LookupMetadata_Request* lookup_metadata);
  ::Orthanc::DatabasePluginMessages::LookupMetadata_Request* unsafe_arena_release_lookup_metadata();

  // .Orthanc.DatabasePluginMessages.LookupParent.Request lookup_parent = 130;
  bool has_lookup_parent() const;
  private:
  bool _internal_has_lookup_parent() const;
  public:
  void clear_lookup_parent();
  const ::Orthanc::DatabasePluginMessages::LookupParent_Request& lookup_parent() const;
  ::Orthanc::DatabasePluginMessages::LookupParent_Request* release_lookup_parent();
  ::Orthanc::DatabasePluginMessages::LookupParent_Request* mutable_lookup_parent();
  void set_allocated_lookup_parent(::Orthanc::DatabasePluginMessages::LookupParent_Request* lookup_parent);
  private:
  const ::Orthanc::DatabasePluginMessages::LookupParent_Request& _internal_lookup_parent() const;
  ::Orthanc::DatabasePluginMessages::LookupParent_Request* _internal_mutable_lookup_parent();
  public:
  void unsafe_arena_set_allocated_lookup_parent(
      ::Orthanc::DatabasePluginMessages::LookupParent_Request* lookup_parent);
  ::Orthanc::DatabasePluginMessages::LookupParent_Request* unsafe_arena_release_lookup_parent();

  // .Orthanc.DatabasePluginMessages.LookupResource.Request lookup_resource = 131;
  bool has_lookup_resource() const;
  private:
  bool _internal_has_lookup_resource() const;
  public:
  void clear_lookup_resource();
  const ::Orthanc::DatabasePluginMessages::LookupResource_Request& lookup_resource() const;
  ::Orthanc::DatabasePluginMessages::LookupResource_Request* release_lookup_resource();
  ::Orthanc::DatabasePluginMessages::LookupResource_Request* mutable_lookup_resource();
  void set_allocated_lookup_resource(::Orthanc::DatabasePluginMessages::LookupResource_Request* lookup_resource);
  private:
  const ::Orthanc::DatabasePluginMessages::LookupResource_Request& _internal_lookup_resource() const;
  ::Orthanc::DatabasePluginMessages::LookupResource_Request* _internal_mutable_lookup_resource();
  public:
  void unsafe_arena_set_allocated_lookup_resource(
      ::Orthanc::DatabasePluginMessages::LookupResource_Request* lookup_resource);
  ::Orthanc::DatabasePluginMessages::LookupResource_Request* unsafe_arena_release_lookup_resource();

  // .Orthanc.DatabasePluginMessages.SelectPatientToRecycle.Request select_patient_to_recycle = 132;
  bool has_select_patient_to_recycle() const;
  private:
  bool _internal_has_select_patient_to_recycle() const;
  public:
  void clear_select_patient_to_recycle();
  const ::Orthanc::DatabasePluginMessages::SelectPatientToRecycle_Request& select_patient_to_recycle() const;
  ::Orthanc::DatabasePluginMessages::SelectPatientToRecycle_Request* release_select_patient_to_recycle();
  ::Orthanc::DatabasePluginMessages::SelectPatientToRecycle_Request* mutable_select_patient_to_recycle();
  void set_allocated_select_patient_to_recycle(::Orthanc::DatabasePluginMessages::SelectPatientToRecycle_Request* select_patient_to_recycle);
  private:
  const ::Orthanc::DatabasePluginMessages::SelectPatientToRecycle_Request& _internal_select_patient_to_recycle() const;
  ::Orthanc::DatabasePluginMessages::SelectPatientToRecycle_Request* _internal_mutable_select_patient_to_recycle();
  public:
  void unsafe_arena_set_allocated_select_patient_to_recycle(
      ::Orthanc::DatabasePluginMessages::SelectPatientToRecycle_Request* select_patient_to_recycle);
  ::Orthanc::DatabasePluginMessages::SelectPatientToRecycle_Request* unsafe_arena_release_select_patient_to_recycle();

  // .Orthanc.DatabasePluginMessages.SelectPatientToRecycleWithAvoid.Request select_patient_to_recycle_with_avoid = 133;
  bool has_select_patient_to_recycle_with_avoid() const;
  private:
  bool _internal_has_select_patient_to_recycle_with_avoid() const;
  public:
  void clear_select_patient_to_recycle_with_avoid();
  const ::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid_Request& select_patient_to_recycle_with_avoid() const;
  ::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid_Request* release_select_patient_to_recycle_with_avoid();
  ::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid_Request* mutable_select_patient_to_recycle_with_avoid();
  void set_allocated_select_patient_to_recycle_with_avoid(::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid_Request* select_patient_to_recycle_with_avoid);
  private:
  const ::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid_Request& _internal_select_patient_to_recycle_with_avoid() const;
  ::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid_Request* _internal_mutable_select_patient_to_recycle_with_avoid();
  public:
  void unsafe_arena_set_allocated_select_patient_to_recycle_with_avoid(
      ::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid_Request* select_patient_to_recycle_with_avoid);
  ::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid_Request* unsafe_arena_release_select_patient_to_recycle_with_avoid();

  // .Orthanc.DatabasePluginMessages.SetGlobalProperty.Request set_global_property = 134;
  bool has_set_global_property() const;
  private:
  bool _internal_has_set_global_property() const;
  public:
  void clear_set_global_property();
  const ::Orthanc::DatabasePluginMessages::SetGlobalProperty_Request& set_global_property() const;
  ::Orthanc::DatabasePluginMessages::SetGlobalProperty_Request* release_set_global_property();
  ::Orthanc::DatabasePluginMessages::SetGlobalProperty_Request* mutable_set_global_property();
  void set_allocated_set_global_property(::Orthanc::DatabasePluginMessages::SetGlobalProperty_Request* set_global_property);
  private:
  const ::Orthanc::DatabasePluginMessages::SetGlobalProperty_Request& _internal_set_global_property() const;
  ::Orthanc::DatabasePluginMessages::SetGlobalProperty_Request* _internal_mutable_set_global_property();
  public:
  void unsafe_arena_set_allocated_set_global_property(
      ::Orthanc::DatabasePluginMessages::SetGlobalProperty_Request* set_global_property);
  ::Orthanc::DatabasePluginMessages::SetGlobalProperty_Request* unsafe_arena_release_set_global_property();

  // .Orthanc.DatabasePluginMessages.ClearMainDicomTags.Request clear_main_dicom_tags = 135;
  bool has_clear_main_dicom_tags() const;
  private:
  bool _internal_has_clear_main_dicom_tags() const;
  public:
  void clear_clear_main_dicom_tags();
  const ::Orthanc::DatabasePluginMessages::ClearMainDicomTags_Request& clear_main_dicom_tags() const;
  ::Orthanc::DatabasePluginMessages::ClearMainDicomTags_Request* release_clear_main_dicom_tags();
  ::Orthanc::DatabasePluginMessages::ClearMainDicomTags_Request* mutable_clear_main_dicom_tags();
  void set_allocated_clear_main_dicom_tags(::Orthanc::DatabasePluginMessages::ClearMainDicomTags_Request* clear_main_dicom_tags);
  private:
  const ::Orthanc::DatabasePluginMessages::ClearMainDicomTags_Request& _internal_clear_main_dicom_tags() const;
  ::Orthanc::DatabasePluginMessages::ClearMainDicomTags_Request* _internal_mutable_clear_main_dicom_tags();
  public:
  void unsafe_arena_set_allocated_clear_main_dicom_tags(
      ::Orthanc::DatabasePluginMessages::ClearMainDicomTags_Request* clear_main_dicom_tags);
  ::Orthanc::DatabasePluginMessages::ClearMainDicomTags_Request* unsafe_arena_release_clear_main_dicom_tags();

  // .Orthanc.DatabasePluginMessages.SetMetadata.Request set_metadata = 136;
  bool has_set_metadata() const;
  private:
  bool _internal_has_set_metadata() const;
  public:
  void clear_set_metadata();
  const ::Orthanc::DatabasePluginMessages::SetMetadata_Request& set_metadata() const;
  ::Orthanc::DatabasePluginMessages::SetMetadata_Request* release_set_metadata();
  ::Orthanc::DatabasePluginMessages::SetMetadata_Request* mutable_set_metadata();
  void set_allocated_set_metadata(::Orthanc::DatabasePluginMessages::SetMetadata_Request* set_metadata);
  private:
  const ::Orthanc::DatabasePluginMessages::SetMetadata_Request& _internal_set_metadata() const;
  ::Orthanc::DatabasePluginMessages::SetMetadata_Request* _internal_mutable_set_metadata();
  public:
  void unsafe_arena_set_allocated_set_metadata(
      ::Orthanc::DatabasePluginMessages::SetMetadata_Request* set_metadata);
  ::Orthanc::DatabasePluginMessages::SetMetadata_Request* unsafe_arena_release_set_metadata();

  // .Orthanc.DatabasePluginMessages.SetProtectedPatient.Request set_protected_patient = 137;
  bool has_set_protected_patient() const;
  private:
  bool _internal_has_set_protected_patient() const;
  public:
  void clear_set_protected_patient();
  const ::Orthanc::DatabasePluginMessages::SetProtectedPatient_Request& set_protected_patient() const;
  ::Orthanc::DatabasePluginMessages::SetProtectedPatient_Request* release_set_protected_patient();
  ::Orthanc::DatabasePluginMessages::SetProtectedPatient_Request* mutable_set_protected_patient();
  void set_allocated_set_protected_patient(::Orthanc::DatabasePluginMessages::SetProtectedPatient_Request* set_protected_patient);
  private:
  const ::Orthanc::DatabasePluginMessages::SetProtectedPatient_Request& _internal_set_protected_patient() const;
  ::Orthanc::DatabasePluginMessages::SetProtectedPatient_Request* _internal_mutable_set_protected_patient();
  public:
  void unsafe_arena_set_allocated_set_protected_patient(
      ::Orthanc::DatabasePluginMessages::SetProtectedPatient_Request* set_protected_patient);
  ::Orthanc::DatabasePluginMessages::SetProtectedPatient_Request* unsafe_arena_release_set_protected_patient();

  // .Orthanc.DatabasePluginMessages.IsDiskSizeAbove.Request is_disk_size_above = 138;
  bool has_is_disk_size_above() const;
  private:
  bool _internal_has_is_disk_size_above() const;
  public:
  void clear_is_disk_size_above();
  const ::Orthanc::DatabasePluginMessages::IsDiskSizeAbove_Request& is_disk_size_above() const;
  ::Orthanc::DatabasePluginMessages::IsDiskSizeAbove_Request* release_is_disk_size_above();
  ::Orthanc::DatabasePluginMessages::IsDiskSizeAbove_Request* mutable_is_disk_size_above();
  void set_allocated_is_disk_size_above(::Orthanc::DatabasePluginMessages::IsDiskSizeAbove_Request* is_disk_size_above);
  private:
  const ::Orthanc::DatabasePluginMessages::IsDiskSizeAbove_Request& _internal_is_disk_size_above() const;
  ::Orthanc::DatabasePluginMessages::IsDiskSizeAbove_Request* _internal_mutable_is_disk_size_above();
  public:
  void unsafe_arena_set_allocated_is_disk_size_above(
      ::Orthanc::DatabasePluginMessages::IsDiskSizeAbove_Request* is_disk_size_above);
  ::Orthanc::DatabasePluginMessages::IsDiskSizeAbove_Request* unsafe_arena_release_is_disk_size_above();

  // .Orthanc.DatabasePluginMessages.LookupResources.Request lookup_resources = 139;
  bool has_lookup_resources() const;
  private:
  bool _internal_has_lookup_resources() const;
  public:
  void clear_lookup_resources();
  const ::Orthanc::DatabasePluginMessages::LookupResources_Request& lookup_resources() const;
  ::Orthanc::DatabasePluginMessages::LookupResources_Request* release_lookup_resources();
  ::Orthanc::DatabasePluginMessages::LookupResources_Request* mutable_lookup_resources();
  void set_allocated_lookup_resources(::Orthanc::DatabasePluginMessages::LookupResources_Request* lookup_resources);
  private:
  const ::Orthanc::DatabasePluginMessages::LookupResources_Request& _internal_lookup_resources() const;
  ::Orthanc::DatabasePluginMessages::LookupResources_Request* _internal_mutable_lookup_resources();
  public:
  void unsafe_arena_set_allocated_lookup_resources(
      ::Orthanc::DatabasePluginMessages::LookupResources_Request* lookup_resources);
  ::Orthanc::DatabasePluginMessages::LookupResources_Request* unsafe_arena_release_lookup_resources();

  // .Orthanc.DatabasePluginMessages.CreateInstance.Request create_instance = 140;
  bool has_create_instance() const;
  private:
  bool _internal_has_create_instance() const;
  public:
  void clear_create_instance();
  const ::Orthanc::DatabasePluginMessages::CreateInstance_Request& create_instance() const;
  ::Orthanc::DatabasePluginMessages::CreateInstance_Request* release_create_instance();
  ::Orthanc::DatabasePluginMessages::CreateInstance_Request* mutable_create_instance();
  void set_allocated_create_instance(::Orthanc::DatabasePluginMessages::CreateInstance_Request* create_instance);
  private:
  const ::Orthanc::DatabasePluginMessages::CreateInstance_Request& _internal_create_instance() const;
  ::Orthanc::DatabasePluginMessages::CreateInstance_Request* _internal_mutable_create_instance();
  public:
  void unsafe_arena_set_allocated_create_instance(
      ::Orthanc::DatabasePluginMessages::CreateInstance_Request* create_instance);
  ::Orthanc::DatabasePluginMessages::CreateInstance_Request* unsafe_arena_release_create_instance();

  // .Orthanc.DatabasePluginMessages.SetResourcesContent.Request set_resources_content = 141;
  bool has_set_resources_content() const;
  private:
  bool _internal_has_set_resources_content() const;
  public:
  void clear_set_resources_content();
  const ::Orthanc::DatabasePluginMessages::SetResourcesContent_Request& set_resources_content() const;
  ::Orthanc::DatabasePluginMessages::SetResourcesContent_Request* release_set_resources_content();
  ::Orthanc::DatabasePluginMessages::SetResourcesContent_Request* mutable_set_resources_content();
  void set_allocated_set_resources_content(::Orthanc::DatabasePluginMessages::SetResourcesContent_Request* set_resources_content);
  private:
  const ::Orthanc::DatabasePluginMessages::SetResourcesContent_Request& _internal_set_resources_content() const;
  ::Orthanc::DatabasePluginMessages::SetResourcesContent_Request* _internal_mutable_set_resources_content();
  public:
  void unsafe_arena_set_allocated_set_resources_content(
      ::Orthanc::DatabasePluginMessages::SetResourcesContent_Request* set_resources_content);
  ::Orthanc::DatabasePluginMessages::SetResourcesContent_Request* unsafe_arena_release_set_resources_content();

  // .Orthanc.DatabasePluginMessages.GetChildrenMetadata.Request get_children_metadata = 142;
  bool has_get_children_metadata() const;
  private:
  bool _internal_has_get_children_metadata() const;
  public:
  void clear_get_children_metadata();
  const ::Orthanc::DatabasePluginMessages::GetChildrenMetadata_Request& get_children_metadata() const;
  ::Orthanc::DatabasePluginMessages::GetChildrenMetadata_Request* release_get_children_metadata();
  ::Orthanc::DatabasePluginMessages::GetChildrenMetadata_Request* mutable_get_children_metadata();
  void set_allocated_get_children_metadata(::Orthanc::DatabasePluginMessages::GetChildrenMetadata_Request* get_children_metadata);
  private:
  const ::Orthanc::DatabasePluginMessages::GetChildrenMetadata_Request& _internal_get_children_metadata() const;
  ::Orthanc::DatabasePluginMessages::GetChildrenMetadata_Request* _internal_mutable_get_children_metadata();
  public:
  void unsafe_arena_set_allocated_get_children_metadata(
      ::Orthanc::DatabasePluginMessages::GetChildrenMetadata_Request* get_children_metadata);
  ::Orthanc::DatabasePluginMessages::GetChildrenMetadata_Request* unsafe_arena_release_get_children_metadata();

  // .Orthanc.DatabasePluginMessages.GetLastChangeIndex.Request get_last_change_index = 143;
  bool has_get_last_change_index() const;
  private:
  bool _internal_has_get_last_change_index() const;
  public:
  void clear_get_last_change_index();
  const ::Orthanc::DatabasePluginMessages::GetLastChangeIndex_Request& get_last_change_index() const;
  ::Orthanc::DatabasePluginMessages::GetLastChangeIndex_Request* release_get_last_change_index();
  ::Orthanc::DatabasePluginMessages::GetLastChangeIndex_Request* mutable_get_last_change_index();
  void set_allocated_get_last_change_index(::Orthanc::DatabasePluginMessages::GetLastChangeIndex_Request* get_last_change_index);
  private:
  const ::Orthanc::DatabasePluginMessages::GetLastChangeIndex_Request& _internal_get_last_change_index() const;
  ::Orthanc::DatabasePluginMessages::GetLastChangeIndex_Request* _internal_mutable_get_last_change_index();
  public:
  void unsafe_arena_set_allocated_get_last_change_index(
      ::Orthanc::DatabasePluginMessages::GetLastChangeIndex_Request* get_last_change_index);
  ::Orthanc::DatabasePluginMessages::GetLastChangeIndex_Request* unsafe_arena_release_get_last_change_index();

  // .Orthanc.DatabasePluginMessages.LookupResourceAndParent.Request lookup_resource_and_parent = 144;
  bool has_lookup_resource_and_parent() const;
  private:
  bool _internal_has_lookup_resource_and_parent() const;
  public:
  void clear_lookup_resource_and_parent();
  const ::Orthanc::DatabasePluginMessages::LookupResourceAndParent_Request& lookup_resource_and_parent() const;
  ::Orthanc::DatabasePluginMessages::LookupResourceAndParent_Request* release_lookup_resource_and_parent();
  ::Orthanc::DatabasePluginMessages::LookupResourceAndParent_Request* mutable_lookup_resource_and_parent();
  void set_allocated_lookup_resource_and_parent(::Orthanc::DatabasePluginMessages::LookupResourceAndParent_Request* lookup_resource_and_parent);
  private:
  const ::Orthanc::DatabasePluginMessages::LookupResourceAndParent_Request& _internal_lookup_resource_and_parent() const;
  ::Orthanc::DatabasePluginMessages::LookupResourceAndParent_Request* _internal_mutable_lookup_resource_and_parent();
  public:
  void unsafe_arena_set_allocated_lookup_resource_and_parent(
      ::Orthanc::DatabasePluginMessages::LookupResourceAndParent_Request* lookup_resource_and_parent);
  ::Orthanc::DatabasePluginMessages::LookupResourceAndParent_Request* unsafe_arena_release_lookup_resource_and_parent();

  // .Orthanc.DatabasePluginMessages.AddLabel.Request add_label = 145;
  bool has_add_label() const;
  private:
  bool _internal_has_add_label() const;
  public:
  void clear_add_label();
  const ::Orthanc::DatabasePluginMessages::AddLabel_Request& add_label() const;
  ::Orthanc::DatabasePluginMessages::AddLabel_Request* release_add_label();
  ::Orthanc::DatabasePluginMessages::AddLabel_Request* mutable_add_label();
  void set_allocated_add_label(::Orthanc::DatabasePluginMessages::AddLabel_Request* add_label);
  private:
  const ::Orthanc::DatabasePluginMessages::AddLabel_Request& _internal_add_label() const;
  ::Orthanc::DatabasePluginMessages::AddLabel_Request* _internal_mutable_add_label();
  public:
  void unsafe_arena_set_allocated_add_label(
      ::Orthanc::DatabasePluginMessages::AddLabel_Request* add_label);
  ::Orthanc::DatabasePluginMessages::AddLabel_Request* unsafe_arena_release_add_label();

  // .Orthanc.DatabasePluginMessages.RemoveLabel.Request remove_label = 146;
  bool has_remove_label() const;
  private:
  bool _internal_has_remove_label() const;
  public:
  void clear_remove_label();
  const ::Orthanc::DatabasePluginMessages::RemoveLabel_Request& remove_label() const;
  ::Orthanc::DatabasePluginMessages::RemoveLabel_Request* release_remove_label();
  ::Orthanc::DatabasePluginMessages::RemoveLabel_Request* mutable_remove_label();
  void set_allocated_remove_label(::Orthanc::DatabasePluginMessages::RemoveLabel_Request* remove_label);
  private:
  const ::Orthanc::DatabasePluginMessages::RemoveLabel_Request& _internal_remove_label() const;
  ::Orthanc::DatabasePluginMessages::RemoveLabel_Request* _internal_mutable_remove_label();
  public:
  void unsafe_arena_set_allocated_remove_label(
      ::Orthanc::DatabasePluginMessages::RemoveLabel_Request* remove_label);
  ::Orthanc::DatabasePluginMessages::RemoveLabel_Request* unsafe_arena_release_remove_label();

  // .Orthanc.DatabasePluginMessages.ListLabels.Request list_labels = 147;
  bool has_list_labels() const;
  private:
  bool _internal_has_list_labels() const;
  public:
  void clear_list_labels();
  const ::Orthanc::DatabasePluginMessages::ListLabels_Request& list_labels() const;
  ::Orthanc::DatabasePluginMessages::ListLabels_Request* release_list_labels();
  ::Orthanc::DatabasePluginMessages::ListLabels_Request* mutable_list_labels();
  void set_allocated_list_labels(::Orthanc::DatabasePluginMessages::ListLabels_Request* list_labels);
  private:
  const ::Orthanc::DatabasePluginMessages::ListLabels_Request& _internal_list_labels() const;
  ::Orthanc::DatabasePluginMessages::ListLabels_Request* _internal_mutable_list_labels();
  public:
  void unsafe_arena_set_allocated_list_labels(
      ::Orthanc::DatabasePluginMessages::ListLabels_Request* list_labels);
  ::Orthanc::DatabasePluginMessages::ListLabels_Request* unsafe_arena_release_list_labels();

  // .Orthanc.DatabasePluginMessages.IncrementGlobalProperty.Request increment_global_property = 148;
  bool has_increment_global_property() const;
  private:
  bool _internal_has_increment_global_property() const;
  public:
  void clear_increment_global_property();
  const ::Orthanc::DatabasePluginMessages::IncrementGlobalProperty_Request& increment_global_property() const;
  ::Orthanc::DatabasePluginMessages::IncrementGlobalProperty_Request* release_increment_global_property();
  ::Orthanc::DatabasePluginMessages::IncrementGlobalProperty_Request* mutable_increment_global_property();
  void set_allocated_increment_global_property(::Orthanc::DatabasePluginMessages::IncrementGlobalProperty_Request* increment_global_property);
  private:
  const ::Orthanc::DatabasePluginMessages::IncrementGlobalProperty_Request& _internal_increment_global_property() const;
  ::Orthanc::DatabasePluginMessages::IncrementGlobalProperty_Request* _internal_mutable_increment_global_property();
  public:
  void unsafe_arena_set_allocated_increment_global_property(
      ::Orthanc::DatabasePluginMessages::IncrementGlobalProperty_Request* increment_global_property);
  ::Orthanc::DatabasePluginMessages::IncrementGlobalProperty_Request* unsafe_arena_release_increment_global_property();

  // .Orthanc.DatabasePluginMessages.UpdateAndGetStatistics.Request update_and_get_statistics = 149;
  bool has_update_and_get_statistics() const;
  private:
  bool _internal_has_update_and_get_statistics() const;
  public:
  void clear_update_and_get_statistics();
  const ::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics_Request& update_and_get_statistics() const;
  ::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics_Request* release_update_and_get_statistics();
  ::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics_Request* mutable_update_and_get_statistics();
  void set_allocated_update_and_get_statistics(::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics_Request* update_and_get_statistics);
  private:
  const ::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics_Request& _internal_update_and_get_statistics() const;
  ::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics_Request* _internal_mutable_update_and_get_statistics();
  public:
  void unsafe_arena_set_allocated_update_and_get_statistics(
      ::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics_Request* update_and_get_statistics);
  ::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics_Request* unsafe_arena_release_update_and_get_statistics();

  // sfixed64 transaction = 1;
  void clear_transaction();
  ::PROTOBUF_NAMESPACE_ID::int64 transaction() const;
  void set_transaction(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_transaction() const;
  void _internal_set_transaction(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .Orthanc.DatabasePluginMessages.TransactionOperation operation = 2;
  void clear_operation();
  ::Orthanc::DatabasePluginMessages::TransactionOperation operation() const;
  void set_operation(::Orthanc::DatabasePluginMessages::TransactionOperation value);
  private:
  ::Orthanc::DatabasePluginMessages::TransactionOperation _internal_operation() const;
  void _internal_set_operation(::Orthanc::DatabasePluginMessages::TransactionOperation value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.TransactionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Orthanc::DatabasePluginMessages::Rollback_Request* rollback_;
  ::Orthanc::DatabasePluginMessages::Commit_Request* commit_;
  ::Orthanc::DatabasePluginMessages::AddAttachment_Request* add_attachment_;
  ::Orthanc::DatabasePluginMessages::ClearChanges_Request* clear_changes_;
  ::Orthanc::DatabasePluginMessages::ClearExportedResources_Request* clear_exported_resources_;
  ::Orthanc::DatabasePluginMessages::DeleteAttachment_Request* delete_attachment_;
  ::Orthanc::DatabasePluginMessages::DeleteMetadata_Request* delete_metadata_;
  ::Orthanc::DatabasePluginMessages::DeleteResource_Request* delete_resource_;
  ::Orthanc::DatabasePluginMessages::GetAllMetadata_Request* get_all_metadata_;
  ::Orthanc::DatabasePluginMessages::GetAllPublicIds_Request* get_all_public_ids_;
  ::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits_Request* get_all_public_ids_with_limits_;
  ::Orthanc::DatabasePluginMessages::GetChanges_Request* get_changes_;
  ::Orthanc::DatabasePluginMessages::GetChildrenInternalId_Request* get_children_internal_id_;
  ::Orthanc::DatabasePluginMessages::GetChildrenPublicId_Request* get_children_public_id_;
  ::Orthanc::DatabasePluginMessages::GetExportedResources_Request* get_exported_resources_;
  ::Orthanc::DatabasePluginMessages::GetLastChange_Request* get_last_change_;
  ::Orthanc::DatabasePluginMessages::GetLastExportedResource_Request* get_last_exported_resource_;
  ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Request* get_main_dicom_tags_;
  ::Orthanc::DatabasePluginMessages::GetPublicId_Request* get_public_id_;
  ::Orthanc::DatabasePluginMessages::GetResourcesCount_Request* get_resources_count_;
  ::Orthanc::DatabasePluginMessages::GetResourceType_Request* get_resource_type_;
  ::Orthanc::DatabasePluginMessages::GetTotalCompressedSize_Request* get_total_compressed_size_;
  ::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize_Request* get_total_uncompressed_size_;
  ::Orthanc::DatabasePluginMessages::IsProtectedPatient_Request* is_protected_patient_;
  ::Orthanc::DatabasePluginMessages::ListAvailableAttachments_Request* list_available_attachments_;
  ::Orthanc::DatabasePluginMessages::LogChange_Request* log_change_;
  ::Orthanc::DatabasePluginMessages::LogExportedResource_Request* log_exported_resource_;
  ::Orthanc::DatabasePluginMessages::LookupAttachment_Request* lookup_attachment_;
  ::Orthanc::DatabasePluginMessages::LookupGlobalProperty_Request* lookup_global_property_;
  ::Orthanc::DatabasePluginMessages::LookupMetadata_Request* lookup_metadata_;
  ::Orthanc::DatabasePluginMessages::LookupParent_Request* lookup_parent_;
  ::Orthanc::DatabasePluginMessages::LookupResource_Request* lookup_resource_;
  ::Orthanc::DatabasePluginMessages::SelectPatientToRecycle_Request* select_patient_to_recycle_;
  ::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid_Request* select_patient_to_recycle_with_avoid_;
  ::Orthanc::DatabasePluginMessages::SetGlobalProperty_Request* set_global_property_;
  ::Orthanc::DatabasePluginMessages::ClearMainDicomTags_Request* clear_main_dicom_tags_;
  ::Orthanc::DatabasePluginMessages::SetMetadata_Request* set_metadata_;
  ::Orthanc::DatabasePluginMessages::SetProtectedPatient_Request* set_protected_patient_;
  ::Orthanc::DatabasePluginMessages::IsDiskSizeAbove_Request* is_disk_size_above_;
  ::Orthanc::DatabasePluginMessages::LookupResources_Request* lookup_resources_;
  ::Orthanc::DatabasePluginMessages::CreateInstance_Request* create_instance_;
  ::Orthanc::DatabasePluginMessages::SetResourcesContent_Request* set_resources_content_;
  ::Orthanc::DatabasePluginMessages::GetChildrenMetadata_Request* get_children_metadata_;
  ::Orthanc::DatabasePluginMessages::GetLastChangeIndex_Request* get_last_change_index_;
  ::Orthanc::DatabasePluginMessages::LookupResourceAndParent_Request* lookup_resource_and_parent_;
  ::Orthanc::DatabasePluginMessages::AddLabel_Request* add_label_;
  ::Orthanc::DatabasePluginMessages::RemoveLabel_Request* remove_label_;
  ::Orthanc::DatabasePluginMessages::ListLabels_Request* list_labels_;
  ::Orthanc::DatabasePluginMessages::IncrementGlobalProperty_Request* increment_global_property_;
  ::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics_Request* update_and_get_statistics_;
  ::PROTOBUF_NAMESPACE_ID::int64 transaction_;
  int operation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class TransactionResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.TransactionResponse) */ {
 public:
  inline TransactionResponse() : TransactionResponse(nullptr) {};
  virtual ~TransactionResponse();

  TransactionResponse(const TransactionResponse& from);
  TransactionResponse(TransactionResponse&& from) noexcept
    : TransactionResponse() {
    *this = ::std::move(from);
  }

  inline TransactionResponse& operator=(const TransactionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionResponse& operator=(TransactionResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const TransactionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransactionResponse* internal_default_instance() {
    return reinterpret_cast<const TransactionResponse*>(
               &_TransactionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    187;

  friend void swap(TransactionResponse& a, TransactionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransactionResponse* New() const final {
    return CreateMaybeMessage<TransactionResponse>(nullptr);
  }

  TransactionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransactionResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TransactionResponse& from);
  void MergeFrom(const TransactionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TransactionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.TransactionResponse";
  }
  protected:
  explicit TransactionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRollbackFieldNumber = 100,
    kCommitFieldNumber = 101,
    kAddAttachmentFieldNumber = 102,
    kClearChangesFieldNumber = 103,
    kClearExportedResourcesFieldNumber = 104,
    kDeleteAttachmentFieldNumber = 105,
    kDeleteMetadataFieldNumber = 106,
    kDeleteResourceFieldNumber = 107,
    kGetAllMetadataFieldNumber = 108,
    kGetAllPublicIdsFieldNumber = 109,
    kGetAllPublicIdsWithLimitsFieldNumber = 110,
    kGetChangesFieldNumber = 111,
    kGetChildrenInternalIdFieldNumber = 112,
    kGetChildrenPublicIdFieldNumber = 113,
    kGetExportedResourcesFieldNumber = 114,
    kGetLastChangeFieldNumber = 115,
    kGetLastExportedResourceFieldNumber = 116,
    kGetMainDicomTagsFieldNumber = 117,
    kGetPublicIdFieldNumber = 118,
    kGetResourcesCountFieldNumber = 119,
    kGetResourceTypeFieldNumber = 120,
    kGetTotalCompressedSizeFieldNumber = 121,
    kGetTotalUncompressedSizeFieldNumber = 122,
    kIsProtectedPatientFieldNumber = 123,
    kListAvailableAttachmentsFieldNumber = 124,
    kLogChangeFieldNumber = 125,
    kLogExportedResourceFieldNumber = 126,
    kLookupAttachmentFieldNumber = 127,
    kLookupGlobalPropertyFieldNumber = 128,
    kLookupMetadataFieldNumber = 129,
    kLookupParentFieldNumber = 130,
    kLookupResourceFieldNumber = 131,
    kSelectPatientToRecycleFieldNumber = 132,
    kSelectPatientToRecycleWithAvoidFieldNumber = 133,
    kSetGlobalPropertyFieldNumber = 134,
    kClearMainDicomTagsFieldNumber = 135,
    kSetMetadataFieldNumber = 136,
    kSetProtectedPatientFieldNumber = 137,
    kIsDiskSizeAboveFieldNumber = 138,
    kLookupResourcesFieldNumber = 139,
    kCreateInstanceFieldNumber = 140,
    kSetResourcesContentFieldNumber = 141,
    kGetChildrenMetadataFieldNumber = 142,
    kGetLastChangeIndexFieldNumber = 143,
    kLookupResourceAndParentFieldNumber = 144,
    kAddLabelFieldNumber = 145,
    kRemoveLabelFieldNumber = 146,
    kListLabelsFieldNumber = 147,
    kIncrementGlobalPropertyFieldNumber = 148,
    kUpdateAndGetStatisticsFieldNumber = 149,
  };
  // .Orthanc.DatabasePluginMessages.Rollback.Response rollback = 100;
  bool has_rollback() const;
  private:
  bool _internal_has_rollback() const;
  public:
  void clear_rollback();
  const ::Orthanc::DatabasePluginMessages::Rollback_Response& rollback() const;
  ::Orthanc::DatabasePluginMessages::Rollback_Response* release_rollback();
  ::Orthanc::DatabasePluginMessages::Rollback_Response* mutable_rollback();
  void set_allocated_rollback(::Orthanc::DatabasePluginMessages::Rollback_Response* rollback);
  private:
  const ::Orthanc::DatabasePluginMessages::Rollback_Response& _internal_rollback() const;
  ::Orthanc::DatabasePluginMessages::Rollback_Response* _internal_mutable_rollback();
  public:
  void unsafe_arena_set_allocated_rollback(
      ::Orthanc::DatabasePluginMessages::Rollback_Response* rollback);
  ::Orthanc::DatabasePluginMessages::Rollback_Response* unsafe_arena_release_rollback();

  // .Orthanc.DatabasePluginMessages.Commit.Response commit = 101;
  bool has_commit() const;
  private:
  bool _internal_has_commit() const;
  public:
  void clear_commit();
  const ::Orthanc::DatabasePluginMessages::Commit_Response& commit() const;
  ::Orthanc::DatabasePluginMessages::Commit_Response* release_commit();
  ::Orthanc::DatabasePluginMessages::Commit_Response* mutable_commit();
  void set_allocated_commit(::Orthanc::DatabasePluginMessages::Commit_Response* commit);
  private:
  const ::Orthanc::DatabasePluginMessages::Commit_Response& _internal_commit() const;
  ::Orthanc::DatabasePluginMessages::Commit_Response* _internal_mutable_commit();
  public:
  void unsafe_arena_set_allocated_commit(
      ::Orthanc::DatabasePluginMessages::Commit_Response* commit);
  ::Orthanc::DatabasePluginMessages::Commit_Response* unsafe_arena_release_commit();

  // .Orthanc.DatabasePluginMessages.AddAttachment.Response add_attachment = 102;
  bool has_add_attachment() const;
  private:
  bool _internal_has_add_attachment() const;
  public:
  void clear_add_attachment();
  const ::Orthanc::DatabasePluginMessages::AddAttachment_Response& add_attachment() const;
  ::Orthanc::DatabasePluginMessages::AddAttachment_Response* release_add_attachment();
  ::Orthanc::DatabasePluginMessages::AddAttachment_Response* mutable_add_attachment();
  void set_allocated_add_attachment(::Orthanc::DatabasePluginMessages::AddAttachment_Response* add_attachment);
  private:
  const ::Orthanc::DatabasePluginMessages::AddAttachment_Response& _internal_add_attachment() const;
  ::Orthanc::DatabasePluginMessages::AddAttachment_Response* _internal_mutable_add_attachment();
  public:
  void unsafe_arena_set_allocated_add_attachment(
      ::Orthanc::DatabasePluginMessages::AddAttachment_Response* add_attachment);
  ::Orthanc::DatabasePluginMessages::AddAttachment_Response* unsafe_arena_release_add_attachment();

  // .Orthanc.DatabasePluginMessages.ClearChanges.Response clear_changes = 103;
  bool has_clear_changes() const;
  private:
  bool _internal_has_clear_changes() const;
  public:
  void clear_clear_changes();
  const ::Orthanc::DatabasePluginMessages::ClearChanges_Response& clear_changes() const;
  ::Orthanc::DatabasePluginMessages::ClearChanges_Response* release_clear_changes();
  ::Orthanc::DatabasePluginMessages::ClearChanges_Response* mutable_clear_changes();
  void set_allocated_clear_changes(::Orthanc::DatabasePluginMessages::ClearChanges_Response* clear_changes);
  private:
  const ::Orthanc::DatabasePluginMessages::ClearChanges_Response& _internal_clear_changes() const;
  ::Orthanc::DatabasePluginMessages::ClearChanges_Response* _internal_mutable_clear_changes();
  public:
  void unsafe_arena_set_allocated_clear_changes(
      ::Orthanc::DatabasePluginMessages::ClearChanges_Response* clear_changes);
  ::Orthanc::DatabasePluginMessages::ClearChanges_Response* unsafe_arena_release_clear_changes();

  // .Orthanc.DatabasePluginMessages.ClearExportedResources.Response clear_exported_resources = 104;
  bool has_clear_exported_resources() const;
  private:
  bool _internal_has_clear_exported_resources() const;
  public:
  void clear_clear_exported_resources();
  const ::Orthanc::DatabasePluginMessages::ClearExportedResources_Response& clear_exported_resources() const;
  ::Orthanc::DatabasePluginMessages::ClearExportedResources_Response* release_clear_exported_resources();
  ::Orthanc::DatabasePluginMessages::ClearExportedResources_Response* mutable_clear_exported_resources();
  void set_allocated_clear_exported_resources(::Orthanc::DatabasePluginMessages::ClearExportedResources_Response* clear_exported_resources);
  private:
  const ::Orthanc::DatabasePluginMessages::ClearExportedResources_Response& _internal_clear_exported_resources() const;
  ::Orthanc::DatabasePluginMessages::ClearExportedResources_Response* _internal_mutable_clear_exported_resources();
  public:
  void unsafe_arena_set_allocated_clear_exported_resources(
      ::Orthanc::DatabasePluginMessages::ClearExportedResources_Response* clear_exported_resources);
  ::Orthanc::DatabasePluginMessages::ClearExportedResources_Response* unsafe_arena_release_clear_exported_resources();

  // .Orthanc.DatabasePluginMessages.DeleteAttachment.Response delete_attachment = 105;
  bool has_delete_attachment() const;
  private:
  bool _internal_has_delete_attachment() const;
  public:
  void clear_delete_attachment();
  const ::Orthanc::DatabasePluginMessages::DeleteAttachment_Response& delete_attachment() const;
  ::Orthanc::DatabasePluginMessages::DeleteAttachment_Response* release_delete_attachment();
  ::Orthanc::DatabasePluginMessages::DeleteAttachment_Response* mutable_delete_attachment();
  void set_allocated_delete_attachment(::Orthanc::DatabasePluginMessages::DeleteAttachment_Response* delete_attachment);
  private:
  const ::Orthanc::DatabasePluginMessages::DeleteAttachment_Response& _internal_delete_attachment() const;
  ::Orthanc::DatabasePluginMessages::DeleteAttachment_Response* _internal_mutable_delete_attachment();
  public:
  void unsafe_arena_set_allocated_delete_attachment(
      ::Orthanc::DatabasePluginMessages::DeleteAttachment_Response* delete_attachment);
  ::Orthanc::DatabasePluginMessages::DeleteAttachment_Response* unsafe_arena_release_delete_attachment();

  // .Orthanc.DatabasePluginMessages.DeleteMetadata.Response delete_metadata = 106;
  bool has_delete_metadata() const;
  private:
  bool _internal_has_delete_metadata() const;
  public:
  void clear_delete_metadata();
  const ::Orthanc::DatabasePluginMessages::DeleteMetadata_Response& delete_metadata() const;
  ::Orthanc::DatabasePluginMessages::DeleteMetadata_Response* release_delete_metadata();
  ::Orthanc::DatabasePluginMessages::DeleteMetadata_Response* mutable_delete_metadata();
  void set_allocated_delete_metadata(::Orthanc::DatabasePluginMessages::DeleteMetadata_Response* delete_metadata);
  private:
  const ::Orthanc::DatabasePluginMessages::DeleteMetadata_Response& _internal_delete_metadata() const;
  ::Orthanc::DatabasePluginMessages::DeleteMetadata_Response* _internal_mutable_delete_metadata();
  public:
  void unsafe_arena_set_allocated_delete_metadata(
      ::Orthanc::DatabasePluginMessages::DeleteMetadata_Response* delete_metadata);
  ::Orthanc::DatabasePluginMessages::DeleteMetadata_Response* unsafe_arena_release_delete_metadata();

  // .Orthanc.DatabasePluginMessages.DeleteResource.Response delete_resource = 107;
  bool has_delete_resource() const;
  private:
  bool _internal_has_delete_resource() const;
  public:
  void clear_delete_resource();
  const ::Orthanc::DatabasePluginMessages::DeleteResource_Response& delete_resource() const;
  ::Orthanc::DatabasePluginMessages::DeleteResource_Response* release_delete_resource();
  ::Orthanc::DatabasePluginMessages::DeleteResource_Response* mutable_delete_resource();
  void set_allocated_delete_resource(::Orthanc::DatabasePluginMessages::DeleteResource_Response* delete_resource);
  private:
  const ::Orthanc::DatabasePluginMessages::DeleteResource_Response& _internal_delete_resource() const;
  ::Orthanc::DatabasePluginMessages::DeleteResource_Response* _internal_mutable_delete_resource();
  public:
  void unsafe_arena_set_allocated_delete_resource(
      ::Orthanc::DatabasePluginMessages::DeleteResource_Response* delete_resource);
  ::Orthanc::DatabasePluginMessages::DeleteResource_Response* unsafe_arena_release_delete_resource();

  // .Orthanc.DatabasePluginMessages.GetAllMetadata.Response get_all_metadata = 108;
  bool has_get_all_metadata() const;
  private:
  bool _internal_has_get_all_metadata() const;
  public:
  void clear_get_all_metadata();
  const ::Orthanc::DatabasePluginMessages::GetAllMetadata_Response& get_all_metadata() const;
  ::Orthanc::DatabasePluginMessages::GetAllMetadata_Response* release_get_all_metadata();
  ::Orthanc::DatabasePluginMessages::GetAllMetadata_Response* mutable_get_all_metadata();
  void set_allocated_get_all_metadata(::Orthanc::DatabasePluginMessages::GetAllMetadata_Response* get_all_metadata);
  private:
  const ::Orthanc::DatabasePluginMessages::GetAllMetadata_Response& _internal_get_all_metadata() const;
  ::Orthanc::DatabasePluginMessages::GetAllMetadata_Response* _internal_mutable_get_all_metadata();
  public:
  void unsafe_arena_set_allocated_get_all_metadata(
      ::Orthanc::DatabasePluginMessages::GetAllMetadata_Response* get_all_metadata);
  ::Orthanc::DatabasePluginMessages::GetAllMetadata_Response* unsafe_arena_release_get_all_metadata();

  // .Orthanc.DatabasePluginMessages.GetAllPublicIds.Response get_all_public_ids = 109;
  bool has_get_all_public_ids() const;
  private:
  bool _internal_has_get_all_public_ids() const;
  public:
  void clear_get_all_public_ids();
  const ::Orthanc::DatabasePluginMessages::GetAllPublicIds_Response& get_all_public_ids() const;
  ::Orthanc::DatabasePluginMessages::GetAllPublicIds_Response* release_get_all_public_ids();
  ::Orthanc::DatabasePluginMessages::GetAllPublicIds_Response* mutable_get_all_public_ids();
  void set_allocated_get_all_public_ids(::Orthanc::DatabasePluginMessages::GetAllPublicIds_Response* get_all_public_ids);
  private:
  const ::Orthanc::DatabasePluginMessages::GetAllPublicIds_Response& _internal_get_all_public_ids() const;
  ::Orthanc::DatabasePluginMessages::GetAllPublicIds_Response* _internal_mutable_get_all_public_ids();
  public:
  void unsafe_arena_set_allocated_get_all_public_ids(
      ::Orthanc::DatabasePluginMessages::GetAllPublicIds_Response* get_all_public_ids);
  ::Orthanc::DatabasePluginMessages::GetAllPublicIds_Response* unsafe_arena_release_get_all_public_ids();

  // .Orthanc.DatabasePluginMessages.GetAllPublicIdsWithLimits.Response get_all_public_ids_with_limits = 110;
  bool has_get_all_public_ids_with_limits() const;
  private:
  bool _internal_has_get_all_public_ids_with_limits() const;
  public:
  void clear_get_all_public_ids_with_limits();
  const ::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits_Response& get_all_public_ids_with_limits() const;
  ::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits_Response* release_get_all_public_ids_with_limits();
  ::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits_Response* mutable_get_all_public_ids_with_limits();
  void set_allocated_get_all_public_ids_with_limits(::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits_Response* get_all_public_ids_with_limits);
  private:
  const ::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits_Response& _internal_get_all_public_ids_with_limits() const;
  ::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits_Response* _internal_mutable_get_all_public_ids_with_limits();
  public:
  void unsafe_arena_set_allocated_get_all_public_ids_with_limits(
      ::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits_Response* get_all_public_ids_with_limits);
  ::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits_Response* unsafe_arena_release_get_all_public_ids_with_limits();

  // .Orthanc.DatabasePluginMessages.GetChanges.Response get_changes = 111;
  bool has_get_changes() const;
  private:
  bool _internal_has_get_changes() const;
  public:
  void clear_get_changes();
  const ::Orthanc::DatabasePluginMessages::GetChanges_Response& get_changes() const;
  ::Orthanc::DatabasePluginMessages::GetChanges_Response* release_get_changes();
  ::Orthanc::DatabasePluginMessages::GetChanges_Response* mutable_get_changes();
  void set_allocated_get_changes(::Orthanc::DatabasePluginMessages::GetChanges_Response* get_changes);
  private:
  const ::Orthanc::DatabasePluginMessages::GetChanges_Response& _internal_get_changes() const;
  ::Orthanc::DatabasePluginMessages::GetChanges_Response* _internal_mutable_get_changes();
  public:
  void unsafe_arena_set_allocated_get_changes(
      ::Orthanc::DatabasePluginMessages::GetChanges_Response* get_changes);
  ::Orthanc::DatabasePluginMessages::GetChanges_Response* unsafe_arena_release_get_changes();

  // .Orthanc.DatabasePluginMessages.GetChildrenInternalId.Response get_children_internal_id = 112;
  bool has_get_children_internal_id() const;
  private:
  bool _internal_has_get_children_internal_id() const;
  public:
  void clear_get_children_internal_id();
  const ::Orthanc::DatabasePluginMessages::GetChildrenInternalId_Response& get_children_internal_id() const;
  ::Orthanc::DatabasePluginMessages::GetChildrenInternalId_Response* release_get_children_internal_id();
  ::Orthanc::DatabasePluginMessages::GetChildrenInternalId_Response* mutable_get_children_internal_id();
  void set_allocated_get_children_internal_id(::Orthanc::DatabasePluginMessages::GetChildrenInternalId_Response* get_children_internal_id);
  private:
  const ::Orthanc::DatabasePluginMessages::GetChildrenInternalId_Response& _internal_get_children_internal_id() const;
  ::Orthanc::DatabasePluginMessages::GetChildrenInternalId_Response* _internal_mutable_get_children_internal_id();
  public:
  void unsafe_arena_set_allocated_get_children_internal_id(
      ::Orthanc::DatabasePluginMessages::GetChildrenInternalId_Response* get_children_internal_id);
  ::Orthanc::DatabasePluginMessages::GetChildrenInternalId_Response* unsafe_arena_release_get_children_internal_id();

  // .Orthanc.DatabasePluginMessages.GetChildrenPublicId.Response get_children_public_id = 113;
  bool has_get_children_public_id() const;
  private:
  bool _internal_has_get_children_public_id() const;
  public:
  void clear_get_children_public_id();
  const ::Orthanc::DatabasePluginMessages::GetChildrenPublicId_Response& get_children_public_id() const;
  ::Orthanc::DatabasePluginMessages::GetChildrenPublicId_Response* release_get_children_public_id();
  ::Orthanc::DatabasePluginMessages::GetChildrenPublicId_Response* mutable_get_children_public_id();
  void set_allocated_get_children_public_id(::Orthanc::DatabasePluginMessages::GetChildrenPublicId_Response* get_children_public_id);
  private:
  const ::Orthanc::DatabasePluginMessages::GetChildrenPublicId_Response& _internal_get_children_public_id() const;
  ::Orthanc::DatabasePluginMessages::GetChildrenPublicId_Response* _internal_mutable_get_children_public_id();
  public:
  void unsafe_arena_set_allocated_get_children_public_id(
      ::Orthanc::DatabasePluginMessages::GetChildrenPublicId_Response* get_children_public_id);
  ::Orthanc::DatabasePluginMessages::GetChildrenPublicId_Response* unsafe_arena_release_get_children_public_id();

  // .Orthanc.DatabasePluginMessages.GetExportedResources.Response get_exported_resources = 114;
  bool has_get_exported_resources() const;
  private:
  bool _internal_has_get_exported_resources() const;
  public:
  void clear_get_exported_resources();
  const ::Orthanc::DatabasePluginMessages::GetExportedResources_Response& get_exported_resources() const;
  ::Orthanc::DatabasePluginMessages::GetExportedResources_Response* release_get_exported_resources();
  ::Orthanc::DatabasePluginMessages::GetExportedResources_Response* mutable_get_exported_resources();
  void set_allocated_get_exported_resources(::Orthanc::DatabasePluginMessages::GetExportedResources_Response* get_exported_resources);
  private:
  const ::Orthanc::DatabasePluginMessages::GetExportedResources_Response& _internal_get_exported_resources() const;
  ::Orthanc::DatabasePluginMessages::GetExportedResources_Response* _internal_mutable_get_exported_resources();
  public:
  void unsafe_arena_set_allocated_get_exported_resources(
      ::Orthanc::DatabasePluginMessages::GetExportedResources_Response* get_exported_resources);
  ::Orthanc::DatabasePluginMessages::GetExportedResources_Response* unsafe_arena_release_get_exported_resources();

  // .Orthanc.DatabasePluginMessages.GetLastChange.Response get_last_change = 115;
  bool has_get_last_change() const;
  private:
  bool _internal_has_get_last_change() const;
  public:
  void clear_get_last_change();
  const ::Orthanc::DatabasePluginMessages::GetLastChange_Response& get_last_change() const;
  ::Orthanc::DatabasePluginMessages::GetLastChange_Response* release_get_last_change();
  ::Orthanc::DatabasePluginMessages::GetLastChange_Response* mutable_get_last_change();
  void set_allocated_get_last_change(::Orthanc::DatabasePluginMessages::GetLastChange_Response* get_last_change);
  private:
  const ::Orthanc::DatabasePluginMessages::GetLastChange_Response& _internal_get_last_change() const;
  ::Orthanc::DatabasePluginMessages::GetLastChange_Response* _internal_mutable_get_last_change();
  public:
  void unsafe_arena_set_allocated_get_last_change(
      ::Orthanc::DatabasePluginMessages::GetLastChange_Response* get_last_change);
  ::Orthanc::DatabasePluginMessages::GetLastChange_Response* unsafe_arena_release_get_last_change();

  // .Orthanc.DatabasePluginMessages.GetLastExportedResource.Response get_last_exported_resource = 116;
  bool has_get_last_exported_resource() const;
  private:
  bool _internal_has_get_last_exported_resource() const;
  public:
  void clear_get_last_exported_resource();
  const ::Orthanc::DatabasePluginMessages::GetLastExportedResource_Response& get_last_exported_resource() const;
  ::Orthanc::DatabasePluginMessages::GetLastExportedResource_Response* release_get_last_exported_resource();
  ::Orthanc::DatabasePluginMessages::GetLastExportedResource_Response* mutable_get_last_exported_resource();
  void set_allocated_get_last_exported_resource(::Orthanc::DatabasePluginMessages::GetLastExportedResource_Response* get_last_exported_resource);
  private:
  const ::Orthanc::DatabasePluginMessages::GetLastExportedResource_Response& _internal_get_last_exported_resource() const;
  ::Orthanc::DatabasePluginMessages::GetLastExportedResource_Response* _internal_mutable_get_last_exported_resource();
  public:
  void unsafe_arena_set_allocated_get_last_exported_resource(
      ::Orthanc::DatabasePluginMessages::GetLastExportedResource_Response* get_last_exported_resource);
  ::Orthanc::DatabasePluginMessages::GetLastExportedResource_Response* unsafe_arena_release_get_last_exported_resource();

  // .Orthanc.DatabasePluginMessages.GetMainDicomTags.Response get_main_dicom_tags = 117;
  bool has_get_main_dicom_tags() const;
  private:
  bool _internal_has_get_main_dicom_tags() const;
  public:
  void clear_get_main_dicom_tags();
  const ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Response& get_main_dicom_tags() const;
  ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Response* release_get_main_dicom_tags();
  ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Response* mutable_get_main_dicom_tags();
  void set_allocated_get_main_dicom_tags(::Orthanc::DatabasePluginMessages::GetMainDicomTags_Response* get_main_dicom_tags);
  private:
  const ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Response& _internal_get_main_dicom_tags() const;
  ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Response* _internal_mutable_get_main_dicom_tags();
  public:
  void unsafe_arena_set_allocated_get_main_dicom_tags(
      ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Response* get_main_dicom_tags);
  ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Response* unsafe_arena_release_get_main_dicom_tags();

  // .Orthanc.DatabasePluginMessages.GetPublicId.Response get_public_id = 118;
  bool has_get_public_id() const;
  private:
  bool _internal_has_get_public_id() const;
  public:
  void clear_get_public_id();
  const ::Orthanc::DatabasePluginMessages::GetPublicId_Response& get_public_id() const;
  ::Orthanc::DatabasePluginMessages::GetPublicId_Response* release_get_public_id();
  ::Orthanc::DatabasePluginMessages::GetPublicId_Response* mutable_get_public_id();
  void set_allocated_get_public_id(::Orthanc::DatabasePluginMessages::GetPublicId_Response* get_public_id);
  private:
  const ::Orthanc::DatabasePluginMessages::GetPublicId_Response& _internal_get_public_id() const;
  ::Orthanc::DatabasePluginMessages::GetPublicId_Response* _internal_mutable_get_public_id();
  public:
  void unsafe_arena_set_allocated_get_public_id(
      ::Orthanc::DatabasePluginMessages::GetPublicId_Response* get_public_id);
  ::Orthanc::DatabasePluginMessages::GetPublicId_Response* unsafe_arena_release_get_public_id();

  // .Orthanc.DatabasePluginMessages.GetResourcesCount.Response get_resources_count = 119;
  bool has_get_resources_count() const;
  private:
  bool _internal_has_get_resources_count() const;
  public:
  void clear_get_resources_count();
  const ::Orthanc::DatabasePluginMessages::GetResourcesCount_Response& get_resources_count() const;
  ::Orthanc::DatabasePluginMessages::GetResourcesCount_Response* release_get_resources_count();
  ::Orthanc::DatabasePluginMessages::GetResourcesCount_Response* mutable_get_resources_count();
  void set_allocated_get_resources_count(::Orthanc::DatabasePluginMessages::GetResourcesCount_Response* get_resources_count);
  private:
  const ::Orthanc::DatabasePluginMessages::GetResourcesCount_Response& _internal_get_resources_count() const;
  ::Orthanc::DatabasePluginMessages::GetResourcesCount_Response* _internal_mutable_get_resources_count();
  public:
  void unsafe_arena_set_allocated_get_resources_count(
      ::Orthanc::DatabasePluginMessages::GetResourcesCount_Response* get_resources_count);
  ::Orthanc::DatabasePluginMessages::GetResourcesCount_Response* unsafe_arena_release_get_resources_count();

  // .Orthanc.DatabasePluginMessages.GetResourceType.Response get_resource_type = 120;
  bool has_get_resource_type() const;
  private:
  bool _internal_has_get_resource_type() const;
  public:
  void clear_get_resource_type();
  const ::Orthanc::DatabasePluginMessages::GetResourceType_Response& get_resource_type() const;
  ::Orthanc::DatabasePluginMessages::GetResourceType_Response* release_get_resource_type();
  ::Orthanc::DatabasePluginMessages::GetResourceType_Response* mutable_get_resource_type();
  void set_allocated_get_resource_type(::Orthanc::DatabasePluginMessages::GetResourceType_Response* get_resource_type);
  private:
  const ::Orthanc::DatabasePluginMessages::GetResourceType_Response& _internal_get_resource_type() const;
  ::Orthanc::DatabasePluginMessages::GetResourceType_Response* _internal_mutable_get_resource_type();
  public:
  void unsafe_arena_set_allocated_get_resource_type(
      ::Orthanc::DatabasePluginMessages::GetResourceType_Response* get_resource_type);
  ::Orthanc::DatabasePluginMessages::GetResourceType_Response* unsafe_arena_release_get_resource_type();

  // .Orthanc.DatabasePluginMessages.GetTotalCompressedSize.Response get_total_compressed_size = 121;
  bool has_get_total_compressed_size() const;
  private:
  bool _internal_has_get_total_compressed_size() const;
  public:
  void clear_get_total_compressed_size();
  const ::Orthanc::DatabasePluginMessages::GetTotalCompressedSize_Response& get_total_compressed_size() const;
  ::Orthanc::DatabasePluginMessages::GetTotalCompressedSize_Response* release_get_total_compressed_size();
  ::Orthanc::DatabasePluginMessages::GetTotalCompressedSize_Response* mutable_get_total_compressed_size();
  void set_allocated_get_total_compressed_size(::Orthanc::DatabasePluginMessages::GetTotalCompressedSize_Response* get_total_compressed_size);
  private:
  const ::Orthanc::DatabasePluginMessages::GetTotalCompressedSize_Response& _internal_get_total_compressed_size() const;
  ::Orthanc::DatabasePluginMessages::GetTotalCompressedSize_Response* _internal_mutable_get_total_compressed_size();
  public:
  void unsafe_arena_set_allocated_get_total_compressed_size(
      ::Orthanc::DatabasePluginMessages::GetTotalCompressedSize_Response* get_total_compressed_size);
  ::Orthanc::DatabasePluginMessages::GetTotalCompressedSize_Response* unsafe_arena_release_get_total_compressed_size();

  // .Orthanc.DatabasePluginMessages.GetTotalUncompressedSize.Response get_total_uncompressed_size = 122;
  bool has_get_total_uncompressed_size() const;
  private:
  bool _internal_has_get_total_uncompressed_size() const;
  public:
  void clear_get_total_uncompressed_size();
  const ::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize_Response& get_total_uncompressed_size() const;
  ::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize_Response* release_get_total_uncompressed_size();
  ::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize_Response* mutable_get_total_uncompressed_size();
  void set_allocated_get_total_uncompressed_size(::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize_Response* get_total_uncompressed_size);
  private:
  const ::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize_Response& _internal_get_total_uncompressed_size() const;
  ::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize_Response* _internal_mutable_get_total_uncompressed_size();
  public:
  void unsafe_arena_set_allocated_get_total_uncompressed_size(
      ::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize_Response* get_total_uncompressed_size);
  ::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize_Response* unsafe_arena_release_get_total_uncompressed_size();

  // .Orthanc.DatabasePluginMessages.IsProtectedPatient.Response is_protected_patient = 123;
  bool has_is_protected_patient() const;
  private:
  bool _internal_has_is_protected_patient() const;
  public:
  void clear_is_protected_patient();
  const ::Orthanc::DatabasePluginMessages::IsProtectedPatient_Response& is_protected_patient() const;
  ::Orthanc::DatabasePluginMessages::IsProtectedPatient_Response* release_is_protected_patient();
  ::Orthanc::DatabasePluginMessages::IsProtectedPatient_Response* mutable_is_protected_patient();
  void set_allocated_is_protected_patient(::Orthanc::DatabasePluginMessages::IsProtectedPatient_Response* is_protected_patient);
  private:
  const ::Orthanc::DatabasePluginMessages::IsProtectedPatient_Response& _internal_is_protected_patient() const;
  ::Orthanc::DatabasePluginMessages::IsProtectedPatient_Response* _internal_mutable_is_protected_patient();
  public:
  void unsafe_arena_set_allocated_is_protected_patient(
      ::Orthanc::DatabasePluginMessages::IsProtectedPatient_Response* is_protected_patient);
  ::Orthanc::DatabasePluginMessages::IsProtectedPatient_Response* unsafe_arena_release_is_protected_patient();

  // .Orthanc.DatabasePluginMessages.ListAvailableAttachments.Response list_available_attachments = 124;
  bool has_list_available_attachments() const;
  private:
  bool _internal_has_list_available_attachments() const;
  public:
  void clear_list_available_attachments();
  const ::Orthanc::DatabasePluginMessages::ListAvailableAttachments_Response& list_available_attachments() const;
  ::Orthanc::DatabasePluginMessages::ListAvailableAttachments_Response* release_list_available_attachments();
  ::Orthanc::DatabasePluginMessages::ListAvailableAttachments_Response* mutable_list_available_attachments();
  void set_allocated_list_available_attachments(::Orthanc::DatabasePluginMessages::ListAvailableAttachments_Response* list_available_attachments);
  private:
  const ::Orthanc::DatabasePluginMessages::ListAvailableAttachments_Response& _internal_list_available_attachments() const;
  ::Orthanc::DatabasePluginMessages::ListAvailableAttachments_Response* _internal_mutable_list_available_attachments();
  public:
  void unsafe_arena_set_allocated_list_available_attachments(
      ::Orthanc::DatabasePluginMessages::ListAvailableAttachments_Response* list_available_attachments);
  ::Orthanc::DatabasePluginMessages::ListAvailableAttachments_Response* unsafe_arena_release_list_available_attachments();

  // .Orthanc.DatabasePluginMessages.LogChange.Response log_change = 125;
  bool has_log_change() const;
  private:
  bool _internal_has_log_change() const;
  public:
  void clear_log_change();
  const ::Orthanc::DatabasePluginMessages::LogChange_Response& log_change() const;
  ::Orthanc::DatabasePluginMessages::LogChange_Response* release_log_change();
  ::Orthanc::DatabasePluginMessages::LogChange_Response* mutable_log_change();
  void set_allocated_log_change(::Orthanc::DatabasePluginMessages::LogChange_Response* log_change);
  private:
  const ::Orthanc::DatabasePluginMessages::LogChange_Response& _internal_log_change() const;
  ::Orthanc::DatabasePluginMessages::LogChange_Response* _internal_mutable_log_change();
  public:
  void unsafe_arena_set_allocated_log_change(
      ::Orthanc::DatabasePluginMessages::LogChange_Response* log_change);
  ::Orthanc::DatabasePluginMessages::LogChange_Response* unsafe_arena_release_log_change();

  // .Orthanc.DatabasePluginMessages.LogExportedResource.Response log_exported_resource = 126;
  bool has_log_exported_resource() const;
  private:
  bool _internal_has_log_exported_resource() const;
  public:
  void clear_log_exported_resource();
  const ::Orthanc::DatabasePluginMessages::LogExportedResource_Response& log_exported_resource() const;
  ::Orthanc::DatabasePluginMessages::LogExportedResource_Response* release_log_exported_resource();
  ::Orthanc::DatabasePluginMessages::LogExportedResource_Response* mutable_log_exported_resource();
  void set_allocated_log_exported_resource(::Orthanc::DatabasePluginMessages::LogExportedResource_Response* log_exported_resource);
  private:
  const ::Orthanc::DatabasePluginMessages::LogExportedResource_Response& _internal_log_exported_resource() const;
  ::Orthanc::DatabasePluginMessages::LogExportedResource_Response* _internal_mutable_log_exported_resource();
  public:
  void unsafe_arena_set_allocated_log_exported_resource(
      ::Orthanc::DatabasePluginMessages::LogExportedResource_Response* log_exported_resource);
  ::Orthanc::DatabasePluginMessages::LogExportedResource_Response* unsafe_arena_release_log_exported_resource();

  // .Orthanc.DatabasePluginMessages.LookupAttachment.Response lookup_attachment = 127;
  bool has_lookup_attachment() const;
  private:
  bool _internal_has_lookup_attachment() const;
  public:
  void clear_lookup_attachment();
  const ::Orthanc::DatabasePluginMessages::LookupAttachment_Response& lookup_attachment() const;
  ::Orthanc::DatabasePluginMessages::LookupAttachment_Response* release_lookup_attachment();
  ::Orthanc::DatabasePluginMessages::LookupAttachment_Response* mutable_lookup_attachment();
  void set_allocated_lookup_attachment(::Orthanc::DatabasePluginMessages::LookupAttachment_Response* lookup_attachment);
  private:
  const ::Orthanc::DatabasePluginMessages::LookupAttachment_Response& _internal_lookup_attachment() const;
  ::Orthanc::DatabasePluginMessages::LookupAttachment_Response* _internal_mutable_lookup_attachment();
  public:
  void unsafe_arena_set_allocated_lookup_attachment(
      ::Orthanc::DatabasePluginMessages::LookupAttachment_Response* lookup_attachment);
  ::Orthanc::DatabasePluginMessages::LookupAttachment_Response* unsafe_arena_release_lookup_attachment();

  // .Orthanc.DatabasePluginMessages.LookupGlobalProperty.Response lookup_global_property = 128;
  bool has_lookup_global_property() const;
  private:
  bool _internal_has_lookup_global_property() const;
  public:
  void clear_lookup_global_property();
  const ::Orthanc::DatabasePluginMessages::LookupGlobalProperty_Response& lookup_global_property() const;
  ::Orthanc::DatabasePluginMessages::LookupGlobalProperty_Response* release_lookup_global_property();
  ::Orthanc::DatabasePluginMessages::LookupGlobalProperty_Response* mutable_lookup_global_property();
  void set_allocated_lookup_global_property(::Orthanc::DatabasePluginMessages::LookupGlobalProperty_Response* lookup_global_property);
  private:
  const ::Orthanc::DatabasePluginMessages::LookupGlobalProperty_Response& _internal_lookup_global_property() const;
  ::Orthanc::DatabasePluginMessages::LookupGlobalProperty_Response* _internal_mutable_lookup_global_property();
  public:
  void unsafe_arena_set_allocated_lookup_global_property(
      ::Orthanc::DatabasePluginMessages::LookupGlobalProperty_Response* lookup_global_property);
  ::Orthanc::DatabasePluginMessages::LookupGlobalProperty_Response* unsafe_arena_release_lookup_global_property();

  // .Orthanc.DatabasePluginMessages.LookupMetadata.Response lookup_metadata = 129;
  bool has_lookup_metadata() const;
  private:
  bool _internal_has_lookup_metadata() const;
  public:
  void clear_lookup_metadata();
  const ::Orthanc::DatabasePluginMessages::LookupMetadata_Response& lookup_metadata() const;
  ::Orthanc::DatabasePluginMessages::LookupMetadata_Response* release_lookup_metadata();
  ::Orthanc::DatabasePluginMessages::LookupMetadata_Response* mutable_lookup_metadata();
  void set_allocated_lookup_metadata(::Orthanc::DatabasePluginMessages::LookupMetadata_Response* lookup_metadata);
  private:
  const ::Orthanc::DatabasePluginMessages::LookupMetadata_Response& _internal_lookup_metadata() const;
  ::Orthanc::DatabasePluginMessages::LookupMetadata_Response* _internal_mutable_lookup_metadata();
  public:
  void unsafe_arena_set_allocated_lookup_metadata(
      ::Orthanc::DatabasePluginMessages::LookupMetadata_Response* lookup_metadata);
  ::Orthanc::DatabasePluginMessages::LookupMetadata_Response* unsafe_arena_release_lookup_metadata();

  // .Orthanc.DatabasePluginMessages.LookupParent.Response lookup_parent = 130;
  bool has_lookup_parent() const;
  private:
  bool _internal_has_lookup_parent() const;
  public:
  void clear_lookup_parent();
  const ::Orthanc::DatabasePluginMessages::LookupParent_Response& lookup_parent() const;
  ::Orthanc::DatabasePluginMessages::LookupParent_Response* release_lookup_parent();
  ::Orthanc::DatabasePluginMessages::LookupParent_Response* mutable_lookup_parent();
  void set_allocated_lookup_parent(::Orthanc::DatabasePluginMessages::LookupParent_Response* lookup_parent);
  private:
  const ::Orthanc::DatabasePluginMessages::LookupParent_Response& _internal_lookup_parent() const;
  ::Orthanc::DatabasePluginMessages::LookupParent_Response* _internal_mutable_lookup_parent();
  public:
  void unsafe_arena_set_allocated_lookup_parent(
      ::Orthanc::DatabasePluginMessages::LookupParent_Response* lookup_parent);
  ::Orthanc::DatabasePluginMessages::LookupParent_Response* unsafe_arena_release_lookup_parent();

  // .Orthanc.DatabasePluginMessages.LookupResource.Response lookup_resource = 131;
  bool has_lookup_resource() const;
  private:
  bool _internal_has_lookup_resource() const;
  public:
  void clear_lookup_resource();
  const ::Orthanc::DatabasePluginMessages::LookupResource_Response& lookup_resource() const;
  ::Orthanc::DatabasePluginMessages::LookupResource_Response* release_lookup_resource();
  ::Orthanc::DatabasePluginMessages::LookupResource_Response* mutable_lookup_resource();
  void set_allocated_lookup_resource(::Orthanc::DatabasePluginMessages::LookupResource_Response* lookup_resource);
  private:
  const ::Orthanc::DatabasePluginMessages::LookupResource_Response& _internal_lookup_resource() const;
  ::Orthanc::DatabasePluginMessages::LookupResource_Response* _internal_mutable_lookup_resource();
  public:
  void unsafe_arena_set_allocated_lookup_resource(
      ::Orthanc::DatabasePluginMessages::LookupResource_Response* lookup_resource);
  ::Orthanc::DatabasePluginMessages::LookupResource_Response* unsafe_arena_release_lookup_resource();

  // .Orthanc.DatabasePluginMessages.SelectPatientToRecycle.Response select_patient_to_recycle = 132;
  bool has_select_patient_to_recycle() const;
  private:
  bool _internal_has_select_patient_to_recycle() const;
  public:
  void clear_select_patient_to_recycle();
  const ::Orthanc::DatabasePluginMessages::SelectPatientToRecycle_Response& select_patient_to_recycle() const;
  ::Orthanc::DatabasePluginMessages::SelectPatientToRecycle_Response* release_select_patient_to_recycle();
  ::Orthanc::DatabasePluginMessages::SelectPatientToRecycle_Response* mutable_select_patient_to_recycle();
  void set_allocated_select_patient_to_recycle(::Orthanc::DatabasePluginMessages::SelectPatientToRecycle_Response* select_patient_to_recycle);
  private:
  const ::Orthanc::DatabasePluginMessages::SelectPatientToRecycle_Response& _internal_select_patient_to_recycle() const;
  ::Orthanc::DatabasePluginMessages::SelectPatientToRecycle_Response* _internal_mutable_select_patient_to_recycle();
  public:
  void unsafe_arena_set_allocated_select_patient_to_recycle(
      ::Orthanc::DatabasePluginMessages::SelectPatientToRecycle_Response* select_patient_to_recycle);
  ::Orthanc::DatabasePluginMessages::SelectPatientToRecycle_Response* unsafe_arena_release_select_patient_to_recycle();

  // .Orthanc.DatabasePluginMessages.SelectPatientToRecycleWithAvoid.Response select_patient_to_recycle_with_avoid = 133;
  bool has_select_patient_to_recycle_with_avoid() const;
  private:
  bool _internal_has_select_patient_to_recycle_with_avoid() const;
  public:
  void clear_select_patient_to_recycle_with_avoid();
  const ::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid_Response& select_patient_to_recycle_with_avoid() const;
  ::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid_Response* release_select_patient_to_recycle_with_avoid();
  ::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid_Response* mutable_select_patient_to_recycle_with_avoid();
  void set_allocated_select_patient_to_recycle_with_avoid(::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid_Response* select_patient_to_recycle_with_avoid);
  private:
  const ::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid_Response& _internal_select_patient_to_recycle_with_avoid() const;
  ::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid_Response* _internal_mutable_select_patient_to_recycle_with_avoid();
  public:
  void unsafe_arena_set_allocated_select_patient_to_recycle_with_avoid(
      ::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid_Response* select_patient_to_recycle_with_avoid);
  ::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid_Response* unsafe_arena_release_select_patient_to_recycle_with_avoid();

  // .Orthanc.DatabasePluginMessages.SetGlobalProperty.Response set_global_property = 134;
  bool has_set_global_property() const;
  private:
  bool _internal_has_set_global_property() const;
  public:
  void clear_set_global_property();
  const ::Orthanc::DatabasePluginMessages::SetGlobalProperty_Response& set_global_property() const;
  ::Orthanc::DatabasePluginMessages::SetGlobalProperty_Response* release_set_global_property();
  ::Orthanc::DatabasePluginMessages::SetGlobalProperty_Response* mutable_set_global_property();
  void set_allocated_set_global_property(::Orthanc::DatabasePluginMessages::SetGlobalProperty_Response* set_global_property);
  private:
  const ::Orthanc::DatabasePluginMessages::SetGlobalProperty_Response& _internal_set_global_property() const;
  ::Orthanc::DatabasePluginMessages::SetGlobalProperty_Response* _internal_mutable_set_global_property();
  public:
  void unsafe_arena_set_allocated_set_global_property(
      ::Orthanc::DatabasePluginMessages::SetGlobalProperty_Response* set_global_property);
  ::Orthanc::DatabasePluginMessages::SetGlobalProperty_Response* unsafe_arena_release_set_global_property();

  // .Orthanc.DatabasePluginMessages.ClearMainDicomTags.Response clear_main_dicom_tags = 135;
  bool has_clear_main_dicom_tags() const;
  private:
  bool _internal_has_clear_main_dicom_tags() const;
  public:
  void clear_clear_main_dicom_tags();
  const ::Orthanc::DatabasePluginMessages::ClearMainDicomTags_Response& clear_main_dicom_tags() const;
  ::Orthanc::DatabasePluginMessages::ClearMainDicomTags_Response* release_clear_main_dicom_tags();
  ::Orthanc::DatabasePluginMessages::ClearMainDicomTags_Response* mutable_clear_main_dicom_tags();
  void set_allocated_clear_main_dicom_tags(::Orthanc::DatabasePluginMessages::ClearMainDicomTags_Response* clear_main_dicom_tags);
  private:
  const ::Orthanc::DatabasePluginMessages::ClearMainDicomTags_Response& _internal_clear_main_dicom_tags() const;
  ::Orthanc::DatabasePluginMessages::ClearMainDicomTags_Response* _internal_mutable_clear_main_dicom_tags();
  public:
  void unsafe_arena_set_allocated_clear_main_dicom_tags(
      ::Orthanc::DatabasePluginMessages::ClearMainDicomTags_Response* clear_main_dicom_tags);
  ::Orthanc::DatabasePluginMessages::ClearMainDicomTags_Response* unsafe_arena_release_clear_main_dicom_tags();

  // .Orthanc.DatabasePluginMessages.SetMetadata.Response set_metadata = 136;
  bool has_set_metadata() const;
  private:
  bool _internal_has_set_metadata() const;
  public:
  void clear_set_metadata();
  const ::Orthanc::DatabasePluginMessages::SetMetadata_Response& set_metadata() const;
  ::Orthanc::DatabasePluginMessages::SetMetadata_Response* release_set_metadata();
  ::Orthanc::DatabasePluginMessages::SetMetadata_Response* mutable_set_metadata();
  void set_allocated_set_metadata(::Orthanc::DatabasePluginMessages::SetMetadata_Response* set_metadata);
  private:
  const ::Orthanc::DatabasePluginMessages::SetMetadata_Response& _internal_set_metadata() const;
  ::Orthanc::DatabasePluginMessages::SetMetadata_Response* _internal_mutable_set_metadata();
  public:
  void unsafe_arena_set_allocated_set_metadata(
      ::Orthanc::DatabasePluginMessages::SetMetadata_Response* set_metadata);
  ::Orthanc::DatabasePluginMessages::SetMetadata_Response* unsafe_arena_release_set_metadata();

  // .Orthanc.DatabasePluginMessages.SetProtectedPatient.Response set_protected_patient = 137;
  bool has_set_protected_patient() const;
  private:
  bool _internal_has_set_protected_patient() const;
  public:
  void clear_set_protected_patient();
  const ::Orthanc::DatabasePluginMessages::SetProtectedPatient_Response& set_protected_patient() const;
  ::Orthanc::DatabasePluginMessages::SetProtectedPatient_Response* release_set_protected_patient();
  ::Orthanc::DatabasePluginMessages::SetProtectedPatient_Response* mutable_set_protected_patient();
  void set_allocated_set_protected_patient(::Orthanc::DatabasePluginMessages::SetProtectedPatient_Response* set_protected_patient);
  private:
  const ::Orthanc::DatabasePluginMessages::SetProtectedPatient_Response& _internal_set_protected_patient() const;
  ::Orthanc::DatabasePluginMessages::SetProtectedPatient_Response* _internal_mutable_set_protected_patient();
  public:
  void unsafe_arena_set_allocated_set_protected_patient(
      ::Orthanc::DatabasePluginMessages::SetProtectedPatient_Response* set_protected_patient);
  ::Orthanc::DatabasePluginMessages::SetProtectedPatient_Response* unsafe_arena_release_set_protected_patient();

  // .Orthanc.DatabasePluginMessages.IsDiskSizeAbove.Response is_disk_size_above = 138;
  bool has_is_disk_size_above() const;
  private:
  bool _internal_has_is_disk_size_above() const;
  public:
  void clear_is_disk_size_above();
  const ::Orthanc::DatabasePluginMessages::IsDiskSizeAbove_Response& is_disk_size_above() const;
  ::Orthanc::DatabasePluginMessages::IsDiskSizeAbove_Response* release_is_disk_size_above();
  ::Orthanc::DatabasePluginMessages::IsDiskSizeAbove_Response* mutable_is_disk_size_above();
  void set_allocated_is_disk_size_above(::Orthanc::DatabasePluginMessages::IsDiskSizeAbove_Response* is_disk_size_above);
  private:
  const ::Orthanc::DatabasePluginMessages::IsDiskSizeAbove_Response& _internal_is_disk_size_above() const;
  ::Orthanc::DatabasePluginMessages::IsDiskSizeAbove_Response* _internal_mutable_is_disk_size_above();
  public:
  void unsafe_arena_set_allocated_is_disk_size_above(
      ::Orthanc::DatabasePluginMessages::IsDiskSizeAbove_Response* is_disk_size_above);
  ::Orthanc::DatabasePluginMessages::IsDiskSizeAbove_Response* unsafe_arena_release_is_disk_size_above();

  // .Orthanc.DatabasePluginMessages.LookupResources.Response lookup_resources = 139;
  bool has_lookup_resources() const;
  private:
  bool _internal_has_lookup_resources() const;
  public:
  void clear_lookup_resources();
  const ::Orthanc::DatabasePluginMessages::LookupResources_Response& lookup_resources() const;
  ::Orthanc::DatabasePluginMessages::LookupResources_Response* release_lookup_resources();
  ::Orthanc::DatabasePluginMessages::LookupResources_Response* mutable_lookup_resources();
  void set_allocated_lookup_resources(::Orthanc::DatabasePluginMessages::LookupResources_Response* lookup_resources);
  private:
  const ::Orthanc::DatabasePluginMessages::LookupResources_Response& _internal_lookup_resources() const;
  ::Orthanc::DatabasePluginMessages::LookupResources_Response* _internal_mutable_lookup_resources();
  public:
  void unsafe_arena_set_allocated_lookup_resources(
      ::Orthanc::DatabasePluginMessages::LookupResources_Response* lookup_resources);
  ::Orthanc::DatabasePluginMessages::LookupResources_Response* unsafe_arena_release_lookup_resources();

  // .Orthanc.DatabasePluginMessages.CreateInstance.Response create_instance = 140;
  bool has_create_instance() const;
  private:
  bool _internal_has_create_instance() const;
  public:
  void clear_create_instance();
  const ::Orthanc::DatabasePluginMessages::CreateInstance_Response& create_instance() const;
  ::Orthanc::DatabasePluginMessages::CreateInstance_Response* release_create_instance();
  ::Orthanc::DatabasePluginMessages::CreateInstance_Response* mutable_create_instance();
  void set_allocated_create_instance(::Orthanc::DatabasePluginMessages::CreateInstance_Response* create_instance);
  private:
  const ::Orthanc::DatabasePluginMessages::CreateInstance_Response& _internal_create_instance() const;
  ::Orthanc::DatabasePluginMessages::CreateInstance_Response* _internal_mutable_create_instance();
  public:
  void unsafe_arena_set_allocated_create_instance(
      ::Orthanc::DatabasePluginMessages::CreateInstance_Response* create_instance);
  ::Orthanc::DatabasePluginMessages::CreateInstance_Response* unsafe_arena_release_create_instance();

  // .Orthanc.DatabasePluginMessages.SetResourcesContent.Response set_resources_content = 141;
  bool has_set_resources_content() const;
  private:
  bool _internal_has_set_resources_content() const;
  public:
  void clear_set_resources_content();
  const ::Orthanc::DatabasePluginMessages::SetResourcesContent_Response& set_resources_content() const;
  ::Orthanc::DatabasePluginMessages::SetResourcesContent_Response* release_set_resources_content();
  ::Orthanc::DatabasePluginMessages::SetResourcesContent_Response* mutable_set_resources_content();
  void set_allocated_set_resources_content(::Orthanc::DatabasePluginMessages::SetResourcesContent_Response* set_resources_content);
  private:
  const ::Orthanc::DatabasePluginMessages::SetResourcesContent_Response& _internal_set_resources_content() const;
  ::Orthanc::DatabasePluginMessages::SetResourcesContent_Response* _internal_mutable_set_resources_content();
  public:
  void unsafe_arena_set_allocated_set_resources_content(
      ::Orthanc::DatabasePluginMessages::SetResourcesContent_Response* set_resources_content);
  ::Orthanc::DatabasePluginMessages::SetResourcesContent_Response* unsafe_arena_release_set_resources_content();

  // .Orthanc.DatabasePluginMessages.GetChildrenMetadata.Response get_children_metadata = 142;
  bool has_get_children_metadata() const;
  private:
  bool _internal_has_get_children_metadata() const;
  public:
  void clear_get_children_metadata();
  const ::Orthanc::DatabasePluginMessages::GetChildrenMetadata_Response& get_children_metadata() const;
  ::Orthanc::DatabasePluginMessages::GetChildrenMetadata_Response* release_get_children_metadata();
  ::Orthanc::DatabasePluginMessages::GetChildrenMetadata_Response* mutable_get_children_metadata();
  void set_allocated_get_children_metadata(::Orthanc::DatabasePluginMessages::GetChildrenMetadata_Response* get_children_metadata);
  private:
  const ::Orthanc::DatabasePluginMessages::GetChildrenMetadata_Response& _internal_get_children_metadata() const;
  ::Orthanc::DatabasePluginMessages::GetChildrenMetadata_Response* _internal_mutable_get_children_metadata();
  public:
  void unsafe_arena_set_allocated_get_children_metadata(
      ::Orthanc::DatabasePluginMessages::GetChildrenMetadata_Response* get_children_metadata);
  ::Orthanc::DatabasePluginMessages::GetChildrenMetadata_Response* unsafe_arena_release_get_children_metadata();

  // .Orthanc.DatabasePluginMessages.GetLastChangeIndex.Response get_last_change_index = 143;
  bool has_get_last_change_index() const;
  private:
  bool _internal_has_get_last_change_index() const;
  public:
  void clear_get_last_change_index();
  const ::Orthanc::DatabasePluginMessages::GetLastChangeIndex_Response& get_last_change_index() const;
  ::Orthanc::DatabasePluginMessages::GetLastChangeIndex_Response* release_get_last_change_index();
  ::Orthanc::DatabasePluginMessages::GetLastChangeIndex_Response* mutable_get_last_change_index();
  void set_allocated_get_last_change_index(::Orthanc::DatabasePluginMessages::GetLastChangeIndex_Response* get_last_change_index);
  private:
  const ::Orthanc::DatabasePluginMessages::GetLastChangeIndex_Response& _internal_get_last_change_index() const;
  ::Orthanc::DatabasePluginMessages::GetLastChangeIndex_Response* _internal_mutable_get_last_change_index();
  public:
  void unsafe_arena_set_allocated_get_last_change_index(
      ::Orthanc::DatabasePluginMessages::GetLastChangeIndex_Response* get_last_change_index);
  ::Orthanc::DatabasePluginMessages::GetLastChangeIndex_Response* unsafe_arena_release_get_last_change_index();

  // .Orthanc.DatabasePluginMessages.LookupResourceAndParent.Response lookup_resource_and_parent = 144;
  bool has_lookup_resource_and_parent() const;
  private:
  bool _internal_has_lookup_resource_and_parent() const;
  public:
  void clear_lookup_resource_and_parent();
  const ::Orthanc::DatabasePluginMessages::LookupResourceAndParent_Response& lookup_resource_and_parent() const;
  ::Orthanc::DatabasePluginMessages::LookupResourceAndParent_Response* release_lookup_resource_and_parent();
  ::Orthanc::DatabasePluginMessages::LookupResourceAndParent_Response* mutable_lookup_resource_and_parent();
  void set_allocated_lookup_resource_and_parent(::Orthanc::DatabasePluginMessages::LookupResourceAndParent_Response* lookup_resource_and_parent);
  private:
  const ::Orthanc::DatabasePluginMessages::LookupResourceAndParent_Response& _internal_lookup_resource_and_parent() const;
  ::Orthanc::DatabasePluginMessages::LookupResourceAndParent_Response* _internal_mutable_lookup_resource_and_parent();
  public:
  void unsafe_arena_set_allocated_lookup_resource_and_parent(
      ::Orthanc::DatabasePluginMessages::LookupResourceAndParent_Response* lookup_resource_and_parent);
  ::Orthanc::DatabasePluginMessages::LookupResourceAndParent_Response* unsafe_arena_release_lookup_resource_and_parent();

  // .Orthanc.DatabasePluginMessages.AddLabel.Response add_label = 145;
  bool has_add_label() const;
  private:
  bool _internal_has_add_label() const;
  public:
  void clear_add_label();
  const ::Orthanc::DatabasePluginMessages::AddLabel_Response& add_label() const;
  ::Orthanc::DatabasePluginMessages::AddLabel_Response* release_add_label();
  ::Orthanc::DatabasePluginMessages::AddLabel_Response* mutable_add_label();
  void set_allocated_add_label(::Orthanc::DatabasePluginMessages::AddLabel_Response* add_label);
  private:
  const ::Orthanc::DatabasePluginMessages::AddLabel_Response& _internal_add_label() const;
  ::Orthanc::DatabasePluginMessages::AddLabel_Response* _internal_mutable_add_label();
  public:
  void unsafe_arena_set_allocated_add_label(
      ::Orthanc::DatabasePluginMessages::AddLabel_Response* add_label);
  ::Orthanc::DatabasePluginMessages::AddLabel_Response* unsafe_arena_release_add_label();

  // .Orthanc.DatabasePluginMessages.RemoveLabel.Response remove_label = 146;
  bool has_remove_label() const;
  private:
  bool _internal_has_remove_label() const;
  public:
  void clear_remove_label();
  const ::Orthanc::DatabasePluginMessages::RemoveLabel_Response& remove_label() const;
  ::Orthanc::DatabasePluginMessages::RemoveLabel_Response* release_remove_label();
  ::Orthanc::DatabasePluginMessages::RemoveLabel_Response* mutable_remove_label();
  void set_allocated_remove_label(::Orthanc::DatabasePluginMessages::RemoveLabel_Response* remove_label);
  private:
  const ::Orthanc::DatabasePluginMessages::RemoveLabel_Response& _internal_remove_label() const;
  ::Orthanc::DatabasePluginMessages::RemoveLabel_Response* _internal_mutable_remove_label();
  public:
  void unsafe_arena_set_allocated_remove_label(
      ::Orthanc::DatabasePluginMessages::RemoveLabel_Response* remove_label);
  ::Orthanc::DatabasePluginMessages::RemoveLabel_Response* unsafe_arena_release_remove_label();

  // .Orthanc.DatabasePluginMessages.ListLabels.Response list_labels = 147;
  bool has_list_labels() const;
  private:
  bool _internal_has_list_labels() const;
  public:
  void clear_list_labels();
  const ::Orthanc::DatabasePluginMessages::ListLabels_Response& list_labels() const;
  ::Orthanc::DatabasePluginMessages::ListLabels_Response* release_list_labels();
  ::Orthanc::DatabasePluginMessages::ListLabels_Response* mutable_list_labels();
  void set_allocated_list_labels(::Orthanc::DatabasePluginMessages::ListLabels_Response* list_labels);
  private:
  const ::Orthanc::DatabasePluginMessages::ListLabels_Response& _internal_list_labels() const;
  ::Orthanc::DatabasePluginMessages::ListLabels_Response* _internal_mutable_list_labels();
  public:
  void unsafe_arena_set_allocated_list_labels(
      ::Orthanc::DatabasePluginMessages::ListLabels_Response* list_labels);
  ::Orthanc::DatabasePluginMessages::ListLabels_Response* unsafe_arena_release_list_labels();

  // .Orthanc.DatabasePluginMessages.IncrementGlobalProperty.Response increment_global_property = 148;
  bool has_increment_global_property() const;
  private:
  bool _internal_has_increment_global_property() const;
  public:
  void clear_increment_global_property();
  const ::Orthanc::DatabasePluginMessages::IncrementGlobalProperty_Response& increment_global_property() const;
  ::Orthanc::DatabasePluginMessages::IncrementGlobalProperty_Response* release_increment_global_property();
  ::Orthanc::DatabasePluginMessages::IncrementGlobalProperty_Response* mutable_increment_global_property();
  void set_allocated_increment_global_property(::Orthanc::DatabasePluginMessages::IncrementGlobalProperty_Response* increment_global_property);
  private:
  const ::Orthanc::DatabasePluginMessages::IncrementGlobalProperty_Response& _internal_increment_global_property() const;
  ::Orthanc::DatabasePluginMessages::IncrementGlobalProperty_Response* _internal_mutable_increment_global_property();
  public:
  void unsafe_arena_set_allocated_increment_global_property(
      ::Orthanc::DatabasePluginMessages::IncrementGlobalProperty_Response* increment_global_property);
  ::Orthanc::DatabasePluginMessages::IncrementGlobalProperty_Response* unsafe_arena_release_increment_global_property();

  // .Orthanc.DatabasePluginMessages.UpdateAndGetStatistics.Response update_and_get_statistics = 149;
  bool has_update_and_get_statistics() const;
  private:
  bool _internal_has_update_and_get_statistics() const;
  public:
  void clear_update_and_get_statistics();
  const ::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics_Response& update_and_get_statistics() const;
  ::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics_Response* release_update_and_get_statistics();
  ::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics_Response* mutable_update_and_get_statistics();
  void set_allocated_update_and_get_statistics(::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics_Response* update_and_get_statistics);
  private:
  const ::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics_Response& _internal_update_and_get_statistics() const;
  ::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics_Response* _internal_mutable_update_and_get_statistics();
  public:
  void unsafe_arena_set_allocated_update_and_get_statistics(
      ::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics_Response* update_and_get_statistics);
  ::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics_Response* unsafe_arena_release_update_and_get_statistics();

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.TransactionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Orthanc::DatabasePluginMessages::Rollback_Response* rollback_;
  ::Orthanc::DatabasePluginMessages::Commit_Response* commit_;
  ::Orthanc::DatabasePluginMessages::AddAttachment_Response* add_attachment_;
  ::Orthanc::DatabasePluginMessages::ClearChanges_Response* clear_changes_;
  ::Orthanc::DatabasePluginMessages::ClearExportedResources_Response* clear_exported_resources_;
  ::Orthanc::DatabasePluginMessages::DeleteAttachment_Response* delete_attachment_;
  ::Orthanc::DatabasePluginMessages::DeleteMetadata_Response* delete_metadata_;
  ::Orthanc::DatabasePluginMessages::DeleteResource_Response* delete_resource_;
  ::Orthanc::DatabasePluginMessages::GetAllMetadata_Response* get_all_metadata_;
  ::Orthanc::DatabasePluginMessages::GetAllPublicIds_Response* get_all_public_ids_;
  ::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits_Response* get_all_public_ids_with_limits_;
  ::Orthanc::DatabasePluginMessages::GetChanges_Response* get_changes_;
  ::Orthanc::DatabasePluginMessages::GetChildrenInternalId_Response* get_children_internal_id_;
  ::Orthanc::DatabasePluginMessages::GetChildrenPublicId_Response* get_children_public_id_;
  ::Orthanc::DatabasePluginMessages::GetExportedResources_Response* get_exported_resources_;
  ::Orthanc::DatabasePluginMessages::GetLastChange_Response* get_last_change_;
  ::Orthanc::DatabasePluginMessages::GetLastExportedResource_Response* get_last_exported_resource_;
  ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Response* get_main_dicom_tags_;
  ::Orthanc::DatabasePluginMessages::GetPublicId_Response* get_public_id_;
  ::Orthanc::DatabasePluginMessages::GetResourcesCount_Response* get_resources_count_;
  ::Orthanc::DatabasePluginMessages::GetResourceType_Response* get_resource_type_;
  ::Orthanc::DatabasePluginMessages::GetTotalCompressedSize_Response* get_total_compressed_size_;
  ::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize_Response* get_total_uncompressed_size_;
  ::Orthanc::DatabasePluginMessages::IsProtectedPatient_Response* is_protected_patient_;
  ::Orthanc::DatabasePluginMessages::ListAvailableAttachments_Response* list_available_attachments_;
  ::Orthanc::DatabasePluginMessages::LogChange_Response* log_change_;
  ::Orthanc::DatabasePluginMessages::LogExportedResource_Response* log_exported_resource_;
  ::Orthanc::DatabasePluginMessages::LookupAttachment_Response* lookup_attachment_;
  ::Orthanc::DatabasePluginMessages::LookupGlobalProperty_Response* lookup_global_property_;
  ::Orthanc::DatabasePluginMessages::LookupMetadata_Response* lookup_metadata_;
  ::Orthanc::DatabasePluginMessages::LookupParent_Response* lookup_parent_;
  ::Orthanc::DatabasePluginMessages::LookupResource_Response* lookup_resource_;
  ::Orthanc::DatabasePluginMessages::SelectPatientToRecycle_Response* select_patient_to_recycle_;
  ::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid_Response* select_patient_to_recycle_with_avoid_;
  ::Orthanc::DatabasePluginMessages::SetGlobalProperty_Response* set_global_property_;
  ::Orthanc::DatabasePluginMessages::ClearMainDicomTags_Response* clear_main_dicom_tags_;
  ::Orthanc::DatabasePluginMessages::SetMetadata_Response* set_metadata_;
  ::Orthanc::DatabasePluginMessages::SetProtectedPatient_Response* set_protected_patient_;
  ::Orthanc::DatabasePluginMessages::IsDiskSizeAbove_Response* is_disk_size_above_;
  ::Orthanc::DatabasePluginMessages::LookupResources_Response* lookup_resources_;
  ::Orthanc::DatabasePluginMessages::CreateInstance_Response* create_instance_;
  ::Orthanc::DatabasePluginMessages::SetResourcesContent_Response* set_resources_content_;
  ::Orthanc::DatabasePluginMessages::GetChildrenMetadata_Response* get_children_metadata_;
  ::Orthanc::DatabasePluginMessages::GetLastChangeIndex_Response* get_last_change_index_;
  ::Orthanc::DatabasePluginMessages::LookupResourceAndParent_Response* lookup_resource_and_parent_;
  ::Orthanc::DatabasePluginMessages::AddLabel_Response* add_label_;
  ::Orthanc::DatabasePluginMessages::RemoveLabel_Response* remove_label_;
  ::Orthanc::DatabasePluginMessages::ListLabels_Response* list_labels_;
  ::Orthanc::DatabasePluginMessages::IncrementGlobalProperty_Response* increment_global_property_;
  ::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics_Response* update_and_get_statistics_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.Request) */ {
 public:
  inline Request() : Request(nullptr) {};
  virtual ~Request();

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    188;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(nullptr);
  }

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatabaseRequestFieldNumber = 2,
    kTransactionRequestFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // .Orthanc.DatabasePluginMessages.DatabaseRequest database_request = 2;
  bool has_database_request() const;
  private:
  bool _internal_has_database_request() const;
  public:
  void clear_database_request();
  const ::Orthanc::DatabasePluginMessages::DatabaseRequest& database_request() const;
  ::Orthanc::DatabasePluginMessages::DatabaseRequest* release_database_request();
  ::Orthanc::DatabasePluginMessages::DatabaseRequest* mutable_database_request();
  void set_allocated_database_request(::Orthanc::DatabasePluginMessages::DatabaseRequest* database_request);
  private:
  const ::Orthanc::DatabasePluginMessages::DatabaseRequest& _internal_database_request() const;
  ::Orthanc::DatabasePluginMessages::DatabaseRequest* _internal_mutable_database_request();
  public:
  void unsafe_arena_set_allocated_database_request(
      ::Orthanc::DatabasePluginMessages::DatabaseRequest* database_request);
  ::Orthanc::DatabasePluginMessages::DatabaseRequest* unsafe_arena_release_database_request();

  // .Orthanc.DatabasePluginMessages.TransactionRequest transaction_request = 3;
  bool has_transaction_request() const;
  private:
  bool _internal_has_transaction_request() const;
  public:
  void clear_transaction_request();
  const ::Orthanc::DatabasePluginMessages::TransactionRequest& transaction_request() const;
  ::Orthanc::DatabasePluginMessages::TransactionRequest* release_transaction_request();
  ::Orthanc::DatabasePluginMessages::TransactionRequest* mutable_transaction_request();
  void set_allocated_transaction_request(::Orthanc::DatabasePluginMessages::TransactionRequest* transaction_request);
  private:
  const ::Orthanc::DatabasePluginMessages::TransactionRequest& _internal_transaction_request() const;
  ::Orthanc::DatabasePluginMessages::TransactionRequest* _internal_mutable_transaction_request();
  public:
  void unsafe_arena_set_allocated_transaction_request(
      ::Orthanc::DatabasePluginMessages::TransactionRequest* transaction_request);
  ::Orthanc::DatabasePluginMessages::TransactionRequest* unsafe_arena_release_transaction_request();

  // .Orthanc.DatabasePluginMessages.RequestType type = 1;
  void clear_type();
  ::Orthanc::DatabasePluginMessages::RequestType type() const;
  void set_type(::Orthanc::DatabasePluginMessages::RequestType value);
  private:
  ::Orthanc::DatabasePluginMessages::RequestType _internal_type() const;
  void _internal_set_type(::Orthanc::DatabasePluginMessages::RequestType value);
  public:

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Orthanc::DatabasePluginMessages::DatabaseRequest* database_request_;
  ::Orthanc::DatabasePluginMessages::TransactionRequest* transaction_request_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// -------------------------------------------------------------------

class Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:Orthanc.DatabasePluginMessages.Response) */ {
 public:
  inline Response() : Response(nullptr) {};
  virtual ~Response();

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    189;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(nullptr);
  }

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Orthanc.DatabasePluginMessages.Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatabaseResponseFieldNumber = 2,
    kTransactionResponseFieldNumber = 3,
  };
  // .Orthanc.DatabasePluginMessages.DatabaseResponse database_response = 2;
  bool has_database_response() const;
  private:
  bool _internal_has_database_response() const;
  public:
  void clear_database_response();
  const ::Orthanc::DatabasePluginMessages::DatabaseResponse& database_response() const;
  ::Orthanc::DatabasePluginMessages::DatabaseResponse* release_database_response();
  ::Orthanc::DatabasePluginMessages::DatabaseResponse* mutable_database_response();
  void set_allocated_database_response(::Orthanc::DatabasePluginMessages::DatabaseResponse* database_response);
  private:
  const ::Orthanc::DatabasePluginMessages::DatabaseResponse& _internal_database_response() const;
  ::Orthanc::DatabasePluginMessages::DatabaseResponse* _internal_mutable_database_response();
  public:
  void unsafe_arena_set_allocated_database_response(
      ::Orthanc::DatabasePluginMessages::DatabaseResponse* database_response);
  ::Orthanc::DatabasePluginMessages::DatabaseResponse* unsafe_arena_release_database_response();

  // .Orthanc.DatabasePluginMessages.TransactionResponse transaction_response = 3;
  bool has_transaction_response() const;
  private:
  bool _internal_has_transaction_response() const;
  public:
  void clear_transaction_response();
  const ::Orthanc::DatabasePluginMessages::TransactionResponse& transaction_response() const;
  ::Orthanc::DatabasePluginMessages::TransactionResponse* release_transaction_response();
  ::Orthanc::DatabasePluginMessages::TransactionResponse* mutable_transaction_response();
  void set_allocated_transaction_response(::Orthanc::DatabasePluginMessages::TransactionResponse* transaction_response);
  private:
  const ::Orthanc::DatabasePluginMessages::TransactionResponse& _internal_transaction_response() const;
  ::Orthanc::DatabasePluginMessages::TransactionResponse* _internal_mutable_transaction_response();
  public:
  void unsafe_arena_set_allocated_transaction_response(
      ::Orthanc::DatabasePluginMessages::TransactionResponse* transaction_response);
  ::Orthanc::DatabasePluginMessages::TransactionResponse* unsafe_arena_release_transaction_response();

  // @@protoc_insertion_point(class_scope:Orthanc.DatabasePluginMessages.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Orthanc::DatabasePluginMessages::DatabaseResponse* database_response_;
  ::Orthanc::DatabasePluginMessages::TransactionResponse* transaction_response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OrthancDatabasePlugin_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FileInfo

// string uuid = 1;
inline void FileInfo::clear_uuid() {
  uuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FileInfo::uuid() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.FileInfo.uuid)
  return _internal_uuid();
}
inline void FileInfo::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.FileInfo.uuid)
}
inline std::string* FileInfo::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.FileInfo.uuid)
  return _internal_mutable_uuid();
}
inline const std::string& FileInfo::_internal_uuid() const {
  return uuid_.Get();
}
inline void FileInfo::_internal_set_uuid(const std::string& value) {
  
  uuid_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FileInfo::set_uuid(std::string&& value) {
  
  uuid_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Orthanc.DatabasePluginMessages.FileInfo.uuid)
}
inline void FileInfo::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Orthanc.DatabasePluginMessages.FileInfo.uuid)
}
inline void FileInfo::set_uuid(const char* value,
    size_t size) {
  
  uuid_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Orthanc.DatabasePluginMessages.FileInfo.uuid)
}
inline std::string* FileInfo::_internal_mutable_uuid() {
  
  return uuid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FileInfo::release_uuid() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.FileInfo.uuid)
  return uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FileInfo::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.FileInfo.uuid)
}
inline std::string* FileInfo::unsafe_arena_release_uuid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Orthanc.DatabasePluginMessages.FileInfo.uuid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return uuid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FileInfo::unsafe_arena_set_allocated_uuid(
    std::string* uuid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      uuid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.FileInfo.uuid)
}

// int32 content_type = 2;
inline void FileInfo::clear_content_type() {
  content_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FileInfo::_internal_content_type() const {
  return content_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FileInfo::content_type() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.FileInfo.content_type)
  return _internal_content_type();
}
inline void FileInfo::_internal_set_content_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  content_type_ = value;
}
inline void FileInfo::set_content_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_content_type(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.FileInfo.content_type)
}

// uint64 uncompressed_size = 3;
inline void FileInfo::clear_uncompressed_size() {
  uncompressed_size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FileInfo::_internal_uncompressed_size() const {
  return uncompressed_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FileInfo::uncompressed_size() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.FileInfo.uncompressed_size)
  return _internal_uncompressed_size();
}
inline void FileInfo::_internal_set_uncompressed_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  uncompressed_size_ = value;
}
inline void FileInfo::set_uncompressed_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_uncompressed_size(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.FileInfo.uncompressed_size)
}

// string uncompressed_hash = 4;
inline void FileInfo::clear_uncompressed_hash() {
  uncompressed_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FileInfo::uncompressed_hash() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.FileInfo.uncompressed_hash)
  return _internal_uncompressed_hash();
}
inline void FileInfo::set_uncompressed_hash(const std::string& value) {
  _internal_set_uncompressed_hash(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.FileInfo.uncompressed_hash)
}
inline std::string* FileInfo::mutable_uncompressed_hash() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.FileInfo.uncompressed_hash)
  return _internal_mutable_uncompressed_hash();
}
inline const std::string& FileInfo::_internal_uncompressed_hash() const {
  return uncompressed_hash_.Get();
}
inline void FileInfo::_internal_set_uncompressed_hash(const std::string& value) {
  
  uncompressed_hash_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FileInfo::set_uncompressed_hash(std::string&& value) {
  
  uncompressed_hash_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Orthanc.DatabasePluginMessages.FileInfo.uncompressed_hash)
}
inline void FileInfo::set_uncompressed_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uncompressed_hash_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Orthanc.DatabasePluginMessages.FileInfo.uncompressed_hash)
}
inline void FileInfo::set_uncompressed_hash(const char* value,
    size_t size) {
  
  uncompressed_hash_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Orthanc.DatabasePluginMessages.FileInfo.uncompressed_hash)
}
inline std::string* FileInfo::_internal_mutable_uncompressed_hash() {
  
  return uncompressed_hash_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FileInfo::release_uncompressed_hash() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.FileInfo.uncompressed_hash)
  return uncompressed_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FileInfo::set_allocated_uncompressed_hash(std::string* uncompressed_hash) {
  if (uncompressed_hash != nullptr) {
    
  } else {
    
  }
  uncompressed_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uncompressed_hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.FileInfo.uncompressed_hash)
}
inline std::string* FileInfo::unsafe_arena_release_uncompressed_hash() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Orthanc.DatabasePluginMessages.FileInfo.uncompressed_hash)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return uncompressed_hash_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FileInfo::unsafe_arena_set_allocated_uncompressed_hash(
    std::string* uncompressed_hash) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (uncompressed_hash != nullptr) {
    
  } else {
    
  }
  uncompressed_hash_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      uncompressed_hash, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.FileInfo.uncompressed_hash)
}

// int32 compression_type = 5;
inline void FileInfo::clear_compression_type() {
  compression_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FileInfo::_internal_compression_type() const {
  return compression_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FileInfo::compression_type() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.FileInfo.compression_type)
  return _internal_compression_type();
}
inline void FileInfo::_internal_set_compression_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  compression_type_ = value;
}
inline void FileInfo::set_compression_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_compression_type(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.FileInfo.compression_type)
}

// uint64 compressed_size = 6;
inline void FileInfo::clear_compressed_size() {
  compressed_size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FileInfo::_internal_compressed_size() const {
  return compressed_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FileInfo::compressed_size() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.FileInfo.compressed_size)
  return _internal_compressed_size();
}
inline void FileInfo::_internal_set_compressed_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  compressed_size_ = value;
}
inline void FileInfo::set_compressed_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_compressed_size(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.FileInfo.compressed_size)
}

// string compressed_hash = 7;
inline void FileInfo::clear_compressed_hash() {
  compressed_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FileInfo::compressed_hash() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.FileInfo.compressed_hash)
  return _internal_compressed_hash();
}
inline void FileInfo::set_compressed_hash(const std::string& value) {
  _internal_set_compressed_hash(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.FileInfo.compressed_hash)
}
inline std::string* FileInfo::mutable_compressed_hash() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.FileInfo.compressed_hash)
  return _internal_mutable_compressed_hash();
}
inline const std::string& FileInfo::_internal_compressed_hash() const {
  return compressed_hash_.Get();
}
inline void FileInfo::_internal_set_compressed_hash(const std::string& value) {
  
  compressed_hash_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FileInfo::set_compressed_hash(std::string&& value) {
  
  compressed_hash_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Orthanc.DatabasePluginMessages.FileInfo.compressed_hash)
}
inline void FileInfo::set_compressed_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  compressed_hash_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Orthanc.DatabasePluginMessages.FileInfo.compressed_hash)
}
inline void FileInfo::set_compressed_hash(const char* value,
    size_t size) {
  
  compressed_hash_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Orthanc.DatabasePluginMessages.FileInfo.compressed_hash)
}
inline std::string* FileInfo::_internal_mutable_compressed_hash() {
  
  return compressed_hash_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FileInfo::release_compressed_hash() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.FileInfo.compressed_hash)
  return compressed_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FileInfo::set_allocated_compressed_hash(std::string* compressed_hash) {
  if (compressed_hash != nullptr) {
    
  } else {
    
  }
  compressed_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), compressed_hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.FileInfo.compressed_hash)
}
inline std::string* FileInfo::unsafe_arena_release_compressed_hash() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Orthanc.DatabasePluginMessages.FileInfo.compressed_hash)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return compressed_hash_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FileInfo::unsafe_arena_set_allocated_compressed_hash(
    std::string* compressed_hash) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (compressed_hash != nullptr) {
    
  } else {
    
  }
  compressed_hash_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      compressed_hash, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.FileInfo.compressed_hash)
}

// -------------------------------------------------------------------

// ServerIndexChange

// int64 seq = 1;
inline void ServerIndexChange::clear_seq() {
  seq_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServerIndexChange::_internal_seq() const {
  return seq_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServerIndexChange::seq() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.ServerIndexChange.seq)
  return _internal_seq();
}
inline void ServerIndexChange::_internal_set_seq(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  seq_ = value;
}
inline void ServerIndexChange::set_seq(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.ServerIndexChange.seq)
}

// int32 change_type = 2;
inline void ServerIndexChange::clear_change_type() {
  change_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerIndexChange::_internal_change_type() const {
  return change_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerIndexChange::change_type() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.ServerIndexChange.change_type)
  return _internal_change_type();
}
inline void ServerIndexChange::_internal_set_change_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  change_type_ = value;
}
inline void ServerIndexChange::set_change_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_change_type(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.ServerIndexChange.change_type)
}

// .Orthanc.DatabasePluginMessages.ResourceType resource_type = 3;
inline void ServerIndexChange::clear_resource_type() {
  resource_type_ = 0;
}
inline ::Orthanc::DatabasePluginMessages::ResourceType ServerIndexChange::_internal_resource_type() const {
  return static_cast< ::Orthanc::DatabasePluginMessages::ResourceType >(resource_type_);
}
inline ::Orthanc::DatabasePluginMessages::ResourceType ServerIndexChange::resource_type() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.ServerIndexChange.resource_type)
  return _internal_resource_type();
}
inline void ServerIndexChange::_internal_set_resource_type(::Orthanc::DatabasePluginMessages::ResourceType value) {
  
  resource_type_ = value;
}
inline void ServerIndexChange::set_resource_type(::Orthanc::DatabasePluginMessages::ResourceType value) {
  _internal_set_resource_type(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.ServerIndexChange.resource_type)
}

// string public_id = 4;
inline void ServerIndexChange::clear_public_id() {
  public_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ServerIndexChange::public_id() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.ServerIndexChange.public_id)
  return _internal_public_id();
}
inline void ServerIndexChange::set_public_id(const std::string& value) {
  _internal_set_public_id(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.ServerIndexChange.public_id)
}
inline std::string* ServerIndexChange::mutable_public_id() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.ServerIndexChange.public_id)
  return _internal_mutable_public_id();
}
inline const std::string& ServerIndexChange::_internal_public_id() const {
  return public_id_.Get();
}
inline void ServerIndexChange::_internal_set_public_id(const std::string& value) {
  
  public_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ServerIndexChange::set_public_id(std::string&& value) {
  
  public_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Orthanc.DatabasePluginMessages.ServerIndexChange.public_id)
}
inline void ServerIndexChange::set_public_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  public_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Orthanc.DatabasePluginMessages.ServerIndexChange.public_id)
}
inline void ServerIndexChange::set_public_id(const char* value,
    size_t size) {
  
  public_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Orthanc.DatabasePluginMessages.ServerIndexChange.public_id)
}
inline std::string* ServerIndexChange::_internal_mutable_public_id() {
  
  return public_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ServerIndexChange::release_public_id() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.ServerIndexChange.public_id)
  return public_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServerIndexChange::set_allocated_public_id(std::string* public_id) {
  if (public_id != nullptr) {
    
  } else {
    
  }
  public_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.ServerIndexChange.public_id)
}
inline std::string* ServerIndexChange::unsafe_arena_release_public_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Orthanc.DatabasePluginMessages.ServerIndexChange.public_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return public_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ServerIndexChange::unsafe_arena_set_allocated_public_id(
    std::string* public_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (public_id != nullptr) {
    
  } else {
    
  }
  public_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      public_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.ServerIndexChange.public_id)
}

// string date = 5;
inline void ServerIndexChange::clear_date() {
  date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ServerIndexChange::date() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.ServerIndexChange.date)
  return _internal_date();
}
inline void ServerIndexChange::set_date(const std::string& value) {
  _internal_set_date(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.ServerIndexChange.date)
}
inline std::string* ServerIndexChange::mutable_date() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.ServerIndexChange.date)
  return _internal_mutable_date();
}
inline const std::string& ServerIndexChange::_internal_date() const {
  return date_.Get();
}
inline void ServerIndexChange::_internal_set_date(const std::string& value) {
  
  date_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ServerIndexChange::set_date(std::string&& value) {
  
  date_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Orthanc.DatabasePluginMessages.ServerIndexChange.date)
}
inline void ServerIndexChange::set_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  date_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Orthanc.DatabasePluginMessages.ServerIndexChange.date)
}
inline void ServerIndexChange::set_date(const char* value,
    size_t size) {
  
  date_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Orthanc.DatabasePluginMessages.ServerIndexChange.date)
}
inline std::string* ServerIndexChange::_internal_mutable_date() {
  
  return date_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ServerIndexChange::release_date() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.ServerIndexChange.date)
  return date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServerIndexChange::set_allocated_date(std::string* date) {
  if (date != nullptr) {
    
  } else {
    
  }
  date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), date,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.ServerIndexChange.date)
}
inline std::string* ServerIndexChange::unsafe_arena_release_date() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Orthanc.DatabasePluginMessages.ServerIndexChange.date)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return date_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ServerIndexChange::unsafe_arena_set_allocated_date(
    std::string* date) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (date != nullptr) {
    
  } else {
    
  }
  date_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      date, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.ServerIndexChange.date)
}

// -------------------------------------------------------------------

// ExportedResource

// int64 seq = 1;
inline void ExportedResource::clear_seq() {
  seq_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ExportedResource::_internal_seq() const {
  return seq_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ExportedResource::seq() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.ExportedResource.seq)
  return _internal_seq();
}
inline void ExportedResource::_internal_set_seq(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  seq_ = value;
}
inline void ExportedResource::set_seq(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.ExportedResource.seq)
}

// .Orthanc.DatabasePluginMessages.ResourceType resource_type = 2;
inline void ExportedResource::clear_resource_type() {
  resource_type_ = 0;
}
inline ::Orthanc::DatabasePluginMessages::ResourceType ExportedResource::_internal_resource_type() const {
  return static_cast< ::Orthanc::DatabasePluginMessages::ResourceType >(resource_type_);
}
inline ::Orthanc::DatabasePluginMessages::ResourceType ExportedResource::resource_type() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.ExportedResource.resource_type)
  return _internal_resource_type();
}
inline void ExportedResource::_internal_set_resource_type(::Orthanc::DatabasePluginMessages::ResourceType value) {
  
  resource_type_ = value;
}
inline void ExportedResource::set_resource_type(::Orthanc::DatabasePluginMessages::ResourceType value) {
  _internal_set_resource_type(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.ExportedResource.resource_type)
}

// string public_id = 3;
inline void ExportedResource::clear_public_id() {
  public_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ExportedResource::public_id() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.ExportedResource.public_id)
  return _internal_public_id();
}
inline void ExportedResource::set_public_id(const std::string& value) {
  _internal_set_public_id(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.ExportedResource.public_id)
}
inline std::string* ExportedResource::mutable_public_id() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.ExportedResource.public_id)
  return _internal_mutable_public_id();
}
inline const std::string& ExportedResource::_internal_public_id() const {
  return public_id_.Get();
}
inline void ExportedResource::_internal_set_public_id(const std::string& value) {
  
  public_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ExportedResource::set_public_id(std::string&& value) {
  
  public_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Orthanc.DatabasePluginMessages.ExportedResource.public_id)
}
inline void ExportedResource::set_public_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  public_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Orthanc.DatabasePluginMessages.ExportedResource.public_id)
}
inline void ExportedResource::set_public_id(const char* value,
    size_t size) {
  
  public_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Orthanc.DatabasePluginMessages.ExportedResource.public_id)
}
inline std::string* ExportedResource::_internal_mutable_public_id() {
  
  return public_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ExportedResource::release_public_id() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.ExportedResource.public_id)
  return public_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExportedResource::set_allocated_public_id(std::string* public_id) {
  if (public_id != nullptr) {
    
  } else {
    
  }
  public_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.ExportedResource.public_id)
}
inline std::string* ExportedResource::unsafe_arena_release_public_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Orthanc.DatabasePluginMessages.ExportedResource.public_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return public_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ExportedResource::unsafe_arena_set_allocated_public_id(
    std::string* public_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (public_id != nullptr) {
    
  } else {
    
  }
  public_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      public_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.ExportedResource.public_id)
}

// string modality = 4;
inline void ExportedResource::clear_modality() {
  modality_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ExportedResource::modality() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.ExportedResource.modality)
  return _internal_modality();
}
inline void ExportedResource::set_modality(const std::string& value) {
  _internal_set_modality(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.ExportedResource.modality)
}
inline std::string* ExportedResource::mutable_modality() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.ExportedResource.modality)
  return _internal_mutable_modality();
}
inline const std::string& ExportedResource::_internal_modality() const {
  return modality_.Get();
}
inline void ExportedResource::_internal_set_modality(const std::string& value) {
  
  modality_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ExportedResource::set_modality(std::string&& value) {
  
  modality_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Orthanc.DatabasePluginMessages.ExportedResource.modality)
}
inline void ExportedResource::set_modality(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  modality_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Orthanc.DatabasePluginMessages.ExportedResource.modality)
}
inline void ExportedResource::set_modality(const char* value,
    size_t size) {
  
  modality_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Orthanc.DatabasePluginMessages.ExportedResource.modality)
}
inline std::string* ExportedResource::_internal_mutable_modality() {
  
  return modality_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ExportedResource::release_modality() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.ExportedResource.modality)
  return modality_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExportedResource::set_allocated_modality(std::string* modality) {
  if (modality != nullptr) {
    
  } else {
    
  }
  modality_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), modality,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.ExportedResource.modality)
}
inline std::string* ExportedResource::unsafe_arena_release_modality() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Orthanc.DatabasePluginMessages.ExportedResource.modality)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return modality_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ExportedResource::unsafe_arena_set_allocated_modality(
    std::string* modality) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (modality != nullptr) {
    
  } else {
    
  }
  modality_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      modality, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.ExportedResource.modality)
}

// string date = 5;
inline void ExportedResource::clear_date() {
  date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ExportedResource::date() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.ExportedResource.date)
  return _internal_date();
}
inline void ExportedResource::set_date(const std::string& value) {
  _internal_set_date(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.ExportedResource.date)
}
inline std::string* ExportedResource::mutable_date() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.ExportedResource.date)
  return _internal_mutable_date();
}
inline const std::string& ExportedResource::_internal_date() const {
  return date_.Get();
}
inline void ExportedResource::_internal_set_date(const std::string& value) {
  
  date_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ExportedResource::set_date(std::string&& value) {
  
  date_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Orthanc.DatabasePluginMessages.ExportedResource.date)
}
inline void ExportedResource::set_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  date_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Orthanc.DatabasePluginMessages.ExportedResource.date)
}
inline void ExportedResource::set_date(const char* value,
    size_t size) {
  
  date_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Orthanc.DatabasePluginMessages.ExportedResource.date)
}
inline std::string* ExportedResource::_internal_mutable_date() {
  
  return date_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ExportedResource::release_date() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.ExportedResource.date)
  return date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExportedResource::set_allocated_date(std::string* date) {
  if (date != nullptr) {
    
  } else {
    
  }
  date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), date,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.ExportedResource.date)
}
inline std::string* ExportedResource::unsafe_arena_release_date() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Orthanc.DatabasePluginMessages.ExportedResource.date)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return date_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ExportedResource::unsafe_arena_set_allocated_date(
    std::string* date) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (date != nullptr) {
    
  } else {
    
  }
  date_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      date, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.ExportedResource.date)
}

// string patient_id = 6;
inline void ExportedResource::clear_patient_id() {
  patient_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ExportedResource::patient_id() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.ExportedResource.patient_id)
  return _internal_patient_id();
}
inline void ExportedResource::set_patient_id(const std::string& value) {
  _internal_set_patient_id(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.ExportedResource.patient_id)
}
inline std::string* ExportedResource::mutable_patient_id() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.ExportedResource.patient_id)
  return _internal_mutable_patient_id();
}
inline const std::string& ExportedResource::_internal_patient_id() const {
  return patient_id_.Get();
}
inline void ExportedResource::_internal_set_patient_id(const std::string& value) {
  
  patient_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ExportedResource::set_patient_id(std::string&& value) {
  
  patient_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Orthanc.DatabasePluginMessages.ExportedResource.patient_id)
}
inline void ExportedResource::set_patient_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  patient_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Orthanc.DatabasePluginMessages.ExportedResource.patient_id)
}
inline void ExportedResource::set_patient_id(const char* value,
    size_t size) {
  
  patient_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Orthanc.DatabasePluginMessages.ExportedResource.patient_id)
}
inline std::string* ExportedResource::_internal_mutable_patient_id() {
  
  return patient_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ExportedResource::release_patient_id() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.ExportedResource.patient_id)
  return patient_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExportedResource::set_allocated_patient_id(std::string* patient_id) {
  if (patient_id != nullptr) {
    
  } else {
    
  }
  patient_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), patient_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.ExportedResource.patient_id)
}
inline std::string* ExportedResource::unsafe_arena_release_patient_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Orthanc.DatabasePluginMessages.ExportedResource.patient_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return patient_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ExportedResource::unsafe_arena_set_allocated_patient_id(
    std::string* patient_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (patient_id != nullptr) {
    
  } else {
    
  }
  patient_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      patient_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.ExportedResource.patient_id)
}

// string study_instance_uid = 7;
inline void ExportedResource::clear_study_instance_uid() {
  study_instance_uid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ExportedResource::study_instance_uid() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.ExportedResource.study_instance_uid)
  return _internal_study_instance_uid();
}
inline void ExportedResource::set_study_instance_uid(const std::string& value) {
  _internal_set_study_instance_uid(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.ExportedResource.study_instance_uid)
}
inline std::string* ExportedResource::mutable_study_instance_uid() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.ExportedResource.study_instance_uid)
  return _internal_mutable_study_instance_uid();
}
inline const std::string& ExportedResource::_internal_study_instance_uid() const {
  return study_instance_uid_.Get();
}
inline void ExportedResource::_internal_set_study_instance_uid(const std::string& value) {
  
  study_instance_uid_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ExportedResource::set_study_instance_uid(std::string&& value) {
  
  study_instance_uid_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Orthanc.DatabasePluginMessages.ExportedResource.study_instance_uid)
}
inline void ExportedResource::set_study_instance_uid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  study_instance_uid_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Orthanc.DatabasePluginMessages.ExportedResource.study_instance_uid)
}
inline void ExportedResource::set_study_instance_uid(const char* value,
    size_t size) {
  
  study_instance_uid_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Orthanc.DatabasePluginMessages.ExportedResource.study_instance_uid)
}
inline std::string* ExportedResource::_internal_mutable_study_instance_uid() {
  
  return study_instance_uid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ExportedResource::release_study_instance_uid() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.ExportedResource.study_instance_uid)
  return study_instance_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExportedResource::set_allocated_study_instance_uid(std::string* study_instance_uid) {
  if (study_instance_uid != nullptr) {
    
  } else {
    
  }
  study_instance_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), study_instance_uid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.ExportedResource.study_instance_uid)
}
inline std::string* ExportedResource::unsafe_arena_release_study_instance_uid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Orthanc.DatabasePluginMessages.ExportedResource.study_instance_uid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return study_instance_uid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ExportedResource::unsafe_arena_set_allocated_study_instance_uid(
    std::string* study_instance_uid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (study_instance_uid != nullptr) {
    
  } else {
    
  }
  study_instance_uid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      study_instance_uid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.ExportedResource.study_instance_uid)
}

// string series_instance_uid = 8;
inline void ExportedResource::clear_series_instance_uid() {
  series_instance_uid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ExportedResource::series_instance_uid() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.ExportedResource.series_instance_uid)
  return _internal_series_instance_uid();
}
inline void ExportedResource::set_series_instance_uid(const std::string& value) {
  _internal_set_series_instance_uid(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.ExportedResource.series_instance_uid)
}
inline std::string* ExportedResource::mutable_series_instance_uid() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.ExportedResource.series_instance_uid)
  return _internal_mutable_series_instance_uid();
}
inline const std::string& ExportedResource::_internal_series_instance_uid() const {
  return series_instance_uid_.Get();
}
inline void ExportedResource::_internal_set_series_instance_uid(const std::string& value) {
  
  series_instance_uid_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ExportedResource::set_series_instance_uid(std::string&& value) {
  
  series_instance_uid_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Orthanc.DatabasePluginMessages.ExportedResource.series_instance_uid)
}
inline void ExportedResource::set_series_instance_uid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  series_instance_uid_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Orthanc.DatabasePluginMessages.ExportedResource.series_instance_uid)
}
inline void ExportedResource::set_series_instance_uid(const char* value,
    size_t size) {
  
  series_instance_uid_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Orthanc.DatabasePluginMessages.ExportedResource.series_instance_uid)
}
inline std::string* ExportedResource::_internal_mutable_series_instance_uid() {
  
  return series_instance_uid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ExportedResource::release_series_instance_uid() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.ExportedResource.series_instance_uid)
  return series_instance_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExportedResource::set_allocated_series_instance_uid(std::string* series_instance_uid) {
  if (series_instance_uid != nullptr) {
    
  } else {
    
  }
  series_instance_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), series_instance_uid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.ExportedResource.series_instance_uid)
}
inline std::string* ExportedResource::unsafe_arena_release_series_instance_uid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Orthanc.DatabasePluginMessages.ExportedResource.series_instance_uid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return series_instance_uid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ExportedResource::unsafe_arena_set_allocated_series_instance_uid(
    std::string* series_instance_uid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (series_instance_uid != nullptr) {
    
  } else {
    
  }
  series_instance_uid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      series_instance_uid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.ExportedResource.series_instance_uid)
}

// string sop_instance_uid = 9;
inline void ExportedResource::clear_sop_instance_uid() {
  sop_instance_uid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ExportedResource::sop_instance_uid() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.ExportedResource.sop_instance_uid)
  return _internal_sop_instance_uid();
}
inline void ExportedResource::set_sop_instance_uid(const std::string& value) {
  _internal_set_sop_instance_uid(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.ExportedResource.sop_instance_uid)
}
inline std::string* ExportedResource::mutable_sop_instance_uid() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.ExportedResource.sop_instance_uid)
  return _internal_mutable_sop_instance_uid();
}
inline const std::string& ExportedResource::_internal_sop_instance_uid() const {
  return sop_instance_uid_.Get();
}
inline void ExportedResource::_internal_set_sop_instance_uid(const std::string& value) {
  
  sop_instance_uid_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ExportedResource::set_sop_instance_uid(std::string&& value) {
  
  sop_instance_uid_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Orthanc.DatabasePluginMessages.ExportedResource.sop_instance_uid)
}
inline void ExportedResource::set_sop_instance_uid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sop_instance_uid_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Orthanc.DatabasePluginMessages.ExportedResource.sop_instance_uid)
}
inline void ExportedResource::set_sop_instance_uid(const char* value,
    size_t size) {
  
  sop_instance_uid_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Orthanc.DatabasePluginMessages.ExportedResource.sop_instance_uid)
}
inline std::string* ExportedResource::_internal_mutable_sop_instance_uid() {
  
  return sop_instance_uid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ExportedResource::release_sop_instance_uid() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.ExportedResource.sop_instance_uid)
  return sop_instance_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExportedResource::set_allocated_sop_instance_uid(std::string* sop_instance_uid) {
  if (sop_instance_uid != nullptr) {
    
  } else {
    
  }
  sop_instance_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sop_instance_uid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.ExportedResource.sop_instance_uid)
}
inline std::string* ExportedResource::unsafe_arena_release_sop_instance_uid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Orthanc.DatabasePluginMessages.ExportedResource.sop_instance_uid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return sop_instance_uid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ExportedResource::unsafe_arena_set_allocated_sop_instance_uid(
    std::string* sop_instance_uid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (sop_instance_uid != nullptr) {
    
  } else {
    
  }
  sop_instance_uid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sop_instance_uid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.ExportedResource.sop_instance_uid)
}

// -------------------------------------------------------------------

// DatabaseConstraint

// .Orthanc.DatabasePluginMessages.ResourceType level = 1;
inline void DatabaseConstraint::clear_level() {
  level_ = 0;
}
inline ::Orthanc::DatabasePluginMessages::ResourceType DatabaseConstraint::_internal_level() const {
  return static_cast< ::Orthanc::DatabasePluginMessages::ResourceType >(level_);
}
inline ::Orthanc::DatabasePluginMessages::ResourceType DatabaseConstraint::level() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.DatabaseConstraint.level)
  return _internal_level();
}
inline void DatabaseConstraint::_internal_set_level(::Orthanc::DatabasePluginMessages::ResourceType value) {
  
  level_ = value;
}
inline void DatabaseConstraint::set_level(::Orthanc::DatabasePluginMessages::ResourceType value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.DatabaseConstraint.level)
}

// uint32 tag_group = 2;
inline void DatabaseConstraint::clear_tag_group() {
  tag_group_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DatabaseConstraint::_internal_tag_group() const {
  return tag_group_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DatabaseConstraint::tag_group() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.DatabaseConstraint.tag_group)
  return _internal_tag_group();
}
inline void DatabaseConstraint::_internal_set_tag_group(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tag_group_ = value;
}
inline void DatabaseConstraint::set_tag_group(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tag_group(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.DatabaseConstraint.tag_group)
}

// uint32 tag_element = 3;
inline void DatabaseConstraint::clear_tag_element() {
  tag_element_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DatabaseConstraint::_internal_tag_element() const {
  return tag_element_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DatabaseConstraint::tag_element() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.DatabaseConstraint.tag_element)
  return _internal_tag_element();
}
inline void DatabaseConstraint::_internal_set_tag_element(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tag_element_ = value;
}
inline void DatabaseConstraint::set_tag_element(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tag_element(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.DatabaseConstraint.tag_element)
}

// bool is_identifier_tag = 4;
inline void DatabaseConstraint::clear_is_identifier_tag() {
  is_identifier_tag_ = false;
}
inline bool DatabaseConstraint::_internal_is_identifier_tag() const {
  return is_identifier_tag_;
}
inline bool DatabaseConstraint::is_identifier_tag() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.DatabaseConstraint.is_identifier_tag)
  return _internal_is_identifier_tag();
}
inline void DatabaseConstraint::_internal_set_is_identifier_tag(bool value) {
  
  is_identifier_tag_ = value;
}
inline void DatabaseConstraint::set_is_identifier_tag(bool value) {
  _internal_set_is_identifier_tag(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.DatabaseConstraint.is_identifier_tag)
}

// bool is_case_sensitive = 5;
inline void DatabaseConstraint::clear_is_case_sensitive() {
  is_case_sensitive_ = false;
}
inline bool DatabaseConstraint::_internal_is_case_sensitive() const {
  return is_case_sensitive_;
}
inline bool DatabaseConstraint::is_case_sensitive() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.DatabaseConstraint.is_case_sensitive)
  return _internal_is_case_sensitive();
}
inline void DatabaseConstraint::_internal_set_is_case_sensitive(bool value) {
  
  is_case_sensitive_ = value;
}
inline void DatabaseConstraint::set_is_case_sensitive(bool value) {
  _internal_set_is_case_sensitive(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.DatabaseConstraint.is_case_sensitive)
}

// bool is_mandatory = 6;
inline void DatabaseConstraint::clear_is_mandatory() {
  is_mandatory_ = false;
}
inline bool DatabaseConstraint::_internal_is_mandatory() const {
  return is_mandatory_;
}
inline bool DatabaseConstraint::is_mandatory() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.DatabaseConstraint.is_mandatory)
  return _internal_is_mandatory();
}
inline void DatabaseConstraint::_internal_set_is_mandatory(bool value) {
  
  is_mandatory_ = value;
}
inline void DatabaseConstraint::set_is_mandatory(bool value) {
  _internal_set_is_mandatory(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.DatabaseConstraint.is_mandatory)
}

// .Orthanc.DatabasePluginMessages.ConstraintType type = 7;
inline void DatabaseConstraint::clear_type() {
  type_ = 0;
}
inline ::Orthanc::DatabasePluginMessages::ConstraintType DatabaseConstraint::_internal_type() const {
  return static_cast< ::Orthanc::DatabasePluginMessages::ConstraintType >(type_);
}
inline ::Orthanc::DatabasePluginMessages::ConstraintType DatabaseConstraint::type() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.DatabaseConstraint.type)
  return _internal_type();
}
inline void DatabaseConstraint::_internal_set_type(::Orthanc::DatabasePluginMessages::ConstraintType value) {
  
  type_ = value;
}
inline void DatabaseConstraint::set_type(::Orthanc::DatabasePluginMessages::ConstraintType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.DatabaseConstraint.type)
}

// repeated string values = 8;
inline int DatabaseConstraint::_internal_values_size() const {
  return values_.size();
}
inline int DatabaseConstraint::values_size() const {
  return _internal_values_size();
}
inline void DatabaseConstraint::clear_values() {
  values_.Clear();
}
inline std::string* DatabaseConstraint::add_values() {
  // @@protoc_insertion_point(field_add_mutable:Orthanc.DatabasePluginMessages.DatabaseConstraint.values)
  return _internal_add_values();
}
inline const std::string& DatabaseConstraint::_internal_values(int index) const {
  return values_.Get(index);
}
inline const std::string& DatabaseConstraint::values(int index) const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.DatabaseConstraint.values)
  return _internal_values(index);
}
inline std::string* DatabaseConstraint::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.DatabaseConstraint.values)
  return values_.Mutable(index);
}
inline void DatabaseConstraint::set_values(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.DatabaseConstraint.values)
  values_.Mutable(index)->assign(value);
}
inline void DatabaseConstraint::set_values(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.DatabaseConstraint.values)
  values_.Mutable(index)->assign(std::move(value));
}
inline void DatabaseConstraint::set_values(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Orthanc.DatabasePluginMessages.DatabaseConstraint.values)
}
inline void DatabaseConstraint::set_values(int index, const char* value, size_t size) {
  values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Orthanc.DatabasePluginMessages.DatabaseConstraint.values)
}
inline std::string* DatabaseConstraint::_internal_add_values() {
  return values_.Add();
}
inline void DatabaseConstraint::add_values(const std::string& value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Orthanc.DatabasePluginMessages.DatabaseConstraint.values)
}
inline void DatabaseConstraint::add_values(std::string&& value) {
  values_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Orthanc.DatabasePluginMessages.DatabaseConstraint.values)
}
inline void DatabaseConstraint::add_values(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Orthanc.DatabasePluginMessages.DatabaseConstraint.values)
}
inline void DatabaseConstraint::add_values(const char* value, size_t size) {
  values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Orthanc.DatabasePluginMessages.DatabaseConstraint.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DatabaseConstraint::values() const {
  // @@protoc_insertion_point(field_list:Orthanc.DatabasePluginMessages.DatabaseConstraint.values)
  return values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DatabaseConstraint::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:Orthanc.DatabasePluginMessages.DatabaseConstraint.values)
  return &values_;
}

// -------------------------------------------------------------------

// GetSystemInformation_Request

// -------------------------------------------------------------------

// GetSystemInformation_Response

// uint32 database_version = 1;
inline void GetSystemInformation_Response::clear_database_version() {
  database_version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetSystemInformation_Response::_internal_database_version() const {
  return database_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetSystemInformation_Response::database_version() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.GetSystemInformation.Response.database_version)
  return _internal_database_version();
}
inline void GetSystemInformation_Response::_internal_set_database_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  database_version_ = value;
}
inline void GetSystemInformation_Response::set_database_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_database_version(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.GetSystemInformation.Response.database_version)
}

// bool supports_flush_to_disk = 2;
inline void GetSystemInformation_Response::clear_supports_flush_to_disk() {
  supports_flush_to_disk_ = false;
}
inline bool GetSystemInformation_Response::_internal_supports_flush_to_disk() const {
  return supports_flush_to_disk_;
}
inline bool GetSystemInformation_Response::supports_flush_to_disk() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.GetSystemInformation.Response.supports_flush_to_disk)
  return _internal_supports_flush_to_disk();
}
inline void GetSystemInformation_Response::_internal_set_supports_flush_to_disk(bool value) {
  
  supports_flush_to_disk_ = value;
}
inline void GetSystemInformation_Response::set_supports_flush_to_disk(bool value) {
  _internal_set_supports_flush_to_disk(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.GetSystemInformation.Response.supports_flush_to_disk)
}

// bool supports_revisions = 3;
inline void GetSystemInformation_Response::clear_supports_revisions() {
  supports_revisions_ = false;
}
inline bool GetSystemInformation_Response::_internal_supports_revisions() const {
  return supports_revisions_;
}
inline bool GetSystemInformation_Response::supports_revisions() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.GetSystemInformation.Response.supports_revisions)
  return _internal_supports_revisions();
}
inline void GetSystemInformation_Response::_internal_set_supports_revisions(bool value) {
  
  supports_revisions_ = value;
}
inline void GetSystemInformation_Response::set_supports_revisions(bool value) {
  _internal_set_supports_revisions(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.GetSystemInformation.Response.supports_revisions)
}

// bool supports_labels = 4;
inline void GetSystemInformation_Response::clear_supports_labels() {
  supports_labels_ = false;
}
inline bool GetSystemInformation_Response::_internal_supports_labels() const {
  return supports_labels_;
}
inline bool GetSystemInformation_Response::supports_labels() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.GetSystemInformation.Response.supports_labels)
  return _internal_supports_labels();
}
inline void GetSystemInformation_Response::_internal_set_supports_labels(bool value) {
  
  supports_labels_ = value;
}
inline void GetSystemInformation_Response::set_supports_labels(bool value) {
  _internal_set_supports_labels(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.GetSystemInformation.Response.supports_labels)
}

// bool supports_increment_global_property = 5;
inline void GetSystemInformation_Response::clear_supports_increment_global_property() {
  supports_increment_global_property_ = false;
}
inline bool GetSystemInformation_Response::_internal_supports_increment_global_property() const {
  return supports_increment_global_property_;
}
inline bool GetSystemInformation_Response::supports_increment_global_property() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.GetSystemInformation.Response.supports_increment_global_property)
  return _internal_supports_increment_global_property();
}
inline void GetSystemInformation_Response::_internal_set_supports_increment_global_property(bool value) {
  
  supports_increment_global_property_ = value;
}
inline void GetSystemInformation_Response::set_supports_increment_global_property(bool value) {
  _internal_set_supports_increment_global_property(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.GetSystemInformation.Response.supports_increment_global_property)
}

// bool has_update_and_get_statistics = 6;
inline void GetSystemInformation_Response::clear_has_update_and_get_statistics() {
  has_update_and_get_statistics_ = false;
}
inline bool GetSystemInformation_Response::_internal_has_update_and_get_statistics() const {
  return has_update_and_get_statistics_;
}
inline bool GetSystemInformation_Response::has_update_and_get_statistics() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.GetSystemInformation.Response.has_update_and_get_statistics)
  return _internal_has_update_and_get_statistics();
}
inline void GetSystemInformation_Response::_internal_set_has_update_and_get_statistics(bool value) {
  
  has_update_and_get_statistics_ = value;
}
inline void GetSystemInformation_Response::set_has_update_and_get_statistics(bool value) {
  _internal_set_has_update_and_get_statistics(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.GetSystemInformation.Response.has_update_and_get_statistics)
}

// bool has_measure_latency = 7;
inline void GetSystemInformation_Response::clear_has_measure_latency() {
  has_measure_latency_ = false;
}
inline bool GetSystemInformation_Response::_internal_has_measure_latency() const {
  return has_measure_latency_;
}
inline bool GetSystemInformation_Response::has_measure_latency() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.GetSystemInformation.Response.has_measure_latency)
  return _internal_has_measure_latency();
}
inline void GetSystemInformation_Response::_internal_set_has_measure_latency(bool value) {
  
  has_measure_latency_ = value;
}
inline void GetSystemInformation_Response::set_has_measure_latency(bool value) {
  _internal_set_has_measure_latency(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.GetSystemInformation.Response.has_measure_latency)
}

// -------------------------------------------------------------------

// GetSystemInformation

// -------------------------------------------------------------------

// Open_Request_IdentifierTag

// .Orthanc.DatabasePluginMessages.ResourceType level = 1;
inline void Open_Request_IdentifierTag::clear_level() {
  level_ = 0;
}
inline ::Orthanc::DatabasePluginMessages::ResourceType Open_Request_IdentifierTag::_internal_level() const {
  return static_cast< ::Orthanc::DatabasePluginMessages::ResourceType >(level_);
}
inline ::Orthanc::DatabasePluginMessages::ResourceType Open_Request_IdentifierTag::level() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.Open.Request.IdentifierTag.level)
  return _internal_level();
}
inline void Open_Request_IdentifierTag::_internal_set_level(::Orthanc::DatabasePluginMessages::ResourceType value) {
  
  level_ = value;
}
inline void Open_Request_IdentifierTag::set_level(::Orthanc::DatabasePluginMessages::ResourceType value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.Open.Request.IdentifierTag.level)
}

// uint32 group = 2;
inline void Open_Request_IdentifierTag::clear_group() {
  group_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Open_Request_IdentifierTag::_internal_group() const {
  return group_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Open_Request_IdentifierTag::group() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.Open.Request.IdentifierTag.group)
  return _internal_group();
}
inline void Open_Request_IdentifierTag::_internal_set_group(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  group_ = value;
}
inline void Open_Request_IdentifierTag::set_group(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_group(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.Open.Request.IdentifierTag.group)
}

// uint32 element = 3;
inline void Open_Request_IdentifierTag::clear_element() {
  element_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Open_Request_IdentifierTag::_internal_element() const {
  return element_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Open_Request_IdentifierTag::element() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.Open.Request.IdentifierTag.element)
  return _internal_element();
}
inline void Open_Request_IdentifierTag::_internal_set_element(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  element_ = value;
}
inline void Open_Request_IdentifierTag::set_element(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_element(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.Open.Request.IdentifierTag.element)
}

// string name = 4;
inline void Open_Request_IdentifierTag::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Open_Request_IdentifierTag::name() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.Open.Request.IdentifierTag.name)
  return _internal_name();
}
inline void Open_Request_IdentifierTag::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.Open.Request.IdentifierTag.name)
}
inline std::string* Open_Request_IdentifierTag::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.Open.Request.IdentifierTag.name)
  return _internal_mutable_name();
}
inline const std::string& Open_Request_IdentifierTag::_internal_name() const {
  return name_.Get();
}
inline void Open_Request_IdentifierTag::_internal_set_name(const std::string& value) {
  
  name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Open_Request_IdentifierTag::set_name(std::string&& value) {
  
  name_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Orthanc.DatabasePluginMessages.Open.Request.IdentifierTag.name)
}
inline void Open_Request_IdentifierTag::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Orthanc.DatabasePluginMessages.Open.Request.IdentifierTag.name)
}
inline void Open_Request_IdentifierTag::set_name(const char* value,
    size_t size) {
  
  name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Orthanc.DatabasePluginMessages.Open.Request.IdentifierTag.name)
}
inline std::string* Open_Request_IdentifierTag::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Open_Request_IdentifierTag::release_name() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.Open.Request.IdentifierTag.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Open_Request_IdentifierTag::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.Open.Request.IdentifierTag.name)
}
inline std::string* Open_Request_IdentifierTag::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Orthanc.DatabasePluginMessages.Open.Request.IdentifierTag.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Open_Request_IdentifierTag::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.Open.Request.IdentifierTag.name)
}

// -------------------------------------------------------------------

// Open_Request

// repeated .Orthanc.DatabasePluginMessages.Open.Request.IdentifierTag identifier_tags = 1;
inline int Open_Request::_internal_identifier_tags_size() const {
  return identifier_tags_.size();
}
inline int Open_Request::identifier_tags_size() const {
  return _internal_identifier_tags_size();
}
inline void Open_Request::clear_identifier_tags() {
  identifier_tags_.Clear();
}
inline ::Orthanc::DatabasePluginMessages::Open_Request_IdentifierTag* Open_Request::mutable_identifier_tags(int index) {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.Open.Request.identifier_tags)
  return identifier_tags_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Orthanc::DatabasePluginMessages::Open_Request_IdentifierTag >*
Open_Request::mutable_identifier_tags() {
  // @@protoc_insertion_point(field_mutable_list:Orthanc.DatabasePluginMessages.Open.Request.identifier_tags)
  return &identifier_tags_;
}
inline const ::Orthanc::DatabasePluginMessages::Open_Request_IdentifierTag& Open_Request::_internal_identifier_tags(int index) const {
  return identifier_tags_.Get(index);
}
inline const ::Orthanc::DatabasePluginMessages::Open_Request_IdentifierTag& Open_Request::identifier_tags(int index) const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.Open.Request.identifier_tags)
  return _internal_identifier_tags(index);
}
inline ::Orthanc::DatabasePluginMessages::Open_Request_IdentifierTag* Open_Request::_internal_add_identifier_tags() {
  return identifier_tags_.Add();
}
inline ::Orthanc::DatabasePluginMessages::Open_Request_IdentifierTag* Open_Request::add_identifier_tags() {
  // @@protoc_insertion_point(field_add:Orthanc.DatabasePluginMessages.Open.Request.identifier_tags)
  return _internal_add_identifier_tags();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Orthanc::DatabasePluginMessages::Open_Request_IdentifierTag >&
Open_Request::identifier_tags() const {
  // @@protoc_insertion_point(field_list:Orthanc.DatabasePluginMessages.Open.Request.identifier_tags)
  return identifier_tags_;
}

// -------------------------------------------------------------------

// Open_Response

// -------------------------------------------------------------------

// Open

// -------------------------------------------------------------------

// Close_Request

// -------------------------------------------------------------------

// Close_Response

// -------------------------------------------------------------------

// Close

// -------------------------------------------------------------------

// FlushToDisk_Request

// -------------------------------------------------------------------

// FlushToDisk_Response

// -------------------------------------------------------------------

// FlushToDisk

// -------------------------------------------------------------------

// StartTransaction_Request

// .Orthanc.DatabasePluginMessages.TransactionType type = 1;
inline void StartTransaction_Request::clear_type() {
  type_ = 0;
}
inline ::Orthanc::DatabasePluginMessages::TransactionType StartTransaction_Request::_internal_type() const {
  return static_cast< ::Orthanc::DatabasePluginMessages::TransactionType >(type_);
}
inline ::Orthanc::DatabasePluginMessages::TransactionType StartTransaction_Request::type() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.StartTransaction.Request.type)
  return _internal_type();
}
inline void StartTransaction_Request::_internal_set_type(::Orthanc::DatabasePluginMessages::TransactionType value) {
  
  type_ = value;
}
inline void StartTransaction_Request::set_type(::Orthanc::DatabasePluginMessages::TransactionType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.StartTransaction.Request.type)
}

// -------------------------------------------------------------------

// StartTransaction_Response

// sfixed64 transaction = 1;
inline void StartTransaction_Response::clear_transaction() {
  transaction_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StartTransaction_Response::_internal_transaction() const {
  return transaction_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StartTransaction_Response::transaction() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.StartTransaction.Response.transaction)
  return _internal_transaction();
}
inline void StartTransaction_Response::_internal_set_transaction(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  transaction_ = value;
}
inline void StartTransaction_Response::set_transaction(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_transaction(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.StartTransaction.Response.transaction)
}

// -------------------------------------------------------------------

// StartTransaction

// -------------------------------------------------------------------

// Upgrade_Request

// uint32 target_version = 1;
inline void Upgrade_Request::clear_target_version() {
  target_version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Upgrade_Request::_internal_target_version() const {
  return target_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Upgrade_Request::target_version() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.Upgrade.Request.target_version)
  return _internal_target_version();
}
inline void Upgrade_Request::_internal_set_target_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  target_version_ = value;
}
inline void Upgrade_Request::set_target_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_target_version(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.Upgrade.Request.target_version)
}

// sfixed64 storage_area = 2;
inline void Upgrade_Request::clear_storage_area() {
  storage_area_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Upgrade_Request::_internal_storage_area() const {
  return storage_area_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Upgrade_Request::storage_area() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.Upgrade.Request.storage_area)
  return _internal_storage_area();
}
inline void Upgrade_Request::_internal_set_storage_area(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  storage_area_ = value;
}
inline void Upgrade_Request::set_storage_area(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_storage_area(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.Upgrade.Request.storage_area)
}

// sfixed64 transaction = 3;
inline void Upgrade_Request::clear_transaction() {
  transaction_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Upgrade_Request::_internal_transaction() const {
  return transaction_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Upgrade_Request::transaction() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.Upgrade.Request.transaction)
  return _internal_transaction();
}
inline void Upgrade_Request::_internal_set_transaction(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  transaction_ = value;
}
inline void Upgrade_Request::set_transaction(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_transaction(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.Upgrade.Request.transaction)
}

// -------------------------------------------------------------------

// Upgrade_Response

// -------------------------------------------------------------------

// Upgrade

// -------------------------------------------------------------------

// FinalizeTransaction_Request

// sfixed64 transaction = 1;
inline void FinalizeTransaction_Request::clear_transaction() {
  transaction_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FinalizeTransaction_Request::_internal_transaction() const {
  return transaction_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FinalizeTransaction_Request::transaction() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.FinalizeTransaction.Request.transaction)
  return _internal_transaction();
}
inline void FinalizeTransaction_Request::_internal_set_transaction(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  transaction_ = value;
}
inline void FinalizeTransaction_Request::set_transaction(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_transaction(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.FinalizeTransaction.Request.transaction)
}

// -------------------------------------------------------------------

// FinalizeTransaction_Response

// -------------------------------------------------------------------

// FinalizeTransaction

// -------------------------------------------------------------------

// MeasureLatency_Request

// -------------------------------------------------------------------

// MeasureLatency_Response

// int64 latency_us = 1;
inline void MeasureLatency_Response::clear_latency_us() {
  latency_us_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MeasureLatency_Response::_internal_latency_us() const {
  return latency_us_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MeasureLatency_Response::latency_us() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.MeasureLatency.Response.latency_us)
  return _internal_latency_us();
}
inline void MeasureLatency_Response::_internal_set_latency_us(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  latency_us_ = value;
}
inline void MeasureLatency_Response::set_latency_us(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_latency_us(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.MeasureLatency.Response.latency_us)
}

// -------------------------------------------------------------------

// MeasureLatency

// -------------------------------------------------------------------

// DatabaseRequest

// sfixed64 database = 1;
inline void DatabaseRequest::clear_database() {
  database_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DatabaseRequest::_internal_database() const {
  return database_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DatabaseRequest::database() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.DatabaseRequest.database)
  return _internal_database();
}
inline void DatabaseRequest::_internal_set_database(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  database_ = value;
}
inline void DatabaseRequest::set_database(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_database(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.DatabaseRequest.database)
}

// .Orthanc.DatabasePluginMessages.DatabaseOperation operation = 2;
inline void DatabaseRequest::clear_operation() {
  operation_ = 0;
}
inline ::Orthanc::DatabasePluginMessages::DatabaseOperation DatabaseRequest::_internal_operation() const {
  return static_cast< ::Orthanc::DatabasePluginMessages::DatabaseOperation >(operation_);
}
inline ::Orthanc::DatabasePluginMessages::DatabaseOperation DatabaseRequest::operation() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.DatabaseRequest.operation)
  return _internal_operation();
}
inline void DatabaseRequest::_internal_set_operation(::Orthanc::DatabasePluginMessages::DatabaseOperation value) {
  
  operation_ = value;
}
inline void DatabaseRequest::set_operation(::Orthanc::DatabasePluginMessages::DatabaseOperation value) {
  _internal_set_operation(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.DatabaseRequest.operation)
}

// .Orthanc.DatabasePluginMessages.GetSystemInformation.Request get_system_information = 100;
inline bool DatabaseRequest::_internal_has_get_system_information() const {
  return this != internal_default_instance() && get_system_information_ != nullptr;
}
inline bool DatabaseRequest::has_get_system_information() const {
  return _internal_has_get_system_information();
}
inline void DatabaseRequest::clear_get_system_information() {
  if (GetArena() == nullptr && get_system_information_ != nullptr) {
    delete get_system_information_;
  }
  get_system_information_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::GetSystemInformation_Request& DatabaseRequest::_internal_get_system_information() const {
  const ::Orthanc::DatabasePluginMessages::GetSystemInformation_Request* p = get_system_information_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::GetSystemInformation_Request*>(
      &::Orthanc::DatabasePluginMessages::_GetSystemInformation_Request_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::GetSystemInformation_Request& DatabaseRequest::get_system_information() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.DatabaseRequest.get_system_information)
  return _internal_get_system_information();
}
inline void DatabaseRequest::unsafe_arena_set_allocated_get_system_information(
    ::Orthanc::DatabasePluginMessages::GetSystemInformation_Request* get_system_information) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(get_system_information_);
  }
  get_system_information_ = get_system_information;
  if (get_system_information) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.DatabaseRequest.get_system_information)
}
inline ::Orthanc::DatabasePluginMessages::GetSystemInformation_Request* DatabaseRequest::release_get_system_information() {
  auto temp = unsafe_arena_release_get_system_information();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::GetSystemInformation_Request* DatabaseRequest::unsafe_arena_release_get_system_information() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.DatabaseRequest.get_system_information)
  
  ::Orthanc::DatabasePluginMessages::GetSystemInformation_Request* temp = get_system_information_;
  get_system_information_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::GetSystemInformation_Request* DatabaseRequest::_internal_mutable_get_system_information() {
  
  if (get_system_information_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetSystemInformation_Request>(GetArena());
    get_system_information_ = p;
  }
  return get_system_information_;
}
inline ::Orthanc::DatabasePluginMessages::GetSystemInformation_Request* DatabaseRequest::mutable_get_system_information() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.DatabaseRequest.get_system_information)
  return _internal_mutable_get_system_information();
}
inline void DatabaseRequest::set_allocated_get_system_information(::Orthanc::DatabasePluginMessages::GetSystemInformation_Request* get_system_information) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete get_system_information_;
  }
  if (get_system_information) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_system_information);
    if (message_arena != submessage_arena) {
      get_system_information = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_system_information, submessage_arena);
    }
    
  } else {
    
  }
  get_system_information_ = get_system_information;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.DatabaseRequest.get_system_information)
}

// .Orthanc.DatabasePluginMessages.Open.Request open = 101;
inline bool DatabaseRequest::_internal_has_open() const {
  return this != internal_default_instance() && open_ != nullptr;
}
inline bool DatabaseRequest::has_open() const {
  return _internal_has_open();
}
inline void DatabaseRequest::clear_open() {
  if (GetArena() == nullptr && open_ != nullptr) {
    delete open_;
  }
  open_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::Open_Request& DatabaseRequest::_internal_open() const {
  const ::Orthanc::DatabasePluginMessages::Open_Request* p = open_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::Open_Request*>(
      &::Orthanc::DatabasePluginMessages::_Open_Request_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::Open_Request& DatabaseRequest::open() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.DatabaseRequest.open)
  return _internal_open();
}
inline void DatabaseRequest::unsafe_arena_set_allocated_open(
    ::Orthanc::DatabasePluginMessages::Open_Request* open) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(open_);
  }
  open_ = open;
  if (open) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.DatabaseRequest.open)
}
inline ::Orthanc::DatabasePluginMessages::Open_Request* DatabaseRequest::release_open() {
  auto temp = unsafe_arena_release_open();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::Open_Request* DatabaseRequest::unsafe_arena_release_open() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.DatabaseRequest.open)
  
  ::Orthanc::DatabasePluginMessages::Open_Request* temp = open_;
  open_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::Open_Request* DatabaseRequest::_internal_mutable_open() {
  
  if (open_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::Open_Request>(GetArena());
    open_ = p;
  }
  return open_;
}
inline ::Orthanc::DatabasePluginMessages::Open_Request* DatabaseRequest::mutable_open() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.DatabaseRequest.open)
  return _internal_mutable_open();
}
inline void DatabaseRequest::set_allocated_open(::Orthanc::DatabasePluginMessages::Open_Request* open) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete open_;
  }
  if (open) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(open);
    if (message_arena != submessage_arena) {
      open = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, open, submessage_arena);
    }
    
  } else {
    
  }
  open_ = open;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.DatabaseRequest.open)
}

// .Orthanc.DatabasePluginMessages.Close.Request close = 102;
inline bool DatabaseRequest::_internal_has_close() const {
  return this != internal_default_instance() && close_ != nullptr;
}
inline bool DatabaseRequest::has_close() const {
  return _internal_has_close();
}
inline void DatabaseRequest::clear_close() {
  if (GetArena() == nullptr && close_ != nullptr) {
    delete close_;
  }
  close_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::Close_Request& DatabaseRequest::_internal_close() const {
  const ::Orthanc::DatabasePluginMessages::Close_Request* p = close_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::Close_Request*>(
      &::Orthanc::DatabasePluginMessages::_Close_Request_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::Close_Request& DatabaseRequest::close() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.DatabaseRequest.close)
  return _internal_close();
}
inline void DatabaseRequest::unsafe_arena_set_allocated_close(
    ::Orthanc::DatabasePluginMessages::Close_Request* close) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(close_);
  }
  close_ = close;
  if (close) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.DatabaseRequest.close)
}
inline ::Orthanc::DatabasePluginMessages::Close_Request* DatabaseRequest::release_close() {
  auto temp = unsafe_arena_release_close();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::Close_Request* DatabaseRequest::unsafe_arena_release_close() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.DatabaseRequest.close)
  
  ::Orthanc::DatabasePluginMessages::Close_Request* temp = close_;
  close_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::Close_Request* DatabaseRequest::_internal_mutable_close() {
  
  if (close_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::Close_Request>(GetArena());
    close_ = p;
  }
  return close_;
}
inline ::Orthanc::DatabasePluginMessages::Close_Request* DatabaseRequest::mutable_close() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.DatabaseRequest.close)
  return _internal_mutable_close();
}
inline void DatabaseRequest::set_allocated_close(::Orthanc::DatabasePluginMessages::Close_Request* close) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete close_;
  }
  if (close) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(close);
    if (message_arena != submessage_arena) {
      close = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, close, submessage_arena);
    }
    
  } else {
    
  }
  close_ = close;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.DatabaseRequest.close)
}

// .Orthanc.DatabasePluginMessages.FlushToDisk.Request flush_to_disk = 103;
inline bool DatabaseRequest::_internal_has_flush_to_disk() const {
  return this != internal_default_instance() && flush_to_disk_ != nullptr;
}
inline bool DatabaseRequest::has_flush_to_disk() const {
  return _internal_has_flush_to_disk();
}
inline void DatabaseRequest::clear_flush_to_disk() {
  if (GetArena() == nullptr && flush_to_disk_ != nullptr) {
    delete flush_to_disk_;
  }
  flush_to_disk_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::FlushToDisk_Request& DatabaseRequest::_internal_flush_to_disk() const {
  const ::Orthanc::DatabasePluginMessages::FlushToDisk_Request* p = flush_to_disk_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::FlushToDisk_Request*>(
      &::Orthanc::DatabasePluginMessages::_FlushToDisk_Request_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::FlushToDisk_Request& DatabaseRequest::flush_to_disk() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.DatabaseRequest.flush_to_disk)
  return _internal_flush_to_disk();
}
inline void DatabaseRequest::unsafe_arena_set_allocated_flush_to_disk(
    ::Orthanc::DatabasePluginMessages::FlushToDisk_Request* flush_to_disk) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(flush_to_disk_);
  }
  flush_to_disk_ = flush_to_disk;
  if (flush_to_disk) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.DatabaseRequest.flush_to_disk)
}
inline ::Orthanc::DatabasePluginMessages::FlushToDisk_Request* DatabaseRequest::release_flush_to_disk() {
  auto temp = unsafe_arena_release_flush_to_disk();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::FlushToDisk_Request* DatabaseRequest::unsafe_arena_release_flush_to_disk() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.DatabaseRequest.flush_to_disk)
  
  ::Orthanc::DatabasePluginMessages::FlushToDisk_Request* temp = flush_to_disk_;
  flush_to_disk_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::FlushToDisk_Request* DatabaseRequest::_internal_mutable_flush_to_disk() {
  
  if (flush_to_disk_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::FlushToDisk_Request>(GetArena());
    flush_to_disk_ = p;
  }
  return flush_to_disk_;
}
inline ::Orthanc::DatabasePluginMessages::FlushToDisk_Request* DatabaseRequest::mutable_flush_to_disk() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.DatabaseRequest.flush_to_disk)
  return _internal_mutable_flush_to_disk();
}
inline void DatabaseRequest::set_allocated_flush_to_disk(::Orthanc::DatabasePluginMessages::FlushToDisk_Request* flush_to_disk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete flush_to_disk_;
  }
  if (flush_to_disk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(flush_to_disk);
    if (message_arena != submessage_arena) {
      flush_to_disk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flush_to_disk, submessage_arena);
    }
    
  } else {
    
  }
  flush_to_disk_ = flush_to_disk;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.DatabaseRequest.flush_to_disk)
}

// .Orthanc.DatabasePluginMessages.StartTransaction.Request start_transaction = 104;
inline bool DatabaseRequest::_internal_has_start_transaction() const {
  return this != internal_default_instance() && start_transaction_ != nullptr;
}
inline bool DatabaseRequest::has_start_transaction() const {
  return _internal_has_start_transaction();
}
inline void DatabaseRequest::clear_start_transaction() {
  if (GetArena() == nullptr && start_transaction_ != nullptr) {
    delete start_transaction_;
  }
  start_transaction_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::StartTransaction_Request& DatabaseRequest::_internal_start_transaction() const {
  const ::Orthanc::DatabasePluginMessages::StartTransaction_Request* p = start_transaction_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::StartTransaction_Request*>(
      &::Orthanc::DatabasePluginMessages::_StartTransaction_Request_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::StartTransaction_Request& DatabaseRequest::start_transaction() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.DatabaseRequest.start_transaction)
  return _internal_start_transaction();
}
inline void DatabaseRequest::unsafe_arena_set_allocated_start_transaction(
    ::Orthanc::DatabasePluginMessages::StartTransaction_Request* start_transaction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_transaction_);
  }
  start_transaction_ = start_transaction;
  if (start_transaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.DatabaseRequest.start_transaction)
}
inline ::Orthanc::DatabasePluginMessages::StartTransaction_Request* DatabaseRequest::release_start_transaction() {
  auto temp = unsafe_arena_release_start_transaction();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::StartTransaction_Request* DatabaseRequest::unsafe_arena_release_start_transaction() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.DatabaseRequest.start_transaction)
  
  ::Orthanc::DatabasePluginMessages::StartTransaction_Request* temp = start_transaction_;
  start_transaction_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::StartTransaction_Request* DatabaseRequest::_internal_mutable_start_transaction() {
  
  if (start_transaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::StartTransaction_Request>(GetArena());
    start_transaction_ = p;
  }
  return start_transaction_;
}
inline ::Orthanc::DatabasePluginMessages::StartTransaction_Request* DatabaseRequest::mutable_start_transaction() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.DatabaseRequest.start_transaction)
  return _internal_mutable_start_transaction();
}
inline void DatabaseRequest::set_allocated_start_transaction(::Orthanc::DatabasePluginMessages::StartTransaction_Request* start_transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete start_transaction_;
  }
  if (start_transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(start_transaction);
    if (message_arena != submessage_arena) {
      start_transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_transaction, submessage_arena);
    }
    
  } else {
    
  }
  start_transaction_ = start_transaction;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.DatabaseRequest.start_transaction)
}

// .Orthanc.DatabasePluginMessages.Upgrade.Request upgrade = 105;
inline bool DatabaseRequest::_internal_has_upgrade() const {
  return this != internal_default_instance() && upgrade_ != nullptr;
}
inline bool DatabaseRequest::has_upgrade() const {
  return _internal_has_upgrade();
}
inline void DatabaseRequest::clear_upgrade() {
  if (GetArena() == nullptr && upgrade_ != nullptr) {
    delete upgrade_;
  }
  upgrade_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::Upgrade_Request& DatabaseRequest::_internal_upgrade() const {
  const ::Orthanc::DatabasePluginMessages::Upgrade_Request* p = upgrade_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::Upgrade_Request*>(
      &::Orthanc::DatabasePluginMessages::_Upgrade_Request_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::Upgrade_Request& DatabaseRequest::upgrade() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.DatabaseRequest.upgrade)
  return _internal_upgrade();
}
inline void DatabaseRequest::unsafe_arena_set_allocated_upgrade(
    ::Orthanc::DatabasePluginMessages::Upgrade_Request* upgrade) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(upgrade_);
  }
  upgrade_ = upgrade;
  if (upgrade) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.DatabaseRequest.upgrade)
}
inline ::Orthanc::DatabasePluginMessages::Upgrade_Request* DatabaseRequest::release_upgrade() {
  auto temp = unsafe_arena_release_upgrade();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::Upgrade_Request* DatabaseRequest::unsafe_arena_release_upgrade() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.DatabaseRequest.upgrade)
  
  ::Orthanc::DatabasePluginMessages::Upgrade_Request* temp = upgrade_;
  upgrade_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::Upgrade_Request* DatabaseRequest::_internal_mutable_upgrade() {
  
  if (upgrade_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::Upgrade_Request>(GetArena());
    upgrade_ = p;
  }
  return upgrade_;
}
inline ::Orthanc::DatabasePluginMessages::Upgrade_Request* DatabaseRequest::mutable_upgrade() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.DatabaseRequest.upgrade)
  return _internal_mutable_upgrade();
}
inline void DatabaseRequest::set_allocated_upgrade(::Orthanc::DatabasePluginMessages::Upgrade_Request* upgrade) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete upgrade_;
  }
  if (upgrade) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(upgrade);
    if (message_arena != submessage_arena) {
      upgrade = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, upgrade, submessage_arena);
    }
    
  } else {
    
  }
  upgrade_ = upgrade;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.DatabaseRequest.upgrade)
}

// .Orthanc.DatabasePluginMessages.FinalizeTransaction.Request finalize_transaction = 106;
inline bool DatabaseRequest::_internal_has_finalize_transaction() const {
  return this != internal_default_instance() && finalize_transaction_ != nullptr;
}
inline bool DatabaseRequest::has_finalize_transaction() const {
  return _internal_has_finalize_transaction();
}
inline void DatabaseRequest::clear_finalize_transaction() {
  if (GetArena() == nullptr && finalize_transaction_ != nullptr) {
    delete finalize_transaction_;
  }
  finalize_transaction_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::FinalizeTransaction_Request& DatabaseRequest::_internal_finalize_transaction() const {
  const ::Orthanc::DatabasePluginMessages::FinalizeTransaction_Request* p = finalize_transaction_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::FinalizeTransaction_Request*>(
      &::Orthanc::DatabasePluginMessages::_FinalizeTransaction_Request_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::FinalizeTransaction_Request& DatabaseRequest::finalize_transaction() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.DatabaseRequest.finalize_transaction)
  return _internal_finalize_transaction();
}
inline void DatabaseRequest::unsafe_arena_set_allocated_finalize_transaction(
    ::Orthanc::DatabasePluginMessages::FinalizeTransaction_Request* finalize_transaction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(finalize_transaction_);
  }
  finalize_transaction_ = finalize_transaction;
  if (finalize_transaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.DatabaseRequest.finalize_transaction)
}
inline ::Orthanc::DatabasePluginMessages::FinalizeTransaction_Request* DatabaseRequest::release_finalize_transaction() {
  auto temp = unsafe_arena_release_finalize_transaction();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::FinalizeTransaction_Request* DatabaseRequest::unsafe_arena_release_finalize_transaction() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.DatabaseRequest.finalize_transaction)
  
  ::Orthanc::DatabasePluginMessages::FinalizeTransaction_Request* temp = finalize_transaction_;
  finalize_transaction_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::FinalizeTransaction_Request* DatabaseRequest::_internal_mutable_finalize_transaction() {
  
  if (finalize_transaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::FinalizeTransaction_Request>(GetArena());
    finalize_transaction_ = p;
  }
  return finalize_transaction_;
}
inline ::Orthanc::DatabasePluginMessages::FinalizeTransaction_Request* DatabaseRequest::mutable_finalize_transaction() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.DatabaseRequest.finalize_transaction)
  return _internal_mutable_finalize_transaction();
}
inline void DatabaseRequest::set_allocated_finalize_transaction(::Orthanc::DatabasePluginMessages::FinalizeTransaction_Request* finalize_transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete finalize_transaction_;
  }
  if (finalize_transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(finalize_transaction);
    if (message_arena != submessage_arena) {
      finalize_transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, finalize_transaction, submessage_arena);
    }
    
  } else {
    
  }
  finalize_transaction_ = finalize_transaction;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.DatabaseRequest.finalize_transaction)
}

// .Orthanc.DatabasePluginMessages.MeasureLatency.Request measure_latency = 107;
inline bool DatabaseRequest::_internal_has_measure_latency() const {
  return this != internal_default_instance() && measure_latency_ != nullptr;
}
inline bool DatabaseRequest::has_measure_latency() const {
  return _internal_has_measure_latency();
}
inline void DatabaseRequest::clear_measure_latency() {
  if (GetArena() == nullptr && measure_latency_ != nullptr) {
    delete measure_latency_;
  }
  measure_latency_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::MeasureLatency_Request& DatabaseRequest::_internal_measure_latency() const {
  const ::Orthanc::DatabasePluginMessages::MeasureLatency_Request* p = measure_latency_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::MeasureLatency_Request*>(
      &::Orthanc::DatabasePluginMessages::_MeasureLatency_Request_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::MeasureLatency_Request& DatabaseRequest::measure_latency() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.DatabaseRequest.measure_latency)
  return _internal_measure_latency();
}
inline void DatabaseRequest::unsafe_arena_set_allocated_measure_latency(
    ::Orthanc::DatabasePluginMessages::MeasureLatency_Request* measure_latency) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(measure_latency_);
  }
  measure_latency_ = measure_latency;
  if (measure_latency) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.DatabaseRequest.measure_latency)
}
inline ::Orthanc::DatabasePluginMessages::MeasureLatency_Request* DatabaseRequest::release_measure_latency() {
  auto temp = unsafe_arena_release_measure_latency();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::MeasureLatency_Request* DatabaseRequest::unsafe_arena_release_measure_latency() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.DatabaseRequest.measure_latency)
  
  ::Orthanc::DatabasePluginMessages::MeasureLatency_Request* temp = measure_latency_;
  measure_latency_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::MeasureLatency_Request* DatabaseRequest::_internal_mutable_measure_latency() {
  
  if (measure_latency_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::MeasureLatency_Request>(GetArena());
    measure_latency_ = p;
  }
  return measure_latency_;
}
inline ::Orthanc::DatabasePluginMessages::MeasureLatency_Request* DatabaseRequest::mutable_measure_latency() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.DatabaseRequest.measure_latency)
  return _internal_mutable_measure_latency();
}
inline void DatabaseRequest::set_allocated_measure_latency(::Orthanc::DatabasePluginMessages::MeasureLatency_Request* measure_latency) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete measure_latency_;
  }
  if (measure_latency) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(measure_latency);
    if (message_arena != submessage_arena) {
      measure_latency = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, measure_latency, submessage_arena);
    }
    
  } else {
    
  }
  measure_latency_ = measure_latency;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.DatabaseRequest.measure_latency)
}

// -------------------------------------------------------------------

// DatabaseResponse

// .Orthanc.DatabasePluginMessages.GetSystemInformation.Response get_system_information = 100;
inline bool DatabaseResponse::_internal_has_get_system_information() const {
  return this != internal_default_instance() && get_system_information_ != nullptr;
}
inline bool DatabaseResponse::has_get_system_information() const {
  return _internal_has_get_system_information();
}
inline void DatabaseResponse::clear_get_system_information() {
  if (GetArena() == nullptr && get_system_information_ != nullptr) {
    delete get_system_information_;
  }
  get_system_information_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::GetSystemInformation_Response& DatabaseResponse::_internal_get_system_information() const {
  const ::Orthanc::DatabasePluginMessages::GetSystemInformation_Response* p = get_system_information_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::GetSystemInformation_Response*>(
      &::Orthanc::DatabasePluginMessages::_GetSystemInformation_Response_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::GetSystemInformation_Response& DatabaseResponse::get_system_information() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.DatabaseResponse.get_system_information)
  return _internal_get_system_information();
}
inline void DatabaseResponse::unsafe_arena_set_allocated_get_system_information(
    ::Orthanc::DatabasePluginMessages::GetSystemInformation_Response* get_system_information) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(get_system_information_);
  }
  get_system_information_ = get_system_information;
  if (get_system_information) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.DatabaseResponse.get_system_information)
}
inline ::Orthanc::DatabasePluginMessages::GetSystemInformation_Response* DatabaseResponse::release_get_system_information() {
  auto temp = unsafe_arena_release_get_system_information();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::GetSystemInformation_Response* DatabaseResponse::unsafe_arena_release_get_system_information() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.DatabaseResponse.get_system_information)
  
  ::Orthanc::DatabasePluginMessages::GetSystemInformation_Response* temp = get_system_information_;
  get_system_information_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::GetSystemInformation_Response* DatabaseResponse::_internal_mutable_get_system_information() {
  
  if (get_system_information_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetSystemInformation_Response>(GetArena());
    get_system_information_ = p;
  }
  return get_system_information_;
}
inline ::Orthanc::DatabasePluginMessages::GetSystemInformation_Response* DatabaseResponse::mutable_get_system_information() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.DatabaseResponse.get_system_information)
  return _internal_mutable_get_system_information();
}
inline void DatabaseResponse::set_allocated_get_system_information(::Orthanc::DatabasePluginMessages::GetSystemInformation_Response* get_system_information) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete get_system_information_;
  }
  if (get_system_information) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_system_information);
    if (message_arena != submessage_arena) {
      get_system_information = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_system_information, submessage_arena);
    }
    
  } else {
    
  }
  get_system_information_ = get_system_information;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.DatabaseResponse.get_system_information)
}

// .Orthanc.DatabasePluginMessages.Open.Response open = 101;
inline bool DatabaseResponse::_internal_has_open() const {
  return this != internal_default_instance() && open_ != nullptr;
}
inline bool DatabaseResponse::has_open() const {
  return _internal_has_open();
}
inline void DatabaseResponse::clear_open() {
  if (GetArena() == nullptr && open_ != nullptr) {
    delete open_;
  }
  open_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::Open_Response& DatabaseResponse::_internal_open() const {
  const ::Orthanc::DatabasePluginMessages::Open_Response* p = open_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::Open_Response*>(
      &::Orthanc::DatabasePluginMessages::_Open_Response_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::Open_Response& DatabaseResponse::open() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.DatabaseResponse.open)
  return _internal_open();
}
inline void DatabaseResponse::unsafe_arena_set_allocated_open(
    ::Orthanc::DatabasePluginMessages::Open_Response* open) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(open_);
  }
  open_ = open;
  if (open) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.DatabaseResponse.open)
}
inline ::Orthanc::DatabasePluginMessages::Open_Response* DatabaseResponse::release_open() {
  auto temp = unsafe_arena_release_open();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::Open_Response* DatabaseResponse::unsafe_arena_release_open() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.DatabaseResponse.open)
  
  ::Orthanc::DatabasePluginMessages::Open_Response* temp = open_;
  open_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::Open_Response* DatabaseResponse::_internal_mutable_open() {
  
  if (open_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::Open_Response>(GetArena());
    open_ = p;
  }
  return open_;
}
inline ::Orthanc::DatabasePluginMessages::Open_Response* DatabaseResponse::mutable_open() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.DatabaseResponse.open)
  return _internal_mutable_open();
}
inline void DatabaseResponse::set_allocated_open(::Orthanc::DatabasePluginMessages::Open_Response* open) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete open_;
  }
  if (open) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(open);
    if (message_arena != submessage_arena) {
      open = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, open, submessage_arena);
    }
    
  } else {
    
  }
  open_ = open;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.DatabaseResponse.open)
}

// .Orthanc.DatabasePluginMessages.Close.Response close = 102;
inline bool DatabaseResponse::_internal_has_close() const {
  return this != internal_default_instance() && close_ != nullptr;
}
inline bool DatabaseResponse::has_close() const {
  return _internal_has_close();
}
inline void DatabaseResponse::clear_close() {
  if (GetArena() == nullptr && close_ != nullptr) {
    delete close_;
  }
  close_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::Close_Response& DatabaseResponse::_internal_close() const {
  const ::Orthanc::DatabasePluginMessages::Close_Response* p = close_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::Close_Response*>(
      &::Orthanc::DatabasePluginMessages::_Close_Response_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::Close_Response& DatabaseResponse::close() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.DatabaseResponse.close)
  return _internal_close();
}
inline void DatabaseResponse::unsafe_arena_set_allocated_close(
    ::Orthanc::DatabasePluginMessages::Close_Response* close) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(close_);
  }
  close_ = close;
  if (close) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.DatabaseResponse.close)
}
inline ::Orthanc::DatabasePluginMessages::Close_Response* DatabaseResponse::release_close() {
  auto temp = unsafe_arena_release_close();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::Close_Response* DatabaseResponse::unsafe_arena_release_close() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.DatabaseResponse.close)
  
  ::Orthanc::DatabasePluginMessages::Close_Response* temp = close_;
  close_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::Close_Response* DatabaseResponse::_internal_mutable_close() {
  
  if (close_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::Close_Response>(GetArena());
    close_ = p;
  }
  return close_;
}
inline ::Orthanc::DatabasePluginMessages::Close_Response* DatabaseResponse::mutable_close() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.DatabaseResponse.close)
  return _internal_mutable_close();
}
inline void DatabaseResponse::set_allocated_close(::Orthanc::DatabasePluginMessages::Close_Response* close) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete close_;
  }
  if (close) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(close);
    if (message_arena != submessage_arena) {
      close = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, close, submessage_arena);
    }
    
  } else {
    
  }
  close_ = close;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.DatabaseResponse.close)
}

// .Orthanc.DatabasePluginMessages.FlushToDisk.Response flush_to_disk = 103;
inline bool DatabaseResponse::_internal_has_flush_to_disk() const {
  return this != internal_default_instance() && flush_to_disk_ != nullptr;
}
inline bool DatabaseResponse::has_flush_to_disk() const {
  return _internal_has_flush_to_disk();
}
inline void DatabaseResponse::clear_flush_to_disk() {
  if (GetArena() == nullptr && flush_to_disk_ != nullptr) {
    delete flush_to_disk_;
  }
  flush_to_disk_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::FlushToDisk_Response& DatabaseResponse::_internal_flush_to_disk() const {
  const ::Orthanc::DatabasePluginMessages::FlushToDisk_Response* p = flush_to_disk_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::FlushToDisk_Response*>(
      &::Orthanc::DatabasePluginMessages::_FlushToDisk_Response_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::FlushToDisk_Response& DatabaseResponse::flush_to_disk() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.DatabaseResponse.flush_to_disk)
  return _internal_flush_to_disk();
}
inline void DatabaseResponse::unsafe_arena_set_allocated_flush_to_disk(
    ::Orthanc::DatabasePluginMessages::FlushToDisk_Response* flush_to_disk) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(flush_to_disk_);
  }
  flush_to_disk_ = flush_to_disk;
  if (flush_to_disk) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.DatabaseResponse.flush_to_disk)
}
inline ::Orthanc::DatabasePluginMessages::FlushToDisk_Response* DatabaseResponse::release_flush_to_disk() {
  auto temp = unsafe_arena_release_flush_to_disk();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::FlushToDisk_Response* DatabaseResponse::unsafe_arena_release_flush_to_disk() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.DatabaseResponse.flush_to_disk)
  
  ::Orthanc::DatabasePluginMessages::FlushToDisk_Response* temp = flush_to_disk_;
  flush_to_disk_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::FlushToDisk_Response* DatabaseResponse::_internal_mutable_flush_to_disk() {
  
  if (flush_to_disk_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::FlushToDisk_Response>(GetArena());
    flush_to_disk_ = p;
  }
  return flush_to_disk_;
}
inline ::Orthanc::DatabasePluginMessages::FlushToDisk_Response* DatabaseResponse::mutable_flush_to_disk() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.DatabaseResponse.flush_to_disk)
  return _internal_mutable_flush_to_disk();
}
inline void DatabaseResponse::set_allocated_flush_to_disk(::Orthanc::DatabasePluginMessages::FlushToDisk_Response* flush_to_disk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete flush_to_disk_;
  }
  if (flush_to_disk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(flush_to_disk);
    if (message_arena != submessage_arena) {
      flush_to_disk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flush_to_disk, submessage_arena);
    }
    
  } else {
    
  }
  flush_to_disk_ = flush_to_disk;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.DatabaseResponse.flush_to_disk)
}

// .Orthanc.DatabasePluginMessages.StartTransaction.Response start_transaction = 104;
inline bool DatabaseResponse::_internal_has_start_transaction() const {
  return this != internal_default_instance() && start_transaction_ != nullptr;
}
inline bool DatabaseResponse::has_start_transaction() const {
  return _internal_has_start_transaction();
}
inline void DatabaseResponse::clear_start_transaction() {
  if (GetArena() == nullptr && start_transaction_ != nullptr) {
    delete start_transaction_;
  }
  start_transaction_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::StartTransaction_Response& DatabaseResponse::_internal_start_transaction() const {
  const ::Orthanc::DatabasePluginMessages::StartTransaction_Response* p = start_transaction_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::StartTransaction_Response*>(
      &::Orthanc::DatabasePluginMessages::_StartTransaction_Response_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::StartTransaction_Response& DatabaseResponse::start_transaction() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.DatabaseResponse.start_transaction)
  return _internal_start_transaction();
}
inline void DatabaseResponse::unsafe_arena_set_allocated_start_transaction(
    ::Orthanc::DatabasePluginMessages::StartTransaction_Response* start_transaction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_transaction_);
  }
  start_transaction_ = start_transaction;
  if (start_transaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.DatabaseResponse.start_transaction)
}
inline ::Orthanc::DatabasePluginMessages::StartTransaction_Response* DatabaseResponse::release_start_transaction() {
  auto temp = unsafe_arena_release_start_transaction();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::StartTransaction_Response* DatabaseResponse::unsafe_arena_release_start_transaction() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.DatabaseResponse.start_transaction)
  
  ::Orthanc::DatabasePluginMessages::StartTransaction_Response* temp = start_transaction_;
  start_transaction_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::StartTransaction_Response* DatabaseResponse::_internal_mutable_start_transaction() {
  
  if (start_transaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::StartTransaction_Response>(GetArena());
    start_transaction_ = p;
  }
  return start_transaction_;
}
inline ::Orthanc::DatabasePluginMessages::StartTransaction_Response* DatabaseResponse::mutable_start_transaction() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.DatabaseResponse.start_transaction)
  return _internal_mutable_start_transaction();
}
inline void DatabaseResponse::set_allocated_start_transaction(::Orthanc::DatabasePluginMessages::StartTransaction_Response* start_transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete start_transaction_;
  }
  if (start_transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(start_transaction);
    if (message_arena != submessage_arena) {
      start_transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_transaction, submessage_arena);
    }
    
  } else {
    
  }
  start_transaction_ = start_transaction;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.DatabaseResponse.start_transaction)
}

// .Orthanc.DatabasePluginMessages.Upgrade.Response upgrade = 105;
inline bool DatabaseResponse::_internal_has_upgrade() const {
  return this != internal_default_instance() && upgrade_ != nullptr;
}
inline bool DatabaseResponse::has_upgrade() const {
  return _internal_has_upgrade();
}
inline void DatabaseResponse::clear_upgrade() {
  if (GetArena() == nullptr && upgrade_ != nullptr) {
    delete upgrade_;
  }
  upgrade_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::Upgrade_Response& DatabaseResponse::_internal_upgrade() const {
  const ::Orthanc::DatabasePluginMessages::Upgrade_Response* p = upgrade_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::Upgrade_Response*>(
      &::Orthanc::DatabasePluginMessages::_Upgrade_Response_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::Upgrade_Response& DatabaseResponse::upgrade() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.DatabaseResponse.upgrade)
  return _internal_upgrade();
}
inline void DatabaseResponse::unsafe_arena_set_allocated_upgrade(
    ::Orthanc::DatabasePluginMessages::Upgrade_Response* upgrade) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(upgrade_);
  }
  upgrade_ = upgrade;
  if (upgrade) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.DatabaseResponse.upgrade)
}
inline ::Orthanc::DatabasePluginMessages::Upgrade_Response* DatabaseResponse::release_upgrade() {
  auto temp = unsafe_arena_release_upgrade();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::Upgrade_Response* DatabaseResponse::unsafe_arena_release_upgrade() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.DatabaseResponse.upgrade)
  
  ::Orthanc::DatabasePluginMessages::Upgrade_Response* temp = upgrade_;
  upgrade_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::Upgrade_Response* DatabaseResponse::_internal_mutable_upgrade() {
  
  if (upgrade_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::Upgrade_Response>(GetArena());
    upgrade_ = p;
  }
  return upgrade_;
}
inline ::Orthanc::DatabasePluginMessages::Upgrade_Response* DatabaseResponse::mutable_upgrade() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.DatabaseResponse.upgrade)
  return _internal_mutable_upgrade();
}
inline void DatabaseResponse::set_allocated_upgrade(::Orthanc::DatabasePluginMessages::Upgrade_Response* upgrade) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete upgrade_;
  }
  if (upgrade) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(upgrade);
    if (message_arena != submessage_arena) {
      upgrade = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, upgrade, submessage_arena);
    }
    
  } else {
    
  }
  upgrade_ = upgrade;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.DatabaseResponse.upgrade)
}

// .Orthanc.DatabasePluginMessages.FinalizeTransaction.Response finalize_transaction = 106;
inline bool DatabaseResponse::_internal_has_finalize_transaction() const {
  return this != internal_default_instance() && finalize_transaction_ != nullptr;
}
inline bool DatabaseResponse::has_finalize_transaction() const {
  return _internal_has_finalize_transaction();
}
inline void DatabaseResponse::clear_finalize_transaction() {
  if (GetArena() == nullptr && finalize_transaction_ != nullptr) {
    delete finalize_transaction_;
  }
  finalize_transaction_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::FinalizeTransaction_Response& DatabaseResponse::_internal_finalize_transaction() const {
  const ::Orthanc::DatabasePluginMessages::FinalizeTransaction_Response* p = finalize_transaction_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::FinalizeTransaction_Response*>(
      &::Orthanc::DatabasePluginMessages::_FinalizeTransaction_Response_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::FinalizeTransaction_Response& DatabaseResponse::finalize_transaction() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.DatabaseResponse.finalize_transaction)
  return _internal_finalize_transaction();
}
inline void DatabaseResponse::unsafe_arena_set_allocated_finalize_transaction(
    ::Orthanc::DatabasePluginMessages::FinalizeTransaction_Response* finalize_transaction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(finalize_transaction_);
  }
  finalize_transaction_ = finalize_transaction;
  if (finalize_transaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.DatabaseResponse.finalize_transaction)
}
inline ::Orthanc::DatabasePluginMessages::FinalizeTransaction_Response* DatabaseResponse::release_finalize_transaction() {
  auto temp = unsafe_arena_release_finalize_transaction();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::FinalizeTransaction_Response* DatabaseResponse::unsafe_arena_release_finalize_transaction() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.DatabaseResponse.finalize_transaction)
  
  ::Orthanc::DatabasePluginMessages::FinalizeTransaction_Response* temp = finalize_transaction_;
  finalize_transaction_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::FinalizeTransaction_Response* DatabaseResponse::_internal_mutable_finalize_transaction() {
  
  if (finalize_transaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::FinalizeTransaction_Response>(GetArena());
    finalize_transaction_ = p;
  }
  return finalize_transaction_;
}
inline ::Orthanc::DatabasePluginMessages::FinalizeTransaction_Response* DatabaseResponse::mutable_finalize_transaction() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.DatabaseResponse.finalize_transaction)
  return _internal_mutable_finalize_transaction();
}
inline void DatabaseResponse::set_allocated_finalize_transaction(::Orthanc::DatabasePluginMessages::FinalizeTransaction_Response* finalize_transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete finalize_transaction_;
  }
  if (finalize_transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(finalize_transaction);
    if (message_arena != submessage_arena) {
      finalize_transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, finalize_transaction, submessage_arena);
    }
    
  } else {
    
  }
  finalize_transaction_ = finalize_transaction;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.DatabaseResponse.finalize_transaction)
}

// .Orthanc.DatabasePluginMessages.MeasureLatency.Response measure_latency = 107;
inline bool DatabaseResponse::_internal_has_measure_latency() const {
  return this != internal_default_instance() && measure_latency_ != nullptr;
}
inline bool DatabaseResponse::has_measure_latency() const {
  return _internal_has_measure_latency();
}
inline void DatabaseResponse::clear_measure_latency() {
  if (GetArena() == nullptr && measure_latency_ != nullptr) {
    delete measure_latency_;
  }
  measure_latency_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::MeasureLatency_Response& DatabaseResponse::_internal_measure_latency() const {
  const ::Orthanc::DatabasePluginMessages::MeasureLatency_Response* p = measure_latency_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::MeasureLatency_Response*>(
      &::Orthanc::DatabasePluginMessages::_MeasureLatency_Response_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::MeasureLatency_Response& DatabaseResponse::measure_latency() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.DatabaseResponse.measure_latency)
  return _internal_measure_latency();
}
inline void DatabaseResponse::unsafe_arena_set_allocated_measure_latency(
    ::Orthanc::DatabasePluginMessages::MeasureLatency_Response* measure_latency) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(measure_latency_);
  }
  measure_latency_ = measure_latency;
  if (measure_latency) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.DatabaseResponse.measure_latency)
}
inline ::Orthanc::DatabasePluginMessages::MeasureLatency_Response* DatabaseResponse::release_measure_latency() {
  auto temp = unsafe_arena_release_measure_latency();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::MeasureLatency_Response* DatabaseResponse::unsafe_arena_release_measure_latency() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.DatabaseResponse.measure_latency)
  
  ::Orthanc::DatabasePluginMessages::MeasureLatency_Response* temp = measure_latency_;
  measure_latency_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::MeasureLatency_Response* DatabaseResponse::_internal_mutable_measure_latency() {
  
  if (measure_latency_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::MeasureLatency_Response>(GetArena());
    measure_latency_ = p;
  }
  return measure_latency_;
}
inline ::Orthanc::DatabasePluginMessages::MeasureLatency_Response* DatabaseResponse::mutable_measure_latency() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.DatabaseResponse.measure_latency)
  return _internal_mutable_measure_latency();
}
inline void DatabaseResponse::set_allocated_measure_latency(::Orthanc::DatabasePluginMessages::MeasureLatency_Response* measure_latency) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete measure_latency_;
  }
  if (measure_latency) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(measure_latency);
    if (message_arena != submessage_arena) {
      measure_latency = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, measure_latency, submessage_arena);
    }
    
  } else {
    
  }
  measure_latency_ = measure_latency;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.DatabaseResponse.measure_latency)
}

// -------------------------------------------------------------------

// Rollback_Request

// -------------------------------------------------------------------

// Rollback_Response

// -------------------------------------------------------------------

// Rollback

// -------------------------------------------------------------------

// Commit_Request

// int64 file_size_delta = 1;
inline void Commit_Request::clear_file_size_delta() {
  file_size_delta_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Commit_Request::_internal_file_size_delta() const {
  return file_size_delta_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Commit_Request::file_size_delta() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.Commit.Request.file_size_delta)
  return _internal_file_size_delta();
}
inline void Commit_Request::_internal_set_file_size_delta(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  file_size_delta_ = value;
}
inline void Commit_Request::set_file_size_delta(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_file_size_delta(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.Commit.Request.file_size_delta)
}

// -------------------------------------------------------------------

// Commit_Response

// -------------------------------------------------------------------

// Commit

// -------------------------------------------------------------------

// AddAttachment_Request

// int64 id = 1;
inline void AddAttachment_Request::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AddAttachment_Request::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AddAttachment_Request::id() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.AddAttachment.Request.id)
  return _internal_id();
}
inline void AddAttachment_Request::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void AddAttachment_Request::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.AddAttachment.Request.id)
}

// .Orthanc.DatabasePluginMessages.FileInfo attachment = 2;
inline bool AddAttachment_Request::_internal_has_attachment() const {
  return this != internal_default_instance() && attachment_ != nullptr;
}
inline bool AddAttachment_Request::has_attachment() const {
  return _internal_has_attachment();
}
inline void AddAttachment_Request::clear_attachment() {
  if (GetArena() == nullptr && attachment_ != nullptr) {
    delete attachment_;
  }
  attachment_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::FileInfo& AddAttachment_Request::_internal_attachment() const {
  const ::Orthanc::DatabasePluginMessages::FileInfo* p = attachment_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::FileInfo*>(
      &::Orthanc::DatabasePluginMessages::_FileInfo_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::FileInfo& AddAttachment_Request::attachment() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.AddAttachment.Request.attachment)
  return _internal_attachment();
}
inline void AddAttachment_Request::unsafe_arena_set_allocated_attachment(
    ::Orthanc::DatabasePluginMessages::FileInfo* attachment) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attachment_);
  }
  attachment_ = attachment;
  if (attachment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.AddAttachment.Request.attachment)
}
inline ::Orthanc::DatabasePluginMessages::FileInfo* AddAttachment_Request::release_attachment() {
  auto temp = unsafe_arena_release_attachment();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::FileInfo* AddAttachment_Request::unsafe_arena_release_attachment() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.AddAttachment.Request.attachment)
  
  ::Orthanc::DatabasePluginMessages::FileInfo* temp = attachment_;
  attachment_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::FileInfo* AddAttachment_Request::_internal_mutable_attachment() {
  
  if (attachment_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::FileInfo>(GetArena());
    attachment_ = p;
  }
  return attachment_;
}
inline ::Orthanc::DatabasePluginMessages::FileInfo* AddAttachment_Request::mutable_attachment() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.AddAttachment.Request.attachment)
  return _internal_mutable_attachment();
}
inline void AddAttachment_Request::set_allocated_attachment(::Orthanc::DatabasePluginMessages::FileInfo* attachment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete attachment_;
  }
  if (attachment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(attachment);
    if (message_arena != submessage_arena) {
      attachment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attachment, submessage_arena);
    }
    
  } else {
    
  }
  attachment_ = attachment;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.AddAttachment.Request.attachment)
}

// int64 revision = 3;
inline void AddAttachment_Request::clear_revision() {
  revision_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AddAttachment_Request::_internal_revision() const {
  return revision_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AddAttachment_Request::revision() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.AddAttachment.Request.revision)
  return _internal_revision();
}
inline void AddAttachment_Request::_internal_set_revision(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  revision_ = value;
}
inline void AddAttachment_Request::set_revision(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_revision(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.AddAttachment.Request.revision)
}

// -------------------------------------------------------------------

// AddAttachment_Response

// -------------------------------------------------------------------

// AddAttachment

// -------------------------------------------------------------------

// ClearChanges_Request

// -------------------------------------------------------------------

// ClearChanges_Response

// -------------------------------------------------------------------

// ClearChanges

// -------------------------------------------------------------------

// ClearExportedResources_Request

// -------------------------------------------------------------------

// ClearExportedResources_Response

// -------------------------------------------------------------------

// ClearExportedResources

// -------------------------------------------------------------------

// DeleteAttachment_Request

// int64 id = 1;
inline void DeleteAttachment_Request::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DeleteAttachment_Request::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DeleteAttachment_Request::id() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.DeleteAttachment.Request.id)
  return _internal_id();
}
inline void DeleteAttachment_Request::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void DeleteAttachment_Request::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.DeleteAttachment.Request.id)
}

// int32 type = 2;
inline void DeleteAttachment_Request::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteAttachment_Request::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteAttachment_Request::type() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.DeleteAttachment.Request.type)
  return _internal_type();
}
inline void DeleteAttachment_Request::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void DeleteAttachment_Request::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.DeleteAttachment.Request.type)
}

// -------------------------------------------------------------------

// DeleteAttachment_Response

// .Orthanc.DatabasePluginMessages.FileInfo deleted_attachment = 1;
inline bool DeleteAttachment_Response::_internal_has_deleted_attachment() const {
  return this != internal_default_instance() && deleted_attachment_ != nullptr;
}
inline bool DeleteAttachment_Response::has_deleted_attachment() const {
  return _internal_has_deleted_attachment();
}
inline void DeleteAttachment_Response::clear_deleted_attachment() {
  if (GetArena() == nullptr && deleted_attachment_ != nullptr) {
    delete deleted_attachment_;
  }
  deleted_attachment_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::FileInfo& DeleteAttachment_Response::_internal_deleted_attachment() const {
  const ::Orthanc::DatabasePluginMessages::FileInfo* p = deleted_attachment_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::FileInfo*>(
      &::Orthanc::DatabasePluginMessages::_FileInfo_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::FileInfo& DeleteAttachment_Response::deleted_attachment() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.DeleteAttachment.Response.deleted_attachment)
  return _internal_deleted_attachment();
}
inline void DeleteAttachment_Response::unsafe_arena_set_allocated_deleted_attachment(
    ::Orthanc::DatabasePluginMessages::FileInfo* deleted_attachment) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deleted_attachment_);
  }
  deleted_attachment_ = deleted_attachment;
  if (deleted_attachment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.DeleteAttachment.Response.deleted_attachment)
}
inline ::Orthanc::DatabasePluginMessages::FileInfo* DeleteAttachment_Response::release_deleted_attachment() {
  auto temp = unsafe_arena_release_deleted_attachment();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::FileInfo* DeleteAttachment_Response::unsafe_arena_release_deleted_attachment() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.DeleteAttachment.Response.deleted_attachment)
  
  ::Orthanc::DatabasePluginMessages::FileInfo* temp = deleted_attachment_;
  deleted_attachment_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::FileInfo* DeleteAttachment_Response::_internal_mutable_deleted_attachment() {
  
  if (deleted_attachment_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::FileInfo>(GetArena());
    deleted_attachment_ = p;
  }
  return deleted_attachment_;
}
inline ::Orthanc::DatabasePluginMessages::FileInfo* DeleteAttachment_Response::mutable_deleted_attachment() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.DeleteAttachment.Response.deleted_attachment)
  return _internal_mutable_deleted_attachment();
}
inline void DeleteAttachment_Response::set_allocated_deleted_attachment(::Orthanc::DatabasePluginMessages::FileInfo* deleted_attachment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete deleted_attachment_;
  }
  if (deleted_attachment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(deleted_attachment);
    if (message_arena != submessage_arena) {
      deleted_attachment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deleted_attachment, submessage_arena);
    }
    
  } else {
    
  }
  deleted_attachment_ = deleted_attachment;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.DeleteAttachment.Response.deleted_attachment)
}

// -------------------------------------------------------------------

// DeleteAttachment

// -------------------------------------------------------------------

// DeleteMetadata_Request

// int64 id = 1;
inline void DeleteMetadata_Request::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DeleteMetadata_Request::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DeleteMetadata_Request::id() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.DeleteMetadata.Request.id)
  return _internal_id();
}
inline void DeleteMetadata_Request::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void DeleteMetadata_Request::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.DeleteMetadata.Request.id)
}

// int32 type = 2;
inline void DeleteMetadata_Request::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteMetadata_Request::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteMetadata_Request::type() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.DeleteMetadata.Request.type)
  return _internal_type();
}
inline void DeleteMetadata_Request::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void DeleteMetadata_Request::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.DeleteMetadata.Request.type)
}

// -------------------------------------------------------------------

// DeleteMetadata_Response

// -------------------------------------------------------------------

// DeleteMetadata

// -------------------------------------------------------------------

// DeleteResource_Request

// int64 id = 1;
inline void DeleteResource_Request::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DeleteResource_Request::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DeleteResource_Request::id() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.DeleteResource.Request.id)
  return _internal_id();
}
inline void DeleteResource_Request::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void DeleteResource_Request::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.DeleteResource.Request.id)
}

// -------------------------------------------------------------------

// DeleteResource_Response_Resource

// .Orthanc.DatabasePluginMessages.ResourceType level = 1;
inline void DeleteResource_Response_Resource::clear_level() {
  level_ = 0;
}
inline ::Orthanc::DatabasePluginMessages::ResourceType DeleteResource_Response_Resource::_internal_level() const {
  return static_cast< ::Orthanc::DatabasePluginMessages::ResourceType >(level_);
}
inline ::Orthanc::DatabasePluginMessages::ResourceType DeleteResource_Response_Resource::level() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.DeleteResource.Response.Resource.level)
  return _internal_level();
}
inline void DeleteResource_Response_Resource::_internal_set_level(::Orthanc::DatabasePluginMessages::ResourceType value) {
  
  level_ = value;
}
inline void DeleteResource_Response_Resource::set_level(::Orthanc::DatabasePluginMessages::ResourceType value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.DeleteResource.Response.Resource.level)
}

// string public_id = 2;
inline void DeleteResource_Response_Resource::clear_public_id() {
  public_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeleteResource_Response_Resource::public_id() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.DeleteResource.Response.Resource.public_id)
  return _internal_public_id();
}
inline void DeleteResource_Response_Resource::set_public_id(const std::string& value) {
  _internal_set_public_id(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.DeleteResource.Response.Resource.public_id)
}
inline std::string* DeleteResource_Response_Resource::mutable_public_id() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.DeleteResource.Response.Resource.public_id)
  return _internal_mutable_public_id();
}
inline const std::string& DeleteResource_Response_Resource::_internal_public_id() const {
  return public_id_.Get();
}
inline void DeleteResource_Response_Resource::_internal_set_public_id(const std::string& value) {
  
  public_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeleteResource_Response_Resource::set_public_id(std::string&& value) {
  
  public_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Orthanc.DatabasePluginMessages.DeleteResource.Response.Resource.public_id)
}
inline void DeleteResource_Response_Resource::set_public_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  public_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Orthanc.DatabasePluginMessages.DeleteResource.Response.Resource.public_id)
}
inline void DeleteResource_Response_Resource::set_public_id(const char* value,
    size_t size) {
  
  public_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Orthanc.DatabasePluginMessages.DeleteResource.Response.Resource.public_id)
}
inline std::string* DeleteResource_Response_Resource::_internal_mutable_public_id() {
  
  return public_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeleteResource_Response_Resource::release_public_id() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.DeleteResource.Response.Resource.public_id)
  return public_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteResource_Response_Resource::set_allocated_public_id(std::string* public_id) {
  if (public_id != nullptr) {
    
  } else {
    
  }
  public_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.DeleteResource.Response.Resource.public_id)
}
inline std::string* DeleteResource_Response_Resource::unsafe_arena_release_public_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Orthanc.DatabasePluginMessages.DeleteResource.Response.Resource.public_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return public_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeleteResource_Response_Resource::unsafe_arena_set_allocated_public_id(
    std::string* public_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (public_id != nullptr) {
    
  } else {
    
  }
  public_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      public_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.DeleteResource.Response.Resource.public_id)
}

// -------------------------------------------------------------------

// DeleteResource_Response

// repeated .Orthanc.DatabasePluginMessages.FileInfo deleted_attachments = 1;
inline int DeleteResource_Response::_internal_deleted_attachments_size() const {
  return deleted_attachments_.size();
}
inline int DeleteResource_Response::deleted_attachments_size() const {
  return _internal_deleted_attachments_size();
}
inline void DeleteResource_Response::clear_deleted_attachments() {
  deleted_attachments_.Clear();
}
inline ::Orthanc::DatabasePluginMessages::FileInfo* DeleteResource_Response::mutable_deleted_attachments(int index) {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.DeleteResource.Response.deleted_attachments)
  return deleted_attachments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Orthanc::DatabasePluginMessages::FileInfo >*
DeleteResource_Response::mutable_deleted_attachments() {
  // @@protoc_insertion_point(field_mutable_list:Orthanc.DatabasePluginMessages.DeleteResource.Response.deleted_attachments)
  return &deleted_attachments_;
}
inline const ::Orthanc::DatabasePluginMessages::FileInfo& DeleteResource_Response::_internal_deleted_attachments(int index) const {
  return deleted_attachments_.Get(index);
}
inline const ::Orthanc::DatabasePluginMessages::FileInfo& DeleteResource_Response::deleted_attachments(int index) const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.DeleteResource.Response.deleted_attachments)
  return _internal_deleted_attachments(index);
}
inline ::Orthanc::DatabasePluginMessages::FileInfo* DeleteResource_Response::_internal_add_deleted_attachments() {
  return deleted_attachments_.Add();
}
inline ::Orthanc::DatabasePluginMessages::FileInfo* DeleteResource_Response::add_deleted_attachments() {
  // @@protoc_insertion_point(field_add:Orthanc.DatabasePluginMessages.DeleteResource.Response.deleted_attachments)
  return _internal_add_deleted_attachments();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Orthanc::DatabasePluginMessages::FileInfo >&
DeleteResource_Response::deleted_attachments() const {
  // @@protoc_insertion_point(field_list:Orthanc.DatabasePluginMessages.DeleteResource.Response.deleted_attachments)
  return deleted_attachments_;
}

// repeated .Orthanc.DatabasePluginMessages.DeleteResource.Response.Resource deleted_resources = 2;
inline int DeleteResource_Response::_internal_deleted_resources_size() const {
  return deleted_resources_.size();
}
inline int DeleteResource_Response::deleted_resources_size() const {
  return _internal_deleted_resources_size();
}
inline void DeleteResource_Response::clear_deleted_resources() {
  deleted_resources_.Clear();
}
inline ::Orthanc::DatabasePluginMessages::DeleteResource_Response_Resource* DeleteResource_Response::mutable_deleted_resources(int index) {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.DeleteResource.Response.deleted_resources)
  return deleted_resources_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Orthanc::DatabasePluginMessages::DeleteResource_Response_Resource >*
DeleteResource_Response::mutable_deleted_resources() {
  // @@protoc_insertion_point(field_mutable_list:Orthanc.DatabasePluginMessages.DeleteResource.Response.deleted_resources)
  return &deleted_resources_;
}
inline const ::Orthanc::DatabasePluginMessages::DeleteResource_Response_Resource& DeleteResource_Response::_internal_deleted_resources(int index) const {
  return deleted_resources_.Get(index);
}
inline const ::Orthanc::DatabasePluginMessages::DeleteResource_Response_Resource& DeleteResource_Response::deleted_resources(int index) const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.DeleteResource.Response.deleted_resources)
  return _internal_deleted_resources(index);
}
inline ::Orthanc::DatabasePluginMessages::DeleteResource_Response_Resource* DeleteResource_Response::_internal_add_deleted_resources() {
  return deleted_resources_.Add();
}
inline ::Orthanc::DatabasePluginMessages::DeleteResource_Response_Resource* DeleteResource_Response::add_deleted_resources() {
  // @@protoc_insertion_point(field_add:Orthanc.DatabasePluginMessages.DeleteResource.Response.deleted_resources)
  return _internal_add_deleted_resources();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Orthanc::DatabasePluginMessages::DeleteResource_Response_Resource >&
DeleteResource_Response::deleted_resources() const {
  // @@protoc_insertion_point(field_list:Orthanc.DatabasePluginMessages.DeleteResource.Response.deleted_resources)
  return deleted_resources_;
}

// bool is_remaining_ancestor = 3;
inline void DeleteResource_Response::clear_is_remaining_ancestor() {
  is_remaining_ancestor_ = false;
}
inline bool DeleteResource_Response::_internal_is_remaining_ancestor() const {
  return is_remaining_ancestor_;
}
inline bool DeleteResource_Response::is_remaining_ancestor() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.DeleteResource.Response.is_remaining_ancestor)
  return _internal_is_remaining_ancestor();
}
inline void DeleteResource_Response::_internal_set_is_remaining_ancestor(bool value) {
  
  is_remaining_ancestor_ = value;
}
inline void DeleteResource_Response::set_is_remaining_ancestor(bool value) {
  _internal_set_is_remaining_ancestor(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.DeleteResource.Response.is_remaining_ancestor)
}

// .Orthanc.DatabasePluginMessages.DeleteResource.Response.Resource remaining_ancestor = 4;
inline bool DeleteResource_Response::_internal_has_remaining_ancestor() const {
  return this != internal_default_instance() && remaining_ancestor_ != nullptr;
}
inline bool DeleteResource_Response::has_remaining_ancestor() const {
  return _internal_has_remaining_ancestor();
}
inline void DeleteResource_Response::clear_remaining_ancestor() {
  if (GetArena() == nullptr && remaining_ancestor_ != nullptr) {
    delete remaining_ancestor_;
  }
  remaining_ancestor_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::DeleteResource_Response_Resource& DeleteResource_Response::_internal_remaining_ancestor() const {
  const ::Orthanc::DatabasePluginMessages::DeleteResource_Response_Resource* p = remaining_ancestor_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::DeleteResource_Response_Resource*>(
      &::Orthanc::DatabasePluginMessages::_DeleteResource_Response_Resource_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::DeleteResource_Response_Resource& DeleteResource_Response::remaining_ancestor() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.DeleteResource.Response.remaining_ancestor)
  return _internal_remaining_ancestor();
}
inline void DeleteResource_Response::unsafe_arena_set_allocated_remaining_ancestor(
    ::Orthanc::DatabasePluginMessages::DeleteResource_Response_Resource* remaining_ancestor) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(remaining_ancestor_);
  }
  remaining_ancestor_ = remaining_ancestor;
  if (remaining_ancestor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.DeleteResource.Response.remaining_ancestor)
}
inline ::Orthanc::DatabasePluginMessages::DeleteResource_Response_Resource* DeleteResource_Response::release_remaining_ancestor() {
  auto temp = unsafe_arena_release_remaining_ancestor();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::DeleteResource_Response_Resource* DeleteResource_Response::unsafe_arena_release_remaining_ancestor() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.DeleteResource.Response.remaining_ancestor)
  
  ::Orthanc::DatabasePluginMessages::DeleteResource_Response_Resource* temp = remaining_ancestor_;
  remaining_ancestor_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::DeleteResource_Response_Resource* DeleteResource_Response::_internal_mutable_remaining_ancestor() {
  
  if (remaining_ancestor_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::DeleteResource_Response_Resource>(GetArena());
    remaining_ancestor_ = p;
  }
  return remaining_ancestor_;
}
inline ::Orthanc::DatabasePluginMessages::DeleteResource_Response_Resource* DeleteResource_Response::mutable_remaining_ancestor() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.DeleteResource.Response.remaining_ancestor)
  return _internal_mutable_remaining_ancestor();
}
inline void DeleteResource_Response::set_allocated_remaining_ancestor(::Orthanc::DatabasePluginMessages::DeleteResource_Response_Resource* remaining_ancestor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete remaining_ancestor_;
  }
  if (remaining_ancestor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(remaining_ancestor);
    if (message_arena != submessage_arena) {
      remaining_ancestor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, remaining_ancestor, submessage_arena);
    }
    
  } else {
    
  }
  remaining_ancestor_ = remaining_ancestor;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.DeleteResource.Response.remaining_ancestor)
}

// -------------------------------------------------------------------

// DeleteResource

// -------------------------------------------------------------------

// GetAllMetadata_Request

// int64 id = 1;
inline void GetAllMetadata_Request::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetAllMetadata_Request::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetAllMetadata_Request::id() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.GetAllMetadata.Request.id)
  return _internal_id();
}
inline void GetAllMetadata_Request::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void GetAllMetadata_Request::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.GetAllMetadata.Request.id)
}

// -------------------------------------------------------------------

// GetAllMetadata_Response_Metadata

// int32 type = 1;
inline void GetAllMetadata_Response_Metadata::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetAllMetadata_Response_Metadata::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetAllMetadata_Response_Metadata::type() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.GetAllMetadata.Response.Metadata.type)
  return _internal_type();
}
inline void GetAllMetadata_Response_Metadata::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void GetAllMetadata_Response_Metadata::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.GetAllMetadata.Response.Metadata.type)
}

// string value = 2;
inline void GetAllMetadata_Response_Metadata::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetAllMetadata_Response_Metadata::value() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.GetAllMetadata.Response.Metadata.value)
  return _internal_value();
}
inline void GetAllMetadata_Response_Metadata::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.GetAllMetadata.Response.Metadata.value)
}
inline std::string* GetAllMetadata_Response_Metadata::mutable_value() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.GetAllMetadata.Response.Metadata.value)
  return _internal_mutable_value();
}
inline const std::string& GetAllMetadata_Response_Metadata::_internal_value() const {
  return value_.Get();
}
inline void GetAllMetadata_Response_Metadata::_internal_set_value(const std::string& value) {
  
  value_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetAllMetadata_Response_Metadata::set_value(std::string&& value) {
  
  value_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Orthanc.DatabasePluginMessages.GetAllMetadata.Response.Metadata.value)
}
inline void GetAllMetadata_Response_Metadata::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Orthanc.DatabasePluginMessages.GetAllMetadata.Response.Metadata.value)
}
inline void GetAllMetadata_Response_Metadata::set_value(const char* value,
    size_t size) {
  
  value_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Orthanc.DatabasePluginMessages.GetAllMetadata.Response.Metadata.value)
}
inline std::string* GetAllMetadata_Response_Metadata::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetAllMetadata_Response_Metadata::release_value() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.GetAllMetadata.Response.Metadata.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetAllMetadata_Response_Metadata::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.GetAllMetadata.Response.Metadata.value)
}
inline std::string* GetAllMetadata_Response_Metadata::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Orthanc.DatabasePluginMessages.GetAllMetadata.Response.Metadata.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetAllMetadata_Response_Metadata::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    
  } else {
    
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.GetAllMetadata.Response.Metadata.value)
}

// -------------------------------------------------------------------

// GetAllMetadata_Response

// repeated .Orthanc.DatabasePluginMessages.GetAllMetadata.Response.Metadata metadata = 1;
inline int GetAllMetadata_Response::_internal_metadata_size() const {
  return metadata_.size();
}
inline int GetAllMetadata_Response::metadata_size() const {
  return _internal_metadata_size();
}
inline void GetAllMetadata_Response::clear_metadata() {
  metadata_.Clear();
}
inline ::Orthanc::DatabasePluginMessages::GetAllMetadata_Response_Metadata* GetAllMetadata_Response::mutable_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.GetAllMetadata.Response.metadata)
  return metadata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Orthanc::DatabasePluginMessages::GetAllMetadata_Response_Metadata >*
GetAllMetadata_Response::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_list:Orthanc.DatabasePluginMessages.GetAllMetadata.Response.metadata)
  return &metadata_;
}
inline const ::Orthanc::DatabasePluginMessages::GetAllMetadata_Response_Metadata& GetAllMetadata_Response::_internal_metadata(int index) const {
  return metadata_.Get(index);
}
inline const ::Orthanc::DatabasePluginMessages::GetAllMetadata_Response_Metadata& GetAllMetadata_Response::metadata(int index) const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.GetAllMetadata.Response.metadata)
  return _internal_metadata(index);
}
inline ::Orthanc::DatabasePluginMessages::GetAllMetadata_Response_Metadata* GetAllMetadata_Response::_internal_add_metadata() {
  return metadata_.Add();
}
inline ::Orthanc::DatabasePluginMessages::GetAllMetadata_Response_Metadata* GetAllMetadata_Response::add_metadata() {
  // @@protoc_insertion_point(field_add:Orthanc.DatabasePluginMessages.GetAllMetadata.Response.metadata)
  return _internal_add_metadata();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Orthanc::DatabasePluginMessages::GetAllMetadata_Response_Metadata >&
GetAllMetadata_Response::metadata() const {
  // @@protoc_insertion_point(field_list:Orthanc.DatabasePluginMessages.GetAllMetadata.Response.metadata)
  return metadata_;
}

// -------------------------------------------------------------------

// GetAllMetadata

// -------------------------------------------------------------------

// GetAllPublicIds_Request

// .Orthanc.DatabasePluginMessages.ResourceType resource_type = 1;
inline void GetAllPublicIds_Request::clear_resource_type() {
  resource_type_ = 0;
}
inline ::Orthanc::DatabasePluginMessages::ResourceType GetAllPublicIds_Request::_internal_resource_type() const {
  return static_cast< ::Orthanc::DatabasePluginMessages::ResourceType >(resource_type_);
}
inline ::Orthanc::DatabasePluginMessages::ResourceType GetAllPublicIds_Request::resource_type() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.GetAllPublicIds.Request.resource_type)
  return _internal_resource_type();
}
inline void GetAllPublicIds_Request::_internal_set_resource_type(::Orthanc::DatabasePluginMessages::ResourceType value) {
  
  resource_type_ = value;
}
inline void GetAllPublicIds_Request::set_resource_type(::Orthanc::DatabasePluginMessages::ResourceType value) {
  _internal_set_resource_type(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.GetAllPublicIds.Request.resource_type)
}

// -------------------------------------------------------------------

// GetAllPublicIds_Response

// repeated string ids = 1;
inline int GetAllPublicIds_Response::_internal_ids_size() const {
  return ids_.size();
}
inline int GetAllPublicIds_Response::ids_size() const {
  return _internal_ids_size();
}
inline void GetAllPublicIds_Response::clear_ids() {
  ids_.Clear();
}
inline std::string* GetAllPublicIds_Response::add_ids() {
  // @@protoc_insertion_point(field_add_mutable:Orthanc.DatabasePluginMessages.GetAllPublicIds.Response.ids)
  return _internal_add_ids();
}
inline const std::string& GetAllPublicIds_Response::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline const std::string& GetAllPublicIds_Response::ids(int index) const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.GetAllPublicIds.Response.ids)
  return _internal_ids(index);
}
inline std::string* GetAllPublicIds_Response::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.GetAllPublicIds.Response.ids)
  return ids_.Mutable(index);
}
inline void GetAllPublicIds_Response::set_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.GetAllPublicIds.Response.ids)
  ids_.Mutable(index)->assign(value);
}
inline void GetAllPublicIds_Response::set_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.GetAllPublicIds.Response.ids)
  ids_.Mutable(index)->assign(std::move(value));
}
inline void GetAllPublicIds_Response::set_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Orthanc.DatabasePluginMessages.GetAllPublicIds.Response.ids)
}
inline void GetAllPublicIds_Response::set_ids(int index, const char* value, size_t size) {
  ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Orthanc.DatabasePluginMessages.GetAllPublicIds.Response.ids)
}
inline std::string* GetAllPublicIds_Response::_internal_add_ids() {
  return ids_.Add();
}
inline void GetAllPublicIds_Response::add_ids(const std::string& value) {
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Orthanc.DatabasePluginMessages.GetAllPublicIds.Response.ids)
}
inline void GetAllPublicIds_Response::add_ids(std::string&& value) {
  ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Orthanc.DatabasePluginMessages.GetAllPublicIds.Response.ids)
}
inline void GetAllPublicIds_Response::add_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Orthanc.DatabasePluginMessages.GetAllPublicIds.Response.ids)
}
inline void GetAllPublicIds_Response::add_ids(const char* value, size_t size) {
  ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Orthanc.DatabasePluginMessages.GetAllPublicIds.Response.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetAllPublicIds_Response::ids() const {
  // @@protoc_insertion_point(field_list:Orthanc.DatabasePluginMessages.GetAllPublicIds.Response.ids)
  return ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetAllPublicIds_Response::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:Orthanc.DatabasePluginMessages.GetAllPublicIds.Response.ids)
  return &ids_;
}

// -------------------------------------------------------------------

// GetAllPublicIds

// -------------------------------------------------------------------

// GetAllPublicIdsWithLimits_Request

// .Orthanc.DatabasePluginMessages.ResourceType resource_type = 1;
inline void GetAllPublicIdsWithLimits_Request::clear_resource_type() {
  resource_type_ = 0;
}
inline ::Orthanc::DatabasePluginMessages::ResourceType GetAllPublicIdsWithLimits_Request::_internal_resource_type() const {
  return static_cast< ::Orthanc::DatabasePluginMessages::ResourceType >(resource_type_);
}
inline ::Orthanc::DatabasePluginMessages::ResourceType GetAllPublicIdsWithLimits_Request::resource_type() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.GetAllPublicIdsWithLimits.Request.resource_type)
  return _internal_resource_type();
}
inline void GetAllPublicIdsWithLimits_Request::_internal_set_resource_type(::Orthanc::DatabasePluginMessages::ResourceType value) {
  
  resource_type_ = value;
}
inline void GetAllPublicIdsWithLimits_Request::set_resource_type(::Orthanc::DatabasePluginMessages::ResourceType value) {
  _internal_set_resource_type(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.GetAllPublicIdsWithLimits.Request.resource_type)
}

// int64 since = 2;
inline void GetAllPublicIdsWithLimits_Request::clear_since() {
  since_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetAllPublicIdsWithLimits_Request::_internal_since() const {
  return since_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetAllPublicIdsWithLimits_Request::since() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.GetAllPublicIdsWithLimits.Request.since)
  return _internal_since();
}
inline void GetAllPublicIdsWithLimits_Request::_internal_set_since(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  since_ = value;
}
inline void GetAllPublicIdsWithLimits_Request::set_since(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_since(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.GetAllPublicIdsWithLimits.Request.since)
}

// uint32 limit = 3;
inline void GetAllPublicIdsWithLimits_Request::clear_limit() {
  limit_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetAllPublicIdsWithLimits_Request::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetAllPublicIdsWithLimits_Request::limit() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.GetAllPublicIdsWithLimits.Request.limit)
  return _internal_limit();
}
inline void GetAllPublicIdsWithLimits_Request::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  limit_ = value;
}
inline void GetAllPublicIdsWithLimits_Request::set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.GetAllPublicIdsWithLimits.Request.limit)
}

// -------------------------------------------------------------------

// GetAllPublicIdsWithLimits_Response

// repeated string ids = 1;
inline int GetAllPublicIdsWithLimits_Response::_internal_ids_size() const {
  return ids_.size();
}
inline int GetAllPublicIdsWithLimits_Response::ids_size() const {
  return _internal_ids_size();
}
inline void GetAllPublicIdsWithLimits_Response::clear_ids() {
  ids_.Clear();
}
inline std::string* GetAllPublicIdsWithLimits_Response::add_ids() {
  // @@protoc_insertion_point(field_add_mutable:Orthanc.DatabasePluginMessages.GetAllPublicIdsWithLimits.Response.ids)
  return _internal_add_ids();
}
inline const std::string& GetAllPublicIdsWithLimits_Response::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline const std::string& GetAllPublicIdsWithLimits_Response::ids(int index) const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.GetAllPublicIdsWithLimits.Response.ids)
  return _internal_ids(index);
}
inline std::string* GetAllPublicIdsWithLimits_Response::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.GetAllPublicIdsWithLimits.Response.ids)
  return ids_.Mutable(index);
}
inline void GetAllPublicIdsWithLimits_Response::set_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.GetAllPublicIdsWithLimits.Response.ids)
  ids_.Mutable(index)->assign(value);
}
inline void GetAllPublicIdsWithLimits_Response::set_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.GetAllPublicIdsWithLimits.Response.ids)
  ids_.Mutable(index)->assign(std::move(value));
}
inline void GetAllPublicIdsWithLimits_Response::set_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Orthanc.DatabasePluginMessages.GetAllPublicIdsWithLimits.Response.ids)
}
inline void GetAllPublicIdsWithLimits_Response::set_ids(int index, const char* value, size_t size) {
  ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Orthanc.DatabasePluginMessages.GetAllPublicIdsWithLimits.Response.ids)
}
inline std::string* GetAllPublicIdsWithLimits_Response::_internal_add_ids() {
  return ids_.Add();
}
inline void GetAllPublicIdsWithLimits_Response::add_ids(const std::string& value) {
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Orthanc.DatabasePluginMessages.GetAllPublicIdsWithLimits.Response.ids)
}
inline void GetAllPublicIdsWithLimits_Response::add_ids(std::string&& value) {
  ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Orthanc.DatabasePluginMessages.GetAllPublicIdsWithLimits.Response.ids)
}
inline void GetAllPublicIdsWithLimits_Response::add_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Orthanc.DatabasePluginMessages.GetAllPublicIdsWithLimits.Response.ids)
}
inline void GetAllPublicIdsWithLimits_Response::add_ids(const char* value, size_t size) {
  ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Orthanc.DatabasePluginMessages.GetAllPublicIdsWithLimits.Response.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetAllPublicIdsWithLimits_Response::ids() const {
  // @@protoc_insertion_point(field_list:Orthanc.DatabasePluginMessages.GetAllPublicIdsWithLimits.Response.ids)
  return ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetAllPublicIdsWithLimits_Response::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:Orthanc.DatabasePluginMessages.GetAllPublicIdsWithLimits.Response.ids)
  return &ids_;
}

// -------------------------------------------------------------------

// GetAllPublicIdsWithLimits

// -------------------------------------------------------------------

// GetChanges_Request

// int64 since = 1;
inline void GetChanges_Request::clear_since() {
  since_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetChanges_Request::_internal_since() const {
  return since_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetChanges_Request::since() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.GetChanges.Request.since)
  return _internal_since();
}
inline void GetChanges_Request::_internal_set_since(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  since_ = value;
}
inline void GetChanges_Request::set_since(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_since(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.GetChanges.Request.since)
}

// uint32 limit = 2;
inline void GetChanges_Request::clear_limit() {
  limit_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetChanges_Request::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetChanges_Request::limit() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.GetChanges.Request.limit)
  return _internal_limit();
}
inline void GetChanges_Request::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  limit_ = value;
}
inline void GetChanges_Request::set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.GetChanges.Request.limit)
}

// -------------------------------------------------------------------

// GetChanges_Response

// repeated .Orthanc.DatabasePluginMessages.ServerIndexChange changes = 1;
inline int GetChanges_Response::_internal_changes_size() const {
  return changes_.size();
}
inline int GetChanges_Response::changes_size() const {
  return _internal_changes_size();
}
inline void GetChanges_Response::clear_changes() {
  changes_.Clear();
}
inline ::Orthanc::DatabasePluginMessages::ServerIndexChange* GetChanges_Response::mutable_changes(int index) {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.GetChanges.Response.changes)
  return changes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Orthanc::DatabasePluginMessages::ServerIndexChange >*
GetChanges_Response::mutable_changes() {
  // @@protoc_insertion_point(field_mutable_list:Orthanc.DatabasePluginMessages.GetChanges.Response.changes)
  return &changes_;
}
inline const ::Orthanc::DatabasePluginMessages::ServerIndexChange& GetChanges_Response::_internal_changes(int index) const {
  return changes_.Get(index);
}
inline const ::Orthanc::DatabasePluginMessages::ServerIndexChange& GetChanges_Response::changes(int index) const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.GetChanges.Response.changes)
  return _internal_changes(index);
}
inline ::Orthanc::DatabasePluginMessages::ServerIndexChange* GetChanges_Response::_internal_add_changes() {
  return changes_.Add();
}
inline ::Orthanc::DatabasePluginMessages::ServerIndexChange* GetChanges_Response::add_changes() {
  // @@protoc_insertion_point(field_add:Orthanc.DatabasePluginMessages.GetChanges.Response.changes)
  return _internal_add_changes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Orthanc::DatabasePluginMessages::ServerIndexChange >&
GetChanges_Response::changes() const {
  // @@protoc_insertion_point(field_list:Orthanc.DatabasePluginMessages.GetChanges.Response.changes)
  return changes_;
}

// bool done = 2;
inline void GetChanges_Response::clear_done() {
  done_ = false;
}
inline bool GetChanges_Response::_internal_done() const {
  return done_;
}
inline bool GetChanges_Response::done() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.GetChanges.Response.done)
  return _internal_done();
}
inline void GetChanges_Response::_internal_set_done(bool value) {
  
  done_ = value;
}
inline void GetChanges_Response::set_done(bool value) {
  _internal_set_done(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.GetChanges.Response.done)
}

// -------------------------------------------------------------------

// GetChanges

// -------------------------------------------------------------------

// GetChildrenInternalId_Request

// int64 id = 1;
inline void GetChildrenInternalId_Request::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetChildrenInternalId_Request::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetChildrenInternalId_Request::id() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.GetChildrenInternalId.Request.id)
  return _internal_id();
}
inline void GetChildrenInternalId_Request::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void GetChildrenInternalId_Request::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.GetChildrenInternalId.Request.id)
}

// -------------------------------------------------------------------

// GetChildrenInternalId_Response

// repeated int64 ids = 1;
inline int GetChildrenInternalId_Response::_internal_ids_size() const {
  return ids_.size();
}
inline int GetChildrenInternalId_Response::ids_size() const {
  return _internal_ids_size();
}
inline void GetChildrenInternalId_Response::clear_ids() {
  ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetChildrenInternalId_Response::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetChildrenInternalId_Response::ids(int index) const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.GetChildrenInternalId.Response.ids)
  return _internal_ids(index);
}
inline void GetChildrenInternalId_Response::set_ids(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.GetChildrenInternalId.Response.ids)
}
inline void GetChildrenInternalId_Response::_internal_add_ids(::PROTOBUF_NAMESPACE_ID::int64 value) {
  ids_.Add(value);
}
inline void GetChildrenInternalId_Response::add_ids(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_ids(value);
  // @@protoc_insertion_point(field_add:Orthanc.DatabasePluginMessages.GetChildrenInternalId.Response.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
GetChildrenInternalId_Response::_internal_ids() const {
  return ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
GetChildrenInternalId_Response::ids() const {
  // @@protoc_insertion_point(field_list:Orthanc.DatabasePluginMessages.GetChildrenInternalId.Response.ids)
  return _internal_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
GetChildrenInternalId_Response::_internal_mutable_ids() {
  return &ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
GetChildrenInternalId_Response::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:Orthanc.DatabasePluginMessages.GetChildrenInternalId.Response.ids)
  return _internal_mutable_ids();
}

// -------------------------------------------------------------------

// GetChildrenInternalId

// -------------------------------------------------------------------

// GetChildrenPublicId_Request

// int64 id = 1;
inline void GetChildrenPublicId_Request::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetChildrenPublicId_Request::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetChildrenPublicId_Request::id() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.GetChildrenPublicId.Request.id)
  return _internal_id();
}
inline void GetChildrenPublicId_Request::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void GetChildrenPublicId_Request::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.GetChildrenPublicId.Request.id)
}

// -------------------------------------------------------------------

// GetChildrenPublicId_Response

// repeated string ids = 1;
inline int GetChildrenPublicId_Response::_internal_ids_size() const {
  return ids_.size();
}
inline int GetChildrenPublicId_Response::ids_size() const {
  return _internal_ids_size();
}
inline void GetChildrenPublicId_Response::clear_ids() {
  ids_.Clear();
}
inline std::string* GetChildrenPublicId_Response::add_ids() {
  // @@protoc_insertion_point(field_add_mutable:Orthanc.DatabasePluginMessages.GetChildrenPublicId.Response.ids)
  return _internal_add_ids();
}
inline const std::string& GetChildrenPublicId_Response::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline const std::string& GetChildrenPublicId_Response::ids(int index) const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.GetChildrenPublicId.Response.ids)
  return _internal_ids(index);
}
inline std::string* GetChildrenPublicId_Response::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.GetChildrenPublicId.Response.ids)
  return ids_.Mutable(index);
}
inline void GetChildrenPublicId_Response::set_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.GetChildrenPublicId.Response.ids)
  ids_.Mutable(index)->assign(value);
}
inline void GetChildrenPublicId_Response::set_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.GetChildrenPublicId.Response.ids)
  ids_.Mutable(index)->assign(std::move(value));
}
inline void GetChildrenPublicId_Response::set_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Orthanc.DatabasePluginMessages.GetChildrenPublicId.Response.ids)
}
inline void GetChildrenPublicId_Response::set_ids(int index, const char* value, size_t size) {
  ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Orthanc.DatabasePluginMessages.GetChildrenPublicId.Response.ids)
}
inline std::string* GetChildrenPublicId_Response::_internal_add_ids() {
  return ids_.Add();
}
inline void GetChildrenPublicId_Response::add_ids(const std::string& value) {
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Orthanc.DatabasePluginMessages.GetChildrenPublicId.Response.ids)
}
inline void GetChildrenPublicId_Response::add_ids(std::string&& value) {
  ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Orthanc.DatabasePluginMessages.GetChildrenPublicId.Response.ids)
}
inline void GetChildrenPublicId_Response::add_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Orthanc.DatabasePluginMessages.GetChildrenPublicId.Response.ids)
}
inline void GetChildrenPublicId_Response::add_ids(const char* value, size_t size) {
  ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Orthanc.DatabasePluginMessages.GetChildrenPublicId.Response.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetChildrenPublicId_Response::ids() const {
  // @@protoc_insertion_point(field_list:Orthanc.DatabasePluginMessages.GetChildrenPublicId.Response.ids)
  return ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetChildrenPublicId_Response::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:Orthanc.DatabasePluginMessages.GetChildrenPublicId.Response.ids)
  return &ids_;
}

// -------------------------------------------------------------------

// GetChildrenPublicId

// -------------------------------------------------------------------

// GetExportedResources_Request

// int64 since = 1;
inline void GetExportedResources_Request::clear_since() {
  since_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetExportedResources_Request::_internal_since() const {
  return since_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetExportedResources_Request::since() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.GetExportedResources.Request.since)
  return _internal_since();
}
inline void GetExportedResources_Request::_internal_set_since(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  since_ = value;
}
inline void GetExportedResources_Request::set_since(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_since(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.GetExportedResources.Request.since)
}

// uint32 limit = 2;
inline void GetExportedResources_Request::clear_limit() {
  limit_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetExportedResources_Request::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetExportedResources_Request::limit() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.GetExportedResources.Request.limit)
  return _internal_limit();
}
inline void GetExportedResources_Request::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  limit_ = value;
}
inline void GetExportedResources_Request::set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.GetExportedResources.Request.limit)
}

// -------------------------------------------------------------------

// GetExportedResources_Response

// repeated .Orthanc.DatabasePluginMessages.ExportedResource resources = 1;
inline int GetExportedResources_Response::_internal_resources_size() const {
  return resources_.size();
}
inline int GetExportedResources_Response::resources_size() const {
  return _internal_resources_size();
}
inline void GetExportedResources_Response::clear_resources() {
  resources_.Clear();
}
inline ::Orthanc::DatabasePluginMessages::ExportedResource* GetExportedResources_Response::mutable_resources(int index) {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.GetExportedResources.Response.resources)
  return resources_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Orthanc::DatabasePluginMessages::ExportedResource >*
GetExportedResources_Response::mutable_resources() {
  // @@protoc_insertion_point(field_mutable_list:Orthanc.DatabasePluginMessages.GetExportedResources.Response.resources)
  return &resources_;
}
inline const ::Orthanc::DatabasePluginMessages::ExportedResource& GetExportedResources_Response::_internal_resources(int index) const {
  return resources_.Get(index);
}
inline const ::Orthanc::DatabasePluginMessages::ExportedResource& GetExportedResources_Response::resources(int index) const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.GetExportedResources.Response.resources)
  return _internal_resources(index);
}
inline ::Orthanc::DatabasePluginMessages::ExportedResource* GetExportedResources_Response::_internal_add_resources() {
  return resources_.Add();
}
inline ::Orthanc::DatabasePluginMessages::ExportedResource* GetExportedResources_Response::add_resources() {
  // @@protoc_insertion_point(field_add:Orthanc.DatabasePluginMessages.GetExportedResources.Response.resources)
  return _internal_add_resources();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Orthanc::DatabasePluginMessages::ExportedResource >&
GetExportedResources_Response::resources() const {
  // @@protoc_insertion_point(field_list:Orthanc.DatabasePluginMessages.GetExportedResources.Response.resources)
  return resources_;
}

// bool done = 2;
inline void GetExportedResources_Response::clear_done() {
  done_ = false;
}
inline bool GetExportedResources_Response::_internal_done() const {
  return done_;
}
inline bool GetExportedResources_Response::done() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.GetExportedResources.Response.done)
  return _internal_done();
}
inline void GetExportedResources_Response::_internal_set_done(bool value) {
  
  done_ = value;
}
inline void GetExportedResources_Response::set_done(bool value) {
  _internal_set_done(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.GetExportedResources.Response.done)
}

// -------------------------------------------------------------------

// GetExportedResources

// -------------------------------------------------------------------

// GetLastChange_Request

// -------------------------------------------------------------------

// GetLastChange_Response

// bool found = 1;
inline void GetLastChange_Response::clear_found() {
  found_ = false;
}
inline bool GetLastChange_Response::_internal_found() const {
  return found_;
}
inline bool GetLastChange_Response::found() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.GetLastChange.Response.found)
  return _internal_found();
}
inline void GetLastChange_Response::_internal_set_found(bool value) {
  
  found_ = value;
}
inline void GetLastChange_Response::set_found(bool value) {
  _internal_set_found(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.GetLastChange.Response.found)
}

// .Orthanc.DatabasePluginMessages.ServerIndexChange change = 2;
inline bool GetLastChange_Response::_internal_has_change() const {
  return this != internal_default_instance() && change_ != nullptr;
}
inline bool GetLastChange_Response::has_change() const {
  return _internal_has_change();
}
inline void GetLastChange_Response::clear_change() {
  if (GetArena() == nullptr && change_ != nullptr) {
    delete change_;
  }
  change_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::ServerIndexChange& GetLastChange_Response::_internal_change() const {
  const ::Orthanc::DatabasePluginMessages::ServerIndexChange* p = change_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::ServerIndexChange*>(
      &::Orthanc::DatabasePluginMessages::_ServerIndexChange_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::ServerIndexChange& GetLastChange_Response::change() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.GetLastChange.Response.change)
  return _internal_change();
}
inline void GetLastChange_Response::unsafe_arena_set_allocated_change(
    ::Orthanc::DatabasePluginMessages::ServerIndexChange* change) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(change_);
  }
  change_ = change;
  if (change) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.GetLastChange.Response.change)
}
inline ::Orthanc::DatabasePluginMessages::ServerIndexChange* GetLastChange_Response::release_change() {
  auto temp = unsafe_arena_release_change();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::ServerIndexChange* GetLastChange_Response::unsafe_arena_release_change() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.GetLastChange.Response.change)
  
  ::Orthanc::DatabasePluginMessages::ServerIndexChange* temp = change_;
  change_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::ServerIndexChange* GetLastChange_Response::_internal_mutable_change() {
  
  if (change_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::ServerIndexChange>(GetArena());
    change_ = p;
  }
  return change_;
}
inline ::Orthanc::DatabasePluginMessages::ServerIndexChange* GetLastChange_Response::mutable_change() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.GetLastChange.Response.change)
  return _internal_mutable_change();
}
inline void GetLastChange_Response::set_allocated_change(::Orthanc::DatabasePluginMessages::ServerIndexChange* change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete change_;
  }
  if (change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(change);
    if (message_arena != submessage_arena) {
      change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, change, submessage_arena);
    }
    
  } else {
    
  }
  change_ = change;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.GetLastChange.Response.change)
}

// -------------------------------------------------------------------

// GetLastChange

// -------------------------------------------------------------------

// GetLastExportedResource_Request

// -------------------------------------------------------------------

// GetLastExportedResource_Response

// bool found = 1;
inline void GetLastExportedResource_Response::clear_found() {
  found_ = false;
}
inline bool GetLastExportedResource_Response::_internal_found() const {
  return found_;
}
inline bool GetLastExportedResource_Response::found() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.GetLastExportedResource.Response.found)
  return _internal_found();
}
inline void GetLastExportedResource_Response::_internal_set_found(bool value) {
  
  found_ = value;
}
inline void GetLastExportedResource_Response::set_found(bool value) {
  _internal_set_found(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.GetLastExportedResource.Response.found)
}

// .Orthanc.DatabasePluginMessages.ExportedResource resource = 2;
inline bool GetLastExportedResource_Response::_internal_has_resource() const {
  return this != internal_default_instance() && resource_ != nullptr;
}
inline bool GetLastExportedResource_Response::has_resource() const {
  return _internal_has_resource();
}
inline void GetLastExportedResource_Response::clear_resource() {
  if (GetArena() == nullptr && resource_ != nullptr) {
    delete resource_;
  }
  resource_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::ExportedResource& GetLastExportedResource_Response::_internal_resource() const {
  const ::Orthanc::DatabasePluginMessages::ExportedResource* p = resource_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::ExportedResource*>(
      &::Orthanc::DatabasePluginMessages::_ExportedResource_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::ExportedResource& GetLastExportedResource_Response::resource() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.GetLastExportedResource.Response.resource)
  return _internal_resource();
}
inline void GetLastExportedResource_Response::unsafe_arena_set_allocated_resource(
    ::Orthanc::DatabasePluginMessages::ExportedResource* resource) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(resource_);
  }
  resource_ = resource;
  if (resource) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.GetLastExportedResource.Response.resource)
}
inline ::Orthanc::DatabasePluginMessages::ExportedResource* GetLastExportedResource_Response::release_resource() {
  auto temp = unsafe_arena_release_resource();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::ExportedResource* GetLastExportedResource_Response::unsafe_arena_release_resource() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.GetLastExportedResource.Response.resource)
  
  ::Orthanc::DatabasePluginMessages::ExportedResource* temp = resource_;
  resource_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::ExportedResource* GetLastExportedResource_Response::_internal_mutable_resource() {
  
  if (resource_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::ExportedResource>(GetArena());
    resource_ = p;
  }
  return resource_;
}
inline ::Orthanc::DatabasePluginMessages::ExportedResource* GetLastExportedResource_Response::mutable_resource() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.GetLastExportedResource.Response.resource)
  return _internal_mutable_resource();
}
inline void GetLastExportedResource_Response::set_allocated_resource(::Orthanc::DatabasePluginMessages::ExportedResource* resource) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete resource_;
  }
  if (resource) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resource);
    if (message_arena != submessage_arena) {
      resource = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resource, submessage_arena);
    }
    
  } else {
    
  }
  resource_ = resource;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.GetLastExportedResource.Response.resource)
}

// -------------------------------------------------------------------

// GetLastExportedResource

// -------------------------------------------------------------------

// GetMainDicomTags_Request

// int64 id = 1;
inline void GetMainDicomTags_Request::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetMainDicomTags_Request::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetMainDicomTags_Request::id() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.GetMainDicomTags.Request.id)
  return _internal_id();
}
inline void GetMainDicomTags_Request::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void GetMainDicomTags_Request::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.GetMainDicomTags.Request.id)
}

// -------------------------------------------------------------------

// GetMainDicomTags_Response_Tag

// uint32 group = 1;
inline void GetMainDicomTags_Response_Tag::clear_group() {
  group_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetMainDicomTags_Response_Tag::_internal_group() const {
  return group_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetMainDicomTags_Response_Tag::group() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.GetMainDicomTags.Response.Tag.group)
  return _internal_group();
}
inline void GetMainDicomTags_Response_Tag::_internal_set_group(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  group_ = value;
}
inline void GetMainDicomTags_Response_Tag::set_group(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_group(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.GetMainDicomTags.Response.Tag.group)
}

// uint32 element = 2;
inline void GetMainDicomTags_Response_Tag::clear_element() {
  element_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetMainDicomTags_Response_Tag::_internal_element() const {
  return element_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetMainDicomTags_Response_Tag::element() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.GetMainDicomTags.Response.Tag.element)
  return _internal_element();
}
inline void GetMainDicomTags_Response_Tag::_internal_set_element(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  element_ = value;
}
inline void GetMainDicomTags_Response_Tag::set_element(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_element(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.GetMainDicomTags.Response.Tag.element)
}

// string value = 3;
inline void GetMainDicomTags_Response_Tag::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetMainDicomTags_Response_Tag::value() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.GetMainDicomTags.Response.Tag.value)
  return _internal_value();
}
inline void GetMainDicomTags_Response_Tag::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.GetMainDicomTags.Response.Tag.value)
}
inline std::string* GetMainDicomTags_Response_Tag::mutable_value() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.GetMainDicomTags.Response.Tag.value)
  return _internal_mutable_value();
}
inline const std::string& GetMainDicomTags_Response_Tag::_internal_value() const {
  return value_.Get();
}
inline void GetMainDicomTags_Response_Tag::_internal_set_value(const std::string& value) {
  
  value_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetMainDicomTags_Response_Tag::set_value(std::string&& value) {
  
  value_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Orthanc.DatabasePluginMessages.GetMainDicomTags.Response.Tag.value)
}
inline void GetMainDicomTags_Response_Tag::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Orthanc.DatabasePluginMessages.GetMainDicomTags.Response.Tag.value)
}
inline void GetMainDicomTags_Response_Tag::set_value(const char* value,
    size_t size) {
  
  value_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Orthanc.DatabasePluginMessages.GetMainDicomTags.Response.Tag.value)
}
inline std::string* GetMainDicomTags_Response_Tag::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetMainDicomTags_Response_Tag::release_value() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.GetMainDicomTags.Response.Tag.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetMainDicomTags_Response_Tag::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.GetMainDicomTags.Response.Tag.value)
}
inline std::string* GetMainDicomTags_Response_Tag::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Orthanc.DatabasePluginMessages.GetMainDicomTags.Response.Tag.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetMainDicomTags_Response_Tag::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    
  } else {
    
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.GetMainDicomTags.Response.Tag.value)
}

// -------------------------------------------------------------------

// GetMainDicomTags_Response

// repeated .Orthanc.DatabasePluginMessages.GetMainDicomTags.Response.Tag tags = 1;
inline int GetMainDicomTags_Response::_internal_tags_size() const {
  return tags_.size();
}
inline int GetMainDicomTags_Response::tags_size() const {
  return _internal_tags_size();
}
inline void GetMainDicomTags_Response::clear_tags() {
  tags_.Clear();
}
inline ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Response_Tag* GetMainDicomTags_Response::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.GetMainDicomTags.Response.tags)
  return tags_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Response_Tag >*
GetMainDicomTags_Response::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:Orthanc.DatabasePluginMessages.GetMainDicomTags.Response.tags)
  return &tags_;
}
inline const ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Response_Tag& GetMainDicomTags_Response::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Response_Tag& GetMainDicomTags_Response::tags(int index) const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.GetMainDicomTags.Response.tags)
  return _internal_tags(index);
}
inline ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Response_Tag* GetMainDicomTags_Response::_internal_add_tags() {
  return tags_.Add();
}
inline ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Response_Tag* GetMainDicomTags_Response::add_tags() {
  // @@protoc_insertion_point(field_add:Orthanc.DatabasePluginMessages.GetMainDicomTags.Response.tags)
  return _internal_add_tags();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Response_Tag >&
GetMainDicomTags_Response::tags() const {
  // @@protoc_insertion_point(field_list:Orthanc.DatabasePluginMessages.GetMainDicomTags.Response.tags)
  return tags_;
}

// -------------------------------------------------------------------

// GetMainDicomTags

// -------------------------------------------------------------------

// GetPublicId_Request

// int64 id = 1;
inline void GetPublicId_Request::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetPublicId_Request::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetPublicId_Request::id() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.GetPublicId.Request.id)
  return _internal_id();
}
inline void GetPublicId_Request::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void GetPublicId_Request::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.GetPublicId.Request.id)
}

// -------------------------------------------------------------------

// GetPublicId_Response

// string id = 1;
inline void GetPublicId_Response::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetPublicId_Response::id() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.GetPublicId.Response.id)
  return _internal_id();
}
inline void GetPublicId_Response::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.GetPublicId.Response.id)
}
inline std::string* GetPublicId_Response::mutable_id() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.GetPublicId.Response.id)
  return _internal_mutable_id();
}
inline const std::string& GetPublicId_Response::_internal_id() const {
  return id_.Get();
}
inline void GetPublicId_Response::_internal_set_id(const std::string& value) {
  
  id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetPublicId_Response::set_id(std::string&& value) {
  
  id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Orthanc.DatabasePluginMessages.GetPublicId.Response.id)
}
inline void GetPublicId_Response::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Orthanc.DatabasePluginMessages.GetPublicId.Response.id)
}
inline void GetPublicId_Response::set_id(const char* value,
    size_t size) {
  
  id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Orthanc.DatabasePluginMessages.GetPublicId.Response.id)
}
inline std::string* GetPublicId_Response::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetPublicId_Response::release_id() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.GetPublicId.Response.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetPublicId_Response::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.GetPublicId.Response.id)
}
inline std::string* GetPublicId_Response::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Orthanc.DatabasePluginMessages.GetPublicId.Response.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetPublicId_Response::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.GetPublicId.Response.id)
}

// -------------------------------------------------------------------

// GetPublicId

// -------------------------------------------------------------------

// GetResourcesCount_Request

// .Orthanc.DatabasePluginMessages.ResourceType type = 1;
inline void GetResourcesCount_Request::clear_type() {
  type_ = 0;
}
inline ::Orthanc::DatabasePluginMessages::ResourceType GetResourcesCount_Request::_internal_type() const {
  return static_cast< ::Orthanc::DatabasePluginMessages::ResourceType >(type_);
}
inline ::Orthanc::DatabasePluginMessages::ResourceType GetResourcesCount_Request::type() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.GetResourcesCount.Request.type)
  return _internal_type();
}
inline void GetResourcesCount_Request::_internal_set_type(::Orthanc::DatabasePluginMessages::ResourceType value) {
  
  type_ = value;
}
inline void GetResourcesCount_Request::set_type(::Orthanc::DatabasePluginMessages::ResourceType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.GetResourcesCount.Request.type)
}

// -------------------------------------------------------------------

// GetResourcesCount_Response

// uint64 count = 1;
inline void GetResourcesCount_Response::clear_count() {
  count_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetResourcesCount_Response::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetResourcesCount_Response::count() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.GetResourcesCount.Response.count)
  return _internal_count();
}
inline void GetResourcesCount_Response::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  count_ = value;
}
inline void GetResourcesCount_Response::set_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.GetResourcesCount.Response.count)
}

// -------------------------------------------------------------------

// GetResourcesCount

// -------------------------------------------------------------------

// GetResourceType_Request

// int64 id = 1;
inline void GetResourceType_Request::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetResourceType_Request::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetResourceType_Request::id() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.GetResourceType.Request.id)
  return _internal_id();
}
inline void GetResourceType_Request::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void GetResourceType_Request::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.GetResourceType.Request.id)
}

// -------------------------------------------------------------------

// GetResourceType_Response

// .Orthanc.DatabasePluginMessages.ResourceType type = 1;
inline void GetResourceType_Response::clear_type() {
  type_ = 0;
}
inline ::Orthanc::DatabasePluginMessages::ResourceType GetResourceType_Response::_internal_type() const {
  return static_cast< ::Orthanc::DatabasePluginMessages::ResourceType >(type_);
}
inline ::Orthanc::DatabasePluginMessages::ResourceType GetResourceType_Response::type() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.GetResourceType.Response.type)
  return _internal_type();
}
inline void GetResourceType_Response::_internal_set_type(::Orthanc::DatabasePluginMessages::ResourceType value) {
  
  type_ = value;
}
inline void GetResourceType_Response::set_type(::Orthanc::DatabasePluginMessages::ResourceType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.GetResourceType.Response.type)
}

// -------------------------------------------------------------------

// GetResourceType

// -------------------------------------------------------------------

// GetTotalCompressedSize_Request

// -------------------------------------------------------------------

// GetTotalCompressedSize_Response

// uint64 size = 1;
inline void GetTotalCompressedSize_Response::clear_size() {
  size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetTotalCompressedSize_Response::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetTotalCompressedSize_Response::size() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.GetTotalCompressedSize.Response.size)
  return _internal_size();
}
inline void GetTotalCompressedSize_Response::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  size_ = value;
}
inline void GetTotalCompressedSize_Response::set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.GetTotalCompressedSize.Response.size)
}

// -------------------------------------------------------------------

// GetTotalCompressedSize

// -------------------------------------------------------------------

// GetTotalUncompressedSize_Request

// -------------------------------------------------------------------

// GetTotalUncompressedSize_Response

// uint64 size = 1;
inline void GetTotalUncompressedSize_Response::clear_size() {
  size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetTotalUncompressedSize_Response::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetTotalUncompressedSize_Response::size() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.GetTotalUncompressedSize.Response.size)
  return _internal_size();
}
inline void GetTotalUncompressedSize_Response::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  size_ = value;
}
inline void GetTotalUncompressedSize_Response::set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.GetTotalUncompressedSize.Response.size)
}

// -------------------------------------------------------------------

// GetTotalUncompressedSize

// -------------------------------------------------------------------

// IsProtectedPatient_Request

// int64 patient_id = 1;
inline void IsProtectedPatient_Request::clear_patient_id() {
  patient_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IsProtectedPatient_Request::_internal_patient_id() const {
  return patient_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IsProtectedPatient_Request::patient_id() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.IsProtectedPatient.Request.patient_id)
  return _internal_patient_id();
}
inline void IsProtectedPatient_Request::_internal_set_patient_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  patient_id_ = value;
}
inline void IsProtectedPatient_Request::set_patient_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_patient_id(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.IsProtectedPatient.Request.patient_id)
}

// -------------------------------------------------------------------

// IsProtectedPatient_Response

// bool protected_patient = 1;
inline void IsProtectedPatient_Response::clear_protected_patient() {
  protected_patient_ = false;
}
inline bool IsProtectedPatient_Response::_internal_protected_patient() const {
  return protected_patient_;
}
inline bool IsProtectedPatient_Response::protected_patient() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.IsProtectedPatient.Response.protected_patient)
  return _internal_protected_patient();
}
inline void IsProtectedPatient_Response::_internal_set_protected_patient(bool value) {
  
  protected_patient_ = value;
}
inline void IsProtectedPatient_Response::set_protected_patient(bool value) {
  _internal_set_protected_patient(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.IsProtectedPatient.Response.protected_patient)
}

// -------------------------------------------------------------------

// IsProtectedPatient

// -------------------------------------------------------------------

// ListAvailableAttachments_Request

// int64 id = 1;
inline void ListAvailableAttachments_Request::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ListAvailableAttachments_Request::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ListAvailableAttachments_Request::id() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.ListAvailableAttachments.Request.id)
  return _internal_id();
}
inline void ListAvailableAttachments_Request::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void ListAvailableAttachments_Request::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.ListAvailableAttachments.Request.id)
}

// -------------------------------------------------------------------

// ListAvailableAttachments_Response

// repeated int32 attachments = 1;
inline int ListAvailableAttachments_Response::_internal_attachments_size() const {
  return attachments_.size();
}
inline int ListAvailableAttachments_Response::attachments_size() const {
  return _internal_attachments_size();
}
inline void ListAvailableAttachments_Response::clear_attachments() {
  attachments_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListAvailableAttachments_Response::_internal_attachments(int index) const {
  return attachments_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListAvailableAttachments_Response::attachments(int index) const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.ListAvailableAttachments.Response.attachments)
  return _internal_attachments(index);
}
inline void ListAvailableAttachments_Response::set_attachments(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  attachments_.Set(index, value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.ListAvailableAttachments.Response.attachments)
}
inline void ListAvailableAttachments_Response::_internal_add_attachments(::PROTOBUF_NAMESPACE_ID::int32 value) {
  attachments_.Add(value);
}
inline void ListAvailableAttachments_Response::add_attachments(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_attachments(value);
  // @@protoc_insertion_point(field_add:Orthanc.DatabasePluginMessages.ListAvailableAttachments.Response.attachments)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ListAvailableAttachments_Response::_internal_attachments() const {
  return attachments_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ListAvailableAttachments_Response::attachments() const {
  // @@protoc_insertion_point(field_list:Orthanc.DatabasePluginMessages.ListAvailableAttachments.Response.attachments)
  return _internal_attachments();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ListAvailableAttachments_Response::_internal_mutable_attachments() {
  return &attachments_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ListAvailableAttachments_Response::mutable_attachments() {
  // @@protoc_insertion_point(field_mutable_list:Orthanc.DatabasePluginMessages.ListAvailableAttachments.Response.attachments)
  return _internal_mutable_attachments();
}

// -------------------------------------------------------------------

// ListAvailableAttachments

// -------------------------------------------------------------------

// LogChange_Request

// int32 change_type = 1;
inline void LogChange_Request::clear_change_type() {
  change_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogChange_Request::_internal_change_type() const {
  return change_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogChange_Request::change_type() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.LogChange.Request.change_type)
  return _internal_change_type();
}
inline void LogChange_Request::_internal_set_change_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  change_type_ = value;
}
inline void LogChange_Request::set_change_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_change_type(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.LogChange.Request.change_type)
}

// .Orthanc.DatabasePluginMessages.ResourceType resource_type = 2;
inline void LogChange_Request::clear_resource_type() {
  resource_type_ = 0;
}
inline ::Orthanc::DatabasePluginMessages::ResourceType LogChange_Request::_internal_resource_type() const {
  return static_cast< ::Orthanc::DatabasePluginMessages::ResourceType >(resource_type_);
}
inline ::Orthanc::DatabasePluginMessages::ResourceType LogChange_Request::resource_type() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.LogChange.Request.resource_type)
  return _internal_resource_type();
}
inline void LogChange_Request::_internal_set_resource_type(::Orthanc::DatabasePluginMessages::ResourceType value) {
  
  resource_type_ = value;
}
inline void LogChange_Request::set_resource_type(::Orthanc::DatabasePluginMessages::ResourceType value) {
  _internal_set_resource_type(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.LogChange.Request.resource_type)
}

// int64 resource_id = 3;
inline void LogChange_Request::clear_resource_id() {
  resource_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LogChange_Request::_internal_resource_id() const {
  return resource_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LogChange_Request::resource_id() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.LogChange.Request.resource_id)
  return _internal_resource_id();
}
inline void LogChange_Request::_internal_set_resource_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  resource_id_ = value;
}
inline void LogChange_Request::set_resource_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_resource_id(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.LogChange.Request.resource_id)
}

// string date = 4;
inline void LogChange_Request::clear_date() {
  date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LogChange_Request::date() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.LogChange.Request.date)
  return _internal_date();
}
inline void LogChange_Request::set_date(const std::string& value) {
  _internal_set_date(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.LogChange.Request.date)
}
inline std::string* LogChange_Request::mutable_date() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.LogChange.Request.date)
  return _internal_mutable_date();
}
inline const std::string& LogChange_Request::_internal_date() const {
  return date_.Get();
}
inline void LogChange_Request::_internal_set_date(const std::string& value) {
  
  date_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LogChange_Request::set_date(std::string&& value) {
  
  date_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Orthanc.DatabasePluginMessages.LogChange.Request.date)
}
inline void LogChange_Request::set_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  date_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Orthanc.DatabasePluginMessages.LogChange.Request.date)
}
inline void LogChange_Request::set_date(const char* value,
    size_t size) {
  
  date_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Orthanc.DatabasePluginMessages.LogChange.Request.date)
}
inline std::string* LogChange_Request::_internal_mutable_date() {
  
  return date_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LogChange_Request::release_date() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.LogChange.Request.date)
  return date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogChange_Request::set_allocated_date(std::string* date) {
  if (date != nullptr) {
    
  } else {
    
  }
  date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), date,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.LogChange.Request.date)
}
inline std::string* LogChange_Request::unsafe_arena_release_date() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Orthanc.DatabasePluginMessages.LogChange.Request.date)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return date_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LogChange_Request::unsafe_arena_set_allocated_date(
    std::string* date) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (date != nullptr) {
    
  } else {
    
  }
  date_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      date, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.LogChange.Request.date)
}

// -------------------------------------------------------------------

// LogChange_Response

// -------------------------------------------------------------------

// LogChange

// -------------------------------------------------------------------

// LogExportedResource_Request

// .Orthanc.DatabasePluginMessages.ResourceType resource_type = 1;
inline void LogExportedResource_Request::clear_resource_type() {
  resource_type_ = 0;
}
inline ::Orthanc::DatabasePluginMessages::ResourceType LogExportedResource_Request::_internal_resource_type() const {
  return static_cast< ::Orthanc::DatabasePluginMessages::ResourceType >(resource_type_);
}
inline ::Orthanc::DatabasePluginMessages::ResourceType LogExportedResource_Request::resource_type() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.LogExportedResource.Request.resource_type)
  return _internal_resource_type();
}
inline void LogExportedResource_Request::_internal_set_resource_type(::Orthanc::DatabasePluginMessages::ResourceType value) {
  
  resource_type_ = value;
}
inline void LogExportedResource_Request::set_resource_type(::Orthanc::DatabasePluginMessages::ResourceType value) {
  _internal_set_resource_type(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.LogExportedResource.Request.resource_type)
}

// string public_id = 2;
inline void LogExportedResource_Request::clear_public_id() {
  public_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LogExportedResource_Request::public_id() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.LogExportedResource.Request.public_id)
  return _internal_public_id();
}
inline void LogExportedResource_Request::set_public_id(const std::string& value) {
  _internal_set_public_id(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.LogExportedResource.Request.public_id)
}
inline std::string* LogExportedResource_Request::mutable_public_id() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.LogExportedResource.Request.public_id)
  return _internal_mutable_public_id();
}
inline const std::string& LogExportedResource_Request::_internal_public_id() const {
  return public_id_.Get();
}
inline void LogExportedResource_Request::_internal_set_public_id(const std::string& value) {
  
  public_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LogExportedResource_Request::set_public_id(std::string&& value) {
  
  public_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Orthanc.DatabasePluginMessages.LogExportedResource.Request.public_id)
}
inline void LogExportedResource_Request::set_public_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  public_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Orthanc.DatabasePluginMessages.LogExportedResource.Request.public_id)
}
inline void LogExportedResource_Request::set_public_id(const char* value,
    size_t size) {
  
  public_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Orthanc.DatabasePluginMessages.LogExportedResource.Request.public_id)
}
inline std::string* LogExportedResource_Request::_internal_mutable_public_id() {
  
  return public_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LogExportedResource_Request::release_public_id() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.LogExportedResource.Request.public_id)
  return public_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogExportedResource_Request::set_allocated_public_id(std::string* public_id) {
  if (public_id != nullptr) {
    
  } else {
    
  }
  public_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.LogExportedResource.Request.public_id)
}
inline std::string* LogExportedResource_Request::unsafe_arena_release_public_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Orthanc.DatabasePluginMessages.LogExportedResource.Request.public_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return public_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LogExportedResource_Request::unsafe_arena_set_allocated_public_id(
    std::string* public_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (public_id != nullptr) {
    
  } else {
    
  }
  public_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      public_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.LogExportedResource.Request.public_id)
}

// string modality = 3;
inline void LogExportedResource_Request::clear_modality() {
  modality_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LogExportedResource_Request::modality() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.LogExportedResource.Request.modality)
  return _internal_modality();
}
inline void LogExportedResource_Request::set_modality(const std::string& value) {
  _internal_set_modality(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.LogExportedResource.Request.modality)
}
inline std::string* LogExportedResource_Request::mutable_modality() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.LogExportedResource.Request.modality)
  return _internal_mutable_modality();
}
inline const std::string& LogExportedResource_Request::_internal_modality() const {
  return modality_.Get();
}
inline void LogExportedResource_Request::_internal_set_modality(const std::string& value) {
  
  modality_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LogExportedResource_Request::set_modality(std::string&& value) {
  
  modality_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Orthanc.DatabasePluginMessages.LogExportedResource.Request.modality)
}
inline void LogExportedResource_Request::set_modality(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  modality_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Orthanc.DatabasePluginMessages.LogExportedResource.Request.modality)
}
inline void LogExportedResource_Request::set_modality(const char* value,
    size_t size) {
  
  modality_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Orthanc.DatabasePluginMessages.LogExportedResource.Request.modality)
}
inline std::string* LogExportedResource_Request::_internal_mutable_modality() {
  
  return modality_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LogExportedResource_Request::release_modality() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.LogExportedResource.Request.modality)
  return modality_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogExportedResource_Request::set_allocated_modality(std::string* modality) {
  if (modality != nullptr) {
    
  } else {
    
  }
  modality_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), modality,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.LogExportedResource.Request.modality)
}
inline std::string* LogExportedResource_Request::unsafe_arena_release_modality() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Orthanc.DatabasePluginMessages.LogExportedResource.Request.modality)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return modality_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LogExportedResource_Request::unsafe_arena_set_allocated_modality(
    std::string* modality) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (modality != nullptr) {
    
  } else {
    
  }
  modality_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      modality, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.LogExportedResource.Request.modality)
}

// string date = 4;
inline void LogExportedResource_Request::clear_date() {
  date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LogExportedResource_Request::date() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.LogExportedResource.Request.date)
  return _internal_date();
}
inline void LogExportedResource_Request::set_date(const std::string& value) {
  _internal_set_date(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.LogExportedResource.Request.date)
}
inline std::string* LogExportedResource_Request::mutable_date() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.LogExportedResource.Request.date)
  return _internal_mutable_date();
}
inline const std::string& LogExportedResource_Request::_internal_date() const {
  return date_.Get();
}
inline void LogExportedResource_Request::_internal_set_date(const std::string& value) {
  
  date_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LogExportedResource_Request::set_date(std::string&& value) {
  
  date_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Orthanc.DatabasePluginMessages.LogExportedResource.Request.date)
}
inline void LogExportedResource_Request::set_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  date_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Orthanc.DatabasePluginMessages.LogExportedResource.Request.date)
}
inline void LogExportedResource_Request::set_date(const char* value,
    size_t size) {
  
  date_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Orthanc.DatabasePluginMessages.LogExportedResource.Request.date)
}
inline std::string* LogExportedResource_Request::_internal_mutable_date() {
  
  return date_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LogExportedResource_Request::release_date() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.LogExportedResource.Request.date)
  return date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogExportedResource_Request::set_allocated_date(std::string* date) {
  if (date != nullptr) {
    
  } else {
    
  }
  date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), date,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.LogExportedResource.Request.date)
}
inline std::string* LogExportedResource_Request::unsafe_arena_release_date() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Orthanc.DatabasePluginMessages.LogExportedResource.Request.date)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return date_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LogExportedResource_Request::unsafe_arena_set_allocated_date(
    std::string* date) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (date != nullptr) {
    
  } else {
    
  }
  date_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      date, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.LogExportedResource.Request.date)
}

// string patient_id = 5;
inline void LogExportedResource_Request::clear_patient_id() {
  patient_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LogExportedResource_Request::patient_id() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.LogExportedResource.Request.patient_id)
  return _internal_patient_id();
}
inline void LogExportedResource_Request::set_patient_id(const std::string& value) {
  _internal_set_patient_id(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.LogExportedResource.Request.patient_id)
}
inline std::string* LogExportedResource_Request::mutable_patient_id() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.LogExportedResource.Request.patient_id)
  return _internal_mutable_patient_id();
}
inline const std::string& LogExportedResource_Request::_internal_patient_id() const {
  return patient_id_.Get();
}
inline void LogExportedResource_Request::_internal_set_patient_id(const std::string& value) {
  
  patient_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LogExportedResource_Request::set_patient_id(std::string&& value) {
  
  patient_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Orthanc.DatabasePluginMessages.LogExportedResource.Request.patient_id)
}
inline void LogExportedResource_Request::set_patient_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  patient_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Orthanc.DatabasePluginMessages.LogExportedResource.Request.patient_id)
}
inline void LogExportedResource_Request::set_patient_id(const char* value,
    size_t size) {
  
  patient_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Orthanc.DatabasePluginMessages.LogExportedResource.Request.patient_id)
}
inline std::string* LogExportedResource_Request::_internal_mutable_patient_id() {
  
  return patient_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LogExportedResource_Request::release_patient_id() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.LogExportedResource.Request.patient_id)
  return patient_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogExportedResource_Request::set_allocated_patient_id(std::string* patient_id) {
  if (patient_id != nullptr) {
    
  } else {
    
  }
  patient_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), patient_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.LogExportedResource.Request.patient_id)
}
inline std::string* LogExportedResource_Request::unsafe_arena_release_patient_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Orthanc.DatabasePluginMessages.LogExportedResource.Request.patient_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return patient_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LogExportedResource_Request::unsafe_arena_set_allocated_patient_id(
    std::string* patient_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (patient_id != nullptr) {
    
  } else {
    
  }
  patient_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      patient_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.LogExportedResource.Request.patient_id)
}

// string study_instance_uid = 6;
inline void LogExportedResource_Request::clear_study_instance_uid() {
  study_instance_uid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LogExportedResource_Request::study_instance_uid() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.LogExportedResource.Request.study_instance_uid)
  return _internal_study_instance_uid();
}
inline void LogExportedResource_Request::set_study_instance_uid(const std::string& value) {
  _internal_set_study_instance_uid(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.LogExportedResource.Request.study_instance_uid)
}
inline std::string* LogExportedResource_Request::mutable_study_instance_uid() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.LogExportedResource.Request.study_instance_uid)
  return _internal_mutable_study_instance_uid();
}
inline const std::string& LogExportedResource_Request::_internal_study_instance_uid() const {
  return study_instance_uid_.Get();
}
inline void LogExportedResource_Request::_internal_set_study_instance_uid(const std::string& value) {
  
  study_instance_uid_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LogExportedResource_Request::set_study_instance_uid(std::string&& value) {
  
  study_instance_uid_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Orthanc.DatabasePluginMessages.LogExportedResource.Request.study_instance_uid)
}
inline void LogExportedResource_Request::set_study_instance_uid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  study_instance_uid_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Orthanc.DatabasePluginMessages.LogExportedResource.Request.study_instance_uid)
}
inline void LogExportedResource_Request::set_study_instance_uid(const char* value,
    size_t size) {
  
  study_instance_uid_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Orthanc.DatabasePluginMessages.LogExportedResource.Request.study_instance_uid)
}
inline std::string* LogExportedResource_Request::_internal_mutable_study_instance_uid() {
  
  return study_instance_uid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LogExportedResource_Request::release_study_instance_uid() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.LogExportedResource.Request.study_instance_uid)
  return study_instance_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogExportedResource_Request::set_allocated_study_instance_uid(std::string* study_instance_uid) {
  if (study_instance_uid != nullptr) {
    
  } else {
    
  }
  study_instance_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), study_instance_uid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.LogExportedResource.Request.study_instance_uid)
}
inline std::string* LogExportedResource_Request::unsafe_arena_release_study_instance_uid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Orthanc.DatabasePluginMessages.LogExportedResource.Request.study_instance_uid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return study_instance_uid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LogExportedResource_Request::unsafe_arena_set_allocated_study_instance_uid(
    std::string* study_instance_uid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (study_instance_uid != nullptr) {
    
  } else {
    
  }
  study_instance_uid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      study_instance_uid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.LogExportedResource.Request.study_instance_uid)
}

// string series_instance_uid = 7;
inline void LogExportedResource_Request::clear_series_instance_uid() {
  series_instance_uid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LogExportedResource_Request::series_instance_uid() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.LogExportedResource.Request.series_instance_uid)
  return _internal_series_instance_uid();
}
inline void LogExportedResource_Request::set_series_instance_uid(const std::string& value) {
  _internal_set_series_instance_uid(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.LogExportedResource.Request.series_instance_uid)
}
inline std::string* LogExportedResource_Request::mutable_series_instance_uid() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.LogExportedResource.Request.series_instance_uid)
  return _internal_mutable_series_instance_uid();
}
inline const std::string& LogExportedResource_Request::_internal_series_instance_uid() const {
  return series_instance_uid_.Get();
}
inline void LogExportedResource_Request::_internal_set_series_instance_uid(const std::string& value) {
  
  series_instance_uid_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LogExportedResource_Request::set_series_instance_uid(std::string&& value) {
  
  series_instance_uid_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Orthanc.DatabasePluginMessages.LogExportedResource.Request.series_instance_uid)
}
inline void LogExportedResource_Request::set_series_instance_uid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  series_instance_uid_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Orthanc.DatabasePluginMessages.LogExportedResource.Request.series_instance_uid)
}
inline void LogExportedResource_Request::set_series_instance_uid(const char* value,
    size_t size) {
  
  series_instance_uid_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Orthanc.DatabasePluginMessages.LogExportedResource.Request.series_instance_uid)
}
inline std::string* LogExportedResource_Request::_internal_mutable_series_instance_uid() {
  
  return series_instance_uid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LogExportedResource_Request::release_series_instance_uid() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.LogExportedResource.Request.series_instance_uid)
  return series_instance_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogExportedResource_Request::set_allocated_series_instance_uid(std::string* series_instance_uid) {
  if (series_instance_uid != nullptr) {
    
  } else {
    
  }
  series_instance_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), series_instance_uid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.LogExportedResource.Request.series_instance_uid)
}
inline std::string* LogExportedResource_Request::unsafe_arena_release_series_instance_uid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Orthanc.DatabasePluginMessages.LogExportedResource.Request.series_instance_uid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return series_instance_uid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LogExportedResource_Request::unsafe_arena_set_allocated_series_instance_uid(
    std::string* series_instance_uid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (series_instance_uid != nullptr) {
    
  } else {
    
  }
  series_instance_uid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      series_instance_uid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.LogExportedResource.Request.series_instance_uid)
}

// string sop_instance_uid = 8;
inline void LogExportedResource_Request::clear_sop_instance_uid() {
  sop_instance_uid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LogExportedResource_Request::sop_instance_uid() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.LogExportedResource.Request.sop_instance_uid)
  return _internal_sop_instance_uid();
}
inline void LogExportedResource_Request::set_sop_instance_uid(const std::string& value) {
  _internal_set_sop_instance_uid(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.LogExportedResource.Request.sop_instance_uid)
}
inline std::string* LogExportedResource_Request::mutable_sop_instance_uid() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.LogExportedResource.Request.sop_instance_uid)
  return _internal_mutable_sop_instance_uid();
}
inline const std::string& LogExportedResource_Request::_internal_sop_instance_uid() const {
  return sop_instance_uid_.Get();
}
inline void LogExportedResource_Request::_internal_set_sop_instance_uid(const std::string& value) {
  
  sop_instance_uid_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LogExportedResource_Request::set_sop_instance_uid(std::string&& value) {
  
  sop_instance_uid_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Orthanc.DatabasePluginMessages.LogExportedResource.Request.sop_instance_uid)
}
inline void LogExportedResource_Request::set_sop_instance_uid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sop_instance_uid_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Orthanc.DatabasePluginMessages.LogExportedResource.Request.sop_instance_uid)
}
inline void LogExportedResource_Request::set_sop_instance_uid(const char* value,
    size_t size) {
  
  sop_instance_uid_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Orthanc.DatabasePluginMessages.LogExportedResource.Request.sop_instance_uid)
}
inline std::string* LogExportedResource_Request::_internal_mutable_sop_instance_uid() {
  
  return sop_instance_uid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LogExportedResource_Request::release_sop_instance_uid() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.LogExportedResource.Request.sop_instance_uid)
  return sop_instance_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogExportedResource_Request::set_allocated_sop_instance_uid(std::string* sop_instance_uid) {
  if (sop_instance_uid != nullptr) {
    
  } else {
    
  }
  sop_instance_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sop_instance_uid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.LogExportedResource.Request.sop_instance_uid)
}
inline std::string* LogExportedResource_Request::unsafe_arena_release_sop_instance_uid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Orthanc.DatabasePluginMessages.LogExportedResource.Request.sop_instance_uid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return sop_instance_uid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LogExportedResource_Request::unsafe_arena_set_allocated_sop_instance_uid(
    std::string* sop_instance_uid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (sop_instance_uid != nullptr) {
    
  } else {
    
  }
  sop_instance_uid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sop_instance_uid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.LogExportedResource.Request.sop_instance_uid)
}

// -------------------------------------------------------------------

// LogExportedResource_Response

// -------------------------------------------------------------------

// LogExportedResource

// -------------------------------------------------------------------

// LookupAttachment_Request

// int64 id = 1;
inline void LookupAttachment_Request::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LookupAttachment_Request::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LookupAttachment_Request::id() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.LookupAttachment.Request.id)
  return _internal_id();
}
inline void LookupAttachment_Request::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void LookupAttachment_Request::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.LookupAttachment.Request.id)
}

// int32 content_type = 2;
inline void LookupAttachment_Request::clear_content_type() {
  content_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LookupAttachment_Request::_internal_content_type() const {
  return content_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LookupAttachment_Request::content_type() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.LookupAttachment.Request.content_type)
  return _internal_content_type();
}
inline void LookupAttachment_Request::_internal_set_content_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  content_type_ = value;
}
inline void LookupAttachment_Request::set_content_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_content_type(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.LookupAttachment.Request.content_type)
}

// -------------------------------------------------------------------

// LookupAttachment_Response

// bool found = 1;
inline void LookupAttachment_Response::clear_found() {
  found_ = false;
}
inline bool LookupAttachment_Response::_internal_found() const {
  return found_;
}
inline bool LookupAttachment_Response::found() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.LookupAttachment.Response.found)
  return _internal_found();
}
inline void LookupAttachment_Response::_internal_set_found(bool value) {
  
  found_ = value;
}
inline void LookupAttachment_Response::set_found(bool value) {
  _internal_set_found(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.LookupAttachment.Response.found)
}

// .Orthanc.DatabasePluginMessages.FileInfo attachment = 2;
inline bool LookupAttachment_Response::_internal_has_attachment() const {
  return this != internal_default_instance() && attachment_ != nullptr;
}
inline bool LookupAttachment_Response::has_attachment() const {
  return _internal_has_attachment();
}
inline void LookupAttachment_Response::clear_attachment() {
  if (GetArena() == nullptr && attachment_ != nullptr) {
    delete attachment_;
  }
  attachment_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::FileInfo& LookupAttachment_Response::_internal_attachment() const {
  const ::Orthanc::DatabasePluginMessages::FileInfo* p = attachment_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::FileInfo*>(
      &::Orthanc::DatabasePluginMessages::_FileInfo_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::FileInfo& LookupAttachment_Response::attachment() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.LookupAttachment.Response.attachment)
  return _internal_attachment();
}
inline void LookupAttachment_Response::unsafe_arena_set_allocated_attachment(
    ::Orthanc::DatabasePluginMessages::FileInfo* attachment) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attachment_);
  }
  attachment_ = attachment;
  if (attachment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.LookupAttachment.Response.attachment)
}
inline ::Orthanc::DatabasePluginMessages::FileInfo* LookupAttachment_Response::release_attachment() {
  auto temp = unsafe_arena_release_attachment();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::FileInfo* LookupAttachment_Response::unsafe_arena_release_attachment() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.LookupAttachment.Response.attachment)
  
  ::Orthanc::DatabasePluginMessages::FileInfo* temp = attachment_;
  attachment_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::FileInfo* LookupAttachment_Response::_internal_mutable_attachment() {
  
  if (attachment_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::FileInfo>(GetArena());
    attachment_ = p;
  }
  return attachment_;
}
inline ::Orthanc::DatabasePluginMessages::FileInfo* LookupAttachment_Response::mutable_attachment() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.LookupAttachment.Response.attachment)
  return _internal_mutable_attachment();
}
inline void LookupAttachment_Response::set_allocated_attachment(::Orthanc::DatabasePluginMessages::FileInfo* attachment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete attachment_;
  }
  if (attachment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(attachment);
    if (message_arena != submessage_arena) {
      attachment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attachment, submessage_arena);
    }
    
  } else {
    
  }
  attachment_ = attachment;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.LookupAttachment.Response.attachment)
}

// int64 revision = 3;
inline void LookupAttachment_Response::clear_revision() {
  revision_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LookupAttachment_Response::_internal_revision() const {
  return revision_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LookupAttachment_Response::revision() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.LookupAttachment.Response.revision)
  return _internal_revision();
}
inline void LookupAttachment_Response::_internal_set_revision(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  revision_ = value;
}
inline void LookupAttachment_Response::set_revision(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_revision(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.LookupAttachment.Response.revision)
}

// -------------------------------------------------------------------

// LookupAttachment

// -------------------------------------------------------------------

// LookupGlobalProperty_Request

// string server_id = 1;
inline void LookupGlobalProperty_Request::clear_server_id() {
  server_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LookupGlobalProperty_Request::server_id() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.LookupGlobalProperty.Request.server_id)
  return _internal_server_id();
}
inline void LookupGlobalProperty_Request::set_server_id(const std::string& value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.LookupGlobalProperty.Request.server_id)
}
inline std::string* LookupGlobalProperty_Request::mutable_server_id() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.LookupGlobalProperty.Request.server_id)
  return _internal_mutable_server_id();
}
inline const std::string& LookupGlobalProperty_Request::_internal_server_id() const {
  return server_id_.Get();
}
inline void LookupGlobalProperty_Request::_internal_set_server_id(const std::string& value) {
  
  server_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LookupGlobalProperty_Request::set_server_id(std::string&& value) {
  
  server_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Orthanc.DatabasePluginMessages.LookupGlobalProperty.Request.server_id)
}
inline void LookupGlobalProperty_Request::set_server_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  server_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Orthanc.DatabasePluginMessages.LookupGlobalProperty.Request.server_id)
}
inline void LookupGlobalProperty_Request::set_server_id(const char* value,
    size_t size) {
  
  server_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Orthanc.DatabasePluginMessages.LookupGlobalProperty.Request.server_id)
}
inline std::string* LookupGlobalProperty_Request::_internal_mutable_server_id() {
  
  return server_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LookupGlobalProperty_Request::release_server_id() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.LookupGlobalProperty.Request.server_id)
  return server_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LookupGlobalProperty_Request::set_allocated_server_id(std::string* server_id) {
  if (server_id != nullptr) {
    
  } else {
    
  }
  server_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), server_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.LookupGlobalProperty.Request.server_id)
}
inline std::string* LookupGlobalProperty_Request::unsafe_arena_release_server_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Orthanc.DatabasePluginMessages.LookupGlobalProperty.Request.server_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return server_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LookupGlobalProperty_Request::unsafe_arena_set_allocated_server_id(
    std::string* server_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (server_id != nullptr) {
    
  } else {
    
  }
  server_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      server_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.LookupGlobalProperty.Request.server_id)
}

// int32 property = 2;
inline void LookupGlobalProperty_Request::clear_property() {
  property_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LookupGlobalProperty_Request::_internal_property() const {
  return property_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LookupGlobalProperty_Request::property() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.LookupGlobalProperty.Request.property)
  return _internal_property();
}
inline void LookupGlobalProperty_Request::_internal_set_property(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  property_ = value;
}
inline void LookupGlobalProperty_Request::set_property(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_property(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.LookupGlobalProperty.Request.property)
}

// -------------------------------------------------------------------

// LookupGlobalProperty_Response

// bool found = 1;
inline void LookupGlobalProperty_Response::clear_found() {
  found_ = false;
}
inline bool LookupGlobalProperty_Response::_internal_found() const {
  return found_;
}
inline bool LookupGlobalProperty_Response::found() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.LookupGlobalProperty.Response.found)
  return _internal_found();
}
inline void LookupGlobalProperty_Response::_internal_set_found(bool value) {
  
  found_ = value;
}
inline void LookupGlobalProperty_Response::set_found(bool value) {
  _internal_set_found(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.LookupGlobalProperty.Response.found)
}

// string value = 2;
inline void LookupGlobalProperty_Response::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LookupGlobalProperty_Response::value() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.LookupGlobalProperty.Response.value)
  return _internal_value();
}
inline void LookupGlobalProperty_Response::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.LookupGlobalProperty.Response.value)
}
inline std::string* LookupGlobalProperty_Response::mutable_value() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.LookupGlobalProperty.Response.value)
  return _internal_mutable_value();
}
inline const std::string& LookupGlobalProperty_Response::_internal_value() const {
  return value_.Get();
}
inline void LookupGlobalProperty_Response::_internal_set_value(const std::string& value) {
  
  value_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LookupGlobalProperty_Response::set_value(std::string&& value) {
  
  value_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Orthanc.DatabasePluginMessages.LookupGlobalProperty.Response.value)
}
inline void LookupGlobalProperty_Response::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Orthanc.DatabasePluginMessages.LookupGlobalProperty.Response.value)
}
inline void LookupGlobalProperty_Response::set_value(const char* value,
    size_t size) {
  
  value_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Orthanc.DatabasePluginMessages.LookupGlobalProperty.Response.value)
}
inline std::string* LookupGlobalProperty_Response::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LookupGlobalProperty_Response::release_value() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.LookupGlobalProperty.Response.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LookupGlobalProperty_Response::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.LookupGlobalProperty.Response.value)
}
inline std::string* LookupGlobalProperty_Response::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Orthanc.DatabasePluginMessages.LookupGlobalProperty.Response.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LookupGlobalProperty_Response::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    
  } else {
    
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.LookupGlobalProperty.Response.value)
}

// -------------------------------------------------------------------

// LookupGlobalProperty

// -------------------------------------------------------------------

// LookupMetadata_Request

// int64 id = 1;
inline void LookupMetadata_Request::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LookupMetadata_Request::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LookupMetadata_Request::id() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.LookupMetadata.Request.id)
  return _internal_id();
}
inline void LookupMetadata_Request::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void LookupMetadata_Request::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.LookupMetadata.Request.id)
}

// int32 metadata_type = 2;
inline void LookupMetadata_Request::clear_metadata_type() {
  metadata_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LookupMetadata_Request::_internal_metadata_type() const {
  return metadata_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LookupMetadata_Request::metadata_type() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.LookupMetadata.Request.metadata_type)
  return _internal_metadata_type();
}
inline void LookupMetadata_Request::_internal_set_metadata_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  metadata_type_ = value;
}
inline void LookupMetadata_Request::set_metadata_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_metadata_type(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.LookupMetadata.Request.metadata_type)
}

// -------------------------------------------------------------------

// LookupMetadata_Response

// bool found = 1;
inline void LookupMetadata_Response::clear_found() {
  found_ = false;
}
inline bool LookupMetadata_Response::_internal_found() const {
  return found_;
}
inline bool LookupMetadata_Response::found() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.LookupMetadata.Response.found)
  return _internal_found();
}
inline void LookupMetadata_Response::_internal_set_found(bool value) {
  
  found_ = value;
}
inline void LookupMetadata_Response::set_found(bool value) {
  _internal_set_found(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.LookupMetadata.Response.found)
}

// string value = 2;
inline void LookupMetadata_Response::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LookupMetadata_Response::value() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.LookupMetadata.Response.value)
  return _internal_value();
}
inline void LookupMetadata_Response::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.LookupMetadata.Response.value)
}
inline std::string* LookupMetadata_Response::mutable_value() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.LookupMetadata.Response.value)
  return _internal_mutable_value();
}
inline const std::string& LookupMetadata_Response::_internal_value() const {
  return value_.Get();
}
inline void LookupMetadata_Response::_internal_set_value(const std::string& value) {
  
  value_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LookupMetadata_Response::set_value(std::string&& value) {
  
  value_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Orthanc.DatabasePluginMessages.LookupMetadata.Response.value)
}
inline void LookupMetadata_Response::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Orthanc.DatabasePluginMessages.LookupMetadata.Response.value)
}
inline void LookupMetadata_Response::set_value(const char* value,
    size_t size) {
  
  value_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Orthanc.DatabasePluginMessages.LookupMetadata.Response.value)
}
inline std::string* LookupMetadata_Response::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LookupMetadata_Response::release_value() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.LookupMetadata.Response.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LookupMetadata_Response::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.LookupMetadata.Response.value)
}
inline std::string* LookupMetadata_Response::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Orthanc.DatabasePluginMessages.LookupMetadata.Response.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LookupMetadata_Response::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    
  } else {
    
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.LookupMetadata.Response.value)
}

// int64 revision = 3;
inline void LookupMetadata_Response::clear_revision() {
  revision_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LookupMetadata_Response::_internal_revision() const {
  return revision_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LookupMetadata_Response::revision() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.LookupMetadata.Response.revision)
  return _internal_revision();
}
inline void LookupMetadata_Response::_internal_set_revision(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  revision_ = value;
}
inline void LookupMetadata_Response::set_revision(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_revision(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.LookupMetadata.Response.revision)
}

// -------------------------------------------------------------------

// LookupMetadata

// -------------------------------------------------------------------

// LookupParent_Request

// int64 id = 1;
inline void LookupParent_Request::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LookupParent_Request::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LookupParent_Request::id() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.LookupParent.Request.id)
  return _internal_id();
}
inline void LookupParent_Request::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void LookupParent_Request::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.LookupParent.Request.id)
}

// -------------------------------------------------------------------

// LookupParent_Response

// bool found = 1;
inline void LookupParent_Response::clear_found() {
  found_ = false;
}
inline bool LookupParent_Response::_internal_found() const {
  return found_;
}
inline bool LookupParent_Response::found() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.LookupParent.Response.found)
  return _internal_found();
}
inline void LookupParent_Response::_internal_set_found(bool value) {
  
  found_ = value;
}
inline void LookupParent_Response::set_found(bool value) {
  _internal_set_found(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.LookupParent.Response.found)
}

// int64 parent = 2;
inline void LookupParent_Response::clear_parent() {
  parent_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LookupParent_Response::_internal_parent() const {
  return parent_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LookupParent_Response::parent() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.LookupParent.Response.parent)
  return _internal_parent();
}
inline void LookupParent_Response::_internal_set_parent(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  parent_ = value;
}
inline void LookupParent_Response::set_parent(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_parent(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.LookupParent.Response.parent)
}

// -------------------------------------------------------------------

// LookupParent

// -------------------------------------------------------------------

// LookupResource_Request

// string public_id = 1;
inline void LookupResource_Request::clear_public_id() {
  public_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LookupResource_Request::public_id() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.LookupResource.Request.public_id)
  return _internal_public_id();
}
inline void LookupResource_Request::set_public_id(const std::string& value) {
  _internal_set_public_id(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.LookupResource.Request.public_id)
}
inline std::string* LookupResource_Request::mutable_public_id() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.LookupResource.Request.public_id)
  return _internal_mutable_public_id();
}
inline const std::string& LookupResource_Request::_internal_public_id() const {
  return public_id_.Get();
}
inline void LookupResource_Request::_internal_set_public_id(const std::string& value) {
  
  public_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LookupResource_Request::set_public_id(std::string&& value) {
  
  public_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Orthanc.DatabasePluginMessages.LookupResource.Request.public_id)
}
inline void LookupResource_Request::set_public_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  public_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Orthanc.DatabasePluginMessages.LookupResource.Request.public_id)
}
inline void LookupResource_Request::set_public_id(const char* value,
    size_t size) {
  
  public_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Orthanc.DatabasePluginMessages.LookupResource.Request.public_id)
}
inline std::string* LookupResource_Request::_internal_mutable_public_id() {
  
  return public_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LookupResource_Request::release_public_id() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.LookupResource.Request.public_id)
  return public_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LookupResource_Request::set_allocated_public_id(std::string* public_id) {
  if (public_id != nullptr) {
    
  } else {
    
  }
  public_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.LookupResource.Request.public_id)
}
inline std::string* LookupResource_Request::unsafe_arena_release_public_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Orthanc.DatabasePluginMessages.LookupResource.Request.public_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return public_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LookupResource_Request::unsafe_arena_set_allocated_public_id(
    std::string* public_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (public_id != nullptr) {
    
  } else {
    
  }
  public_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      public_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.LookupResource.Request.public_id)
}

// -------------------------------------------------------------------

// LookupResource_Response

// bool found = 1;
inline void LookupResource_Response::clear_found() {
  found_ = false;
}
inline bool LookupResource_Response::_internal_found() const {
  return found_;
}
inline bool LookupResource_Response::found() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.LookupResource.Response.found)
  return _internal_found();
}
inline void LookupResource_Response::_internal_set_found(bool value) {
  
  found_ = value;
}
inline void LookupResource_Response::set_found(bool value) {
  _internal_set_found(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.LookupResource.Response.found)
}

// int64 internal_id = 2;
inline void LookupResource_Response::clear_internal_id() {
  internal_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LookupResource_Response::_internal_internal_id() const {
  return internal_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LookupResource_Response::internal_id() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.LookupResource.Response.internal_id)
  return _internal_internal_id();
}
inline void LookupResource_Response::_internal_set_internal_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  internal_id_ = value;
}
inline void LookupResource_Response::set_internal_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_internal_id(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.LookupResource.Response.internal_id)
}

// .Orthanc.DatabasePluginMessages.ResourceType type = 3;
inline void LookupResource_Response::clear_type() {
  type_ = 0;
}
inline ::Orthanc::DatabasePluginMessages::ResourceType LookupResource_Response::_internal_type() const {
  return static_cast< ::Orthanc::DatabasePluginMessages::ResourceType >(type_);
}
inline ::Orthanc::DatabasePluginMessages::ResourceType LookupResource_Response::type() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.LookupResource.Response.type)
  return _internal_type();
}
inline void LookupResource_Response::_internal_set_type(::Orthanc::DatabasePluginMessages::ResourceType value) {
  
  type_ = value;
}
inline void LookupResource_Response::set_type(::Orthanc::DatabasePluginMessages::ResourceType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.LookupResource.Response.type)
}

// -------------------------------------------------------------------

// LookupResource

// -------------------------------------------------------------------

// SelectPatientToRecycle_Request

// -------------------------------------------------------------------

// SelectPatientToRecycle_Response

// bool found = 1;
inline void SelectPatientToRecycle_Response::clear_found() {
  found_ = false;
}
inline bool SelectPatientToRecycle_Response::_internal_found() const {
  return found_;
}
inline bool SelectPatientToRecycle_Response::found() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.SelectPatientToRecycle.Response.found)
  return _internal_found();
}
inline void SelectPatientToRecycle_Response::_internal_set_found(bool value) {
  
  found_ = value;
}
inline void SelectPatientToRecycle_Response::set_found(bool value) {
  _internal_set_found(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.SelectPatientToRecycle.Response.found)
}

// int64 patient_id = 2;
inline void SelectPatientToRecycle_Response::clear_patient_id() {
  patient_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SelectPatientToRecycle_Response::_internal_patient_id() const {
  return patient_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SelectPatientToRecycle_Response::patient_id() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.SelectPatientToRecycle.Response.patient_id)
  return _internal_patient_id();
}
inline void SelectPatientToRecycle_Response::_internal_set_patient_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  patient_id_ = value;
}
inline void SelectPatientToRecycle_Response::set_patient_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_patient_id(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.SelectPatientToRecycle.Response.patient_id)
}

// -------------------------------------------------------------------

// SelectPatientToRecycle

// -------------------------------------------------------------------

// SelectPatientToRecycleWithAvoid_Request

// int64 patient_id_to_avoid = 1;
inline void SelectPatientToRecycleWithAvoid_Request::clear_patient_id_to_avoid() {
  patient_id_to_avoid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SelectPatientToRecycleWithAvoid_Request::_internal_patient_id_to_avoid() const {
  return patient_id_to_avoid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SelectPatientToRecycleWithAvoid_Request::patient_id_to_avoid() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.SelectPatientToRecycleWithAvoid.Request.patient_id_to_avoid)
  return _internal_patient_id_to_avoid();
}
inline void SelectPatientToRecycleWithAvoid_Request::_internal_set_patient_id_to_avoid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  patient_id_to_avoid_ = value;
}
inline void SelectPatientToRecycleWithAvoid_Request::set_patient_id_to_avoid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_patient_id_to_avoid(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.SelectPatientToRecycleWithAvoid.Request.patient_id_to_avoid)
}

// -------------------------------------------------------------------

// SelectPatientToRecycleWithAvoid_Response

// bool found = 1;
inline void SelectPatientToRecycleWithAvoid_Response::clear_found() {
  found_ = false;
}
inline bool SelectPatientToRecycleWithAvoid_Response::_internal_found() const {
  return found_;
}
inline bool SelectPatientToRecycleWithAvoid_Response::found() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.SelectPatientToRecycleWithAvoid.Response.found)
  return _internal_found();
}
inline void SelectPatientToRecycleWithAvoid_Response::_internal_set_found(bool value) {
  
  found_ = value;
}
inline void SelectPatientToRecycleWithAvoid_Response::set_found(bool value) {
  _internal_set_found(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.SelectPatientToRecycleWithAvoid.Response.found)
}

// int64 patient_id = 2;
inline void SelectPatientToRecycleWithAvoid_Response::clear_patient_id() {
  patient_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SelectPatientToRecycleWithAvoid_Response::_internal_patient_id() const {
  return patient_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SelectPatientToRecycleWithAvoid_Response::patient_id() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.SelectPatientToRecycleWithAvoid.Response.patient_id)
  return _internal_patient_id();
}
inline void SelectPatientToRecycleWithAvoid_Response::_internal_set_patient_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  patient_id_ = value;
}
inline void SelectPatientToRecycleWithAvoid_Response::set_patient_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_patient_id(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.SelectPatientToRecycleWithAvoid.Response.patient_id)
}

// -------------------------------------------------------------------

// SelectPatientToRecycleWithAvoid

// -------------------------------------------------------------------

// SetGlobalProperty_Request

// string server_id = 1;
inline void SetGlobalProperty_Request::clear_server_id() {
  server_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SetGlobalProperty_Request::server_id() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.SetGlobalProperty.Request.server_id)
  return _internal_server_id();
}
inline void SetGlobalProperty_Request::set_server_id(const std::string& value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.SetGlobalProperty.Request.server_id)
}
inline std::string* SetGlobalProperty_Request::mutable_server_id() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.SetGlobalProperty.Request.server_id)
  return _internal_mutable_server_id();
}
inline const std::string& SetGlobalProperty_Request::_internal_server_id() const {
  return server_id_.Get();
}
inline void SetGlobalProperty_Request::_internal_set_server_id(const std::string& value) {
  
  server_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetGlobalProperty_Request::set_server_id(std::string&& value) {
  
  server_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Orthanc.DatabasePluginMessages.SetGlobalProperty.Request.server_id)
}
inline void SetGlobalProperty_Request::set_server_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  server_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Orthanc.DatabasePluginMessages.SetGlobalProperty.Request.server_id)
}
inline void SetGlobalProperty_Request::set_server_id(const char* value,
    size_t size) {
  
  server_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Orthanc.DatabasePluginMessages.SetGlobalProperty.Request.server_id)
}
inline std::string* SetGlobalProperty_Request::_internal_mutable_server_id() {
  
  return server_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetGlobalProperty_Request::release_server_id() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.SetGlobalProperty.Request.server_id)
  return server_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetGlobalProperty_Request::set_allocated_server_id(std::string* server_id) {
  if (server_id != nullptr) {
    
  } else {
    
  }
  server_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), server_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.SetGlobalProperty.Request.server_id)
}
inline std::string* SetGlobalProperty_Request::unsafe_arena_release_server_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Orthanc.DatabasePluginMessages.SetGlobalProperty.Request.server_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return server_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SetGlobalProperty_Request::unsafe_arena_set_allocated_server_id(
    std::string* server_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (server_id != nullptr) {
    
  } else {
    
  }
  server_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      server_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.SetGlobalProperty.Request.server_id)
}

// int32 property = 2;
inline void SetGlobalProperty_Request::clear_property() {
  property_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetGlobalProperty_Request::_internal_property() const {
  return property_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetGlobalProperty_Request::property() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.SetGlobalProperty.Request.property)
  return _internal_property();
}
inline void SetGlobalProperty_Request::_internal_set_property(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  property_ = value;
}
inline void SetGlobalProperty_Request::set_property(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_property(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.SetGlobalProperty.Request.property)
}

// string value = 3;
inline void SetGlobalProperty_Request::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SetGlobalProperty_Request::value() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.SetGlobalProperty.Request.value)
  return _internal_value();
}
inline void SetGlobalProperty_Request::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.SetGlobalProperty.Request.value)
}
inline std::string* SetGlobalProperty_Request::mutable_value() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.SetGlobalProperty.Request.value)
  return _internal_mutable_value();
}
inline const std::string& SetGlobalProperty_Request::_internal_value() const {
  return value_.Get();
}
inline void SetGlobalProperty_Request::_internal_set_value(const std::string& value) {
  
  value_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetGlobalProperty_Request::set_value(std::string&& value) {
  
  value_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Orthanc.DatabasePluginMessages.SetGlobalProperty.Request.value)
}
inline void SetGlobalProperty_Request::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Orthanc.DatabasePluginMessages.SetGlobalProperty.Request.value)
}
inline void SetGlobalProperty_Request::set_value(const char* value,
    size_t size) {
  
  value_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Orthanc.DatabasePluginMessages.SetGlobalProperty.Request.value)
}
inline std::string* SetGlobalProperty_Request::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetGlobalProperty_Request::release_value() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.SetGlobalProperty.Request.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetGlobalProperty_Request::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.SetGlobalProperty.Request.value)
}
inline std::string* SetGlobalProperty_Request::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Orthanc.DatabasePluginMessages.SetGlobalProperty.Request.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SetGlobalProperty_Request::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    
  } else {
    
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.SetGlobalProperty.Request.value)
}

// -------------------------------------------------------------------

// SetGlobalProperty_Response

// -------------------------------------------------------------------

// SetGlobalProperty

// -------------------------------------------------------------------

// IncrementGlobalProperty_Request

// string server_id = 1;
inline void IncrementGlobalProperty_Request::clear_server_id() {
  server_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IncrementGlobalProperty_Request::server_id() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.IncrementGlobalProperty.Request.server_id)
  return _internal_server_id();
}
inline void IncrementGlobalProperty_Request::set_server_id(const std::string& value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.IncrementGlobalProperty.Request.server_id)
}
inline std::string* IncrementGlobalProperty_Request::mutable_server_id() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.IncrementGlobalProperty.Request.server_id)
  return _internal_mutable_server_id();
}
inline const std::string& IncrementGlobalProperty_Request::_internal_server_id() const {
  return server_id_.Get();
}
inline void IncrementGlobalProperty_Request::_internal_set_server_id(const std::string& value) {
  
  server_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IncrementGlobalProperty_Request::set_server_id(std::string&& value) {
  
  server_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Orthanc.DatabasePluginMessages.IncrementGlobalProperty.Request.server_id)
}
inline void IncrementGlobalProperty_Request::set_server_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  server_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Orthanc.DatabasePluginMessages.IncrementGlobalProperty.Request.server_id)
}
inline void IncrementGlobalProperty_Request::set_server_id(const char* value,
    size_t size) {
  
  server_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Orthanc.DatabasePluginMessages.IncrementGlobalProperty.Request.server_id)
}
inline std::string* IncrementGlobalProperty_Request::_internal_mutable_server_id() {
  
  return server_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IncrementGlobalProperty_Request::release_server_id() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.IncrementGlobalProperty.Request.server_id)
  return server_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IncrementGlobalProperty_Request::set_allocated_server_id(std::string* server_id) {
  if (server_id != nullptr) {
    
  } else {
    
  }
  server_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), server_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.IncrementGlobalProperty.Request.server_id)
}
inline std::string* IncrementGlobalProperty_Request::unsafe_arena_release_server_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Orthanc.DatabasePluginMessages.IncrementGlobalProperty.Request.server_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return server_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void IncrementGlobalProperty_Request::unsafe_arena_set_allocated_server_id(
    std::string* server_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (server_id != nullptr) {
    
  } else {
    
  }
  server_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      server_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.IncrementGlobalProperty.Request.server_id)
}

// int32 property = 2;
inline void IncrementGlobalProperty_Request::clear_property() {
  property_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IncrementGlobalProperty_Request::_internal_property() const {
  return property_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IncrementGlobalProperty_Request::property() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.IncrementGlobalProperty.Request.property)
  return _internal_property();
}
inline void IncrementGlobalProperty_Request::_internal_set_property(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  property_ = value;
}
inline void IncrementGlobalProperty_Request::set_property(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_property(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.IncrementGlobalProperty.Request.property)
}

// int64 increment = 3;
inline void IncrementGlobalProperty_Request::clear_increment() {
  increment_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IncrementGlobalProperty_Request::_internal_increment() const {
  return increment_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IncrementGlobalProperty_Request::increment() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.IncrementGlobalProperty.Request.increment)
  return _internal_increment();
}
inline void IncrementGlobalProperty_Request::_internal_set_increment(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  increment_ = value;
}
inline void IncrementGlobalProperty_Request::set_increment(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_increment(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.IncrementGlobalProperty.Request.increment)
}

// -------------------------------------------------------------------

// IncrementGlobalProperty_Response

// int64 new_value = 1;
inline void IncrementGlobalProperty_Response::clear_new_value() {
  new_value_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IncrementGlobalProperty_Response::_internal_new_value() const {
  return new_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IncrementGlobalProperty_Response::new_value() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.IncrementGlobalProperty.Response.new_value)
  return _internal_new_value();
}
inline void IncrementGlobalProperty_Response::_internal_set_new_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  new_value_ = value;
}
inline void IncrementGlobalProperty_Response::set_new_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_new_value(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.IncrementGlobalProperty.Response.new_value)
}

// -------------------------------------------------------------------

// IncrementGlobalProperty

// -------------------------------------------------------------------

// UpdateAndGetStatistics_Request

// -------------------------------------------------------------------

// UpdateAndGetStatistics_Response

// int64 patients_count = 1;
inline void UpdateAndGetStatistics_Response::clear_patients_count() {
  patients_count_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UpdateAndGetStatistics_Response::_internal_patients_count() const {
  return patients_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UpdateAndGetStatistics_Response::patients_count() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.UpdateAndGetStatistics.Response.patients_count)
  return _internal_patients_count();
}
inline void UpdateAndGetStatistics_Response::_internal_set_patients_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  patients_count_ = value;
}
inline void UpdateAndGetStatistics_Response::set_patients_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_patients_count(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.UpdateAndGetStatistics.Response.patients_count)
}

// int64 studies_count = 2;
inline void UpdateAndGetStatistics_Response::clear_studies_count() {
  studies_count_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UpdateAndGetStatistics_Response::_internal_studies_count() const {
  return studies_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UpdateAndGetStatistics_Response::studies_count() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.UpdateAndGetStatistics.Response.studies_count)
  return _internal_studies_count();
}
inline void UpdateAndGetStatistics_Response::_internal_set_studies_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  studies_count_ = value;
}
inline void UpdateAndGetStatistics_Response::set_studies_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_studies_count(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.UpdateAndGetStatistics.Response.studies_count)
}

// int64 series_count = 3;
inline void UpdateAndGetStatistics_Response::clear_series_count() {
  series_count_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UpdateAndGetStatistics_Response::_internal_series_count() const {
  return series_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UpdateAndGetStatistics_Response::series_count() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.UpdateAndGetStatistics.Response.series_count)
  return _internal_series_count();
}
inline void UpdateAndGetStatistics_Response::_internal_set_series_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  series_count_ = value;
}
inline void UpdateAndGetStatistics_Response::set_series_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_series_count(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.UpdateAndGetStatistics.Response.series_count)
}

// int64 instances_count = 4;
inline void UpdateAndGetStatistics_Response::clear_instances_count() {
  instances_count_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UpdateAndGetStatistics_Response::_internal_instances_count() const {
  return instances_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UpdateAndGetStatistics_Response::instances_count() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.UpdateAndGetStatistics.Response.instances_count)
  return _internal_instances_count();
}
inline void UpdateAndGetStatistics_Response::_internal_set_instances_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  instances_count_ = value;
}
inline void UpdateAndGetStatistics_Response::set_instances_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_instances_count(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.UpdateAndGetStatistics.Response.instances_count)
}

// int64 total_compressed_size = 5;
inline void UpdateAndGetStatistics_Response::clear_total_compressed_size() {
  total_compressed_size_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UpdateAndGetStatistics_Response::_internal_total_compressed_size() const {
  return total_compressed_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UpdateAndGetStatistics_Response::total_compressed_size() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.UpdateAndGetStatistics.Response.total_compressed_size)
  return _internal_total_compressed_size();
}
inline void UpdateAndGetStatistics_Response::_internal_set_total_compressed_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  total_compressed_size_ = value;
}
inline void UpdateAndGetStatistics_Response::set_total_compressed_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_total_compressed_size(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.UpdateAndGetStatistics.Response.total_compressed_size)
}

// int64 total_uncompressed_size = 6;
inline void UpdateAndGetStatistics_Response::clear_total_uncompressed_size() {
  total_uncompressed_size_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UpdateAndGetStatistics_Response::_internal_total_uncompressed_size() const {
  return total_uncompressed_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UpdateAndGetStatistics_Response::total_uncompressed_size() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.UpdateAndGetStatistics.Response.total_uncompressed_size)
  return _internal_total_uncompressed_size();
}
inline void UpdateAndGetStatistics_Response::_internal_set_total_uncompressed_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  total_uncompressed_size_ = value;
}
inline void UpdateAndGetStatistics_Response::set_total_uncompressed_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_total_uncompressed_size(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.UpdateAndGetStatistics.Response.total_uncompressed_size)
}

// -------------------------------------------------------------------

// UpdateAndGetStatistics

// -------------------------------------------------------------------

// ClearMainDicomTags_Request

// int64 id = 1;
inline void ClearMainDicomTags_Request::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ClearMainDicomTags_Request::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ClearMainDicomTags_Request::id() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.ClearMainDicomTags.Request.id)
  return _internal_id();
}
inline void ClearMainDicomTags_Request::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void ClearMainDicomTags_Request::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.ClearMainDicomTags.Request.id)
}

// -------------------------------------------------------------------

// ClearMainDicomTags_Response

// -------------------------------------------------------------------

// ClearMainDicomTags

// -------------------------------------------------------------------

// SetMetadata_Request

// int64 id = 1;
inline void SetMetadata_Request::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SetMetadata_Request::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SetMetadata_Request::id() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.SetMetadata.Request.id)
  return _internal_id();
}
inline void SetMetadata_Request::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void SetMetadata_Request::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.SetMetadata.Request.id)
}

// int32 metadata_type = 2;
inline void SetMetadata_Request::clear_metadata_type() {
  metadata_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetMetadata_Request::_internal_metadata_type() const {
  return metadata_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetMetadata_Request::metadata_type() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.SetMetadata.Request.metadata_type)
  return _internal_metadata_type();
}
inline void SetMetadata_Request::_internal_set_metadata_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  metadata_type_ = value;
}
inline void SetMetadata_Request::set_metadata_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_metadata_type(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.SetMetadata.Request.metadata_type)
}

// string value = 3;
inline void SetMetadata_Request::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SetMetadata_Request::value() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.SetMetadata.Request.value)
  return _internal_value();
}
inline void SetMetadata_Request::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.SetMetadata.Request.value)
}
inline std::string* SetMetadata_Request::mutable_value() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.SetMetadata.Request.value)
  return _internal_mutable_value();
}
inline const std::string& SetMetadata_Request::_internal_value() const {
  return value_.Get();
}
inline void SetMetadata_Request::_internal_set_value(const std::string& value) {
  
  value_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetMetadata_Request::set_value(std::string&& value) {
  
  value_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Orthanc.DatabasePluginMessages.SetMetadata.Request.value)
}
inline void SetMetadata_Request::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Orthanc.DatabasePluginMessages.SetMetadata.Request.value)
}
inline void SetMetadata_Request::set_value(const char* value,
    size_t size) {
  
  value_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Orthanc.DatabasePluginMessages.SetMetadata.Request.value)
}
inline std::string* SetMetadata_Request::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetMetadata_Request::release_value() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.SetMetadata.Request.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetMetadata_Request::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.SetMetadata.Request.value)
}
inline std::string* SetMetadata_Request::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Orthanc.DatabasePluginMessages.SetMetadata.Request.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SetMetadata_Request::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    
  } else {
    
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.SetMetadata.Request.value)
}

// int64 revision = 4;
inline void SetMetadata_Request::clear_revision() {
  revision_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SetMetadata_Request::_internal_revision() const {
  return revision_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SetMetadata_Request::revision() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.SetMetadata.Request.revision)
  return _internal_revision();
}
inline void SetMetadata_Request::_internal_set_revision(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  revision_ = value;
}
inline void SetMetadata_Request::set_revision(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_revision(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.SetMetadata.Request.revision)
}

// -------------------------------------------------------------------

// SetMetadata_Response

// -------------------------------------------------------------------

// SetMetadata

// -------------------------------------------------------------------

// SetProtectedPatient_Request

// int64 patient_id = 1;
inline void SetProtectedPatient_Request::clear_patient_id() {
  patient_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SetProtectedPatient_Request::_internal_patient_id() const {
  return patient_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SetProtectedPatient_Request::patient_id() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.SetProtectedPatient.Request.patient_id)
  return _internal_patient_id();
}
inline void SetProtectedPatient_Request::_internal_set_patient_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  patient_id_ = value;
}
inline void SetProtectedPatient_Request::set_patient_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_patient_id(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.SetProtectedPatient.Request.patient_id)
}

// bool protected_patient = 2;
inline void SetProtectedPatient_Request::clear_protected_patient() {
  protected_patient_ = false;
}
inline bool SetProtectedPatient_Request::_internal_protected_patient() const {
  return protected_patient_;
}
inline bool SetProtectedPatient_Request::protected_patient() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.SetProtectedPatient.Request.protected_patient)
  return _internal_protected_patient();
}
inline void SetProtectedPatient_Request::_internal_set_protected_patient(bool value) {
  
  protected_patient_ = value;
}
inline void SetProtectedPatient_Request::set_protected_patient(bool value) {
  _internal_set_protected_patient(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.SetProtectedPatient.Request.protected_patient)
}

// -------------------------------------------------------------------

// SetProtectedPatient_Response

// -------------------------------------------------------------------

// SetProtectedPatient

// -------------------------------------------------------------------

// IsDiskSizeAbove_Request

// uint64 threshold = 1;
inline void IsDiskSizeAbove_Request::clear_threshold() {
  threshold_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IsDiskSizeAbove_Request::_internal_threshold() const {
  return threshold_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IsDiskSizeAbove_Request::threshold() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.IsDiskSizeAbove.Request.threshold)
  return _internal_threshold();
}
inline void IsDiskSizeAbove_Request::_internal_set_threshold(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  threshold_ = value;
}
inline void IsDiskSizeAbove_Request::set_threshold(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_threshold(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.IsDiskSizeAbove.Request.threshold)
}

// -------------------------------------------------------------------

// IsDiskSizeAbove_Response

// bool result = 1;
inline void IsDiskSizeAbove_Response::clear_result() {
  result_ = false;
}
inline bool IsDiskSizeAbove_Response::_internal_result() const {
  return result_;
}
inline bool IsDiskSizeAbove_Response::result() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.IsDiskSizeAbove.Response.result)
  return _internal_result();
}
inline void IsDiskSizeAbove_Response::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void IsDiskSizeAbove_Response::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.IsDiskSizeAbove.Response.result)
}

// -------------------------------------------------------------------

// IsDiskSizeAbove

// -------------------------------------------------------------------

// LookupResources_Request

// repeated .Orthanc.DatabasePluginMessages.DatabaseConstraint lookup = 1;
inline int LookupResources_Request::_internal_lookup_size() const {
  return lookup_.size();
}
inline int LookupResources_Request::lookup_size() const {
  return _internal_lookup_size();
}
inline void LookupResources_Request::clear_lookup() {
  lookup_.Clear();
}
inline ::Orthanc::DatabasePluginMessages::DatabaseConstraint* LookupResources_Request::mutable_lookup(int index) {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.LookupResources.Request.lookup)
  return lookup_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Orthanc::DatabasePluginMessages::DatabaseConstraint >*
LookupResources_Request::mutable_lookup() {
  // @@protoc_insertion_point(field_mutable_list:Orthanc.DatabasePluginMessages.LookupResources.Request.lookup)
  return &lookup_;
}
inline const ::Orthanc::DatabasePluginMessages::DatabaseConstraint& LookupResources_Request::_internal_lookup(int index) const {
  return lookup_.Get(index);
}
inline const ::Orthanc::DatabasePluginMessages::DatabaseConstraint& LookupResources_Request::lookup(int index) const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.LookupResources.Request.lookup)
  return _internal_lookup(index);
}
inline ::Orthanc::DatabasePluginMessages::DatabaseConstraint* LookupResources_Request::_internal_add_lookup() {
  return lookup_.Add();
}
inline ::Orthanc::DatabasePluginMessages::DatabaseConstraint* LookupResources_Request::add_lookup() {
  // @@protoc_insertion_point(field_add:Orthanc.DatabasePluginMessages.LookupResources.Request.lookup)
  return _internal_add_lookup();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Orthanc::DatabasePluginMessages::DatabaseConstraint >&
LookupResources_Request::lookup() const {
  // @@protoc_insertion_point(field_list:Orthanc.DatabasePluginMessages.LookupResources.Request.lookup)
  return lookup_;
}

// .Orthanc.DatabasePluginMessages.ResourceType query_level = 2;
inline void LookupResources_Request::clear_query_level() {
  query_level_ = 0;
}
inline ::Orthanc::DatabasePluginMessages::ResourceType LookupResources_Request::_internal_query_level() const {
  return static_cast< ::Orthanc::DatabasePluginMessages::ResourceType >(query_level_);
}
inline ::Orthanc::DatabasePluginMessages::ResourceType LookupResources_Request::query_level() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.LookupResources.Request.query_level)
  return _internal_query_level();
}
inline void LookupResources_Request::_internal_set_query_level(::Orthanc::DatabasePluginMessages::ResourceType value) {
  
  query_level_ = value;
}
inline void LookupResources_Request::set_query_level(::Orthanc::DatabasePluginMessages::ResourceType value) {
  _internal_set_query_level(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.LookupResources.Request.query_level)
}

// uint32 limit = 3;
inline void LookupResources_Request::clear_limit() {
  limit_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LookupResources_Request::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LookupResources_Request::limit() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.LookupResources.Request.limit)
  return _internal_limit();
}
inline void LookupResources_Request::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  limit_ = value;
}
inline void LookupResources_Request::set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.LookupResources.Request.limit)
}

// bool retrieve_instances_ids = 4;
inline void LookupResources_Request::clear_retrieve_instances_ids() {
  retrieve_instances_ids_ = false;
}
inline bool LookupResources_Request::_internal_retrieve_instances_ids() const {
  return retrieve_instances_ids_;
}
inline bool LookupResources_Request::retrieve_instances_ids() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.LookupResources.Request.retrieve_instances_ids)
  return _internal_retrieve_instances_ids();
}
inline void LookupResources_Request::_internal_set_retrieve_instances_ids(bool value) {
  
  retrieve_instances_ids_ = value;
}
inline void LookupResources_Request::set_retrieve_instances_ids(bool value) {
  _internal_set_retrieve_instances_ids(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.LookupResources.Request.retrieve_instances_ids)
}

// repeated string labels = 5;
inline int LookupResources_Request::_internal_labels_size() const {
  return labels_.size();
}
inline int LookupResources_Request::labels_size() const {
  return _internal_labels_size();
}
inline void LookupResources_Request::clear_labels() {
  labels_.Clear();
}
inline std::string* LookupResources_Request::add_labels() {
  // @@protoc_insertion_point(field_add_mutable:Orthanc.DatabasePluginMessages.LookupResources.Request.labels)
  return _internal_add_labels();
}
inline const std::string& LookupResources_Request::_internal_labels(int index) const {
  return labels_.Get(index);
}
inline const std::string& LookupResources_Request::labels(int index) const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.LookupResources.Request.labels)
  return _internal_labels(index);
}
inline std::string* LookupResources_Request::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.LookupResources.Request.labels)
  return labels_.Mutable(index);
}
inline void LookupResources_Request::set_labels(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.LookupResources.Request.labels)
  labels_.Mutable(index)->assign(value);
}
inline void LookupResources_Request::set_labels(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.LookupResources.Request.labels)
  labels_.Mutable(index)->assign(std::move(value));
}
inline void LookupResources_Request::set_labels(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  labels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Orthanc.DatabasePluginMessages.LookupResources.Request.labels)
}
inline void LookupResources_Request::set_labels(int index, const char* value, size_t size) {
  labels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Orthanc.DatabasePluginMessages.LookupResources.Request.labels)
}
inline std::string* LookupResources_Request::_internal_add_labels() {
  return labels_.Add();
}
inline void LookupResources_Request::add_labels(const std::string& value) {
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Orthanc.DatabasePluginMessages.LookupResources.Request.labels)
}
inline void LookupResources_Request::add_labels(std::string&& value) {
  labels_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Orthanc.DatabasePluginMessages.LookupResources.Request.labels)
}
inline void LookupResources_Request::add_labels(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Orthanc.DatabasePluginMessages.LookupResources.Request.labels)
}
inline void LookupResources_Request::add_labels(const char* value, size_t size) {
  labels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Orthanc.DatabasePluginMessages.LookupResources.Request.labels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LookupResources_Request::labels() const {
  // @@protoc_insertion_point(field_list:Orthanc.DatabasePluginMessages.LookupResources.Request.labels)
  return labels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LookupResources_Request::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:Orthanc.DatabasePluginMessages.LookupResources.Request.labels)
  return &labels_;
}

// .Orthanc.DatabasePluginMessages.LabelsConstraintType labels_constraint = 6;
inline void LookupResources_Request::clear_labels_constraint() {
  labels_constraint_ = 0;
}
inline ::Orthanc::DatabasePluginMessages::LabelsConstraintType LookupResources_Request::_internal_labels_constraint() const {
  return static_cast< ::Orthanc::DatabasePluginMessages::LabelsConstraintType >(labels_constraint_);
}
inline ::Orthanc::DatabasePluginMessages::LabelsConstraintType LookupResources_Request::labels_constraint() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.LookupResources.Request.labels_constraint)
  return _internal_labels_constraint();
}
inline void LookupResources_Request::_internal_set_labels_constraint(::Orthanc::DatabasePluginMessages::LabelsConstraintType value) {
  
  labels_constraint_ = value;
}
inline void LookupResources_Request::set_labels_constraint(::Orthanc::DatabasePluginMessages::LabelsConstraintType value) {
  _internal_set_labels_constraint(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.LookupResources.Request.labels_constraint)
}

// -------------------------------------------------------------------

// LookupResources_Response

// repeated string resources_ids = 1;
inline int LookupResources_Response::_internal_resources_ids_size() const {
  return resources_ids_.size();
}
inline int LookupResources_Response::resources_ids_size() const {
  return _internal_resources_ids_size();
}
inline void LookupResources_Response::clear_resources_ids() {
  resources_ids_.Clear();
}
inline std::string* LookupResources_Response::add_resources_ids() {
  // @@protoc_insertion_point(field_add_mutable:Orthanc.DatabasePluginMessages.LookupResources.Response.resources_ids)
  return _internal_add_resources_ids();
}
inline const std::string& LookupResources_Response::_internal_resources_ids(int index) const {
  return resources_ids_.Get(index);
}
inline const std::string& LookupResources_Response::resources_ids(int index) const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.LookupResources.Response.resources_ids)
  return _internal_resources_ids(index);
}
inline std::string* LookupResources_Response::mutable_resources_ids(int index) {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.LookupResources.Response.resources_ids)
  return resources_ids_.Mutable(index);
}
inline void LookupResources_Response::set_resources_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.LookupResources.Response.resources_ids)
  resources_ids_.Mutable(index)->assign(value);
}
inline void LookupResources_Response::set_resources_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.LookupResources.Response.resources_ids)
  resources_ids_.Mutable(index)->assign(std::move(value));
}
inline void LookupResources_Response::set_resources_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  resources_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Orthanc.DatabasePluginMessages.LookupResources.Response.resources_ids)
}
inline void LookupResources_Response::set_resources_ids(int index, const char* value, size_t size) {
  resources_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Orthanc.DatabasePluginMessages.LookupResources.Response.resources_ids)
}
inline std::string* LookupResources_Response::_internal_add_resources_ids() {
  return resources_ids_.Add();
}
inline void LookupResources_Response::add_resources_ids(const std::string& value) {
  resources_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Orthanc.DatabasePluginMessages.LookupResources.Response.resources_ids)
}
inline void LookupResources_Response::add_resources_ids(std::string&& value) {
  resources_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Orthanc.DatabasePluginMessages.LookupResources.Response.resources_ids)
}
inline void LookupResources_Response::add_resources_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  resources_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Orthanc.DatabasePluginMessages.LookupResources.Response.resources_ids)
}
inline void LookupResources_Response::add_resources_ids(const char* value, size_t size) {
  resources_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Orthanc.DatabasePluginMessages.LookupResources.Response.resources_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LookupResources_Response::resources_ids() const {
  // @@protoc_insertion_point(field_list:Orthanc.DatabasePluginMessages.LookupResources.Response.resources_ids)
  return resources_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LookupResources_Response::mutable_resources_ids() {
  // @@protoc_insertion_point(field_mutable_list:Orthanc.DatabasePluginMessages.LookupResources.Response.resources_ids)
  return &resources_ids_;
}

// repeated string instances_ids = 2;
inline int LookupResources_Response::_internal_instances_ids_size() const {
  return instances_ids_.size();
}
inline int LookupResources_Response::instances_ids_size() const {
  return _internal_instances_ids_size();
}
inline void LookupResources_Response::clear_instances_ids() {
  instances_ids_.Clear();
}
inline std::string* LookupResources_Response::add_instances_ids() {
  // @@protoc_insertion_point(field_add_mutable:Orthanc.DatabasePluginMessages.LookupResources.Response.instances_ids)
  return _internal_add_instances_ids();
}
inline const std::string& LookupResources_Response::_internal_instances_ids(int index) const {
  return instances_ids_.Get(index);
}
inline const std::string& LookupResources_Response::instances_ids(int index) const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.LookupResources.Response.instances_ids)
  return _internal_instances_ids(index);
}
inline std::string* LookupResources_Response::mutable_instances_ids(int index) {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.LookupResources.Response.instances_ids)
  return instances_ids_.Mutable(index);
}
inline void LookupResources_Response::set_instances_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.LookupResources.Response.instances_ids)
  instances_ids_.Mutable(index)->assign(value);
}
inline void LookupResources_Response::set_instances_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.LookupResources.Response.instances_ids)
  instances_ids_.Mutable(index)->assign(std::move(value));
}
inline void LookupResources_Response::set_instances_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  instances_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Orthanc.DatabasePluginMessages.LookupResources.Response.instances_ids)
}
inline void LookupResources_Response::set_instances_ids(int index, const char* value, size_t size) {
  instances_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Orthanc.DatabasePluginMessages.LookupResources.Response.instances_ids)
}
inline std::string* LookupResources_Response::_internal_add_instances_ids() {
  return instances_ids_.Add();
}
inline void LookupResources_Response::add_instances_ids(const std::string& value) {
  instances_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Orthanc.DatabasePluginMessages.LookupResources.Response.instances_ids)
}
inline void LookupResources_Response::add_instances_ids(std::string&& value) {
  instances_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Orthanc.DatabasePluginMessages.LookupResources.Response.instances_ids)
}
inline void LookupResources_Response::add_instances_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  instances_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Orthanc.DatabasePluginMessages.LookupResources.Response.instances_ids)
}
inline void LookupResources_Response::add_instances_ids(const char* value, size_t size) {
  instances_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Orthanc.DatabasePluginMessages.LookupResources.Response.instances_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LookupResources_Response::instances_ids() const {
  // @@protoc_insertion_point(field_list:Orthanc.DatabasePluginMessages.LookupResources.Response.instances_ids)
  return instances_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LookupResources_Response::mutable_instances_ids() {
  // @@protoc_insertion_point(field_mutable_list:Orthanc.DatabasePluginMessages.LookupResources.Response.instances_ids)
  return &instances_ids_;
}

// -------------------------------------------------------------------

// LookupResources

// -------------------------------------------------------------------

// CreateInstance_Request

// string patient = 1;
inline void CreateInstance_Request::clear_patient() {
  patient_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateInstance_Request::patient() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.CreateInstance.Request.patient)
  return _internal_patient();
}
inline void CreateInstance_Request::set_patient(const std::string& value) {
  _internal_set_patient(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.CreateInstance.Request.patient)
}
inline std::string* CreateInstance_Request::mutable_patient() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.CreateInstance.Request.patient)
  return _internal_mutable_patient();
}
inline const std::string& CreateInstance_Request::_internal_patient() const {
  return patient_.Get();
}
inline void CreateInstance_Request::_internal_set_patient(const std::string& value) {
  
  patient_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateInstance_Request::set_patient(std::string&& value) {
  
  patient_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Orthanc.DatabasePluginMessages.CreateInstance.Request.patient)
}
inline void CreateInstance_Request::set_patient(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  patient_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Orthanc.DatabasePluginMessages.CreateInstance.Request.patient)
}
inline void CreateInstance_Request::set_patient(const char* value,
    size_t size) {
  
  patient_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Orthanc.DatabasePluginMessages.CreateInstance.Request.patient)
}
inline std::string* CreateInstance_Request::_internal_mutable_patient() {
  
  return patient_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateInstance_Request::release_patient() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.CreateInstance.Request.patient)
  return patient_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateInstance_Request::set_allocated_patient(std::string* patient) {
  if (patient != nullptr) {
    
  } else {
    
  }
  patient_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), patient,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.CreateInstance.Request.patient)
}
inline std::string* CreateInstance_Request::unsafe_arena_release_patient() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Orthanc.DatabasePluginMessages.CreateInstance.Request.patient)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return patient_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CreateInstance_Request::unsafe_arena_set_allocated_patient(
    std::string* patient) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (patient != nullptr) {
    
  } else {
    
  }
  patient_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      patient, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.CreateInstance.Request.patient)
}

// string study = 2;
inline void CreateInstance_Request::clear_study() {
  study_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateInstance_Request::study() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.CreateInstance.Request.study)
  return _internal_study();
}
inline void CreateInstance_Request::set_study(const std::string& value) {
  _internal_set_study(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.CreateInstance.Request.study)
}
inline std::string* CreateInstance_Request::mutable_study() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.CreateInstance.Request.study)
  return _internal_mutable_study();
}
inline const std::string& CreateInstance_Request::_internal_study() const {
  return study_.Get();
}
inline void CreateInstance_Request::_internal_set_study(const std::string& value) {
  
  study_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateInstance_Request::set_study(std::string&& value) {
  
  study_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Orthanc.DatabasePluginMessages.CreateInstance.Request.study)
}
inline void CreateInstance_Request::set_study(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  study_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Orthanc.DatabasePluginMessages.CreateInstance.Request.study)
}
inline void CreateInstance_Request::set_study(const char* value,
    size_t size) {
  
  study_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Orthanc.DatabasePluginMessages.CreateInstance.Request.study)
}
inline std::string* CreateInstance_Request::_internal_mutable_study() {
  
  return study_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateInstance_Request::release_study() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.CreateInstance.Request.study)
  return study_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateInstance_Request::set_allocated_study(std::string* study) {
  if (study != nullptr) {
    
  } else {
    
  }
  study_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), study,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.CreateInstance.Request.study)
}
inline std::string* CreateInstance_Request::unsafe_arena_release_study() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Orthanc.DatabasePluginMessages.CreateInstance.Request.study)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return study_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CreateInstance_Request::unsafe_arena_set_allocated_study(
    std::string* study) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (study != nullptr) {
    
  } else {
    
  }
  study_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      study, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.CreateInstance.Request.study)
}

// string series = 3;
inline void CreateInstance_Request::clear_series() {
  series_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateInstance_Request::series() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.CreateInstance.Request.series)
  return _internal_series();
}
inline void CreateInstance_Request::set_series(const std::string& value) {
  _internal_set_series(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.CreateInstance.Request.series)
}
inline std::string* CreateInstance_Request::mutable_series() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.CreateInstance.Request.series)
  return _internal_mutable_series();
}
inline const std::string& CreateInstance_Request::_internal_series() const {
  return series_.Get();
}
inline void CreateInstance_Request::_internal_set_series(const std::string& value) {
  
  series_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateInstance_Request::set_series(std::string&& value) {
  
  series_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Orthanc.DatabasePluginMessages.CreateInstance.Request.series)
}
inline void CreateInstance_Request::set_series(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  series_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Orthanc.DatabasePluginMessages.CreateInstance.Request.series)
}
inline void CreateInstance_Request::set_series(const char* value,
    size_t size) {
  
  series_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Orthanc.DatabasePluginMessages.CreateInstance.Request.series)
}
inline std::string* CreateInstance_Request::_internal_mutable_series() {
  
  return series_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateInstance_Request::release_series() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.CreateInstance.Request.series)
  return series_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateInstance_Request::set_allocated_series(std::string* series) {
  if (series != nullptr) {
    
  } else {
    
  }
  series_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), series,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.CreateInstance.Request.series)
}
inline std::string* CreateInstance_Request::unsafe_arena_release_series() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Orthanc.DatabasePluginMessages.CreateInstance.Request.series)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return series_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CreateInstance_Request::unsafe_arena_set_allocated_series(
    std::string* series) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (series != nullptr) {
    
  } else {
    
  }
  series_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      series, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.CreateInstance.Request.series)
}

// string instance = 4;
inline void CreateInstance_Request::clear_instance() {
  instance_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateInstance_Request::instance() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.CreateInstance.Request.instance)
  return _internal_instance();
}
inline void CreateInstance_Request::set_instance(const std::string& value) {
  _internal_set_instance(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.CreateInstance.Request.instance)
}
inline std::string* CreateInstance_Request::mutable_instance() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.CreateInstance.Request.instance)
  return _internal_mutable_instance();
}
inline const std::string& CreateInstance_Request::_internal_instance() const {
  return instance_.Get();
}
inline void CreateInstance_Request::_internal_set_instance(const std::string& value) {
  
  instance_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateInstance_Request::set_instance(std::string&& value) {
  
  instance_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Orthanc.DatabasePluginMessages.CreateInstance.Request.instance)
}
inline void CreateInstance_Request::set_instance(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instance_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Orthanc.DatabasePluginMessages.CreateInstance.Request.instance)
}
inline void CreateInstance_Request::set_instance(const char* value,
    size_t size) {
  
  instance_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Orthanc.DatabasePluginMessages.CreateInstance.Request.instance)
}
inline std::string* CreateInstance_Request::_internal_mutable_instance() {
  
  return instance_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateInstance_Request::release_instance() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.CreateInstance.Request.instance)
  return instance_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateInstance_Request::set_allocated_instance(std::string* instance) {
  if (instance != nullptr) {
    
  } else {
    
  }
  instance_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instance,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.CreateInstance.Request.instance)
}
inline std::string* CreateInstance_Request::unsafe_arena_release_instance() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Orthanc.DatabasePluginMessages.CreateInstance.Request.instance)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return instance_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CreateInstance_Request::unsafe_arena_set_allocated_instance(
    std::string* instance) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (instance != nullptr) {
    
  } else {
    
  }
  instance_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      instance, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.CreateInstance.Request.instance)
}

// -------------------------------------------------------------------

// CreateInstance_Response

// bool is_new_instance = 1;
inline void CreateInstance_Response::clear_is_new_instance() {
  is_new_instance_ = false;
}
inline bool CreateInstance_Response::_internal_is_new_instance() const {
  return is_new_instance_;
}
inline bool CreateInstance_Response::is_new_instance() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.CreateInstance.Response.is_new_instance)
  return _internal_is_new_instance();
}
inline void CreateInstance_Response::_internal_set_is_new_instance(bool value) {
  
  is_new_instance_ = value;
}
inline void CreateInstance_Response::set_is_new_instance(bool value) {
  _internal_set_is_new_instance(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.CreateInstance.Response.is_new_instance)
}

// int64 instance_id = 2;
inline void CreateInstance_Response::clear_instance_id() {
  instance_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateInstance_Response::_internal_instance_id() const {
  return instance_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateInstance_Response::instance_id() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.CreateInstance.Response.instance_id)
  return _internal_instance_id();
}
inline void CreateInstance_Response::_internal_set_instance_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  instance_id_ = value;
}
inline void CreateInstance_Response::set_instance_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_instance_id(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.CreateInstance.Response.instance_id)
}

// bool is_new_patient = 3;
inline void CreateInstance_Response::clear_is_new_patient() {
  is_new_patient_ = false;
}
inline bool CreateInstance_Response::_internal_is_new_patient() const {
  return is_new_patient_;
}
inline bool CreateInstance_Response::is_new_patient() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.CreateInstance.Response.is_new_patient)
  return _internal_is_new_patient();
}
inline void CreateInstance_Response::_internal_set_is_new_patient(bool value) {
  
  is_new_patient_ = value;
}
inline void CreateInstance_Response::set_is_new_patient(bool value) {
  _internal_set_is_new_patient(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.CreateInstance.Response.is_new_patient)
}

// bool is_new_study = 4;
inline void CreateInstance_Response::clear_is_new_study() {
  is_new_study_ = false;
}
inline bool CreateInstance_Response::_internal_is_new_study() const {
  return is_new_study_;
}
inline bool CreateInstance_Response::is_new_study() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.CreateInstance.Response.is_new_study)
  return _internal_is_new_study();
}
inline void CreateInstance_Response::_internal_set_is_new_study(bool value) {
  
  is_new_study_ = value;
}
inline void CreateInstance_Response::set_is_new_study(bool value) {
  _internal_set_is_new_study(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.CreateInstance.Response.is_new_study)
}

// bool is_new_series = 5;
inline void CreateInstance_Response::clear_is_new_series() {
  is_new_series_ = false;
}
inline bool CreateInstance_Response::_internal_is_new_series() const {
  return is_new_series_;
}
inline bool CreateInstance_Response::is_new_series() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.CreateInstance.Response.is_new_series)
  return _internal_is_new_series();
}
inline void CreateInstance_Response::_internal_set_is_new_series(bool value) {
  
  is_new_series_ = value;
}
inline void CreateInstance_Response::set_is_new_series(bool value) {
  _internal_set_is_new_series(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.CreateInstance.Response.is_new_series)
}

// int64 patient_id = 6;
inline void CreateInstance_Response::clear_patient_id() {
  patient_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateInstance_Response::_internal_patient_id() const {
  return patient_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateInstance_Response::patient_id() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.CreateInstance.Response.patient_id)
  return _internal_patient_id();
}
inline void CreateInstance_Response::_internal_set_patient_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  patient_id_ = value;
}
inline void CreateInstance_Response::set_patient_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_patient_id(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.CreateInstance.Response.patient_id)
}

// int64 study_id = 7;
inline void CreateInstance_Response::clear_study_id() {
  study_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateInstance_Response::_internal_study_id() const {
  return study_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateInstance_Response::study_id() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.CreateInstance.Response.study_id)
  return _internal_study_id();
}
inline void CreateInstance_Response::_internal_set_study_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  study_id_ = value;
}
inline void CreateInstance_Response::set_study_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_study_id(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.CreateInstance.Response.study_id)
}

// int64 series_id = 8;
inline void CreateInstance_Response::clear_series_id() {
  series_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateInstance_Response::_internal_series_id() const {
  return series_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateInstance_Response::series_id() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.CreateInstance.Response.series_id)
  return _internal_series_id();
}
inline void CreateInstance_Response::_internal_set_series_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  series_id_ = value;
}
inline void CreateInstance_Response::set_series_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_series_id(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.CreateInstance.Response.series_id)
}

// -------------------------------------------------------------------

// CreateInstance

// -------------------------------------------------------------------

// SetResourcesContent_Request_Tag

// int64 resource_id = 1;
inline void SetResourcesContent_Request_Tag::clear_resource_id() {
  resource_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SetResourcesContent_Request_Tag::_internal_resource_id() const {
  return resource_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SetResourcesContent_Request_Tag::resource_id() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.SetResourcesContent.Request.Tag.resource_id)
  return _internal_resource_id();
}
inline void SetResourcesContent_Request_Tag::_internal_set_resource_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  resource_id_ = value;
}
inline void SetResourcesContent_Request_Tag::set_resource_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_resource_id(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.SetResourcesContent.Request.Tag.resource_id)
}

// bool is_identifier = 2;
inline void SetResourcesContent_Request_Tag::clear_is_identifier() {
  is_identifier_ = false;
}
inline bool SetResourcesContent_Request_Tag::_internal_is_identifier() const {
  return is_identifier_;
}
inline bool SetResourcesContent_Request_Tag::is_identifier() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.SetResourcesContent.Request.Tag.is_identifier)
  return _internal_is_identifier();
}
inline void SetResourcesContent_Request_Tag::_internal_set_is_identifier(bool value) {
  
  is_identifier_ = value;
}
inline void SetResourcesContent_Request_Tag::set_is_identifier(bool value) {
  _internal_set_is_identifier(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.SetResourcesContent.Request.Tag.is_identifier)
}

// uint32 group = 3;
inline void SetResourcesContent_Request_Tag::clear_group() {
  group_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SetResourcesContent_Request_Tag::_internal_group() const {
  return group_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SetResourcesContent_Request_Tag::group() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.SetResourcesContent.Request.Tag.group)
  return _internal_group();
}
inline void SetResourcesContent_Request_Tag::_internal_set_group(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  group_ = value;
}
inline void SetResourcesContent_Request_Tag::set_group(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_group(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.SetResourcesContent.Request.Tag.group)
}

// uint32 element = 4;
inline void SetResourcesContent_Request_Tag::clear_element() {
  element_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SetResourcesContent_Request_Tag::_internal_element() const {
  return element_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SetResourcesContent_Request_Tag::element() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.SetResourcesContent.Request.Tag.element)
  return _internal_element();
}
inline void SetResourcesContent_Request_Tag::_internal_set_element(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  element_ = value;
}
inline void SetResourcesContent_Request_Tag::set_element(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_element(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.SetResourcesContent.Request.Tag.element)
}

// string value = 5;
inline void SetResourcesContent_Request_Tag::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SetResourcesContent_Request_Tag::value() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.SetResourcesContent.Request.Tag.value)
  return _internal_value();
}
inline void SetResourcesContent_Request_Tag::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.SetResourcesContent.Request.Tag.value)
}
inline std::string* SetResourcesContent_Request_Tag::mutable_value() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.SetResourcesContent.Request.Tag.value)
  return _internal_mutable_value();
}
inline const std::string& SetResourcesContent_Request_Tag::_internal_value() const {
  return value_.Get();
}
inline void SetResourcesContent_Request_Tag::_internal_set_value(const std::string& value) {
  
  value_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetResourcesContent_Request_Tag::set_value(std::string&& value) {
  
  value_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Orthanc.DatabasePluginMessages.SetResourcesContent.Request.Tag.value)
}
inline void SetResourcesContent_Request_Tag::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Orthanc.DatabasePluginMessages.SetResourcesContent.Request.Tag.value)
}
inline void SetResourcesContent_Request_Tag::set_value(const char* value,
    size_t size) {
  
  value_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Orthanc.DatabasePluginMessages.SetResourcesContent.Request.Tag.value)
}
inline std::string* SetResourcesContent_Request_Tag::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetResourcesContent_Request_Tag::release_value() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.SetResourcesContent.Request.Tag.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetResourcesContent_Request_Tag::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.SetResourcesContent.Request.Tag.value)
}
inline std::string* SetResourcesContent_Request_Tag::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Orthanc.DatabasePluginMessages.SetResourcesContent.Request.Tag.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SetResourcesContent_Request_Tag::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    
  } else {
    
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.SetResourcesContent.Request.Tag.value)
}

// -------------------------------------------------------------------

// SetResourcesContent_Request_Metadata

// int64 resource_id = 1;
inline void SetResourcesContent_Request_Metadata::clear_resource_id() {
  resource_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SetResourcesContent_Request_Metadata::_internal_resource_id() const {
  return resource_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SetResourcesContent_Request_Metadata::resource_id() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.SetResourcesContent.Request.Metadata.resource_id)
  return _internal_resource_id();
}
inline void SetResourcesContent_Request_Metadata::_internal_set_resource_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  resource_id_ = value;
}
inline void SetResourcesContent_Request_Metadata::set_resource_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_resource_id(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.SetResourcesContent.Request.Metadata.resource_id)
}

// int32 metadata = 2;
inline void SetResourcesContent_Request_Metadata::clear_metadata() {
  metadata_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetResourcesContent_Request_Metadata::_internal_metadata() const {
  return metadata_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetResourcesContent_Request_Metadata::metadata() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.SetResourcesContent.Request.Metadata.metadata)
  return _internal_metadata();
}
inline void SetResourcesContent_Request_Metadata::_internal_set_metadata(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  metadata_ = value;
}
inline void SetResourcesContent_Request_Metadata::set_metadata(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_metadata(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.SetResourcesContent.Request.Metadata.metadata)
}

// string value = 3;
inline void SetResourcesContent_Request_Metadata::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SetResourcesContent_Request_Metadata::value() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.SetResourcesContent.Request.Metadata.value)
  return _internal_value();
}
inline void SetResourcesContent_Request_Metadata::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.SetResourcesContent.Request.Metadata.value)
}
inline std::string* SetResourcesContent_Request_Metadata::mutable_value() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.SetResourcesContent.Request.Metadata.value)
  return _internal_mutable_value();
}
inline const std::string& SetResourcesContent_Request_Metadata::_internal_value() const {
  return value_.Get();
}
inline void SetResourcesContent_Request_Metadata::_internal_set_value(const std::string& value) {
  
  value_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetResourcesContent_Request_Metadata::set_value(std::string&& value) {
  
  value_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Orthanc.DatabasePluginMessages.SetResourcesContent.Request.Metadata.value)
}
inline void SetResourcesContent_Request_Metadata::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Orthanc.DatabasePluginMessages.SetResourcesContent.Request.Metadata.value)
}
inline void SetResourcesContent_Request_Metadata::set_value(const char* value,
    size_t size) {
  
  value_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Orthanc.DatabasePluginMessages.SetResourcesContent.Request.Metadata.value)
}
inline std::string* SetResourcesContent_Request_Metadata::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetResourcesContent_Request_Metadata::release_value() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.SetResourcesContent.Request.Metadata.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetResourcesContent_Request_Metadata::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.SetResourcesContent.Request.Metadata.value)
}
inline std::string* SetResourcesContent_Request_Metadata::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Orthanc.DatabasePluginMessages.SetResourcesContent.Request.Metadata.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SetResourcesContent_Request_Metadata::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    
  } else {
    
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.SetResourcesContent.Request.Metadata.value)
}

// -------------------------------------------------------------------

// SetResourcesContent_Request

// repeated .Orthanc.DatabasePluginMessages.SetResourcesContent.Request.Tag tags = 1;
inline int SetResourcesContent_Request::_internal_tags_size() const {
  return tags_.size();
}
inline int SetResourcesContent_Request::tags_size() const {
  return _internal_tags_size();
}
inline void SetResourcesContent_Request::clear_tags() {
  tags_.Clear();
}
inline ::Orthanc::DatabasePluginMessages::SetResourcesContent_Request_Tag* SetResourcesContent_Request::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.SetResourcesContent.Request.tags)
  return tags_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Orthanc::DatabasePluginMessages::SetResourcesContent_Request_Tag >*
SetResourcesContent_Request::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:Orthanc.DatabasePluginMessages.SetResourcesContent.Request.tags)
  return &tags_;
}
inline const ::Orthanc::DatabasePluginMessages::SetResourcesContent_Request_Tag& SetResourcesContent_Request::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const ::Orthanc::DatabasePluginMessages::SetResourcesContent_Request_Tag& SetResourcesContent_Request::tags(int index) const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.SetResourcesContent.Request.tags)
  return _internal_tags(index);
}
inline ::Orthanc::DatabasePluginMessages::SetResourcesContent_Request_Tag* SetResourcesContent_Request::_internal_add_tags() {
  return tags_.Add();
}
inline ::Orthanc::DatabasePluginMessages::SetResourcesContent_Request_Tag* SetResourcesContent_Request::add_tags() {
  // @@protoc_insertion_point(field_add:Orthanc.DatabasePluginMessages.SetResourcesContent.Request.tags)
  return _internal_add_tags();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Orthanc::DatabasePluginMessages::SetResourcesContent_Request_Tag >&
SetResourcesContent_Request::tags() const {
  // @@protoc_insertion_point(field_list:Orthanc.DatabasePluginMessages.SetResourcesContent.Request.tags)
  return tags_;
}

// repeated .Orthanc.DatabasePluginMessages.SetResourcesContent.Request.Metadata metadata = 2;
inline int SetResourcesContent_Request::_internal_metadata_size() const {
  return metadata_.size();
}
inline int SetResourcesContent_Request::metadata_size() const {
  return _internal_metadata_size();
}
inline void SetResourcesContent_Request::clear_metadata() {
  metadata_.Clear();
}
inline ::Orthanc::DatabasePluginMessages::SetResourcesContent_Request_Metadata* SetResourcesContent_Request::mutable_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.SetResourcesContent.Request.metadata)
  return metadata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Orthanc::DatabasePluginMessages::SetResourcesContent_Request_Metadata >*
SetResourcesContent_Request::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_list:Orthanc.DatabasePluginMessages.SetResourcesContent.Request.metadata)
  return &metadata_;
}
inline const ::Orthanc::DatabasePluginMessages::SetResourcesContent_Request_Metadata& SetResourcesContent_Request::_internal_metadata(int index) const {
  return metadata_.Get(index);
}
inline const ::Orthanc::DatabasePluginMessages::SetResourcesContent_Request_Metadata& SetResourcesContent_Request::metadata(int index) const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.SetResourcesContent.Request.metadata)
  return _internal_metadata(index);
}
inline ::Orthanc::DatabasePluginMessages::SetResourcesContent_Request_Metadata* SetResourcesContent_Request::_internal_add_metadata() {
  return metadata_.Add();
}
inline ::Orthanc::DatabasePluginMessages::SetResourcesContent_Request_Metadata* SetResourcesContent_Request::add_metadata() {
  // @@protoc_insertion_point(field_add:Orthanc.DatabasePluginMessages.SetResourcesContent.Request.metadata)
  return _internal_add_metadata();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Orthanc::DatabasePluginMessages::SetResourcesContent_Request_Metadata >&
SetResourcesContent_Request::metadata() const {
  // @@protoc_insertion_point(field_list:Orthanc.DatabasePluginMessages.SetResourcesContent.Request.metadata)
  return metadata_;
}

// -------------------------------------------------------------------

// SetResourcesContent_Response

// -------------------------------------------------------------------

// SetResourcesContent

// -------------------------------------------------------------------

// GetChildrenMetadata_Request

// int64 id = 1;
inline void GetChildrenMetadata_Request::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetChildrenMetadata_Request::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetChildrenMetadata_Request::id() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.GetChildrenMetadata.Request.id)
  return _internal_id();
}
inline void GetChildrenMetadata_Request::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void GetChildrenMetadata_Request::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.GetChildrenMetadata.Request.id)
}

// int32 metadata = 2;
inline void GetChildrenMetadata_Request::clear_metadata() {
  metadata_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetChildrenMetadata_Request::_internal_metadata() const {
  return metadata_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetChildrenMetadata_Request::metadata() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.GetChildrenMetadata.Request.metadata)
  return _internal_metadata();
}
inline void GetChildrenMetadata_Request::_internal_set_metadata(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  metadata_ = value;
}
inline void GetChildrenMetadata_Request::set_metadata(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_metadata(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.GetChildrenMetadata.Request.metadata)
}

// -------------------------------------------------------------------

// GetChildrenMetadata_Response

// repeated string values = 1;
inline int GetChildrenMetadata_Response::_internal_values_size() const {
  return values_.size();
}
inline int GetChildrenMetadata_Response::values_size() const {
  return _internal_values_size();
}
inline void GetChildrenMetadata_Response::clear_values() {
  values_.Clear();
}
inline std::string* GetChildrenMetadata_Response::add_values() {
  // @@protoc_insertion_point(field_add_mutable:Orthanc.DatabasePluginMessages.GetChildrenMetadata.Response.values)
  return _internal_add_values();
}
inline const std::string& GetChildrenMetadata_Response::_internal_values(int index) const {
  return values_.Get(index);
}
inline const std::string& GetChildrenMetadata_Response::values(int index) const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.GetChildrenMetadata.Response.values)
  return _internal_values(index);
}
inline std::string* GetChildrenMetadata_Response::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.GetChildrenMetadata.Response.values)
  return values_.Mutable(index);
}
inline void GetChildrenMetadata_Response::set_values(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.GetChildrenMetadata.Response.values)
  values_.Mutable(index)->assign(value);
}
inline void GetChildrenMetadata_Response::set_values(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.GetChildrenMetadata.Response.values)
  values_.Mutable(index)->assign(std::move(value));
}
inline void GetChildrenMetadata_Response::set_values(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Orthanc.DatabasePluginMessages.GetChildrenMetadata.Response.values)
}
inline void GetChildrenMetadata_Response::set_values(int index, const char* value, size_t size) {
  values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Orthanc.DatabasePluginMessages.GetChildrenMetadata.Response.values)
}
inline std::string* GetChildrenMetadata_Response::_internal_add_values() {
  return values_.Add();
}
inline void GetChildrenMetadata_Response::add_values(const std::string& value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Orthanc.DatabasePluginMessages.GetChildrenMetadata.Response.values)
}
inline void GetChildrenMetadata_Response::add_values(std::string&& value) {
  values_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Orthanc.DatabasePluginMessages.GetChildrenMetadata.Response.values)
}
inline void GetChildrenMetadata_Response::add_values(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Orthanc.DatabasePluginMessages.GetChildrenMetadata.Response.values)
}
inline void GetChildrenMetadata_Response::add_values(const char* value, size_t size) {
  values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Orthanc.DatabasePluginMessages.GetChildrenMetadata.Response.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetChildrenMetadata_Response::values() const {
  // @@protoc_insertion_point(field_list:Orthanc.DatabasePluginMessages.GetChildrenMetadata.Response.values)
  return values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetChildrenMetadata_Response::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:Orthanc.DatabasePluginMessages.GetChildrenMetadata.Response.values)
  return &values_;
}

// -------------------------------------------------------------------

// GetChildrenMetadata

// -------------------------------------------------------------------

// GetLastChangeIndex_Request

// -------------------------------------------------------------------

// GetLastChangeIndex_Response

// int64 result = 1;
inline void GetLastChangeIndex_Response::clear_result() {
  result_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetLastChangeIndex_Response::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetLastChangeIndex_Response::result() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.GetLastChangeIndex.Response.result)
  return _internal_result();
}
inline void GetLastChangeIndex_Response::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  result_ = value;
}
inline void GetLastChangeIndex_Response::set_result(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.GetLastChangeIndex.Response.result)
}

// -------------------------------------------------------------------

// GetLastChangeIndex

// -------------------------------------------------------------------

// LookupResourceAndParent_Request

// string public_id = 1;
inline void LookupResourceAndParent_Request::clear_public_id() {
  public_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LookupResourceAndParent_Request::public_id() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.LookupResourceAndParent.Request.public_id)
  return _internal_public_id();
}
inline void LookupResourceAndParent_Request::set_public_id(const std::string& value) {
  _internal_set_public_id(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.LookupResourceAndParent.Request.public_id)
}
inline std::string* LookupResourceAndParent_Request::mutable_public_id() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.LookupResourceAndParent.Request.public_id)
  return _internal_mutable_public_id();
}
inline const std::string& LookupResourceAndParent_Request::_internal_public_id() const {
  return public_id_.Get();
}
inline void LookupResourceAndParent_Request::_internal_set_public_id(const std::string& value) {
  
  public_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LookupResourceAndParent_Request::set_public_id(std::string&& value) {
  
  public_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Orthanc.DatabasePluginMessages.LookupResourceAndParent.Request.public_id)
}
inline void LookupResourceAndParent_Request::set_public_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  public_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Orthanc.DatabasePluginMessages.LookupResourceAndParent.Request.public_id)
}
inline void LookupResourceAndParent_Request::set_public_id(const char* value,
    size_t size) {
  
  public_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Orthanc.DatabasePluginMessages.LookupResourceAndParent.Request.public_id)
}
inline std::string* LookupResourceAndParent_Request::_internal_mutable_public_id() {
  
  return public_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LookupResourceAndParent_Request::release_public_id() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.LookupResourceAndParent.Request.public_id)
  return public_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LookupResourceAndParent_Request::set_allocated_public_id(std::string* public_id) {
  if (public_id != nullptr) {
    
  } else {
    
  }
  public_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.LookupResourceAndParent.Request.public_id)
}
inline std::string* LookupResourceAndParent_Request::unsafe_arena_release_public_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Orthanc.DatabasePluginMessages.LookupResourceAndParent.Request.public_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return public_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LookupResourceAndParent_Request::unsafe_arena_set_allocated_public_id(
    std::string* public_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (public_id != nullptr) {
    
  } else {
    
  }
  public_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      public_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.LookupResourceAndParent.Request.public_id)
}

// -------------------------------------------------------------------

// LookupResourceAndParent_Response

// bool found = 1;
inline void LookupResourceAndParent_Response::clear_found() {
  found_ = false;
}
inline bool LookupResourceAndParent_Response::_internal_found() const {
  return found_;
}
inline bool LookupResourceAndParent_Response::found() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.LookupResourceAndParent.Response.found)
  return _internal_found();
}
inline void LookupResourceAndParent_Response::_internal_set_found(bool value) {
  
  found_ = value;
}
inline void LookupResourceAndParent_Response::set_found(bool value) {
  _internal_set_found(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.LookupResourceAndParent.Response.found)
}

// int64 id = 2;
inline void LookupResourceAndParent_Response::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LookupResourceAndParent_Response::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LookupResourceAndParent_Response::id() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.LookupResourceAndParent.Response.id)
  return _internal_id();
}
inline void LookupResourceAndParent_Response::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void LookupResourceAndParent_Response::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.LookupResourceAndParent.Response.id)
}

// .Orthanc.DatabasePluginMessages.ResourceType type = 3;
inline void LookupResourceAndParent_Response::clear_type() {
  type_ = 0;
}
inline ::Orthanc::DatabasePluginMessages::ResourceType LookupResourceAndParent_Response::_internal_type() const {
  return static_cast< ::Orthanc::DatabasePluginMessages::ResourceType >(type_);
}
inline ::Orthanc::DatabasePluginMessages::ResourceType LookupResourceAndParent_Response::type() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.LookupResourceAndParent.Response.type)
  return _internal_type();
}
inline void LookupResourceAndParent_Response::_internal_set_type(::Orthanc::DatabasePluginMessages::ResourceType value) {
  
  type_ = value;
}
inline void LookupResourceAndParent_Response::set_type(::Orthanc::DatabasePluginMessages::ResourceType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.LookupResourceAndParent.Response.type)
}

// string parent_public_id = 4;
inline void LookupResourceAndParent_Response::clear_parent_public_id() {
  parent_public_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LookupResourceAndParent_Response::parent_public_id() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.LookupResourceAndParent.Response.parent_public_id)
  return _internal_parent_public_id();
}
inline void LookupResourceAndParent_Response::set_parent_public_id(const std::string& value) {
  _internal_set_parent_public_id(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.LookupResourceAndParent.Response.parent_public_id)
}
inline std::string* LookupResourceAndParent_Response::mutable_parent_public_id() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.LookupResourceAndParent.Response.parent_public_id)
  return _internal_mutable_parent_public_id();
}
inline const std::string& LookupResourceAndParent_Response::_internal_parent_public_id() const {
  return parent_public_id_.Get();
}
inline void LookupResourceAndParent_Response::_internal_set_parent_public_id(const std::string& value) {
  
  parent_public_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LookupResourceAndParent_Response::set_parent_public_id(std::string&& value) {
  
  parent_public_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Orthanc.DatabasePluginMessages.LookupResourceAndParent.Response.parent_public_id)
}
inline void LookupResourceAndParent_Response::set_parent_public_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_public_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Orthanc.DatabasePluginMessages.LookupResourceAndParent.Response.parent_public_id)
}
inline void LookupResourceAndParent_Response::set_parent_public_id(const char* value,
    size_t size) {
  
  parent_public_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Orthanc.DatabasePluginMessages.LookupResourceAndParent.Response.parent_public_id)
}
inline std::string* LookupResourceAndParent_Response::_internal_mutable_parent_public_id() {
  
  return parent_public_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LookupResourceAndParent_Response::release_parent_public_id() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.LookupResourceAndParent.Response.parent_public_id)
  return parent_public_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LookupResourceAndParent_Response::set_allocated_parent_public_id(std::string* parent_public_id) {
  if (parent_public_id != nullptr) {
    
  } else {
    
  }
  parent_public_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent_public_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.LookupResourceAndParent.Response.parent_public_id)
}
inline std::string* LookupResourceAndParent_Response::unsafe_arena_release_parent_public_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Orthanc.DatabasePluginMessages.LookupResourceAndParent.Response.parent_public_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return parent_public_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LookupResourceAndParent_Response::unsafe_arena_set_allocated_parent_public_id(
    std::string* parent_public_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (parent_public_id != nullptr) {
    
  } else {
    
  }
  parent_public_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      parent_public_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.LookupResourceAndParent.Response.parent_public_id)
}

// -------------------------------------------------------------------

// LookupResourceAndParent

// -------------------------------------------------------------------

// AddLabel_Request

// int64 id = 1;
inline void AddLabel_Request::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AddLabel_Request::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AddLabel_Request::id() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.AddLabel.Request.id)
  return _internal_id();
}
inline void AddLabel_Request::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void AddLabel_Request::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.AddLabel.Request.id)
}

// string label = 2;
inline void AddLabel_Request::clear_label() {
  label_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AddLabel_Request::label() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.AddLabel.Request.label)
  return _internal_label();
}
inline void AddLabel_Request::set_label(const std::string& value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.AddLabel.Request.label)
}
inline std::string* AddLabel_Request::mutable_label() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.AddLabel.Request.label)
  return _internal_mutable_label();
}
inline const std::string& AddLabel_Request::_internal_label() const {
  return label_.Get();
}
inline void AddLabel_Request::_internal_set_label(const std::string& value) {
  
  label_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AddLabel_Request::set_label(std::string&& value) {
  
  label_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Orthanc.DatabasePluginMessages.AddLabel.Request.label)
}
inline void AddLabel_Request::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  label_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Orthanc.DatabasePluginMessages.AddLabel.Request.label)
}
inline void AddLabel_Request::set_label(const char* value,
    size_t size) {
  
  label_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Orthanc.DatabasePluginMessages.AddLabel.Request.label)
}
inline std::string* AddLabel_Request::_internal_mutable_label() {
  
  return label_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AddLabel_Request::release_label() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.AddLabel.Request.label)
  return label_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddLabel_Request::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.AddLabel.Request.label)
}
inline std::string* AddLabel_Request::unsafe_arena_release_label() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Orthanc.DatabasePluginMessages.AddLabel.Request.label)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return label_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AddLabel_Request::unsafe_arena_set_allocated_label(
    std::string* label) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (label != nullptr) {
    
  } else {
    
  }
  label_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      label, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.AddLabel.Request.label)
}

// -------------------------------------------------------------------

// AddLabel_Response

// -------------------------------------------------------------------

// AddLabel

// -------------------------------------------------------------------

// RemoveLabel_Request

// int64 id = 1;
inline void RemoveLabel_Request::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RemoveLabel_Request::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RemoveLabel_Request::id() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.RemoveLabel.Request.id)
  return _internal_id();
}
inline void RemoveLabel_Request::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void RemoveLabel_Request::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.RemoveLabel.Request.id)
}

// string label = 2;
inline void RemoveLabel_Request::clear_label() {
  label_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RemoveLabel_Request::label() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.RemoveLabel.Request.label)
  return _internal_label();
}
inline void RemoveLabel_Request::set_label(const std::string& value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.RemoveLabel.Request.label)
}
inline std::string* RemoveLabel_Request::mutable_label() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.RemoveLabel.Request.label)
  return _internal_mutable_label();
}
inline const std::string& RemoveLabel_Request::_internal_label() const {
  return label_.Get();
}
inline void RemoveLabel_Request::_internal_set_label(const std::string& value) {
  
  label_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RemoveLabel_Request::set_label(std::string&& value) {
  
  label_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Orthanc.DatabasePluginMessages.RemoveLabel.Request.label)
}
inline void RemoveLabel_Request::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  label_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Orthanc.DatabasePluginMessages.RemoveLabel.Request.label)
}
inline void RemoveLabel_Request::set_label(const char* value,
    size_t size) {
  
  label_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Orthanc.DatabasePluginMessages.RemoveLabel.Request.label)
}
inline std::string* RemoveLabel_Request::_internal_mutable_label() {
  
  return label_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RemoveLabel_Request::release_label() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.RemoveLabel.Request.label)
  return label_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RemoveLabel_Request::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.RemoveLabel.Request.label)
}
inline std::string* RemoveLabel_Request::unsafe_arena_release_label() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Orthanc.DatabasePluginMessages.RemoveLabel.Request.label)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return label_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RemoveLabel_Request::unsafe_arena_set_allocated_label(
    std::string* label) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (label != nullptr) {
    
  } else {
    
  }
  label_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      label, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.RemoveLabel.Request.label)
}

// -------------------------------------------------------------------

// RemoveLabel_Response

// -------------------------------------------------------------------

// RemoveLabel

// -------------------------------------------------------------------

// ListLabels_Request

// bool single_resource = 1;
inline void ListLabels_Request::clear_single_resource() {
  single_resource_ = false;
}
inline bool ListLabels_Request::_internal_single_resource() const {
  return single_resource_;
}
inline bool ListLabels_Request::single_resource() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.ListLabels.Request.single_resource)
  return _internal_single_resource();
}
inline void ListLabels_Request::_internal_set_single_resource(bool value) {
  
  single_resource_ = value;
}
inline void ListLabels_Request::set_single_resource(bool value) {
  _internal_set_single_resource(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.ListLabels.Request.single_resource)
}

// int64 id = 2;
inline void ListLabels_Request::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ListLabels_Request::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ListLabels_Request::id() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.ListLabels.Request.id)
  return _internal_id();
}
inline void ListLabels_Request::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void ListLabels_Request::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.ListLabels.Request.id)
}

// -------------------------------------------------------------------

// ListLabels_Response

// repeated string labels = 1;
inline int ListLabels_Response::_internal_labels_size() const {
  return labels_.size();
}
inline int ListLabels_Response::labels_size() const {
  return _internal_labels_size();
}
inline void ListLabels_Response::clear_labels() {
  labels_.Clear();
}
inline std::string* ListLabels_Response::add_labels() {
  // @@protoc_insertion_point(field_add_mutable:Orthanc.DatabasePluginMessages.ListLabels.Response.labels)
  return _internal_add_labels();
}
inline const std::string& ListLabels_Response::_internal_labels(int index) const {
  return labels_.Get(index);
}
inline const std::string& ListLabels_Response::labels(int index) const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.ListLabels.Response.labels)
  return _internal_labels(index);
}
inline std::string* ListLabels_Response::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.ListLabels.Response.labels)
  return labels_.Mutable(index);
}
inline void ListLabels_Response::set_labels(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.ListLabels.Response.labels)
  labels_.Mutable(index)->assign(value);
}
inline void ListLabels_Response::set_labels(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.ListLabels.Response.labels)
  labels_.Mutable(index)->assign(std::move(value));
}
inline void ListLabels_Response::set_labels(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  labels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Orthanc.DatabasePluginMessages.ListLabels.Response.labels)
}
inline void ListLabels_Response::set_labels(int index, const char* value, size_t size) {
  labels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Orthanc.DatabasePluginMessages.ListLabels.Response.labels)
}
inline std::string* ListLabels_Response::_internal_add_labels() {
  return labels_.Add();
}
inline void ListLabels_Response::add_labels(const std::string& value) {
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Orthanc.DatabasePluginMessages.ListLabels.Response.labels)
}
inline void ListLabels_Response::add_labels(std::string&& value) {
  labels_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Orthanc.DatabasePluginMessages.ListLabels.Response.labels)
}
inline void ListLabels_Response::add_labels(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Orthanc.DatabasePluginMessages.ListLabels.Response.labels)
}
inline void ListLabels_Response::add_labels(const char* value, size_t size) {
  labels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Orthanc.DatabasePluginMessages.ListLabels.Response.labels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListLabels_Response::labels() const {
  // @@protoc_insertion_point(field_list:Orthanc.DatabasePluginMessages.ListLabels.Response.labels)
  return labels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListLabels_Response::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:Orthanc.DatabasePluginMessages.ListLabels.Response.labels)
  return &labels_;
}

// -------------------------------------------------------------------

// ListLabels

// -------------------------------------------------------------------

// TransactionRequest

// sfixed64 transaction = 1;
inline void TransactionRequest::clear_transaction() {
  transaction_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TransactionRequest::_internal_transaction() const {
  return transaction_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TransactionRequest::transaction() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionRequest.transaction)
  return _internal_transaction();
}
inline void TransactionRequest::_internal_set_transaction(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  transaction_ = value;
}
inline void TransactionRequest::set_transaction(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_transaction(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.TransactionRequest.transaction)
}

// .Orthanc.DatabasePluginMessages.TransactionOperation operation = 2;
inline void TransactionRequest::clear_operation() {
  operation_ = 0;
}
inline ::Orthanc::DatabasePluginMessages::TransactionOperation TransactionRequest::_internal_operation() const {
  return static_cast< ::Orthanc::DatabasePluginMessages::TransactionOperation >(operation_);
}
inline ::Orthanc::DatabasePluginMessages::TransactionOperation TransactionRequest::operation() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionRequest.operation)
  return _internal_operation();
}
inline void TransactionRequest::_internal_set_operation(::Orthanc::DatabasePluginMessages::TransactionOperation value) {
  
  operation_ = value;
}
inline void TransactionRequest::set_operation(::Orthanc::DatabasePluginMessages::TransactionOperation value) {
  _internal_set_operation(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.TransactionRequest.operation)
}

// .Orthanc.DatabasePluginMessages.Rollback.Request rollback = 100;
inline bool TransactionRequest::_internal_has_rollback() const {
  return this != internal_default_instance() && rollback_ != nullptr;
}
inline bool TransactionRequest::has_rollback() const {
  return _internal_has_rollback();
}
inline void TransactionRequest::clear_rollback() {
  if (GetArena() == nullptr && rollback_ != nullptr) {
    delete rollback_;
  }
  rollback_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::Rollback_Request& TransactionRequest::_internal_rollback() const {
  const ::Orthanc::DatabasePluginMessages::Rollback_Request* p = rollback_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::Rollback_Request*>(
      &::Orthanc::DatabasePluginMessages::_Rollback_Request_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::Rollback_Request& TransactionRequest::rollback() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionRequest.rollback)
  return _internal_rollback();
}
inline void TransactionRequest::unsafe_arena_set_allocated_rollback(
    ::Orthanc::DatabasePluginMessages::Rollback_Request* rollback) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rollback_);
  }
  rollback_ = rollback;
  if (rollback) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.rollback)
}
inline ::Orthanc::DatabasePluginMessages::Rollback_Request* TransactionRequest::release_rollback() {
  auto temp = unsafe_arena_release_rollback();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::Rollback_Request* TransactionRequest::unsafe_arena_release_rollback() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionRequest.rollback)
  
  ::Orthanc::DatabasePluginMessages::Rollback_Request* temp = rollback_;
  rollback_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::Rollback_Request* TransactionRequest::_internal_mutable_rollback() {
  
  if (rollback_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::Rollback_Request>(GetArena());
    rollback_ = p;
  }
  return rollback_;
}
inline ::Orthanc::DatabasePluginMessages::Rollback_Request* TransactionRequest::mutable_rollback() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionRequest.rollback)
  return _internal_mutable_rollback();
}
inline void TransactionRequest::set_allocated_rollback(::Orthanc::DatabasePluginMessages::Rollback_Request* rollback) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete rollback_;
  }
  if (rollback) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rollback);
    if (message_arena != submessage_arena) {
      rollback = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rollback, submessage_arena);
    }
    
  } else {
    
  }
  rollback_ = rollback;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.rollback)
}

// .Orthanc.DatabasePluginMessages.Commit.Request commit = 101;
inline bool TransactionRequest::_internal_has_commit() const {
  return this != internal_default_instance() && commit_ != nullptr;
}
inline bool TransactionRequest::has_commit() const {
  return _internal_has_commit();
}
inline void TransactionRequest::clear_commit() {
  if (GetArena() == nullptr && commit_ != nullptr) {
    delete commit_;
  }
  commit_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::Commit_Request& TransactionRequest::_internal_commit() const {
  const ::Orthanc::DatabasePluginMessages::Commit_Request* p = commit_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::Commit_Request*>(
      &::Orthanc::DatabasePluginMessages::_Commit_Request_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::Commit_Request& TransactionRequest::commit() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionRequest.commit)
  return _internal_commit();
}
inline void TransactionRequest::unsafe_arena_set_allocated_commit(
    ::Orthanc::DatabasePluginMessages::Commit_Request* commit) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(commit_);
  }
  commit_ = commit;
  if (commit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.commit)
}
inline ::Orthanc::DatabasePluginMessages::Commit_Request* TransactionRequest::release_commit() {
  auto temp = unsafe_arena_release_commit();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::Commit_Request* TransactionRequest::unsafe_arena_release_commit() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionRequest.commit)
  
  ::Orthanc::DatabasePluginMessages::Commit_Request* temp = commit_;
  commit_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::Commit_Request* TransactionRequest::_internal_mutable_commit() {
  
  if (commit_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::Commit_Request>(GetArena());
    commit_ = p;
  }
  return commit_;
}
inline ::Orthanc::DatabasePluginMessages::Commit_Request* TransactionRequest::mutable_commit() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionRequest.commit)
  return _internal_mutable_commit();
}
inline void TransactionRequest::set_allocated_commit(::Orthanc::DatabasePluginMessages::Commit_Request* commit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete commit_;
  }
  if (commit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(commit);
    if (message_arena != submessage_arena) {
      commit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, commit, submessage_arena);
    }
    
  } else {
    
  }
  commit_ = commit;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.commit)
}

// .Orthanc.DatabasePluginMessages.AddAttachment.Request add_attachment = 102;
inline bool TransactionRequest::_internal_has_add_attachment() const {
  return this != internal_default_instance() && add_attachment_ != nullptr;
}
inline bool TransactionRequest::has_add_attachment() const {
  return _internal_has_add_attachment();
}
inline void TransactionRequest::clear_add_attachment() {
  if (GetArena() == nullptr && add_attachment_ != nullptr) {
    delete add_attachment_;
  }
  add_attachment_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::AddAttachment_Request& TransactionRequest::_internal_add_attachment() const {
  const ::Orthanc::DatabasePluginMessages::AddAttachment_Request* p = add_attachment_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::AddAttachment_Request*>(
      &::Orthanc::DatabasePluginMessages::_AddAttachment_Request_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::AddAttachment_Request& TransactionRequest::add_attachment() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionRequest.add_attachment)
  return _internal_add_attachment();
}
inline void TransactionRequest::unsafe_arena_set_allocated_add_attachment(
    ::Orthanc::DatabasePluginMessages::AddAttachment_Request* add_attachment) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(add_attachment_);
  }
  add_attachment_ = add_attachment;
  if (add_attachment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.add_attachment)
}
inline ::Orthanc::DatabasePluginMessages::AddAttachment_Request* TransactionRequest::release_add_attachment() {
  auto temp = unsafe_arena_release_add_attachment();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::AddAttachment_Request* TransactionRequest::unsafe_arena_release_add_attachment() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionRequest.add_attachment)
  
  ::Orthanc::DatabasePluginMessages::AddAttachment_Request* temp = add_attachment_;
  add_attachment_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::AddAttachment_Request* TransactionRequest::_internal_mutable_add_attachment() {
  
  if (add_attachment_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::AddAttachment_Request>(GetArena());
    add_attachment_ = p;
  }
  return add_attachment_;
}
inline ::Orthanc::DatabasePluginMessages::AddAttachment_Request* TransactionRequest::mutable_add_attachment() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionRequest.add_attachment)
  return _internal_mutable_add_attachment();
}
inline void TransactionRequest::set_allocated_add_attachment(::Orthanc::DatabasePluginMessages::AddAttachment_Request* add_attachment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete add_attachment_;
  }
  if (add_attachment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(add_attachment);
    if (message_arena != submessage_arena) {
      add_attachment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, add_attachment, submessage_arena);
    }
    
  } else {
    
  }
  add_attachment_ = add_attachment;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.add_attachment)
}

// .Orthanc.DatabasePluginMessages.ClearChanges.Request clear_changes = 103;
inline bool TransactionRequest::_internal_has_clear_changes() const {
  return this != internal_default_instance() && clear_changes_ != nullptr;
}
inline bool TransactionRequest::has_clear_changes() const {
  return _internal_has_clear_changes();
}
inline void TransactionRequest::clear_clear_changes() {
  if (GetArena() == nullptr && clear_changes_ != nullptr) {
    delete clear_changes_;
  }
  clear_changes_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::ClearChanges_Request& TransactionRequest::_internal_clear_changes() const {
  const ::Orthanc::DatabasePluginMessages::ClearChanges_Request* p = clear_changes_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::ClearChanges_Request*>(
      &::Orthanc::DatabasePluginMessages::_ClearChanges_Request_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::ClearChanges_Request& TransactionRequest::clear_changes() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionRequest.clear_changes)
  return _internal_clear_changes();
}
inline void TransactionRequest::unsafe_arena_set_allocated_clear_changes(
    ::Orthanc::DatabasePluginMessages::ClearChanges_Request* clear_changes) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(clear_changes_);
  }
  clear_changes_ = clear_changes;
  if (clear_changes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.clear_changes)
}
inline ::Orthanc::DatabasePluginMessages::ClearChanges_Request* TransactionRequest::release_clear_changes() {
  auto temp = unsafe_arena_release_clear_changes();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::ClearChanges_Request* TransactionRequest::unsafe_arena_release_clear_changes() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionRequest.clear_changes)
  
  ::Orthanc::DatabasePluginMessages::ClearChanges_Request* temp = clear_changes_;
  clear_changes_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::ClearChanges_Request* TransactionRequest::_internal_mutable_clear_changes() {
  
  if (clear_changes_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::ClearChanges_Request>(GetArena());
    clear_changes_ = p;
  }
  return clear_changes_;
}
inline ::Orthanc::DatabasePluginMessages::ClearChanges_Request* TransactionRequest::mutable_clear_changes() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionRequest.clear_changes)
  return _internal_mutable_clear_changes();
}
inline void TransactionRequest::set_allocated_clear_changes(::Orthanc::DatabasePluginMessages::ClearChanges_Request* clear_changes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete clear_changes_;
  }
  if (clear_changes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(clear_changes);
    if (message_arena != submessage_arena) {
      clear_changes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clear_changes, submessage_arena);
    }
    
  } else {
    
  }
  clear_changes_ = clear_changes;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.clear_changes)
}

// .Orthanc.DatabasePluginMessages.ClearExportedResources.Request clear_exported_resources = 104;
inline bool TransactionRequest::_internal_has_clear_exported_resources() const {
  return this != internal_default_instance() && clear_exported_resources_ != nullptr;
}
inline bool TransactionRequest::has_clear_exported_resources() const {
  return _internal_has_clear_exported_resources();
}
inline void TransactionRequest::clear_clear_exported_resources() {
  if (GetArena() == nullptr && clear_exported_resources_ != nullptr) {
    delete clear_exported_resources_;
  }
  clear_exported_resources_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::ClearExportedResources_Request& TransactionRequest::_internal_clear_exported_resources() const {
  const ::Orthanc::DatabasePluginMessages::ClearExportedResources_Request* p = clear_exported_resources_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::ClearExportedResources_Request*>(
      &::Orthanc::DatabasePluginMessages::_ClearExportedResources_Request_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::ClearExportedResources_Request& TransactionRequest::clear_exported_resources() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionRequest.clear_exported_resources)
  return _internal_clear_exported_resources();
}
inline void TransactionRequest::unsafe_arena_set_allocated_clear_exported_resources(
    ::Orthanc::DatabasePluginMessages::ClearExportedResources_Request* clear_exported_resources) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(clear_exported_resources_);
  }
  clear_exported_resources_ = clear_exported_resources;
  if (clear_exported_resources) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.clear_exported_resources)
}
inline ::Orthanc::DatabasePluginMessages::ClearExportedResources_Request* TransactionRequest::release_clear_exported_resources() {
  auto temp = unsafe_arena_release_clear_exported_resources();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::ClearExportedResources_Request* TransactionRequest::unsafe_arena_release_clear_exported_resources() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionRequest.clear_exported_resources)
  
  ::Orthanc::DatabasePluginMessages::ClearExportedResources_Request* temp = clear_exported_resources_;
  clear_exported_resources_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::ClearExportedResources_Request* TransactionRequest::_internal_mutable_clear_exported_resources() {
  
  if (clear_exported_resources_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::ClearExportedResources_Request>(GetArena());
    clear_exported_resources_ = p;
  }
  return clear_exported_resources_;
}
inline ::Orthanc::DatabasePluginMessages::ClearExportedResources_Request* TransactionRequest::mutable_clear_exported_resources() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionRequest.clear_exported_resources)
  return _internal_mutable_clear_exported_resources();
}
inline void TransactionRequest::set_allocated_clear_exported_resources(::Orthanc::DatabasePluginMessages::ClearExportedResources_Request* clear_exported_resources) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete clear_exported_resources_;
  }
  if (clear_exported_resources) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(clear_exported_resources);
    if (message_arena != submessage_arena) {
      clear_exported_resources = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clear_exported_resources, submessage_arena);
    }
    
  } else {
    
  }
  clear_exported_resources_ = clear_exported_resources;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.clear_exported_resources)
}

// .Orthanc.DatabasePluginMessages.DeleteAttachment.Request delete_attachment = 105;
inline bool TransactionRequest::_internal_has_delete_attachment() const {
  return this != internal_default_instance() && delete_attachment_ != nullptr;
}
inline bool TransactionRequest::has_delete_attachment() const {
  return _internal_has_delete_attachment();
}
inline void TransactionRequest::clear_delete_attachment() {
  if (GetArena() == nullptr && delete_attachment_ != nullptr) {
    delete delete_attachment_;
  }
  delete_attachment_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::DeleteAttachment_Request& TransactionRequest::_internal_delete_attachment() const {
  const ::Orthanc::DatabasePluginMessages::DeleteAttachment_Request* p = delete_attachment_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::DeleteAttachment_Request*>(
      &::Orthanc::DatabasePluginMessages::_DeleteAttachment_Request_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::DeleteAttachment_Request& TransactionRequest::delete_attachment() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionRequest.delete_attachment)
  return _internal_delete_attachment();
}
inline void TransactionRequest::unsafe_arena_set_allocated_delete_attachment(
    ::Orthanc::DatabasePluginMessages::DeleteAttachment_Request* delete_attachment) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(delete_attachment_);
  }
  delete_attachment_ = delete_attachment;
  if (delete_attachment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.delete_attachment)
}
inline ::Orthanc::DatabasePluginMessages::DeleteAttachment_Request* TransactionRequest::release_delete_attachment() {
  auto temp = unsafe_arena_release_delete_attachment();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::DeleteAttachment_Request* TransactionRequest::unsafe_arena_release_delete_attachment() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionRequest.delete_attachment)
  
  ::Orthanc::DatabasePluginMessages::DeleteAttachment_Request* temp = delete_attachment_;
  delete_attachment_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::DeleteAttachment_Request* TransactionRequest::_internal_mutable_delete_attachment() {
  
  if (delete_attachment_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::DeleteAttachment_Request>(GetArena());
    delete_attachment_ = p;
  }
  return delete_attachment_;
}
inline ::Orthanc::DatabasePluginMessages::DeleteAttachment_Request* TransactionRequest::mutable_delete_attachment() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionRequest.delete_attachment)
  return _internal_mutable_delete_attachment();
}
inline void TransactionRequest::set_allocated_delete_attachment(::Orthanc::DatabasePluginMessages::DeleteAttachment_Request* delete_attachment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete delete_attachment_;
  }
  if (delete_attachment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(delete_attachment);
    if (message_arena != submessage_arena) {
      delete_attachment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delete_attachment, submessage_arena);
    }
    
  } else {
    
  }
  delete_attachment_ = delete_attachment;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.delete_attachment)
}

// .Orthanc.DatabasePluginMessages.DeleteMetadata.Request delete_metadata = 106;
inline bool TransactionRequest::_internal_has_delete_metadata() const {
  return this != internal_default_instance() && delete_metadata_ != nullptr;
}
inline bool TransactionRequest::has_delete_metadata() const {
  return _internal_has_delete_metadata();
}
inline void TransactionRequest::clear_delete_metadata() {
  if (GetArena() == nullptr && delete_metadata_ != nullptr) {
    delete delete_metadata_;
  }
  delete_metadata_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::DeleteMetadata_Request& TransactionRequest::_internal_delete_metadata() const {
  const ::Orthanc::DatabasePluginMessages::DeleteMetadata_Request* p = delete_metadata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::DeleteMetadata_Request*>(
      &::Orthanc::DatabasePluginMessages::_DeleteMetadata_Request_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::DeleteMetadata_Request& TransactionRequest::delete_metadata() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionRequest.delete_metadata)
  return _internal_delete_metadata();
}
inline void TransactionRequest::unsafe_arena_set_allocated_delete_metadata(
    ::Orthanc::DatabasePluginMessages::DeleteMetadata_Request* delete_metadata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(delete_metadata_);
  }
  delete_metadata_ = delete_metadata;
  if (delete_metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.delete_metadata)
}
inline ::Orthanc::DatabasePluginMessages::DeleteMetadata_Request* TransactionRequest::release_delete_metadata() {
  auto temp = unsafe_arena_release_delete_metadata();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::DeleteMetadata_Request* TransactionRequest::unsafe_arena_release_delete_metadata() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionRequest.delete_metadata)
  
  ::Orthanc::DatabasePluginMessages::DeleteMetadata_Request* temp = delete_metadata_;
  delete_metadata_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::DeleteMetadata_Request* TransactionRequest::_internal_mutable_delete_metadata() {
  
  if (delete_metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::DeleteMetadata_Request>(GetArena());
    delete_metadata_ = p;
  }
  return delete_metadata_;
}
inline ::Orthanc::DatabasePluginMessages::DeleteMetadata_Request* TransactionRequest::mutable_delete_metadata() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionRequest.delete_metadata)
  return _internal_mutable_delete_metadata();
}
inline void TransactionRequest::set_allocated_delete_metadata(::Orthanc::DatabasePluginMessages::DeleteMetadata_Request* delete_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete delete_metadata_;
  }
  if (delete_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(delete_metadata);
    if (message_arena != submessage_arena) {
      delete_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delete_metadata, submessage_arena);
    }
    
  } else {
    
  }
  delete_metadata_ = delete_metadata;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.delete_metadata)
}

// .Orthanc.DatabasePluginMessages.DeleteResource.Request delete_resource = 107;
inline bool TransactionRequest::_internal_has_delete_resource() const {
  return this != internal_default_instance() && delete_resource_ != nullptr;
}
inline bool TransactionRequest::has_delete_resource() const {
  return _internal_has_delete_resource();
}
inline void TransactionRequest::clear_delete_resource() {
  if (GetArena() == nullptr && delete_resource_ != nullptr) {
    delete delete_resource_;
  }
  delete_resource_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::DeleteResource_Request& TransactionRequest::_internal_delete_resource() const {
  const ::Orthanc::DatabasePluginMessages::DeleteResource_Request* p = delete_resource_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::DeleteResource_Request*>(
      &::Orthanc::DatabasePluginMessages::_DeleteResource_Request_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::DeleteResource_Request& TransactionRequest::delete_resource() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionRequest.delete_resource)
  return _internal_delete_resource();
}
inline void TransactionRequest::unsafe_arena_set_allocated_delete_resource(
    ::Orthanc::DatabasePluginMessages::DeleteResource_Request* delete_resource) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(delete_resource_);
  }
  delete_resource_ = delete_resource;
  if (delete_resource) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.delete_resource)
}
inline ::Orthanc::DatabasePluginMessages::DeleteResource_Request* TransactionRequest::release_delete_resource() {
  auto temp = unsafe_arena_release_delete_resource();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::DeleteResource_Request* TransactionRequest::unsafe_arena_release_delete_resource() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionRequest.delete_resource)
  
  ::Orthanc::DatabasePluginMessages::DeleteResource_Request* temp = delete_resource_;
  delete_resource_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::DeleteResource_Request* TransactionRequest::_internal_mutable_delete_resource() {
  
  if (delete_resource_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::DeleteResource_Request>(GetArena());
    delete_resource_ = p;
  }
  return delete_resource_;
}
inline ::Orthanc::DatabasePluginMessages::DeleteResource_Request* TransactionRequest::mutable_delete_resource() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionRequest.delete_resource)
  return _internal_mutable_delete_resource();
}
inline void TransactionRequest::set_allocated_delete_resource(::Orthanc::DatabasePluginMessages::DeleteResource_Request* delete_resource) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete delete_resource_;
  }
  if (delete_resource) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(delete_resource);
    if (message_arena != submessage_arena) {
      delete_resource = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delete_resource, submessage_arena);
    }
    
  } else {
    
  }
  delete_resource_ = delete_resource;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.delete_resource)
}

// .Orthanc.DatabasePluginMessages.GetAllMetadata.Request get_all_metadata = 108;
inline bool TransactionRequest::_internal_has_get_all_metadata() const {
  return this != internal_default_instance() && get_all_metadata_ != nullptr;
}
inline bool TransactionRequest::has_get_all_metadata() const {
  return _internal_has_get_all_metadata();
}
inline void TransactionRequest::clear_get_all_metadata() {
  if (GetArena() == nullptr && get_all_metadata_ != nullptr) {
    delete get_all_metadata_;
  }
  get_all_metadata_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::GetAllMetadata_Request& TransactionRequest::_internal_get_all_metadata() const {
  const ::Orthanc::DatabasePluginMessages::GetAllMetadata_Request* p = get_all_metadata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::GetAllMetadata_Request*>(
      &::Orthanc::DatabasePluginMessages::_GetAllMetadata_Request_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::GetAllMetadata_Request& TransactionRequest::get_all_metadata() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionRequest.get_all_metadata)
  return _internal_get_all_metadata();
}
inline void TransactionRequest::unsafe_arena_set_allocated_get_all_metadata(
    ::Orthanc::DatabasePluginMessages::GetAllMetadata_Request* get_all_metadata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(get_all_metadata_);
  }
  get_all_metadata_ = get_all_metadata;
  if (get_all_metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.get_all_metadata)
}
inline ::Orthanc::DatabasePluginMessages::GetAllMetadata_Request* TransactionRequest::release_get_all_metadata() {
  auto temp = unsafe_arena_release_get_all_metadata();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::GetAllMetadata_Request* TransactionRequest::unsafe_arena_release_get_all_metadata() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionRequest.get_all_metadata)
  
  ::Orthanc::DatabasePluginMessages::GetAllMetadata_Request* temp = get_all_metadata_;
  get_all_metadata_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::GetAllMetadata_Request* TransactionRequest::_internal_mutable_get_all_metadata() {
  
  if (get_all_metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetAllMetadata_Request>(GetArena());
    get_all_metadata_ = p;
  }
  return get_all_metadata_;
}
inline ::Orthanc::DatabasePluginMessages::GetAllMetadata_Request* TransactionRequest::mutable_get_all_metadata() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionRequest.get_all_metadata)
  return _internal_mutable_get_all_metadata();
}
inline void TransactionRequest::set_allocated_get_all_metadata(::Orthanc::DatabasePluginMessages::GetAllMetadata_Request* get_all_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete get_all_metadata_;
  }
  if (get_all_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_all_metadata);
    if (message_arena != submessage_arena) {
      get_all_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_all_metadata, submessage_arena);
    }
    
  } else {
    
  }
  get_all_metadata_ = get_all_metadata;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.get_all_metadata)
}

// .Orthanc.DatabasePluginMessages.GetAllPublicIds.Request get_all_public_ids = 109;
inline bool TransactionRequest::_internal_has_get_all_public_ids() const {
  return this != internal_default_instance() && get_all_public_ids_ != nullptr;
}
inline bool TransactionRequest::has_get_all_public_ids() const {
  return _internal_has_get_all_public_ids();
}
inline void TransactionRequest::clear_get_all_public_ids() {
  if (GetArena() == nullptr && get_all_public_ids_ != nullptr) {
    delete get_all_public_ids_;
  }
  get_all_public_ids_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::GetAllPublicIds_Request& TransactionRequest::_internal_get_all_public_ids() const {
  const ::Orthanc::DatabasePluginMessages::GetAllPublicIds_Request* p = get_all_public_ids_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::GetAllPublicIds_Request*>(
      &::Orthanc::DatabasePluginMessages::_GetAllPublicIds_Request_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::GetAllPublicIds_Request& TransactionRequest::get_all_public_ids() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionRequest.get_all_public_ids)
  return _internal_get_all_public_ids();
}
inline void TransactionRequest::unsafe_arena_set_allocated_get_all_public_ids(
    ::Orthanc::DatabasePluginMessages::GetAllPublicIds_Request* get_all_public_ids) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(get_all_public_ids_);
  }
  get_all_public_ids_ = get_all_public_ids;
  if (get_all_public_ids) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.get_all_public_ids)
}
inline ::Orthanc::DatabasePluginMessages::GetAllPublicIds_Request* TransactionRequest::release_get_all_public_ids() {
  auto temp = unsafe_arena_release_get_all_public_ids();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::GetAllPublicIds_Request* TransactionRequest::unsafe_arena_release_get_all_public_ids() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionRequest.get_all_public_ids)
  
  ::Orthanc::DatabasePluginMessages::GetAllPublicIds_Request* temp = get_all_public_ids_;
  get_all_public_ids_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::GetAllPublicIds_Request* TransactionRequest::_internal_mutable_get_all_public_ids() {
  
  if (get_all_public_ids_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetAllPublicIds_Request>(GetArena());
    get_all_public_ids_ = p;
  }
  return get_all_public_ids_;
}
inline ::Orthanc::DatabasePluginMessages::GetAllPublicIds_Request* TransactionRequest::mutable_get_all_public_ids() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionRequest.get_all_public_ids)
  return _internal_mutable_get_all_public_ids();
}
inline void TransactionRequest::set_allocated_get_all_public_ids(::Orthanc::DatabasePluginMessages::GetAllPublicIds_Request* get_all_public_ids) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete get_all_public_ids_;
  }
  if (get_all_public_ids) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_all_public_ids);
    if (message_arena != submessage_arena) {
      get_all_public_ids = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_all_public_ids, submessage_arena);
    }
    
  } else {
    
  }
  get_all_public_ids_ = get_all_public_ids;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.get_all_public_ids)
}

// .Orthanc.DatabasePluginMessages.GetAllPublicIdsWithLimits.Request get_all_public_ids_with_limits = 110;
inline bool TransactionRequest::_internal_has_get_all_public_ids_with_limits() const {
  return this != internal_default_instance() && get_all_public_ids_with_limits_ != nullptr;
}
inline bool TransactionRequest::has_get_all_public_ids_with_limits() const {
  return _internal_has_get_all_public_ids_with_limits();
}
inline void TransactionRequest::clear_get_all_public_ids_with_limits() {
  if (GetArena() == nullptr && get_all_public_ids_with_limits_ != nullptr) {
    delete get_all_public_ids_with_limits_;
  }
  get_all_public_ids_with_limits_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits_Request& TransactionRequest::_internal_get_all_public_ids_with_limits() const {
  const ::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits_Request* p = get_all_public_ids_with_limits_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits_Request*>(
      &::Orthanc::DatabasePluginMessages::_GetAllPublicIdsWithLimits_Request_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits_Request& TransactionRequest::get_all_public_ids_with_limits() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionRequest.get_all_public_ids_with_limits)
  return _internal_get_all_public_ids_with_limits();
}
inline void TransactionRequest::unsafe_arena_set_allocated_get_all_public_ids_with_limits(
    ::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits_Request* get_all_public_ids_with_limits) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(get_all_public_ids_with_limits_);
  }
  get_all_public_ids_with_limits_ = get_all_public_ids_with_limits;
  if (get_all_public_ids_with_limits) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.get_all_public_ids_with_limits)
}
inline ::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits_Request* TransactionRequest::release_get_all_public_ids_with_limits() {
  auto temp = unsafe_arena_release_get_all_public_ids_with_limits();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits_Request* TransactionRequest::unsafe_arena_release_get_all_public_ids_with_limits() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionRequest.get_all_public_ids_with_limits)
  
  ::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits_Request* temp = get_all_public_ids_with_limits_;
  get_all_public_ids_with_limits_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits_Request* TransactionRequest::_internal_mutable_get_all_public_ids_with_limits() {
  
  if (get_all_public_ids_with_limits_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits_Request>(GetArena());
    get_all_public_ids_with_limits_ = p;
  }
  return get_all_public_ids_with_limits_;
}
inline ::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits_Request* TransactionRequest::mutable_get_all_public_ids_with_limits() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionRequest.get_all_public_ids_with_limits)
  return _internal_mutable_get_all_public_ids_with_limits();
}
inline void TransactionRequest::set_allocated_get_all_public_ids_with_limits(::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits_Request* get_all_public_ids_with_limits) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete get_all_public_ids_with_limits_;
  }
  if (get_all_public_ids_with_limits) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_all_public_ids_with_limits);
    if (message_arena != submessage_arena) {
      get_all_public_ids_with_limits = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_all_public_ids_with_limits, submessage_arena);
    }
    
  } else {
    
  }
  get_all_public_ids_with_limits_ = get_all_public_ids_with_limits;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.get_all_public_ids_with_limits)
}

// .Orthanc.DatabasePluginMessages.GetChanges.Request get_changes = 111;
inline bool TransactionRequest::_internal_has_get_changes() const {
  return this != internal_default_instance() && get_changes_ != nullptr;
}
inline bool TransactionRequest::has_get_changes() const {
  return _internal_has_get_changes();
}
inline void TransactionRequest::clear_get_changes() {
  if (GetArena() == nullptr && get_changes_ != nullptr) {
    delete get_changes_;
  }
  get_changes_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::GetChanges_Request& TransactionRequest::_internal_get_changes() const {
  const ::Orthanc::DatabasePluginMessages::GetChanges_Request* p = get_changes_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::GetChanges_Request*>(
      &::Orthanc::DatabasePluginMessages::_GetChanges_Request_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::GetChanges_Request& TransactionRequest::get_changes() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionRequest.get_changes)
  return _internal_get_changes();
}
inline void TransactionRequest::unsafe_arena_set_allocated_get_changes(
    ::Orthanc::DatabasePluginMessages::GetChanges_Request* get_changes) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(get_changes_);
  }
  get_changes_ = get_changes;
  if (get_changes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.get_changes)
}
inline ::Orthanc::DatabasePluginMessages::GetChanges_Request* TransactionRequest::release_get_changes() {
  auto temp = unsafe_arena_release_get_changes();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::GetChanges_Request* TransactionRequest::unsafe_arena_release_get_changes() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionRequest.get_changes)
  
  ::Orthanc::DatabasePluginMessages::GetChanges_Request* temp = get_changes_;
  get_changes_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::GetChanges_Request* TransactionRequest::_internal_mutable_get_changes() {
  
  if (get_changes_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetChanges_Request>(GetArena());
    get_changes_ = p;
  }
  return get_changes_;
}
inline ::Orthanc::DatabasePluginMessages::GetChanges_Request* TransactionRequest::mutable_get_changes() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionRequest.get_changes)
  return _internal_mutable_get_changes();
}
inline void TransactionRequest::set_allocated_get_changes(::Orthanc::DatabasePluginMessages::GetChanges_Request* get_changes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete get_changes_;
  }
  if (get_changes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_changes);
    if (message_arena != submessage_arena) {
      get_changes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_changes, submessage_arena);
    }
    
  } else {
    
  }
  get_changes_ = get_changes;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.get_changes)
}

// .Orthanc.DatabasePluginMessages.GetChildrenInternalId.Request get_children_internal_id = 112;
inline bool TransactionRequest::_internal_has_get_children_internal_id() const {
  return this != internal_default_instance() && get_children_internal_id_ != nullptr;
}
inline bool TransactionRequest::has_get_children_internal_id() const {
  return _internal_has_get_children_internal_id();
}
inline void TransactionRequest::clear_get_children_internal_id() {
  if (GetArena() == nullptr && get_children_internal_id_ != nullptr) {
    delete get_children_internal_id_;
  }
  get_children_internal_id_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::GetChildrenInternalId_Request& TransactionRequest::_internal_get_children_internal_id() const {
  const ::Orthanc::DatabasePluginMessages::GetChildrenInternalId_Request* p = get_children_internal_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::GetChildrenInternalId_Request*>(
      &::Orthanc::DatabasePluginMessages::_GetChildrenInternalId_Request_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::GetChildrenInternalId_Request& TransactionRequest::get_children_internal_id() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionRequest.get_children_internal_id)
  return _internal_get_children_internal_id();
}
inline void TransactionRequest::unsafe_arena_set_allocated_get_children_internal_id(
    ::Orthanc::DatabasePluginMessages::GetChildrenInternalId_Request* get_children_internal_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(get_children_internal_id_);
  }
  get_children_internal_id_ = get_children_internal_id;
  if (get_children_internal_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.get_children_internal_id)
}
inline ::Orthanc::DatabasePluginMessages::GetChildrenInternalId_Request* TransactionRequest::release_get_children_internal_id() {
  auto temp = unsafe_arena_release_get_children_internal_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::GetChildrenInternalId_Request* TransactionRequest::unsafe_arena_release_get_children_internal_id() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionRequest.get_children_internal_id)
  
  ::Orthanc::DatabasePluginMessages::GetChildrenInternalId_Request* temp = get_children_internal_id_;
  get_children_internal_id_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::GetChildrenInternalId_Request* TransactionRequest::_internal_mutable_get_children_internal_id() {
  
  if (get_children_internal_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetChildrenInternalId_Request>(GetArena());
    get_children_internal_id_ = p;
  }
  return get_children_internal_id_;
}
inline ::Orthanc::DatabasePluginMessages::GetChildrenInternalId_Request* TransactionRequest::mutable_get_children_internal_id() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionRequest.get_children_internal_id)
  return _internal_mutable_get_children_internal_id();
}
inline void TransactionRequest::set_allocated_get_children_internal_id(::Orthanc::DatabasePluginMessages::GetChildrenInternalId_Request* get_children_internal_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete get_children_internal_id_;
  }
  if (get_children_internal_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_children_internal_id);
    if (message_arena != submessage_arena) {
      get_children_internal_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_children_internal_id, submessage_arena);
    }
    
  } else {
    
  }
  get_children_internal_id_ = get_children_internal_id;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.get_children_internal_id)
}

// .Orthanc.DatabasePluginMessages.GetChildrenPublicId.Request get_children_public_id = 113;
inline bool TransactionRequest::_internal_has_get_children_public_id() const {
  return this != internal_default_instance() && get_children_public_id_ != nullptr;
}
inline bool TransactionRequest::has_get_children_public_id() const {
  return _internal_has_get_children_public_id();
}
inline void TransactionRequest::clear_get_children_public_id() {
  if (GetArena() == nullptr && get_children_public_id_ != nullptr) {
    delete get_children_public_id_;
  }
  get_children_public_id_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::GetChildrenPublicId_Request& TransactionRequest::_internal_get_children_public_id() const {
  const ::Orthanc::DatabasePluginMessages::GetChildrenPublicId_Request* p = get_children_public_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::GetChildrenPublicId_Request*>(
      &::Orthanc::DatabasePluginMessages::_GetChildrenPublicId_Request_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::GetChildrenPublicId_Request& TransactionRequest::get_children_public_id() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionRequest.get_children_public_id)
  return _internal_get_children_public_id();
}
inline void TransactionRequest::unsafe_arena_set_allocated_get_children_public_id(
    ::Orthanc::DatabasePluginMessages::GetChildrenPublicId_Request* get_children_public_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(get_children_public_id_);
  }
  get_children_public_id_ = get_children_public_id;
  if (get_children_public_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.get_children_public_id)
}
inline ::Orthanc::DatabasePluginMessages::GetChildrenPublicId_Request* TransactionRequest::release_get_children_public_id() {
  auto temp = unsafe_arena_release_get_children_public_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::GetChildrenPublicId_Request* TransactionRequest::unsafe_arena_release_get_children_public_id() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionRequest.get_children_public_id)
  
  ::Orthanc::DatabasePluginMessages::GetChildrenPublicId_Request* temp = get_children_public_id_;
  get_children_public_id_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::GetChildrenPublicId_Request* TransactionRequest::_internal_mutable_get_children_public_id() {
  
  if (get_children_public_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetChildrenPublicId_Request>(GetArena());
    get_children_public_id_ = p;
  }
  return get_children_public_id_;
}
inline ::Orthanc::DatabasePluginMessages::GetChildrenPublicId_Request* TransactionRequest::mutable_get_children_public_id() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionRequest.get_children_public_id)
  return _internal_mutable_get_children_public_id();
}
inline void TransactionRequest::set_allocated_get_children_public_id(::Orthanc::DatabasePluginMessages::GetChildrenPublicId_Request* get_children_public_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete get_children_public_id_;
  }
  if (get_children_public_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_children_public_id);
    if (message_arena != submessage_arena) {
      get_children_public_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_children_public_id, submessage_arena);
    }
    
  } else {
    
  }
  get_children_public_id_ = get_children_public_id;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.get_children_public_id)
}

// .Orthanc.DatabasePluginMessages.GetExportedResources.Request get_exported_resources = 114;
inline bool TransactionRequest::_internal_has_get_exported_resources() const {
  return this != internal_default_instance() && get_exported_resources_ != nullptr;
}
inline bool TransactionRequest::has_get_exported_resources() const {
  return _internal_has_get_exported_resources();
}
inline void TransactionRequest::clear_get_exported_resources() {
  if (GetArena() == nullptr && get_exported_resources_ != nullptr) {
    delete get_exported_resources_;
  }
  get_exported_resources_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::GetExportedResources_Request& TransactionRequest::_internal_get_exported_resources() const {
  const ::Orthanc::DatabasePluginMessages::GetExportedResources_Request* p = get_exported_resources_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::GetExportedResources_Request*>(
      &::Orthanc::DatabasePluginMessages::_GetExportedResources_Request_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::GetExportedResources_Request& TransactionRequest::get_exported_resources() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionRequest.get_exported_resources)
  return _internal_get_exported_resources();
}
inline void TransactionRequest::unsafe_arena_set_allocated_get_exported_resources(
    ::Orthanc::DatabasePluginMessages::GetExportedResources_Request* get_exported_resources) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(get_exported_resources_);
  }
  get_exported_resources_ = get_exported_resources;
  if (get_exported_resources) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.get_exported_resources)
}
inline ::Orthanc::DatabasePluginMessages::GetExportedResources_Request* TransactionRequest::release_get_exported_resources() {
  auto temp = unsafe_arena_release_get_exported_resources();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::GetExportedResources_Request* TransactionRequest::unsafe_arena_release_get_exported_resources() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionRequest.get_exported_resources)
  
  ::Orthanc::DatabasePluginMessages::GetExportedResources_Request* temp = get_exported_resources_;
  get_exported_resources_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::GetExportedResources_Request* TransactionRequest::_internal_mutable_get_exported_resources() {
  
  if (get_exported_resources_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetExportedResources_Request>(GetArena());
    get_exported_resources_ = p;
  }
  return get_exported_resources_;
}
inline ::Orthanc::DatabasePluginMessages::GetExportedResources_Request* TransactionRequest::mutable_get_exported_resources() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionRequest.get_exported_resources)
  return _internal_mutable_get_exported_resources();
}
inline void TransactionRequest::set_allocated_get_exported_resources(::Orthanc::DatabasePluginMessages::GetExportedResources_Request* get_exported_resources) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete get_exported_resources_;
  }
  if (get_exported_resources) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_exported_resources);
    if (message_arena != submessage_arena) {
      get_exported_resources = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_exported_resources, submessage_arena);
    }
    
  } else {
    
  }
  get_exported_resources_ = get_exported_resources;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.get_exported_resources)
}

// .Orthanc.DatabasePluginMessages.GetLastChange.Request get_last_change = 115;
inline bool TransactionRequest::_internal_has_get_last_change() const {
  return this != internal_default_instance() && get_last_change_ != nullptr;
}
inline bool TransactionRequest::has_get_last_change() const {
  return _internal_has_get_last_change();
}
inline void TransactionRequest::clear_get_last_change() {
  if (GetArena() == nullptr && get_last_change_ != nullptr) {
    delete get_last_change_;
  }
  get_last_change_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::GetLastChange_Request& TransactionRequest::_internal_get_last_change() const {
  const ::Orthanc::DatabasePluginMessages::GetLastChange_Request* p = get_last_change_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::GetLastChange_Request*>(
      &::Orthanc::DatabasePluginMessages::_GetLastChange_Request_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::GetLastChange_Request& TransactionRequest::get_last_change() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionRequest.get_last_change)
  return _internal_get_last_change();
}
inline void TransactionRequest::unsafe_arena_set_allocated_get_last_change(
    ::Orthanc::DatabasePluginMessages::GetLastChange_Request* get_last_change) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(get_last_change_);
  }
  get_last_change_ = get_last_change;
  if (get_last_change) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.get_last_change)
}
inline ::Orthanc::DatabasePluginMessages::GetLastChange_Request* TransactionRequest::release_get_last_change() {
  auto temp = unsafe_arena_release_get_last_change();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::GetLastChange_Request* TransactionRequest::unsafe_arena_release_get_last_change() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionRequest.get_last_change)
  
  ::Orthanc::DatabasePluginMessages::GetLastChange_Request* temp = get_last_change_;
  get_last_change_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::GetLastChange_Request* TransactionRequest::_internal_mutable_get_last_change() {
  
  if (get_last_change_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetLastChange_Request>(GetArena());
    get_last_change_ = p;
  }
  return get_last_change_;
}
inline ::Orthanc::DatabasePluginMessages::GetLastChange_Request* TransactionRequest::mutable_get_last_change() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionRequest.get_last_change)
  return _internal_mutable_get_last_change();
}
inline void TransactionRequest::set_allocated_get_last_change(::Orthanc::DatabasePluginMessages::GetLastChange_Request* get_last_change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete get_last_change_;
  }
  if (get_last_change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_last_change);
    if (message_arena != submessage_arena) {
      get_last_change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_last_change, submessage_arena);
    }
    
  } else {
    
  }
  get_last_change_ = get_last_change;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.get_last_change)
}

// .Orthanc.DatabasePluginMessages.GetLastExportedResource.Request get_last_exported_resource = 116;
inline bool TransactionRequest::_internal_has_get_last_exported_resource() const {
  return this != internal_default_instance() && get_last_exported_resource_ != nullptr;
}
inline bool TransactionRequest::has_get_last_exported_resource() const {
  return _internal_has_get_last_exported_resource();
}
inline void TransactionRequest::clear_get_last_exported_resource() {
  if (GetArena() == nullptr && get_last_exported_resource_ != nullptr) {
    delete get_last_exported_resource_;
  }
  get_last_exported_resource_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::GetLastExportedResource_Request& TransactionRequest::_internal_get_last_exported_resource() const {
  const ::Orthanc::DatabasePluginMessages::GetLastExportedResource_Request* p = get_last_exported_resource_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::GetLastExportedResource_Request*>(
      &::Orthanc::DatabasePluginMessages::_GetLastExportedResource_Request_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::GetLastExportedResource_Request& TransactionRequest::get_last_exported_resource() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionRequest.get_last_exported_resource)
  return _internal_get_last_exported_resource();
}
inline void TransactionRequest::unsafe_arena_set_allocated_get_last_exported_resource(
    ::Orthanc::DatabasePluginMessages::GetLastExportedResource_Request* get_last_exported_resource) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(get_last_exported_resource_);
  }
  get_last_exported_resource_ = get_last_exported_resource;
  if (get_last_exported_resource) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.get_last_exported_resource)
}
inline ::Orthanc::DatabasePluginMessages::GetLastExportedResource_Request* TransactionRequest::release_get_last_exported_resource() {
  auto temp = unsafe_arena_release_get_last_exported_resource();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::GetLastExportedResource_Request* TransactionRequest::unsafe_arena_release_get_last_exported_resource() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionRequest.get_last_exported_resource)
  
  ::Orthanc::DatabasePluginMessages::GetLastExportedResource_Request* temp = get_last_exported_resource_;
  get_last_exported_resource_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::GetLastExportedResource_Request* TransactionRequest::_internal_mutable_get_last_exported_resource() {
  
  if (get_last_exported_resource_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetLastExportedResource_Request>(GetArena());
    get_last_exported_resource_ = p;
  }
  return get_last_exported_resource_;
}
inline ::Orthanc::DatabasePluginMessages::GetLastExportedResource_Request* TransactionRequest::mutable_get_last_exported_resource() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionRequest.get_last_exported_resource)
  return _internal_mutable_get_last_exported_resource();
}
inline void TransactionRequest::set_allocated_get_last_exported_resource(::Orthanc::DatabasePluginMessages::GetLastExportedResource_Request* get_last_exported_resource) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete get_last_exported_resource_;
  }
  if (get_last_exported_resource) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_last_exported_resource);
    if (message_arena != submessage_arena) {
      get_last_exported_resource = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_last_exported_resource, submessage_arena);
    }
    
  } else {
    
  }
  get_last_exported_resource_ = get_last_exported_resource;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.get_last_exported_resource)
}

// .Orthanc.DatabasePluginMessages.GetMainDicomTags.Request get_main_dicom_tags = 117;
inline bool TransactionRequest::_internal_has_get_main_dicom_tags() const {
  return this != internal_default_instance() && get_main_dicom_tags_ != nullptr;
}
inline bool TransactionRequest::has_get_main_dicom_tags() const {
  return _internal_has_get_main_dicom_tags();
}
inline void TransactionRequest::clear_get_main_dicom_tags() {
  if (GetArena() == nullptr && get_main_dicom_tags_ != nullptr) {
    delete get_main_dicom_tags_;
  }
  get_main_dicom_tags_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Request& TransactionRequest::_internal_get_main_dicom_tags() const {
  const ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Request* p = get_main_dicom_tags_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Request*>(
      &::Orthanc::DatabasePluginMessages::_GetMainDicomTags_Request_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Request& TransactionRequest::get_main_dicom_tags() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionRequest.get_main_dicom_tags)
  return _internal_get_main_dicom_tags();
}
inline void TransactionRequest::unsafe_arena_set_allocated_get_main_dicom_tags(
    ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Request* get_main_dicom_tags) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(get_main_dicom_tags_);
  }
  get_main_dicom_tags_ = get_main_dicom_tags;
  if (get_main_dicom_tags) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.get_main_dicom_tags)
}
inline ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Request* TransactionRequest::release_get_main_dicom_tags() {
  auto temp = unsafe_arena_release_get_main_dicom_tags();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Request* TransactionRequest::unsafe_arena_release_get_main_dicom_tags() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionRequest.get_main_dicom_tags)
  
  ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Request* temp = get_main_dicom_tags_;
  get_main_dicom_tags_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Request* TransactionRequest::_internal_mutable_get_main_dicom_tags() {
  
  if (get_main_dicom_tags_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetMainDicomTags_Request>(GetArena());
    get_main_dicom_tags_ = p;
  }
  return get_main_dicom_tags_;
}
inline ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Request* TransactionRequest::mutable_get_main_dicom_tags() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionRequest.get_main_dicom_tags)
  return _internal_mutable_get_main_dicom_tags();
}
inline void TransactionRequest::set_allocated_get_main_dicom_tags(::Orthanc::DatabasePluginMessages::GetMainDicomTags_Request* get_main_dicom_tags) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete get_main_dicom_tags_;
  }
  if (get_main_dicom_tags) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_main_dicom_tags);
    if (message_arena != submessage_arena) {
      get_main_dicom_tags = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_main_dicom_tags, submessage_arena);
    }
    
  } else {
    
  }
  get_main_dicom_tags_ = get_main_dicom_tags;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.get_main_dicom_tags)
}

// .Orthanc.DatabasePluginMessages.GetPublicId.Request get_public_id = 118;
inline bool TransactionRequest::_internal_has_get_public_id() const {
  return this != internal_default_instance() && get_public_id_ != nullptr;
}
inline bool TransactionRequest::has_get_public_id() const {
  return _internal_has_get_public_id();
}
inline void TransactionRequest::clear_get_public_id() {
  if (GetArena() == nullptr && get_public_id_ != nullptr) {
    delete get_public_id_;
  }
  get_public_id_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::GetPublicId_Request& TransactionRequest::_internal_get_public_id() const {
  const ::Orthanc::DatabasePluginMessages::GetPublicId_Request* p = get_public_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::GetPublicId_Request*>(
      &::Orthanc::DatabasePluginMessages::_GetPublicId_Request_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::GetPublicId_Request& TransactionRequest::get_public_id() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionRequest.get_public_id)
  return _internal_get_public_id();
}
inline void TransactionRequest::unsafe_arena_set_allocated_get_public_id(
    ::Orthanc::DatabasePluginMessages::GetPublicId_Request* get_public_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(get_public_id_);
  }
  get_public_id_ = get_public_id;
  if (get_public_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.get_public_id)
}
inline ::Orthanc::DatabasePluginMessages::GetPublicId_Request* TransactionRequest::release_get_public_id() {
  auto temp = unsafe_arena_release_get_public_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::GetPublicId_Request* TransactionRequest::unsafe_arena_release_get_public_id() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionRequest.get_public_id)
  
  ::Orthanc::DatabasePluginMessages::GetPublicId_Request* temp = get_public_id_;
  get_public_id_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::GetPublicId_Request* TransactionRequest::_internal_mutable_get_public_id() {
  
  if (get_public_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetPublicId_Request>(GetArena());
    get_public_id_ = p;
  }
  return get_public_id_;
}
inline ::Orthanc::DatabasePluginMessages::GetPublicId_Request* TransactionRequest::mutable_get_public_id() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionRequest.get_public_id)
  return _internal_mutable_get_public_id();
}
inline void TransactionRequest::set_allocated_get_public_id(::Orthanc::DatabasePluginMessages::GetPublicId_Request* get_public_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete get_public_id_;
  }
  if (get_public_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_public_id);
    if (message_arena != submessage_arena) {
      get_public_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_public_id, submessage_arena);
    }
    
  } else {
    
  }
  get_public_id_ = get_public_id;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.get_public_id)
}

// .Orthanc.DatabasePluginMessages.GetResourcesCount.Request get_resources_count = 119;
inline bool TransactionRequest::_internal_has_get_resources_count() const {
  return this != internal_default_instance() && get_resources_count_ != nullptr;
}
inline bool TransactionRequest::has_get_resources_count() const {
  return _internal_has_get_resources_count();
}
inline void TransactionRequest::clear_get_resources_count() {
  if (GetArena() == nullptr && get_resources_count_ != nullptr) {
    delete get_resources_count_;
  }
  get_resources_count_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::GetResourcesCount_Request& TransactionRequest::_internal_get_resources_count() const {
  const ::Orthanc::DatabasePluginMessages::GetResourcesCount_Request* p = get_resources_count_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::GetResourcesCount_Request*>(
      &::Orthanc::DatabasePluginMessages::_GetResourcesCount_Request_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::GetResourcesCount_Request& TransactionRequest::get_resources_count() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionRequest.get_resources_count)
  return _internal_get_resources_count();
}
inline void TransactionRequest::unsafe_arena_set_allocated_get_resources_count(
    ::Orthanc::DatabasePluginMessages::GetResourcesCount_Request* get_resources_count) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(get_resources_count_);
  }
  get_resources_count_ = get_resources_count;
  if (get_resources_count) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.get_resources_count)
}
inline ::Orthanc::DatabasePluginMessages::GetResourcesCount_Request* TransactionRequest::release_get_resources_count() {
  auto temp = unsafe_arena_release_get_resources_count();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::GetResourcesCount_Request* TransactionRequest::unsafe_arena_release_get_resources_count() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionRequest.get_resources_count)
  
  ::Orthanc::DatabasePluginMessages::GetResourcesCount_Request* temp = get_resources_count_;
  get_resources_count_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::GetResourcesCount_Request* TransactionRequest::_internal_mutable_get_resources_count() {
  
  if (get_resources_count_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetResourcesCount_Request>(GetArena());
    get_resources_count_ = p;
  }
  return get_resources_count_;
}
inline ::Orthanc::DatabasePluginMessages::GetResourcesCount_Request* TransactionRequest::mutable_get_resources_count() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionRequest.get_resources_count)
  return _internal_mutable_get_resources_count();
}
inline void TransactionRequest::set_allocated_get_resources_count(::Orthanc::DatabasePluginMessages::GetResourcesCount_Request* get_resources_count) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete get_resources_count_;
  }
  if (get_resources_count) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_resources_count);
    if (message_arena != submessage_arena) {
      get_resources_count = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_resources_count, submessage_arena);
    }
    
  } else {
    
  }
  get_resources_count_ = get_resources_count;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.get_resources_count)
}

// .Orthanc.DatabasePluginMessages.GetResourceType.Request get_resource_type = 120;
inline bool TransactionRequest::_internal_has_get_resource_type() const {
  return this != internal_default_instance() && get_resource_type_ != nullptr;
}
inline bool TransactionRequest::has_get_resource_type() const {
  return _internal_has_get_resource_type();
}
inline void TransactionRequest::clear_get_resource_type() {
  if (GetArena() == nullptr && get_resource_type_ != nullptr) {
    delete get_resource_type_;
  }
  get_resource_type_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::GetResourceType_Request& TransactionRequest::_internal_get_resource_type() const {
  const ::Orthanc::DatabasePluginMessages::GetResourceType_Request* p = get_resource_type_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::GetResourceType_Request*>(
      &::Orthanc::DatabasePluginMessages::_GetResourceType_Request_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::GetResourceType_Request& TransactionRequest::get_resource_type() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionRequest.get_resource_type)
  return _internal_get_resource_type();
}
inline void TransactionRequest::unsafe_arena_set_allocated_get_resource_type(
    ::Orthanc::DatabasePluginMessages::GetResourceType_Request* get_resource_type) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(get_resource_type_);
  }
  get_resource_type_ = get_resource_type;
  if (get_resource_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.get_resource_type)
}
inline ::Orthanc::DatabasePluginMessages::GetResourceType_Request* TransactionRequest::release_get_resource_type() {
  auto temp = unsafe_arena_release_get_resource_type();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::GetResourceType_Request* TransactionRequest::unsafe_arena_release_get_resource_type() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionRequest.get_resource_type)
  
  ::Orthanc::DatabasePluginMessages::GetResourceType_Request* temp = get_resource_type_;
  get_resource_type_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::GetResourceType_Request* TransactionRequest::_internal_mutable_get_resource_type() {
  
  if (get_resource_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetResourceType_Request>(GetArena());
    get_resource_type_ = p;
  }
  return get_resource_type_;
}
inline ::Orthanc::DatabasePluginMessages::GetResourceType_Request* TransactionRequest::mutable_get_resource_type() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionRequest.get_resource_type)
  return _internal_mutable_get_resource_type();
}
inline void TransactionRequest::set_allocated_get_resource_type(::Orthanc::DatabasePluginMessages::GetResourceType_Request* get_resource_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete get_resource_type_;
  }
  if (get_resource_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_resource_type);
    if (message_arena != submessage_arena) {
      get_resource_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_resource_type, submessage_arena);
    }
    
  } else {
    
  }
  get_resource_type_ = get_resource_type;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.get_resource_type)
}

// .Orthanc.DatabasePluginMessages.GetTotalCompressedSize.Request get_total_compressed_size = 121;
inline bool TransactionRequest::_internal_has_get_total_compressed_size() const {
  return this != internal_default_instance() && get_total_compressed_size_ != nullptr;
}
inline bool TransactionRequest::has_get_total_compressed_size() const {
  return _internal_has_get_total_compressed_size();
}
inline void TransactionRequest::clear_get_total_compressed_size() {
  if (GetArena() == nullptr && get_total_compressed_size_ != nullptr) {
    delete get_total_compressed_size_;
  }
  get_total_compressed_size_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::GetTotalCompressedSize_Request& TransactionRequest::_internal_get_total_compressed_size() const {
  const ::Orthanc::DatabasePluginMessages::GetTotalCompressedSize_Request* p = get_total_compressed_size_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::GetTotalCompressedSize_Request*>(
      &::Orthanc::DatabasePluginMessages::_GetTotalCompressedSize_Request_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::GetTotalCompressedSize_Request& TransactionRequest::get_total_compressed_size() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionRequest.get_total_compressed_size)
  return _internal_get_total_compressed_size();
}
inline void TransactionRequest::unsafe_arena_set_allocated_get_total_compressed_size(
    ::Orthanc::DatabasePluginMessages::GetTotalCompressedSize_Request* get_total_compressed_size) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(get_total_compressed_size_);
  }
  get_total_compressed_size_ = get_total_compressed_size;
  if (get_total_compressed_size) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.get_total_compressed_size)
}
inline ::Orthanc::DatabasePluginMessages::GetTotalCompressedSize_Request* TransactionRequest::release_get_total_compressed_size() {
  auto temp = unsafe_arena_release_get_total_compressed_size();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::GetTotalCompressedSize_Request* TransactionRequest::unsafe_arena_release_get_total_compressed_size() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionRequest.get_total_compressed_size)
  
  ::Orthanc::DatabasePluginMessages::GetTotalCompressedSize_Request* temp = get_total_compressed_size_;
  get_total_compressed_size_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::GetTotalCompressedSize_Request* TransactionRequest::_internal_mutable_get_total_compressed_size() {
  
  if (get_total_compressed_size_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetTotalCompressedSize_Request>(GetArena());
    get_total_compressed_size_ = p;
  }
  return get_total_compressed_size_;
}
inline ::Orthanc::DatabasePluginMessages::GetTotalCompressedSize_Request* TransactionRequest::mutable_get_total_compressed_size() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionRequest.get_total_compressed_size)
  return _internal_mutable_get_total_compressed_size();
}
inline void TransactionRequest::set_allocated_get_total_compressed_size(::Orthanc::DatabasePluginMessages::GetTotalCompressedSize_Request* get_total_compressed_size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete get_total_compressed_size_;
  }
  if (get_total_compressed_size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_total_compressed_size);
    if (message_arena != submessage_arena) {
      get_total_compressed_size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_total_compressed_size, submessage_arena);
    }
    
  } else {
    
  }
  get_total_compressed_size_ = get_total_compressed_size;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.get_total_compressed_size)
}

// .Orthanc.DatabasePluginMessages.GetTotalUncompressedSize.Request get_total_uncompressed_size = 122;
inline bool TransactionRequest::_internal_has_get_total_uncompressed_size() const {
  return this != internal_default_instance() && get_total_uncompressed_size_ != nullptr;
}
inline bool TransactionRequest::has_get_total_uncompressed_size() const {
  return _internal_has_get_total_uncompressed_size();
}
inline void TransactionRequest::clear_get_total_uncompressed_size() {
  if (GetArena() == nullptr && get_total_uncompressed_size_ != nullptr) {
    delete get_total_uncompressed_size_;
  }
  get_total_uncompressed_size_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize_Request& TransactionRequest::_internal_get_total_uncompressed_size() const {
  const ::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize_Request* p = get_total_uncompressed_size_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize_Request*>(
      &::Orthanc::DatabasePluginMessages::_GetTotalUncompressedSize_Request_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize_Request& TransactionRequest::get_total_uncompressed_size() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionRequest.get_total_uncompressed_size)
  return _internal_get_total_uncompressed_size();
}
inline void TransactionRequest::unsafe_arena_set_allocated_get_total_uncompressed_size(
    ::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize_Request* get_total_uncompressed_size) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(get_total_uncompressed_size_);
  }
  get_total_uncompressed_size_ = get_total_uncompressed_size;
  if (get_total_uncompressed_size) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.get_total_uncompressed_size)
}
inline ::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize_Request* TransactionRequest::release_get_total_uncompressed_size() {
  auto temp = unsafe_arena_release_get_total_uncompressed_size();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize_Request* TransactionRequest::unsafe_arena_release_get_total_uncompressed_size() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionRequest.get_total_uncompressed_size)
  
  ::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize_Request* temp = get_total_uncompressed_size_;
  get_total_uncompressed_size_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize_Request* TransactionRequest::_internal_mutable_get_total_uncompressed_size() {
  
  if (get_total_uncompressed_size_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize_Request>(GetArena());
    get_total_uncompressed_size_ = p;
  }
  return get_total_uncompressed_size_;
}
inline ::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize_Request* TransactionRequest::mutable_get_total_uncompressed_size() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionRequest.get_total_uncompressed_size)
  return _internal_mutable_get_total_uncompressed_size();
}
inline void TransactionRequest::set_allocated_get_total_uncompressed_size(::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize_Request* get_total_uncompressed_size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete get_total_uncompressed_size_;
  }
  if (get_total_uncompressed_size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_total_uncompressed_size);
    if (message_arena != submessage_arena) {
      get_total_uncompressed_size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_total_uncompressed_size, submessage_arena);
    }
    
  } else {
    
  }
  get_total_uncompressed_size_ = get_total_uncompressed_size;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.get_total_uncompressed_size)
}

// .Orthanc.DatabasePluginMessages.IsProtectedPatient.Request is_protected_patient = 123;
inline bool TransactionRequest::_internal_has_is_protected_patient() const {
  return this != internal_default_instance() && is_protected_patient_ != nullptr;
}
inline bool TransactionRequest::has_is_protected_patient() const {
  return _internal_has_is_protected_patient();
}
inline void TransactionRequest::clear_is_protected_patient() {
  if (GetArena() == nullptr && is_protected_patient_ != nullptr) {
    delete is_protected_patient_;
  }
  is_protected_patient_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::IsProtectedPatient_Request& TransactionRequest::_internal_is_protected_patient() const {
  const ::Orthanc::DatabasePluginMessages::IsProtectedPatient_Request* p = is_protected_patient_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::IsProtectedPatient_Request*>(
      &::Orthanc::DatabasePluginMessages::_IsProtectedPatient_Request_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::IsProtectedPatient_Request& TransactionRequest::is_protected_patient() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionRequest.is_protected_patient)
  return _internal_is_protected_patient();
}
inline void TransactionRequest::unsafe_arena_set_allocated_is_protected_patient(
    ::Orthanc::DatabasePluginMessages::IsProtectedPatient_Request* is_protected_patient) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(is_protected_patient_);
  }
  is_protected_patient_ = is_protected_patient;
  if (is_protected_patient) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.is_protected_patient)
}
inline ::Orthanc::DatabasePluginMessages::IsProtectedPatient_Request* TransactionRequest::release_is_protected_patient() {
  auto temp = unsafe_arena_release_is_protected_patient();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::IsProtectedPatient_Request* TransactionRequest::unsafe_arena_release_is_protected_patient() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionRequest.is_protected_patient)
  
  ::Orthanc::DatabasePluginMessages::IsProtectedPatient_Request* temp = is_protected_patient_;
  is_protected_patient_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::IsProtectedPatient_Request* TransactionRequest::_internal_mutable_is_protected_patient() {
  
  if (is_protected_patient_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::IsProtectedPatient_Request>(GetArena());
    is_protected_patient_ = p;
  }
  return is_protected_patient_;
}
inline ::Orthanc::DatabasePluginMessages::IsProtectedPatient_Request* TransactionRequest::mutable_is_protected_patient() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionRequest.is_protected_patient)
  return _internal_mutable_is_protected_patient();
}
inline void TransactionRequest::set_allocated_is_protected_patient(::Orthanc::DatabasePluginMessages::IsProtectedPatient_Request* is_protected_patient) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete is_protected_patient_;
  }
  if (is_protected_patient) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(is_protected_patient);
    if (message_arena != submessage_arena) {
      is_protected_patient = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, is_protected_patient, submessage_arena);
    }
    
  } else {
    
  }
  is_protected_patient_ = is_protected_patient;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.is_protected_patient)
}

// .Orthanc.DatabasePluginMessages.ListAvailableAttachments.Request list_available_attachments = 124;
inline bool TransactionRequest::_internal_has_list_available_attachments() const {
  return this != internal_default_instance() && list_available_attachments_ != nullptr;
}
inline bool TransactionRequest::has_list_available_attachments() const {
  return _internal_has_list_available_attachments();
}
inline void TransactionRequest::clear_list_available_attachments() {
  if (GetArena() == nullptr && list_available_attachments_ != nullptr) {
    delete list_available_attachments_;
  }
  list_available_attachments_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::ListAvailableAttachments_Request& TransactionRequest::_internal_list_available_attachments() const {
  const ::Orthanc::DatabasePluginMessages::ListAvailableAttachments_Request* p = list_available_attachments_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::ListAvailableAttachments_Request*>(
      &::Orthanc::DatabasePluginMessages::_ListAvailableAttachments_Request_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::ListAvailableAttachments_Request& TransactionRequest::list_available_attachments() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionRequest.list_available_attachments)
  return _internal_list_available_attachments();
}
inline void TransactionRequest::unsafe_arena_set_allocated_list_available_attachments(
    ::Orthanc::DatabasePluginMessages::ListAvailableAttachments_Request* list_available_attachments) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(list_available_attachments_);
  }
  list_available_attachments_ = list_available_attachments;
  if (list_available_attachments) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.list_available_attachments)
}
inline ::Orthanc::DatabasePluginMessages::ListAvailableAttachments_Request* TransactionRequest::release_list_available_attachments() {
  auto temp = unsafe_arena_release_list_available_attachments();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::ListAvailableAttachments_Request* TransactionRequest::unsafe_arena_release_list_available_attachments() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionRequest.list_available_attachments)
  
  ::Orthanc::DatabasePluginMessages::ListAvailableAttachments_Request* temp = list_available_attachments_;
  list_available_attachments_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::ListAvailableAttachments_Request* TransactionRequest::_internal_mutable_list_available_attachments() {
  
  if (list_available_attachments_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::ListAvailableAttachments_Request>(GetArena());
    list_available_attachments_ = p;
  }
  return list_available_attachments_;
}
inline ::Orthanc::DatabasePluginMessages::ListAvailableAttachments_Request* TransactionRequest::mutable_list_available_attachments() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionRequest.list_available_attachments)
  return _internal_mutable_list_available_attachments();
}
inline void TransactionRequest::set_allocated_list_available_attachments(::Orthanc::DatabasePluginMessages::ListAvailableAttachments_Request* list_available_attachments) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete list_available_attachments_;
  }
  if (list_available_attachments) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(list_available_attachments);
    if (message_arena != submessage_arena) {
      list_available_attachments = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list_available_attachments, submessage_arena);
    }
    
  } else {
    
  }
  list_available_attachments_ = list_available_attachments;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.list_available_attachments)
}

// .Orthanc.DatabasePluginMessages.LogChange.Request log_change = 125;
inline bool TransactionRequest::_internal_has_log_change() const {
  return this != internal_default_instance() && log_change_ != nullptr;
}
inline bool TransactionRequest::has_log_change() const {
  return _internal_has_log_change();
}
inline void TransactionRequest::clear_log_change() {
  if (GetArena() == nullptr && log_change_ != nullptr) {
    delete log_change_;
  }
  log_change_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::LogChange_Request& TransactionRequest::_internal_log_change() const {
  const ::Orthanc::DatabasePluginMessages::LogChange_Request* p = log_change_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::LogChange_Request*>(
      &::Orthanc::DatabasePluginMessages::_LogChange_Request_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::LogChange_Request& TransactionRequest::log_change() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionRequest.log_change)
  return _internal_log_change();
}
inline void TransactionRequest::unsafe_arena_set_allocated_log_change(
    ::Orthanc::DatabasePluginMessages::LogChange_Request* log_change) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(log_change_);
  }
  log_change_ = log_change;
  if (log_change) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.log_change)
}
inline ::Orthanc::DatabasePluginMessages::LogChange_Request* TransactionRequest::release_log_change() {
  auto temp = unsafe_arena_release_log_change();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::LogChange_Request* TransactionRequest::unsafe_arena_release_log_change() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionRequest.log_change)
  
  ::Orthanc::DatabasePluginMessages::LogChange_Request* temp = log_change_;
  log_change_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::LogChange_Request* TransactionRequest::_internal_mutable_log_change() {
  
  if (log_change_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::LogChange_Request>(GetArena());
    log_change_ = p;
  }
  return log_change_;
}
inline ::Orthanc::DatabasePluginMessages::LogChange_Request* TransactionRequest::mutable_log_change() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionRequest.log_change)
  return _internal_mutable_log_change();
}
inline void TransactionRequest::set_allocated_log_change(::Orthanc::DatabasePluginMessages::LogChange_Request* log_change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete log_change_;
  }
  if (log_change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(log_change);
    if (message_arena != submessage_arena) {
      log_change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, log_change, submessage_arena);
    }
    
  } else {
    
  }
  log_change_ = log_change;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.log_change)
}

// .Orthanc.DatabasePluginMessages.LogExportedResource.Request log_exported_resource = 126;
inline bool TransactionRequest::_internal_has_log_exported_resource() const {
  return this != internal_default_instance() && log_exported_resource_ != nullptr;
}
inline bool TransactionRequest::has_log_exported_resource() const {
  return _internal_has_log_exported_resource();
}
inline void TransactionRequest::clear_log_exported_resource() {
  if (GetArena() == nullptr && log_exported_resource_ != nullptr) {
    delete log_exported_resource_;
  }
  log_exported_resource_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::LogExportedResource_Request& TransactionRequest::_internal_log_exported_resource() const {
  const ::Orthanc::DatabasePluginMessages::LogExportedResource_Request* p = log_exported_resource_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::LogExportedResource_Request*>(
      &::Orthanc::DatabasePluginMessages::_LogExportedResource_Request_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::LogExportedResource_Request& TransactionRequest::log_exported_resource() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionRequest.log_exported_resource)
  return _internal_log_exported_resource();
}
inline void TransactionRequest::unsafe_arena_set_allocated_log_exported_resource(
    ::Orthanc::DatabasePluginMessages::LogExportedResource_Request* log_exported_resource) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(log_exported_resource_);
  }
  log_exported_resource_ = log_exported_resource;
  if (log_exported_resource) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.log_exported_resource)
}
inline ::Orthanc::DatabasePluginMessages::LogExportedResource_Request* TransactionRequest::release_log_exported_resource() {
  auto temp = unsafe_arena_release_log_exported_resource();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::LogExportedResource_Request* TransactionRequest::unsafe_arena_release_log_exported_resource() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionRequest.log_exported_resource)
  
  ::Orthanc::DatabasePluginMessages::LogExportedResource_Request* temp = log_exported_resource_;
  log_exported_resource_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::LogExportedResource_Request* TransactionRequest::_internal_mutable_log_exported_resource() {
  
  if (log_exported_resource_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::LogExportedResource_Request>(GetArena());
    log_exported_resource_ = p;
  }
  return log_exported_resource_;
}
inline ::Orthanc::DatabasePluginMessages::LogExportedResource_Request* TransactionRequest::mutable_log_exported_resource() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionRequest.log_exported_resource)
  return _internal_mutable_log_exported_resource();
}
inline void TransactionRequest::set_allocated_log_exported_resource(::Orthanc::DatabasePluginMessages::LogExportedResource_Request* log_exported_resource) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete log_exported_resource_;
  }
  if (log_exported_resource) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(log_exported_resource);
    if (message_arena != submessage_arena) {
      log_exported_resource = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, log_exported_resource, submessage_arena);
    }
    
  } else {
    
  }
  log_exported_resource_ = log_exported_resource;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.log_exported_resource)
}

// .Orthanc.DatabasePluginMessages.LookupAttachment.Request lookup_attachment = 127;
inline bool TransactionRequest::_internal_has_lookup_attachment() const {
  return this != internal_default_instance() && lookup_attachment_ != nullptr;
}
inline bool TransactionRequest::has_lookup_attachment() const {
  return _internal_has_lookup_attachment();
}
inline void TransactionRequest::clear_lookup_attachment() {
  if (GetArena() == nullptr && lookup_attachment_ != nullptr) {
    delete lookup_attachment_;
  }
  lookup_attachment_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::LookupAttachment_Request& TransactionRequest::_internal_lookup_attachment() const {
  const ::Orthanc::DatabasePluginMessages::LookupAttachment_Request* p = lookup_attachment_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::LookupAttachment_Request*>(
      &::Orthanc::DatabasePluginMessages::_LookupAttachment_Request_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::LookupAttachment_Request& TransactionRequest::lookup_attachment() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionRequest.lookup_attachment)
  return _internal_lookup_attachment();
}
inline void TransactionRequest::unsafe_arena_set_allocated_lookup_attachment(
    ::Orthanc::DatabasePluginMessages::LookupAttachment_Request* lookup_attachment) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lookup_attachment_);
  }
  lookup_attachment_ = lookup_attachment;
  if (lookup_attachment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.lookup_attachment)
}
inline ::Orthanc::DatabasePluginMessages::LookupAttachment_Request* TransactionRequest::release_lookup_attachment() {
  auto temp = unsafe_arena_release_lookup_attachment();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::LookupAttachment_Request* TransactionRequest::unsafe_arena_release_lookup_attachment() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionRequest.lookup_attachment)
  
  ::Orthanc::DatabasePluginMessages::LookupAttachment_Request* temp = lookup_attachment_;
  lookup_attachment_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::LookupAttachment_Request* TransactionRequest::_internal_mutable_lookup_attachment() {
  
  if (lookup_attachment_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::LookupAttachment_Request>(GetArena());
    lookup_attachment_ = p;
  }
  return lookup_attachment_;
}
inline ::Orthanc::DatabasePluginMessages::LookupAttachment_Request* TransactionRequest::mutable_lookup_attachment() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionRequest.lookup_attachment)
  return _internal_mutable_lookup_attachment();
}
inline void TransactionRequest::set_allocated_lookup_attachment(::Orthanc::DatabasePluginMessages::LookupAttachment_Request* lookup_attachment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete lookup_attachment_;
  }
  if (lookup_attachment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lookup_attachment);
    if (message_arena != submessage_arena) {
      lookup_attachment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lookup_attachment, submessage_arena);
    }
    
  } else {
    
  }
  lookup_attachment_ = lookup_attachment;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.lookup_attachment)
}

// .Orthanc.DatabasePluginMessages.LookupGlobalProperty.Request lookup_global_property = 128;
inline bool TransactionRequest::_internal_has_lookup_global_property() const {
  return this != internal_default_instance() && lookup_global_property_ != nullptr;
}
inline bool TransactionRequest::has_lookup_global_property() const {
  return _internal_has_lookup_global_property();
}
inline void TransactionRequest::clear_lookup_global_property() {
  if (GetArena() == nullptr && lookup_global_property_ != nullptr) {
    delete lookup_global_property_;
  }
  lookup_global_property_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::LookupGlobalProperty_Request& TransactionRequest::_internal_lookup_global_property() const {
  const ::Orthanc::DatabasePluginMessages::LookupGlobalProperty_Request* p = lookup_global_property_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::LookupGlobalProperty_Request*>(
      &::Orthanc::DatabasePluginMessages::_LookupGlobalProperty_Request_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::LookupGlobalProperty_Request& TransactionRequest::lookup_global_property() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionRequest.lookup_global_property)
  return _internal_lookup_global_property();
}
inline void TransactionRequest::unsafe_arena_set_allocated_lookup_global_property(
    ::Orthanc::DatabasePluginMessages::LookupGlobalProperty_Request* lookup_global_property) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lookup_global_property_);
  }
  lookup_global_property_ = lookup_global_property;
  if (lookup_global_property) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.lookup_global_property)
}
inline ::Orthanc::DatabasePluginMessages::LookupGlobalProperty_Request* TransactionRequest::release_lookup_global_property() {
  auto temp = unsafe_arena_release_lookup_global_property();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::LookupGlobalProperty_Request* TransactionRequest::unsafe_arena_release_lookup_global_property() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionRequest.lookup_global_property)
  
  ::Orthanc::DatabasePluginMessages::LookupGlobalProperty_Request* temp = lookup_global_property_;
  lookup_global_property_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::LookupGlobalProperty_Request* TransactionRequest::_internal_mutable_lookup_global_property() {
  
  if (lookup_global_property_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::LookupGlobalProperty_Request>(GetArena());
    lookup_global_property_ = p;
  }
  return lookup_global_property_;
}
inline ::Orthanc::DatabasePluginMessages::LookupGlobalProperty_Request* TransactionRequest::mutable_lookup_global_property() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionRequest.lookup_global_property)
  return _internal_mutable_lookup_global_property();
}
inline void TransactionRequest::set_allocated_lookup_global_property(::Orthanc::DatabasePluginMessages::LookupGlobalProperty_Request* lookup_global_property) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete lookup_global_property_;
  }
  if (lookup_global_property) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lookup_global_property);
    if (message_arena != submessage_arena) {
      lookup_global_property = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lookup_global_property, submessage_arena);
    }
    
  } else {
    
  }
  lookup_global_property_ = lookup_global_property;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.lookup_global_property)
}

// .Orthanc.DatabasePluginMessages.LookupMetadata.Request lookup_metadata = 129;
inline bool TransactionRequest::_internal_has_lookup_metadata() const {
  return this != internal_default_instance() && lookup_metadata_ != nullptr;
}
inline bool TransactionRequest::has_lookup_metadata() const {
  return _internal_has_lookup_metadata();
}
inline void TransactionRequest::clear_lookup_metadata() {
  if (GetArena() == nullptr && lookup_metadata_ != nullptr) {
    delete lookup_metadata_;
  }
  lookup_metadata_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::LookupMetadata_Request& TransactionRequest::_internal_lookup_metadata() const {
  const ::Orthanc::DatabasePluginMessages::LookupMetadata_Request* p = lookup_metadata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::LookupMetadata_Request*>(
      &::Orthanc::DatabasePluginMessages::_LookupMetadata_Request_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::LookupMetadata_Request& TransactionRequest::lookup_metadata() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionRequest.lookup_metadata)
  return _internal_lookup_metadata();
}
inline void TransactionRequest::unsafe_arena_set_allocated_lookup_metadata(
    ::Orthanc::DatabasePluginMessages::LookupMetadata_Request* lookup_metadata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lookup_metadata_);
  }
  lookup_metadata_ = lookup_metadata;
  if (lookup_metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.lookup_metadata)
}
inline ::Orthanc::DatabasePluginMessages::LookupMetadata_Request* TransactionRequest::release_lookup_metadata() {
  auto temp = unsafe_arena_release_lookup_metadata();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::LookupMetadata_Request* TransactionRequest::unsafe_arena_release_lookup_metadata() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionRequest.lookup_metadata)
  
  ::Orthanc::DatabasePluginMessages::LookupMetadata_Request* temp = lookup_metadata_;
  lookup_metadata_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::LookupMetadata_Request* TransactionRequest::_internal_mutable_lookup_metadata() {
  
  if (lookup_metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::LookupMetadata_Request>(GetArena());
    lookup_metadata_ = p;
  }
  return lookup_metadata_;
}
inline ::Orthanc::DatabasePluginMessages::LookupMetadata_Request* TransactionRequest::mutable_lookup_metadata() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionRequest.lookup_metadata)
  return _internal_mutable_lookup_metadata();
}
inline void TransactionRequest::set_allocated_lookup_metadata(::Orthanc::DatabasePluginMessages::LookupMetadata_Request* lookup_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete lookup_metadata_;
  }
  if (lookup_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lookup_metadata);
    if (message_arena != submessage_arena) {
      lookup_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lookup_metadata, submessage_arena);
    }
    
  } else {
    
  }
  lookup_metadata_ = lookup_metadata;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.lookup_metadata)
}

// .Orthanc.DatabasePluginMessages.LookupParent.Request lookup_parent = 130;
inline bool TransactionRequest::_internal_has_lookup_parent() const {
  return this != internal_default_instance() && lookup_parent_ != nullptr;
}
inline bool TransactionRequest::has_lookup_parent() const {
  return _internal_has_lookup_parent();
}
inline void TransactionRequest::clear_lookup_parent() {
  if (GetArena() == nullptr && lookup_parent_ != nullptr) {
    delete lookup_parent_;
  }
  lookup_parent_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::LookupParent_Request& TransactionRequest::_internal_lookup_parent() const {
  const ::Orthanc::DatabasePluginMessages::LookupParent_Request* p = lookup_parent_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::LookupParent_Request*>(
      &::Orthanc::DatabasePluginMessages::_LookupParent_Request_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::LookupParent_Request& TransactionRequest::lookup_parent() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionRequest.lookup_parent)
  return _internal_lookup_parent();
}
inline void TransactionRequest::unsafe_arena_set_allocated_lookup_parent(
    ::Orthanc::DatabasePluginMessages::LookupParent_Request* lookup_parent) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lookup_parent_);
  }
  lookup_parent_ = lookup_parent;
  if (lookup_parent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.lookup_parent)
}
inline ::Orthanc::DatabasePluginMessages::LookupParent_Request* TransactionRequest::release_lookup_parent() {
  auto temp = unsafe_arena_release_lookup_parent();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::LookupParent_Request* TransactionRequest::unsafe_arena_release_lookup_parent() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionRequest.lookup_parent)
  
  ::Orthanc::DatabasePluginMessages::LookupParent_Request* temp = lookup_parent_;
  lookup_parent_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::LookupParent_Request* TransactionRequest::_internal_mutable_lookup_parent() {
  
  if (lookup_parent_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::LookupParent_Request>(GetArena());
    lookup_parent_ = p;
  }
  return lookup_parent_;
}
inline ::Orthanc::DatabasePluginMessages::LookupParent_Request* TransactionRequest::mutable_lookup_parent() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionRequest.lookup_parent)
  return _internal_mutable_lookup_parent();
}
inline void TransactionRequest::set_allocated_lookup_parent(::Orthanc::DatabasePluginMessages::LookupParent_Request* lookup_parent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete lookup_parent_;
  }
  if (lookup_parent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lookup_parent);
    if (message_arena != submessage_arena) {
      lookup_parent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lookup_parent, submessage_arena);
    }
    
  } else {
    
  }
  lookup_parent_ = lookup_parent;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.lookup_parent)
}

// .Orthanc.DatabasePluginMessages.LookupResource.Request lookup_resource = 131;
inline bool TransactionRequest::_internal_has_lookup_resource() const {
  return this != internal_default_instance() && lookup_resource_ != nullptr;
}
inline bool TransactionRequest::has_lookup_resource() const {
  return _internal_has_lookup_resource();
}
inline void TransactionRequest::clear_lookup_resource() {
  if (GetArena() == nullptr && lookup_resource_ != nullptr) {
    delete lookup_resource_;
  }
  lookup_resource_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::LookupResource_Request& TransactionRequest::_internal_lookup_resource() const {
  const ::Orthanc::DatabasePluginMessages::LookupResource_Request* p = lookup_resource_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::LookupResource_Request*>(
      &::Orthanc::DatabasePluginMessages::_LookupResource_Request_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::LookupResource_Request& TransactionRequest::lookup_resource() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionRequest.lookup_resource)
  return _internal_lookup_resource();
}
inline void TransactionRequest::unsafe_arena_set_allocated_lookup_resource(
    ::Orthanc::DatabasePluginMessages::LookupResource_Request* lookup_resource) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lookup_resource_);
  }
  lookup_resource_ = lookup_resource;
  if (lookup_resource) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.lookup_resource)
}
inline ::Orthanc::DatabasePluginMessages::LookupResource_Request* TransactionRequest::release_lookup_resource() {
  auto temp = unsafe_arena_release_lookup_resource();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::LookupResource_Request* TransactionRequest::unsafe_arena_release_lookup_resource() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionRequest.lookup_resource)
  
  ::Orthanc::DatabasePluginMessages::LookupResource_Request* temp = lookup_resource_;
  lookup_resource_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::LookupResource_Request* TransactionRequest::_internal_mutable_lookup_resource() {
  
  if (lookup_resource_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::LookupResource_Request>(GetArena());
    lookup_resource_ = p;
  }
  return lookup_resource_;
}
inline ::Orthanc::DatabasePluginMessages::LookupResource_Request* TransactionRequest::mutable_lookup_resource() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionRequest.lookup_resource)
  return _internal_mutable_lookup_resource();
}
inline void TransactionRequest::set_allocated_lookup_resource(::Orthanc::DatabasePluginMessages::LookupResource_Request* lookup_resource) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete lookup_resource_;
  }
  if (lookup_resource) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lookup_resource);
    if (message_arena != submessage_arena) {
      lookup_resource = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lookup_resource, submessage_arena);
    }
    
  } else {
    
  }
  lookup_resource_ = lookup_resource;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.lookup_resource)
}

// .Orthanc.DatabasePluginMessages.SelectPatientToRecycle.Request select_patient_to_recycle = 132;
inline bool TransactionRequest::_internal_has_select_patient_to_recycle() const {
  return this != internal_default_instance() && select_patient_to_recycle_ != nullptr;
}
inline bool TransactionRequest::has_select_patient_to_recycle() const {
  return _internal_has_select_patient_to_recycle();
}
inline void TransactionRequest::clear_select_patient_to_recycle() {
  if (GetArena() == nullptr && select_patient_to_recycle_ != nullptr) {
    delete select_patient_to_recycle_;
  }
  select_patient_to_recycle_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::SelectPatientToRecycle_Request& TransactionRequest::_internal_select_patient_to_recycle() const {
  const ::Orthanc::DatabasePluginMessages::SelectPatientToRecycle_Request* p = select_patient_to_recycle_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::SelectPatientToRecycle_Request*>(
      &::Orthanc::DatabasePluginMessages::_SelectPatientToRecycle_Request_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::SelectPatientToRecycle_Request& TransactionRequest::select_patient_to_recycle() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionRequest.select_patient_to_recycle)
  return _internal_select_patient_to_recycle();
}
inline void TransactionRequest::unsafe_arena_set_allocated_select_patient_to_recycle(
    ::Orthanc::DatabasePluginMessages::SelectPatientToRecycle_Request* select_patient_to_recycle) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(select_patient_to_recycle_);
  }
  select_patient_to_recycle_ = select_patient_to_recycle;
  if (select_patient_to_recycle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.select_patient_to_recycle)
}
inline ::Orthanc::DatabasePluginMessages::SelectPatientToRecycle_Request* TransactionRequest::release_select_patient_to_recycle() {
  auto temp = unsafe_arena_release_select_patient_to_recycle();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::SelectPatientToRecycle_Request* TransactionRequest::unsafe_arena_release_select_patient_to_recycle() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionRequest.select_patient_to_recycle)
  
  ::Orthanc::DatabasePluginMessages::SelectPatientToRecycle_Request* temp = select_patient_to_recycle_;
  select_patient_to_recycle_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::SelectPatientToRecycle_Request* TransactionRequest::_internal_mutable_select_patient_to_recycle() {
  
  if (select_patient_to_recycle_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::SelectPatientToRecycle_Request>(GetArena());
    select_patient_to_recycle_ = p;
  }
  return select_patient_to_recycle_;
}
inline ::Orthanc::DatabasePluginMessages::SelectPatientToRecycle_Request* TransactionRequest::mutable_select_patient_to_recycle() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionRequest.select_patient_to_recycle)
  return _internal_mutable_select_patient_to_recycle();
}
inline void TransactionRequest::set_allocated_select_patient_to_recycle(::Orthanc::DatabasePluginMessages::SelectPatientToRecycle_Request* select_patient_to_recycle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete select_patient_to_recycle_;
  }
  if (select_patient_to_recycle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(select_patient_to_recycle);
    if (message_arena != submessage_arena) {
      select_patient_to_recycle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, select_patient_to_recycle, submessage_arena);
    }
    
  } else {
    
  }
  select_patient_to_recycle_ = select_patient_to_recycle;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.select_patient_to_recycle)
}

// .Orthanc.DatabasePluginMessages.SelectPatientToRecycleWithAvoid.Request select_patient_to_recycle_with_avoid = 133;
inline bool TransactionRequest::_internal_has_select_patient_to_recycle_with_avoid() const {
  return this != internal_default_instance() && select_patient_to_recycle_with_avoid_ != nullptr;
}
inline bool TransactionRequest::has_select_patient_to_recycle_with_avoid() const {
  return _internal_has_select_patient_to_recycle_with_avoid();
}
inline void TransactionRequest::clear_select_patient_to_recycle_with_avoid() {
  if (GetArena() == nullptr && select_patient_to_recycle_with_avoid_ != nullptr) {
    delete select_patient_to_recycle_with_avoid_;
  }
  select_patient_to_recycle_with_avoid_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid_Request& TransactionRequest::_internal_select_patient_to_recycle_with_avoid() const {
  const ::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid_Request* p = select_patient_to_recycle_with_avoid_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid_Request*>(
      &::Orthanc::DatabasePluginMessages::_SelectPatientToRecycleWithAvoid_Request_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid_Request& TransactionRequest::select_patient_to_recycle_with_avoid() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionRequest.select_patient_to_recycle_with_avoid)
  return _internal_select_patient_to_recycle_with_avoid();
}
inline void TransactionRequest::unsafe_arena_set_allocated_select_patient_to_recycle_with_avoid(
    ::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid_Request* select_patient_to_recycle_with_avoid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(select_patient_to_recycle_with_avoid_);
  }
  select_patient_to_recycle_with_avoid_ = select_patient_to_recycle_with_avoid;
  if (select_patient_to_recycle_with_avoid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.select_patient_to_recycle_with_avoid)
}
inline ::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid_Request* TransactionRequest::release_select_patient_to_recycle_with_avoid() {
  auto temp = unsafe_arena_release_select_patient_to_recycle_with_avoid();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid_Request* TransactionRequest::unsafe_arena_release_select_patient_to_recycle_with_avoid() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionRequest.select_patient_to_recycle_with_avoid)
  
  ::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid_Request* temp = select_patient_to_recycle_with_avoid_;
  select_patient_to_recycle_with_avoid_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid_Request* TransactionRequest::_internal_mutable_select_patient_to_recycle_with_avoid() {
  
  if (select_patient_to_recycle_with_avoid_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid_Request>(GetArena());
    select_patient_to_recycle_with_avoid_ = p;
  }
  return select_patient_to_recycle_with_avoid_;
}
inline ::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid_Request* TransactionRequest::mutable_select_patient_to_recycle_with_avoid() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionRequest.select_patient_to_recycle_with_avoid)
  return _internal_mutable_select_patient_to_recycle_with_avoid();
}
inline void TransactionRequest::set_allocated_select_patient_to_recycle_with_avoid(::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid_Request* select_patient_to_recycle_with_avoid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete select_patient_to_recycle_with_avoid_;
  }
  if (select_patient_to_recycle_with_avoid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(select_patient_to_recycle_with_avoid);
    if (message_arena != submessage_arena) {
      select_patient_to_recycle_with_avoid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, select_patient_to_recycle_with_avoid, submessage_arena);
    }
    
  } else {
    
  }
  select_patient_to_recycle_with_avoid_ = select_patient_to_recycle_with_avoid;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.select_patient_to_recycle_with_avoid)
}

// .Orthanc.DatabasePluginMessages.SetGlobalProperty.Request set_global_property = 134;
inline bool TransactionRequest::_internal_has_set_global_property() const {
  return this != internal_default_instance() && set_global_property_ != nullptr;
}
inline bool TransactionRequest::has_set_global_property() const {
  return _internal_has_set_global_property();
}
inline void TransactionRequest::clear_set_global_property() {
  if (GetArena() == nullptr && set_global_property_ != nullptr) {
    delete set_global_property_;
  }
  set_global_property_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::SetGlobalProperty_Request& TransactionRequest::_internal_set_global_property() const {
  const ::Orthanc::DatabasePluginMessages::SetGlobalProperty_Request* p = set_global_property_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::SetGlobalProperty_Request*>(
      &::Orthanc::DatabasePluginMessages::_SetGlobalProperty_Request_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::SetGlobalProperty_Request& TransactionRequest::set_global_property() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionRequest.set_global_property)
  return _internal_set_global_property();
}
inline void TransactionRequest::unsafe_arena_set_allocated_set_global_property(
    ::Orthanc::DatabasePluginMessages::SetGlobalProperty_Request* set_global_property) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(set_global_property_);
  }
  set_global_property_ = set_global_property;
  if (set_global_property) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.set_global_property)
}
inline ::Orthanc::DatabasePluginMessages::SetGlobalProperty_Request* TransactionRequest::release_set_global_property() {
  auto temp = unsafe_arena_release_set_global_property();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::SetGlobalProperty_Request* TransactionRequest::unsafe_arena_release_set_global_property() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionRequest.set_global_property)
  
  ::Orthanc::DatabasePluginMessages::SetGlobalProperty_Request* temp = set_global_property_;
  set_global_property_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::SetGlobalProperty_Request* TransactionRequest::_internal_mutable_set_global_property() {
  
  if (set_global_property_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::SetGlobalProperty_Request>(GetArena());
    set_global_property_ = p;
  }
  return set_global_property_;
}
inline ::Orthanc::DatabasePluginMessages::SetGlobalProperty_Request* TransactionRequest::mutable_set_global_property() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionRequest.set_global_property)
  return _internal_mutable_set_global_property();
}
inline void TransactionRequest::set_allocated_set_global_property(::Orthanc::DatabasePluginMessages::SetGlobalProperty_Request* set_global_property) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete set_global_property_;
  }
  if (set_global_property) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(set_global_property);
    if (message_arena != submessage_arena) {
      set_global_property = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_global_property, submessage_arena);
    }
    
  } else {
    
  }
  set_global_property_ = set_global_property;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.set_global_property)
}

// .Orthanc.DatabasePluginMessages.ClearMainDicomTags.Request clear_main_dicom_tags = 135;
inline bool TransactionRequest::_internal_has_clear_main_dicom_tags() const {
  return this != internal_default_instance() && clear_main_dicom_tags_ != nullptr;
}
inline bool TransactionRequest::has_clear_main_dicom_tags() const {
  return _internal_has_clear_main_dicom_tags();
}
inline void TransactionRequest::clear_clear_main_dicom_tags() {
  if (GetArena() == nullptr && clear_main_dicom_tags_ != nullptr) {
    delete clear_main_dicom_tags_;
  }
  clear_main_dicom_tags_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::ClearMainDicomTags_Request& TransactionRequest::_internal_clear_main_dicom_tags() const {
  const ::Orthanc::DatabasePluginMessages::ClearMainDicomTags_Request* p = clear_main_dicom_tags_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::ClearMainDicomTags_Request*>(
      &::Orthanc::DatabasePluginMessages::_ClearMainDicomTags_Request_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::ClearMainDicomTags_Request& TransactionRequest::clear_main_dicom_tags() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionRequest.clear_main_dicom_tags)
  return _internal_clear_main_dicom_tags();
}
inline void TransactionRequest::unsafe_arena_set_allocated_clear_main_dicom_tags(
    ::Orthanc::DatabasePluginMessages::ClearMainDicomTags_Request* clear_main_dicom_tags) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(clear_main_dicom_tags_);
  }
  clear_main_dicom_tags_ = clear_main_dicom_tags;
  if (clear_main_dicom_tags) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.clear_main_dicom_tags)
}
inline ::Orthanc::DatabasePluginMessages::ClearMainDicomTags_Request* TransactionRequest::release_clear_main_dicom_tags() {
  auto temp = unsafe_arena_release_clear_main_dicom_tags();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::ClearMainDicomTags_Request* TransactionRequest::unsafe_arena_release_clear_main_dicom_tags() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionRequest.clear_main_dicom_tags)
  
  ::Orthanc::DatabasePluginMessages::ClearMainDicomTags_Request* temp = clear_main_dicom_tags_;
  clear_main_dicom_tags_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::ClearMainDicomTags_Request* TransactionRequest::_internal_mutable_clear_main_dicom_tags() {
  
  if (clear_main_dicom_tags_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::ClearMainDicomTags_Request>(GetArena());
    clear_main_dicom_tags_ = p;
  }
  return clear_main_dicom_tags_;
}
inline ::Orthanc::DatabasePluginMessages::ClearMainDicomTags_Request* TransactionRequest::mutable_clear_main_dicom_tags() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionRequest.clear_main_dicom_tags)
  return _internal_mutable_clear_main_dicom_tags();
}
inline void TransactionRequest::set_allocated_clear_main_dicom_tags(::Orthanc::DatabasePluginMessages::ClearMainDicomTags_Request* clear_main_dicom_tags) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete clear_main_dicom_tags_;
  }
  if (clear_main_dicom_tags) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(clear_main_dicom_tags);
    if (message_arena != submessage_arena) {
      clear_main_dicom_tags = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clear_main_dicom_tags, submessage_arena);
    }
    
  } else {
    
  }
  clear_main_dicom_tags_ = clear_main_dicom_tags;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.clear_main_dicom_tags)
}

// .Orthanc.DatabasePluginMessages.SetMetadata.Request set_metadata = 136;
inline bool TransactionRequest::_internal_has_set_metadata() const {
  return this != internal_default_instance() && set_metadata_ != nullptr;
}
inline bool TransactionRequest::has_set_metadata() const {
  return _internal_has_set_metadata();
}
inline void TransactionRequest::clear_set_metadata() {
  if (GetArena() == nullptr && set_metadata_ != nullptr) {
    delete set_metadata_;
  }
  set_metadata_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::SetMetadata_Request& TransactionRequest::_internal_set_metadata() const {
  const ::Orthanc::DatabasePluginMessages::SetMetadata_Request* p = set_metadata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::SetMetadata_Request*>(
      &::Orthanc::DatabasePluginMessages::_SetMetadata_Request_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::SetMetadata_Request& TransactionRequest::set_metadata() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionRequest.set_metadata)
  return _internal_set_metadata();
}
inline void TransactionRequest::unsafe_arena_set_allocated_set_metadata(
    ::Orthanc::DatabasePluginMessages::SetMetadata_Request* set_metadata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(set_metadata_);
  }
  set_metadata_ = set_metadata;
  if (set_metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.set_metadata)
}
inline ::Orthanc::DatabasePluginMessages::SetMetadata_Request* TransactionRequest::release_set_metadata() {
  auto temp = unsafe_arena_release_set_metadata();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::SetMetadata_Request* TransactionRequest::unsafe_arena_release_set_metadata() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionRequest.set_metadata)
  
  ::Orthanc::DatabasePluginMessages::SetMetadata_Request* temp = set_metadata_;
  set_metadata_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::SetMetadata_Request* TransactionRequest::_internal_mutable_set_metadata() {
  
  if (set_metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::SetMetadata_Request>(GetArena());
    set_metadata_ = p;
  }
  return set_metadata_;
}
inline ::Orthanc::DatabasePluginMessages::SetMetadata_Request* TransactionRequest::mutable_set_metadata() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionRequest.set_metadata)
  return _internal_mutable_set_metadata();
}
inline void TransactionRequest::set_allocated_set_metadata(::Orthanc::DatabasePluginMessages::SetMetadata_Request* set_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete set_metadata_;
  }
  if (set_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(set_metadata);
    if (message_arena != submessage_arena) {
      set_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_metadata, submessage_arena);
    }
    
  } else {
    
  }
  set_metadata_ = set_metadata;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.set_metadata)
}

// .Orthanc.DatabasePluginMessages.SetProtectedPatient.Request set_protected_patient = 137;
inline bool TransactionRequest::_internal_has_set_protected_patient() const {
  return this != internal_default_instance() && set_protected_patient_ != nullptr;
}
inline bool TransactionRequest::has_set_protected_patient() const {
  return _internal_has_set_protected_patient();
}
inline void TransactionRequest::clear_set_protected_patient() {
  if (GetArena() == nullptr && set_protected_patient_ != nullptr) {
    delete set_protected_patient_;
  }
  set_protected_patient_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::SetProtectedPatient_Request& TransactionRequest::_internal_set_protected_patient() const {
  const ::Orthanc::DatabasePluginMessages::SetProtectedPatient_Request* p = set_protected_patient_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::SetProtectedPatient_Request*>(
      &::Orthanc::DatabasePluginMessages::_SetProtectedPatient_Request_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::SetProtectedPatient_Request& TransactionRequest::set_protected_patient() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionRequest.set_protected_patient)
  return _internal_set_protected_patient();
}
inline void TransactionRequest::unsafe_arena_set_allocated_set_protected_patient(
    ::Orthanc::DatabasePluginMessages::SetProtectedPatient_Request* set_protected_patient) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(set_protected_patient_);
  }
  set_protected_patient_ = set_protected_patient;
  if (set_protected_patient) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.set_protected_patient)
}
inline ::Orthanc::DatabasePluginMessages::SetProtectedPatient_Request* TransactionRequest::release_set_protected_patient() {
  auto temp = unsafe_arena_release_set_protected_patient();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::SetProtectedPatient_Request* TransactionRequest::unsafe_arena_release_set_protected_patient() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionRequest.set_protected_patient)
  
  ::Orthanc::DatabasePluginMessages::SetProtectedPatient_Request* temp = set_protected_patient_;
  set_protected_patient_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::SetProtectedPatient_Request* TransactionRequest::_internal_mutable_set_protected_patient() {
  
  if (set_protected_patient_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::SetProtectedPatient_Request>(GetArena());
    set_protected_patient_ = p;
  }
  return set_protected_patient_;
}
inline ::Orthanc::DatabasePluginMessages::SetProtectedPatient_Request* TransactionRequest::mutable_set_protected_patient() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionRequest.set_protected_patient)
  return _internal_mutable_set_protected_patient();
}
inline void TransactionRequest::set_allocated_set_protected_patient(::Orthanc::DatabasePluginMessages::SetProtectedPatient_Request* set_protected_patient) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete set_protected_patient_;
  }
  if (set_protected_patient) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(set_protected_patient);
    if (message_arena != submessage_arena) {
      set_protected_patient = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_protected_patient, submessage_arena);
    }
    
  } else {
    
  }
  set_protected_patient_ = set_protected_patient;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.set_protected_patient)
}

// .Orthanc.DatabasePluginMessages.IsDiskSizeAbove.Request is_disk_size_above = 138;
inline bool TransactionRequest::_internal_has_is_disk_size_above() const {
  return this != internal_default_instance() && is_disk_size_above_ != nullptr;
}
inline bool TransactionRequest::has_is_disk_size_above() const {
  return _internal_has_is_disk_size_above();
}
inline void TransactionRequest::clear_is_disk_size_above() {
  if (GetArena() == nullptr && is_disk_size_above_ != nullptr) {
    delete is_disk_size_above_;
  }
  is_disk_size_above_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::IsDiskSizeAbove_Request& TransactionRequest::_internal_is_disk_size_above() const {
  const ::Orthanc::DatabasePluginMessages::IsDiskSizeAbove_Request* p = is_disk_size_above_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::IsDiskSizeAbove_Request*>(
      &::Orthanc::DatabasePluginMessages::_IsDiskSizeAbove_Request_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::IsDiskSizeAbove_Request& TransactionRequest::is_disk_size_above() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionRequest.is_disk_size_above)
  return _internal_is_disk_size_above();
}
inline void TransactionRequest::unsafe_arena_set_allocated_is_disk_size_above(
    ::Orthanc::DatabasePluginMessages::IsDiskSizeAbove_Request* is_disk_size_above) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(is_disk_size_above_);
  }
  is_disk_size_above_ = is_disk_size_above;
  if (is_disk_size_above) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.is_disk_size_above)
}
inline ::Orthanc::DatabasePluginMessages::IsDiskSizeAbove_Request* TransactionRequest::release_is_disk_size_above() {
  auto temp = unsafe_arena_release_is_disk_size_above();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::IsDiskSizeAbove_Request* TransactionRequest::unsafe_arena_release_is_disk_size_above() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionRequest.is_disk_size_above)
  
  ::Orthanc::DatabasePluginMessages::IsDiskSizeAbove_Request* temp = is_disk_size_above_;
  is_disk_size_above_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::IsDiskSizeAbove_Request* TransactionRequest::_internal_mutable_is_disk_size_above() {
  
  if (is_disk_size_above_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::IsDiskSizeAbove_Request>(GetArena());
    is_disk_size_above_ = p;
  }
  return is_disk_size_above_;
}
inline ::Orthanc::DatabasePluginMessages::IsDiskSizeAbove_Request* TransactionRequest::mutable_is_disk_size_above() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionRequest.is_disk_size_above)
  return _internal_mutable_is_disk_size_above();
}
inline void TransactionRequest::set_allocated_is_disk_size_above(::Orthanc::DatabasePluginMessages::IsDiskSizeAbove_Request* is_disk_size_above) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete is_disk_size_above_;
  }
  if (is_disk_size_above) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(is_disk_size_above);
    if (message_arena != submessage_arena) {
      is_disk_size_above = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, is_disk_size_above, submessage_arena);
    }
    
  } else {
    
  }
  is_disk_size_above_ = is_disk_size_above;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.is_disk_size_above)
}

// .Orthanc.DatabasePluginMessages.LookupResources.Request lookup_resources = 139;
inline bool TransactionRequest::_internal_has_lookup_resources() const {
  return this != internal_default_instance() && lookup_resources_ != nullptr;
}
inline bool TransactionRequest::has_lookup_resources() const {
  return _internal_has_lookup_resources();
}
inline void TransactionRequest::clear_lookup_resources() {
  if (GetArena() == nullptr && lookup_resources_ != nullptr) {
    delete lookup_resources_;
  }
  lookup_resources_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::LookupResources_Request& TransactionRequest::_internal_lookup_resources() const {
  const ::Orthanc::DatabasePluginMessages::LookupResources_Request* p = lookup_resources_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::LookupResources_Request*>(
      &::Orthanc::DatabasePluginMessages::_LookupResources_Request_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::LookupResources_Request& TransactionRequest::lookup_resources() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionRequest.lookup_resources)
  return _internal_lookup_resources();
}
inline void TransactionRequest::unsafe_arena_set_allocated_lookup_resources(
    ::Orthanc::DatabasePluginMessages::LookupResources_Request* lookup_resources) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lookup_resources_);
  }
  lookup_resources_ = lookup_resources;
  if (lookup_resources) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.lookup_resources)
}
inline ::Orthanc::DatabasePluginMessages::LookupResources_Request* TransactionRequest::release_lookup_resources() {
  auto temp = unsafe_arena_release_lookup_resources();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::LookupResources_Request* TransactionRequest::unsafe_arena_release_lookup_resources() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionRequest.lookup_resources)
  
  ::Orthanc::DatabasePluginMessages::LookupResources_Request* temp = lookup_resources_;
  lookup_resources_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::LookupResources_Request* TransactionRequest::_internal_mutable_lookup_resources() {
  
  if (lookup_resources_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::LookupResources_Request>(GetArena());
    lookup_resources_ = p;
  }
  return lookup_resources_;
}
inline ::Orthanc::DatabasePluginMessages::LookupResources_Request* TransactionRequest::mutable_lookup_resources() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionRequest.lookup_resources)
  return _internal_mutable_lookup_resources();
}
inline void TransactionRequest::set_allocated_lookup_resources(::Orthanc::DatabasePluginMessages::LookupResources_Request* lookup_resources) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete lookup_resources_;
  }
  if (lookup_resources) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lookup_resources);
    if (message_arena != submessage_arena) {
      lookup_resources = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lookup_resources, submessage_arena);
    }
    
  } else {
    
  }
  lookup_resources_ = lookup_resources;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.lookup_resources)
}

// .Orthanc.DatabasePluginMessages.CreateInstance.Request create_instance = 140;
inline bool TransactionRequest::_internal_has_create_instance() const {
  return this != internal_default_instance() && create_instance_ != nullptr;
}
inline bool TransactionRequest::has_create_instance() const {
  return _internal_has_create_instance();
}
inline void TransactionRequest::clear_create_instance() {
  if (GetArena() == nullptr && create_instance_ != nullptr) {
    delete create_instance_;
  }
  create_instance_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::CreateInstance_Request& TransactionRequest::_internal_create_instance() const {
  const ::Orthanc::DatabasePluginMessages::CreateInstance_Request* p = create_instance_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::CreateInstance_Request*>(
      &::Orthanc::DatabasePluginMessages::_CreateInstance_Request_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::CreateInstance_Request& TransactionRequest::create_instance() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionRequest.create_instance)
  return _internal_create_instance();
}
inline void TransactionRequest::unsafe_arena_set_allocated_create_instance(
    ::Orthanc::DatabasePluginMessages::CreateInstance_Request* create_instance) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_instance_);
  }
  create_instance_ = create_instance;
  if (create_instance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.create_instance)
}
inline ::Orthanc::DatabasePluginMessages::CreateInstance_Request* TransactionRequest::release_create_instance() {
  auto temp = unsafe_arena_release_create_instance();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::CreateInstance_Request* TransactionRequest::unsafe_arena_release_create_instance() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionRequest.create_instance)
  
  ::Orthanc::DatabasePluginMessages::CreateInstance_Request* temp = create_instance_;
  create_instance_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::CreateInstance_Request* TransactionRequest::_internal_mutable_create_instance() {
  
  if (create_instance_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::CreateInstance_Request>(GetArena());
    create_instance_ = p;
  }
  return create_instance_;
}
inline ::Orthanc::DatabasePluginMessages::CreateInstance_Request* TransactionRequest::mutable_create_instance() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionRequest.create_instance)
  return _internal_mutable_create_instance();
}
inline void TransactionRequest::set_allocated_create_instance(::Orthanc::DatabasePluginMessages::CreateInstance_Request* create_instance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete create_instance_;
  }
  if (create_instance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(create_instance);
    if (message_arena != submessage_arena) {
      create_instance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_instance, submessage_arena);
    }
    
  } else {
    
  }
  create_instance_ = create_instance;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.create_instance)
}

// .Orthanc.DatabasePluginMessages.SetResourcesContent.Request set_resources_content = 141;
inline bool TransactionRequest::_internal_has_set_resources_content() const {
  return this != internal_default_instance() && set_resources_content_ != nullptr;
}
inline bool TransactionRequest::has_set_resources_content() const {
  return _internal_has_set_resources_content();
}
inline void TransactionRequest::clear_set_resources_content() {
  if (GetArena() == nullptr && set_resources_content_ != nullptr) {
    delete set_resources_content_;
  }
  set_resources_content_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::SetResourcesContent_Request& TransactionRequest::_internal_set_resources_content() const {
  const ::Orthanc::DatabasePluginMessages::SetResourcesContent_Request* p = set_resources_content_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::SetResourcesContent_Request*>(
      &::Orthanc::DatabasePluginMessages::_SetResourcesContent_Request_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::SetResourcesContent_Request& TransactionRequest::set_resources_content() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionRequest.set_resources_content)
  return _internal_set_resources_content();
}
inline void TransactionRequest::unsafe_arena_set_allocated_set_resources_content(
    ::Orthanc::DatabasePluginMessages::SetResourcesContent_Request* set_resources_content) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(set_resources_content_);
  }
  set_resources_content_ = set_resources_content;
  if (set_resources_content) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.set_resources_content)
}
inline ::Orthanc::DatabasePluginMessages::SetResourcesContent_Request* TransactionRequest::release_set_resources_content() {
  auto temp = unsafe_arena_release_set_resources_content();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::SetResourcesContent_Request* TransactionRequest::unsafe_arena_release_set_resources_content() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionRequest.set_resources_content)
  
  ::Orthanc::DatabasePluginMessages::SetResourcesContent_Request* temp = set_resources_content_;
  set_resources_content_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::SetResourcesContent_Request* TransactionRequest::_internal_mutable_set_resources_content() {
  
  if (set_resources_content_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::SetResourcesContent_Request>(GetArena());
    set_resources_content_ = p;
  }
  return set_resources_content_;
}
inline ::Orthanc::DatabasePluginMessages::SetResourcesContent_Request* TransactionRequest::mutable_set_resources_content() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionRequest.set_resources_content)
  return _internal_mutable_set_resources_content();
}
inline void TransactionRequest::set_allocated_set_resources_content(::Orthanc::DatabasePluginMessages::SetResourcesContent_Request* set_resources_content) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete set_resources_content_;
  }
  if (set_resources_content) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(set_resources_content);
    if (message_arena != submessage_arena) {
      set_resources_content = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_resources_content, submessage_arena);
    }
    
  } else {
    
  }
  set_resources_content_ = set_resources_content;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.set_resources_content)
}

// .Orthanc.DatabasePluginMessages.GetChildrenMetadata.Request get_children_metadata = 142;
inline bool TransactionRequest::_internal_has_get_children_metadata() const {
  return this != internal_default_instance() && get_children_metadata_ != nullptr;
}
inline bool TransactionRequest::has_get_children_metadata() const {
  return _internal_has_get_children_metadata();
}
inline void TransactionRequest::clear_get_children_metadata() {
  if (GetArena() == nullptr && get_children_metadata_ != nullptr) {
    delete get_children_metadata_;
  }
  get_children_metadata_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::GetChildrenMetadata_Request& TransactionRequest::_internal_get_children_metadata() const {
  const ::Orthanc::DatabasePluginMessages::GetChildrenMetadata_Request* p = get_children_metadata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::GetChildrenMetadata_Request*>(
      &::Orthanc::DatabasePluginMessages::_GetChildrenMetadata_Request_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::GetChildrenMetadata_Request& TransactionRequest::get_children_metadata() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionRequest.get_children_metadata)
  return _internal_get_children_metadata();
}
inline void TransactionRequest::unsafe_arena_set_allocated_get_children_metadata(
    ::Orthanc::DatabasePluginMessages::GetChildrenMetadata_Request* get_children_metadata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(get_children_metadata_);
  }
  get_children_metadata_ = get_children_metadata;
  if (get_children_metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.get_children_metadata)
}
inline ::Orthanc::DatabasePluginMessages::GetChildrenMetadata_Request* TransactionRequest::release_get_children_metadata() {
  auto temp = unsafe_arena_release_get_children_metadata();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::GetChildrenMetadata_Request* TransactionRequest::unsafe_arena_release_get_children_metadata() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionRequest.get_children_metadata)
  
  ::Orthanc::DatabasePluginMessages::GetChildrenMetadata_Request* temp = get_children_metadata_;
  get_children_metadata_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::GetChildrenMetadata_Request* TransactionRequest::_internal_mutable_get_children_metadata() {
  
  if (get_children_metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetChildrenMetadata_Request>(GetArena());
    get_children_metadata_ = p;
  }
  return get_children_metadata_;
}
inline ::Orthanc::DatabasePluginMessages::GetChildrenMetadata_Request* TransactionRequest::mutable_get_children_metadata() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionRequest.get_children_metadata)
  return _internal_mutable_get_children_metadata();
}
inline void TransactionRequest::set_allocated_get_children_metadata(::Orthanc::DatabasePluginMessages::GetChildrenMetadata_Request* get_children_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete get_children_metadata_;
  }
  if (get_children_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_children_metadata);
    if (message_arena != submessage_arena) {
      get_children_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_children_metadata, submessage_arena);
    }
    
  } else {
    
  }
  get_children_metadata_ = get_children_metadata;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.get_children_metadata)
}

// .Orthanc.DatabasePluginMessages.GetLastChangeIndex.Request get_last_change_index = 143;
inline bool TransactionRequest::_internal_has_get_last_change_index() const {
  return this != internal_default_instance() && get_last_change_index_ != nullptr;
}
inline bool TransactionRequest::has_get_last_change_index() const {
  return _internal_has_get_last_change_index();
}
inline void TransactionRequest::clear_get_last_change_index() {
  if (GetArena() == nullptr && get_last_change_index_ != nullptr) {
    delete get_last_change_index_;
  }
  get_last_change_index_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::GetLastChangeIndex_Request& TransactionRequest::_internal_get_last_change_index() const {
  const ::Orthanc::DatabasePluginMessages::GetLastChangeIndex_Request* p = get_last_change_index_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::GetLastChangeIndex_Request*>(
      &::Orthanc::DatabasePluginMessages::_GetLastChangeIndex_Request_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::GetLastChangeIndex_Request& TransactionRequest::get_last_change_index() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionRequest.get_last_change_index)
  return _internal_get_last_change_index();
}
inline void TransactionRequest::unsafe_arena_set_allocated_get_last_change_index(
    ::Orthanc::DatabasePluginMessages::GetLastChangeIndex_Request* get_last_change_index) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(get_last_change_index_);
  }
  get_last_change_index_ = get_last_change_index;
  if (get_last_change_index) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.get_last_change_index)
}
inline ::Orthanc::DatabasePluginMessages::GetLastChangeIndex_Request* TransactionRequest::release_get_last_change_index() {
  auto temp = unsafe_arena_release_get_last_change_index();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::GetLastChangeIndex_Request* TransactionRequest::unsafe_arena_release_get_last_change_index() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionRequest.get_last_change_index)
  
  ::Orthanc::DatabasePluginMessages::GetLastChangeIndex_Request* temp = get_last_change_index_;
  get_last_change_index_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::GetLastChangeIndex_Request* TransactionRequest::_internal_mutable_get_last_change_index() {
  
  if (get_last_change_index_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetLastChangeIndex_Request>(GetArena());
    get_last_change_index_ = p;
  }
  return get_last_change_index_;
}
inline ::Orthanc::DatabasePluginMessages::GetLastChangeIndex_Request* TransactionRequest::mutable_get_last_change_index() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionRequest.get_last_change_index)
  return _internal_mutable_get_last_change_index();
}
inline void TransactionRequest::set_allocated_get_last_change_index(::Orthanc::DatabasePluginMessages::GetLastChangeIndex_Request* get_last_change_index) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete get_last_change_index_;
  }
  if (get_last_change_index) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_last_change_index);
    if (message_arena != submessage_arena) {
      get_last_change_index = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_last_change_index, submessage_arena);
    }
    
  } else {
    
  }
  get_last_change_index_ = get_last_change_index;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.get_last_change_index)
}

// .Orthanc.DatabasePluginMessages.LookupResourceAndParent.Request lookup_resource_and_parent = 144;
inline bool TransactionRequest::_internal_has_lookup_resource_and_parent() const {
  return this != internal_default_instance() && lookup_resource_and_parent_ != nullptr;
}
inline bool TransactionRequest::has_lookup_resource_and_parent() const {
  return _internal_has_lookup_resource_and_parent();
}
inline void TransactionRequest::clear_lookup_resource_and_parent() {
  if (GetArena() == nullptr && lookup_resource_and_parent_ != nullptr) {
    delete lookup_resource_and_parent_;
  }
  lookup_resource_and_parent_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::LookupResourceAndParent_Request& TransactionRequest::_internal_lookup_resource_and_parent() const {
  const ::Orthanc::DatabasePluginMessages::LookupResourceAndParent_Request* p = lookup_resource_and_parent_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::LookupResourceAndParent_Request*>(
      &::Orthanc::DatabasePluginMessages::_LookupResourceAndParent_Request_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::LookupResourceAndParent_Request& TransactionRequest::lookup_resource_and_parent() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionRequest.lookup_resource_and_parent)
  return _internal_lookup_resource_and_parent();
}
inline void TransactionRequest::unsafe_arena_set_allocated_lookup_resource_and_parent(
    ::Orthanc::DatabasePluginMessages::LookupResourceAndParent_Request* lookup_resource_and_parent) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lookup_resource_and_parent_);
  }
  lookup_resource_and_parent_ = lookup_resource_and_parent;
  if (lookup_resource_and_parent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.lookup_resource_and_parent)
}
inline ::Orthanc::DatabasePluginMessages::LookupResourceAndParent_Request* TransactionRequest::release_lookup_resource_and_parent() {
  auto temp = unsafe_arena_release_lookup_resource_and_parent();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::LookupResourceAndParent_Request* TransactionRequest::unsafe_arena_release_lookup_resource_and_parent() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionRequest.lookup_resource_and_parent)
  
  ::Orthanc::DatabasePluginMessages::LookupResourceAndParent_Request* temp = lookup_resource_and_parent_;
  lookup_resource_and_parent_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::LookupResourceAndParent_Request* TransactionRequest::_internal_mutable_lookup_resource_and_parent() {
  
  if (lookup_resource_and_parent_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::LookupResourceAndParent_Request>(GetArena());
    lookup_resource_and_parent_ = p;
  }
  return lookup_resource_and_parent_;
}
inline ::Orthanc::DatabasePluginMessages::LookupResourceAndParent_Request* TransactionRequest::mutable_lookup_resource_and_parent() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionRequest.lookup_resource_and_parent)
  return _internal_mutable_lookup_resource_and_parent();
}
inline void TransactionRequest::set_allocated_lookup_resource_and_parent(::Orthanc::DatabasePluginMessages::LookupResourceAndParent_Request* lookup_resource_and_parent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete lookup_resource_and_parent_;
  }
  if (lookup_resource_and_parent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lookup_resource_and_parent);
    if (message_arena != submessage_arena) {
      lookup_resource_and_parent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lookup_resource_and_parent, submessage_arena);
    }
    
  } else {
    
  }
  lookup_resource_and_parent_ = lookup_resource_and_parent;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.lookup_resource_and_parent)
}

// .Orthanc.DatabasePluginMessages.AddLabel.Request add_label = 145;
inline bool TransactionRequest::_internal_has_add_label() const {
  return this != internal_default_instance() && add_label_ != nullptr;
}
inline bool TransactionRequest::has_add_label() const {
  return _internal_has_add_label();
}
inline void TransactionRequest::clear_add_label() {
  if (GetArena() == nullptr && add_label_ != nullptr) {
    delete add_label_;
  }
  add_label_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::AddLabel_Request& TransactionRequest::_internal_add_label() const {
  const ::Orthanc::DatabasePluginMessages::AddLabel_Request* p = add_label_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::AddLabel_Request*>(
      &::Orthanc::DatabasePluginMessages::_AddLabel_Request_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::AddLabel_Request& TransactionRequest::add_label() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionRequest.add_label)
  return _internal_add_label();
}
inline void TransactionRequest::unsafe_arena_set_allocated_add_label(
    ::Orthanc::DatabasePluginMessages::AddLabel_Request* add_label) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(add_label_);
  }
  add_label_ = add_label;
  if (add_label) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.add_label)
}
inline ::Orthanc::DatabasePluginMessages::AddLabel_Request* TransactionRequest::release_add_label() {
  auto temp = unsafe_arena_release_add_label();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::AddLabel_Request* TransactionRequest::unsafe_arena_release_add_label() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionRequest.add_label)
  
  ::Orthanc::DatabasePluginMessages::AddLabel_Request* temp = add_label_;
  add_label_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::AddLabel_Request* TransactionRequest::_internal_mutable_add_label() {
  
  if (add_label_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::AddLabel_Request>(GetArena());
    add_label_ = p;
  }
  return add_label_;
}
inline ::Orthanc::DatabasePluginMessages::AddLabel_Request* TransactionRequest::mutable_add_label() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionRequest.add_label)
  return _internal_mutable_add_label();
}
inline void TransactionRequest::set_allocated_add_label(::Orthanc::DatabasePluginMessages::AddLabel_Request* add_label) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete add_label_;
  }
  if (add_label) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(add_label);
    if (message_arena != submessage_arena) {
      add_label = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, add_label, submessage_arena);
    }
    
  } else {
    
  }
  add_label_ = add_label;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.add_label)
}

// .Orthanc.DatabasePluginMessages.RemoveLabel.Request remove_label = 146;
inline bool TransactionRequest::_internal_has_remove_label() const {
  return this != internal_default_instance() && remove_label_ != nullptr;
}
inline bool TransactionRequest::has_remove_label() const {
  return _internal_has_remove_label();
}
inline void TransactionRequest::clear_remove_label() {
  if (GetArena() == nullptr && remove_label_ != nullptr) {
    delete remove_label_;
  }
  remove_label_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::RemoveLabel_Request& TransactionRequest::_internal_remove_label() const {
  const ::Orthanc::DatabasePluginMessages::RemoveLabel_Request* p = remove_label_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::RemoveLabel_Request*>(
      &::Orthanc::DatabasePluginMessages::_RemoveLabel_Request_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::RemoveLabel_Request& TransactionRequest::remove_label() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionRequest.remove_label)
  return _internal_remove_label();
}
inline void TransactionRequest::unsafe_arena_set_allocated_remove_label(
    ::Orthanc::DatabasePluginMessages::RemoveLabel_Request* remove_label) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(remove_label_);
  }
  remove_label_ = remove_label;
  if (remove_label) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.remove_label)
}
inline ::Orthanc::DatabasePluginMessages::RemoveLabel_Request* TransactionRequest::release_remove_label() {
  auto temp = unsafe_arena_release_remove_label();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::RemoveLabel_Request* TransactionRequest::unsafe_arena_release_remove_label() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionRequest.remove_label)
  
  ::Orthanc::DatabasePluginMessages::RemoveLabel_Request* temp = remove_label_;
  remove_label_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::RemoveLabel_Request* TransactionRequest::_internal_mutable_remove_label() {
  
  if (remove_label_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::RemoveLabel_Request>(GetArena());
    remove_label_ = p;
  }
  return remove_label_;
}
inline ::Orthanc::DatabasePluginMessages::RemoveLabel_Request* TransactionRequest::mutable_remove_label() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionRequest.remove_label)
  return _internal_mutable_remove_label();
}
inline void TransactionRequest::set_allocated_remove_label(::Orthanc::DatabasePluginMessages::RemoveLabel_Request* remove_label) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete remove_label_;
  }
  if (remove_label) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(remove_label);
    if (message_arena != submessage_arena) {
      remove_label = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, remove_label, submessage_arena);
    }
    
  } else {
    
  }
  remove_label_ = remove_label;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.remove_label)
}

// .Orthanc.DatabasePluginMessages.ListLabels.Request list_labels = 147;
inline bool TransactionRequest::_internal_has_list_labels() const {
  return this != internal_default_instance() && list_labels_ != nullptr;
}
inline bool TransactionRequest::has_list_labels() const {
  return _internal_has_list_labels();
}
inline void TransactionRequest::clear_list_labels() {
  if (GetArena() == nullptr && list_labels_ != nullptr) {
    delete list_labels_;
  }
  list_labels_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::ListLabels_Request& TransactionRequest::_internal_list_labels() const {
  const ::Orthanc::DatabasePluginMessages::ListLabels_Request* p = list_labels_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::ListLabels_Request*>(
      &::Orthanc::DatabasePluginMessages::_ListLabels_Request_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::ListLabels_Request& TransactionRequest::list_labels() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionRequest.list_labels)
  return _internal_list_labels();
}
inline void TransactionRequest::unsafe_arena_set_allocated_list_labels(
    ::Orthanc::DatabasePluginMessages::ListLabels_Request* list_labels) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(list_labels_);
  }
  list_labels_ = list_labels;
  if (list_labels) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.list_labels)
}
inline ::Orthanc::DatabasePluginMessages::ListLabels_Request* TransactionRequest::release_list_labels() {
  auto temp = unsafe_arena_release_list_labels();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::ListLabels_Request* TransactionRequest::unsafe_arena_release_list_labels() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionRequest.list_labels)
  
  ::Orthanc::DatabasePluginMessages::ListLabels_Request* temp = list_labels_;
  list_labels_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::ListLabels_Request* TransactionRequest::_internal_mutable_list_labels() {
  
  if (list_labels_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::ListLabels_Request>(GetArena());
    list_labels_ = p;
  }
  return list_labels_;
}
inline ::Orthanc::DatabasePluginMessages::ListLabels_Request* TransactionRequest::mutable_list_labels() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionRequest.list_labels)
  return _internal_mutable_list_labels();
}
inline void TransactionRequest::set_allocated_list_labels(::Orthanc::DatabasePluginMessages::ListLabels_Request* list_labels) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete list_labels_;
  }
  if (list_labels) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(list_labels);
    if (message_arena != submessage_arena) {
      list_labels = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list_labels, submessage_arena);
    }
    
  } else {
    
  }
  list_labels_ = list_labels;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.list_labels)
}

// .Orthanc.DatabasePluginMessages.IncrementGlobalProperty.Request increment_global_property = 148;
inline bool TransactionRequest::_internal_has_increment_global_property() const {
  return this != internal_default_instance() && increment_global_property_ != nullptr;
}
inline bool TransactionRequest::has_increment_global_property() const {
  return _internal_has_increment_global_property();
}
inline void TransactionRequest::clear_increment_global_property() {
  if (GetArena() == nullptr && increment_global_property_ != nullptr) {
    delete increment_global_property_;
  }
  increment_global_property_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::IncrementGlobalProperty_Request& TransactionRequest::_internal_increment_global_property() const {
  const ::Orthanc::DatabasePluginMessages::IncrementGlobalProperty_Request* p = increment_global_property_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::IncrementGlobalProperty_Request*>(
      &::Orthanc::DatabasePluginMessages::_IncrementGlobalProperty_Request_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::IncrementGlobalProperty_Request& TransactionRequest::increment_global_property() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionRequest.increment_global_property)
  return _internal_increment_global_property();
}
inline void TransactionRequest::unsafe_arena_set_allocated_increment_global_property(
    ::Orthanc::DatabasePluginMessages::IncrementGlobalProperty_Request* increment_global_property) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(increment_global_property_);
  }
  increment_global_property_ = increment_global_property;
  if (increment_global_property) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.increment_global_property)
}
inline ::Orthanc::DatabasePluginMessages::IncrementGlobalProperty_Request* TransactionRequest::release_increment_global_property() {
  auto temp = unsafe_arena_release_increment_global_property();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::IncrementGlobalProperty_Request* TransactionRequest::unsafe_arena_release_increment_global_property() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionRequest.increment_global_property)
  
  ::Orthanc::DatabasePluginMessages::IncrementGlobalProperty_Request* temp = increment_global_property_;
  increment_global_property_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::IncrementGlobalProperty_Request* TransactionRequest::_internal_mutable_increment_global_property() {
  
  if (increment_global_property_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::IncrementGlobalProperty_Request>(GetArena());
    increment_global_property_ = p;
  }
  return increment_global_property_;
}
inline ::Orthanc::DatabasePluginMessages::IncrementGlobalProperty_Request* TransactionRequest::mutable_increment_global_property() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionRequest.increment_global_property)
  return _internal_mutable_increment_global_property();
}
inline void TransactionRequest::set_allocated_increment_global_property(::Orthanc::DatabasePluginMessages::IncrementGlobalProperty_Request* increment_global_property) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete increment_global_property_;
  }
  if (increment_global_property) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(increment_global_property);
    if (message_arena != submessage_arena) {
      increment_global_property = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, increment_global_property, submessage_arena);
    }
    
  } else {
    
  }
  increment_global_property_ = increment_global_property;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.increment_global_property)
}

// .Orthanc.DatabasePluginMessages.UpdateAndGetStatistics.Request update_and_get_statistics = 149;
inline bool TransactionRequest::_internal_has_update_and_get_statistics() const {
  return this != internal_default_instance() && update_and_get_statistics_ != nullptr;
}
inline bool TransactionRequest::has_update_and_get_statistics() const {
  return _internal_has_update_and_get_statistics();
}
inline void TransactionRequest::clear_update_and_get_statistics() {
  if (GetArena() == nullptr && update_and_get_statistics_ != nullptr) {
    delete update_and_get_statistics_;
  }
  update_and_get_statistics_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics_Request& TransactionRequest::_internal_update_and_get_statistics() const {
  const ::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics_Request* p = update_and_get_statistics_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics_Request*>(
      &::Orthanc::DatabasePluginMessages::_UpdateAndGetStatistics_Request_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics_Request& TransactionRequest::update_and_get_statistics() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionRequest.update_and_get_statistics)
  return _internal_update_and_get_statistics();
}
inline void TransactionRequest::unsafe_arena_set_allocated_update_and_get_statistics(
    ::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics_Request* update_and_get_statistics) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_and_get_statistics_);
  }
  update_and_get_statistics_ = update_and_get_statistics;
  if (update_and_get_statistics) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.update_and_get_statistics)
}
inline ::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics_Request* TransactionRequest::release_update_and_get_statistics() {
  auto temp = unsafe_arena_release_update_and_get_statistics();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics_Request* TransactionRequest::unsafe_arena_release_update_and_get_statistics() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionRequest.update_and_get_statistics)
  
  ::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics_Request* temp = update_and_get_statistics_;
  update_and_get_statistics_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics_Request* TransactionRequest::_internal_mutable_update_and_get_statistics() {
  
  if (update_and_get_statistics_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics_Request>(GetArena());
    update_and_get_statistics_ = p;
  }
  return update_and_get_statistics_;
}
inline ::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics_Request* TransactionRequest::mutable_update_and_get_statistics() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionRequest.update_and_get_statistics)
  return _internal_mutable_update_and_get_statistics();
}
inline void TransactionRequest::set_allocated_update_and_get_statistics(::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics_Request* update_and_get_statistics) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete update_and_get_statistics_;
  }
  if (update_and_get_statistics) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(update_and_get_statistics);
    if (message_arena != submessage_arena) {
      update_and_get_statistics = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_and_get_statistics, submessage_arena);
    }
    
  } else {
    
  }
  update_and_get_statistics_ = update_and_get_statistics;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionRequest.update_and_get_statistics)
}

// -------------------------------------------------------------------

// TransactionResponse

// .Orthanc.DatabasePluginMessages.Rollback.Response rollback = 100;
inline bool TransactionResponse::_internal_has_rollback() const {
  return this != internal_default_instance() && rollback_ != nullptr;
}
inline bool TransactionResponse::has_rollback() const {
  return _internal_has_rollback();
}
inline void TransactionResponse::clear_rollback() {
  if (GetArena() == nullptr && rollback_ != nullptr) {
    delete rollback_;
  }
  rollback_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::Rollback_Response& TransactionResponse::_internal_rollback() const {
  const ::Orthanc::DatabasePluginMessages::Rollback_Response* p = rollback_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::Rollback_Response*>(
      &::Orthanc::DatabasePluginMessages::_Rollback_Response_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::Rollback_Response& TransactionResponse::rollback() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionResponse.rollback)
  return _internal_rollback();
}
inline void TransactionResponse::unsafe_arena_set_allocated_rollback(
    ::Orthanc::DatabasePluginMessages::Rollback_Response* rollback) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rollback_);
  }
  rollback_ = rollback;
  if (rollback) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.rollback)
}
inline ::Orthanc::DatabasePluginMessages::Rollback_Response* TransactionResponse::release_rollback() {
  auto temp = unsafe_arena_release_rollback();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::Rollback_Response* TransactionResponse::unsafe_arena_release_rollback() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionResponse.rollback)
  
  ::Orthanc::DatabasePluginMessages::Rollback_Response* temp = rollback_;
  rollback_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::Rollback_Response* TransactionResponse::_internal_mutable_rollback() {
  
  if (rollback_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::Rollback_Response>(GetArena());
    rollback_ = p;
  }
  return rollback_;
}
inline ::Orthanc::DatabasePluginMessages::Rollback_Response* TransactionResponse::mutable_rollback() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionResponse.rollback)
  return _internal_mutable_rollback();
}
inline void TransactionResponse::set_allocated_rollback(::Orthanc::DatabasePluginMessages::Rollback_Response* rollback) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete rollback_;
  }
  if (rollback) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rollback);
    if (message_arena != submessage_arena) {
      rollback = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rollback, submessage_arena);
    }
    
  } else {
    
  }
  rollback_ = rollback;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.rollback)
}

// .Orthanc.DatabasePluginMessages.Commit.Response commit = 101;
inline bool TransactionResponse::_internal_has_commit() const {
  return this != internal_default_instance() && commit_ != nullptr;
}
inline bool TransactionResponse::has_commit() const {
  return _internal_has_commit();
}
inline void TransactionResponse::clear_commit() {
  if (GetArena() == nullptr && commit_ != nullptr) {
    delete commit_;
  }
  commit_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::Commit_Response& TransactionResponse::_internal_commit() const {
  const ::Orthanc::DatabasePluginMessages::Commit_Response* p = commit_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::Commit_Response*>(
      &::Orthanc::DatabasePluginMessages::_Commit_Response_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::Commit_Response& TransactionResponse::commit() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionResponse.commit)
  return _internal_commit();
}
inline void TransactionResponse::unsafe_arena_set_allocated_commit(
    ::Orthanc::DatabasePluginMessages::Commit_Response* commit) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(commit_);
  }
  commit_ = commit;
  if (commit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.commit)
}
inline ::Orthanc::DatabasePluginMessages::Commit_Response* TransactionResponse::release_commit() {
  auto temp = unsafe_arena_release_commit();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::Commit_Response* TransactionResponse::unsafe_arena_release_commit() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionResponse.commit)
  
  ::Orthanc::DatabasePluginMessages::Commit_Response* temp = commit_;
  commit_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::Commit_Response* TransactionResponse::_internal_mutable_commit() {
  
  if (commit_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::Commit_Response>(GetArena());
    commit_ = p;
  }
  return commit_;
}
inline ::Orthanc::DatabasePluginMessages::Commit_Response* TransactionResponse::mutable_commit() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionResponse.commit)
  return _internal_mutable_commit();
}
inline void TransactionResponse::set_allocated_commit(::Orthanc::DatabasePluginMessages::Commit_Response* commit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete commit_;
  }
  if (commit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(commit);
    if (message_arena != submessage_arena) {
      commit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, commit, submessage_arena);
    }
    
  } else {
    
  }
  commit_ = commit;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.commit)
}

// .Orthanc.DatabasePluginMessages.AddAttachment.Response add_attachment = 102;
inline bool TransactionResponse::_internal_has_add_attachment() const {
  return this != internal_default_instance() && add_attachment_ != nullptr;
}
inline bool TransactionResponse::has_add_attachment() const {
  return _internal_has_add_attachment();
}
inline void TransactionResponse::clear_add_attachment() {
  if (GetArena() == nullptr && add_attachment_ != nullptr) {
    delete add_attachment_;
  }
  add_attachment_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::AddAttachment_Response& TransactionResponse::_internal_add_attachment() const {
  const ::Orthanc::DatabasePluginMessages::AddAttachment_Response* p = add_attachment_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::AddAttachment_Response*>(
      &::Orthanc::DatabasePluginMessages::_AddAttachment_Response_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::AddAttachment_Response& TransactionResponse::add_attachment() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionResponse.add_attachment)
  return _internal_add_attachment();
}
inline void TransactionResponse::unsafe_arena_set_allocated_add_attachment(
    ::Orthanc::DatabasePluginMessages::AddAttachment_Response* add_attachment) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(add_attachment_);
  }
  add_attachment_ = add_attachment;
  if (add_attachment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.add_attachment)
}
inline ::Orthanc::DatabasePluginMessages::AddAttachment_Response* TransactionResponse::release_add_attachment() {
  auto temp = unsafe_arena_release_add_attachment();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::AddAttachment_Response* TransactionResponse::unsafe_arena_release_add_attachment() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionResponse.add_attachment)
  
  ::Orthanc::DatabasePluginMessages::AddAttachment_Response* temp = add_attachment_;
  add_attachment_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::AddAttachment_Response* TransactionResponse::_internal_mutable_add_attachment() {
  
  if (add_attachment_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::AddAttachment_Response>(GetArena());
    add_attachment_ = p;
  }
  return add_attachment_;
}
inline ::Orthanc::DatabasePluginMessages::AddAttachment_Response* TransactionResponse::mutable_add_attachment() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionResponse.add_attachment)
  return _internal_mutable_add_attachment();
}
inline void TransactionResponse::set_allocated_add_attachment(::Orthanc::DatabasePluginMessages::AddAttachment_Response* add_attachment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete add_attachment_;
  }
  if (add_attachment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(add_attachment);
    if (message_arena != submessage_arena) {
      add_attachment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, add_attachment, submessage_arena);
    }
    
  } else {
    
  }
  add_attachment_ = add_attachment;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.add_attachment)
}

// .Orthanc.DatabasePluginMessages.ClearChanges.Response clear_changes = 103;
inline bool TransactionResponse::_internal_has_clear_changes() const {
  return this != internal_default_instance() && clear_changes_ != nullptr;
}
inline bool TransactionResponse::has_clear_changes() const {
  return _internal_has_clear_changes();
}
inline void TransactionResponse::clear_clear_changes() {
  if (GetArena() == nullptr && clear_changes_ != nullptr) {
    delete clear_changes_;
  }
  clear_changes_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::ClearChanges_Response& TransactionResponse::_internal_clear_changes() const {
  const ::Orthanc::DatabasePluginMessages::ClearChanges_Response* p = clear_changes_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::ClearChanges_Response*>(
      &::Orthanc::DatabasePluginMessages::_ClearChanges_Response_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::ClearChanges_Response& TransactionResponse::clear_changes() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionResponse.clear_changes)
  return _internal_clear_changes();
}
inline void TransactionResponse::unsafe_arena_set_allocated_clear_changes(
    ::Orthanc::DatabasePluginMessages::ClearChanges_Response* clear_changes) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(clear_changes_);
  }
  clear_changes_ = clear_changes;
  if (clear_changes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.clear_changes)
}
inline ::Orthanc::DatabasePluginMessages::ClearChanges_Response* TransactionResponse::release_clear_changes() {
  auto temp = unsafe_arena_release_clear_changes();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::ClearChanges_Response* TransactionResponse::unsafe_arena_release_clear_changes() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionResponse.clear_changes)
  
  ::Orthanc::DatabasePluginMessages::ClearChanges_Response* temp = clear_changes_;
  clear_changes_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::ClearChanges_Response* TransactionResponse::_internal_mutable_clear_changes() {
  
  if (clear_changes_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::ClearChanges_Response>(GetArena());
    clear_changes_ = p;
  }
  return clear_changes_;
}
inline ::Orthanc::DatabasePluginMessages::ClearChanges_Response* TransactionResponse::mutable_clear_changes() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionResponse.clear_changes)
  return _internal_mutable_clear_changes();
}
inline void TransactionResponse::set_allocated_clear_changes(::Orthanc::DatabasePluginMessages::ClearChanges_Response* clear_changes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete clear_changes_;
  }
  if (clear_changes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(clear_changes);
    if (message_arena != submessage_arena) {
      clear_changes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clear_changes, submessage_arena);
    }
    
  } else {
    
  }
  clear_changes_ = clear_changes;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.clear_changes)
}

// .Orthanc.DatabasePluginMessages.ClearExportedResources.Response clear_exported_resources = 104;
inline bool TransactionResponse::_internal_has_clear_exported_resources() const {
  return this != internal_default_instance() && clear_exported_resources_ != nullptr;
}
inline bool TransactionResponse::has_clear_exported_resources() const {
  return _internal_has_clear_exported_resources();
}
inline void TransactionResponse::clear_clear_exported_resources() {
  if (GetArena() == nullptr && clear_exported_resources_ != nullptr) {
    delete clear_exported_resources_;
  }
  clear_exported_resources_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::ClearExportedResources_Response& TransactionResponse::_internal_clear_exported_resources() const {
  const ::Orthanc::DatabasePluginMessages::ClearExportedResources_Response* p = clear_exported_resources_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::ClearExportedResources_Response*>(
      &::Orthanc::DatabasePluginMessages::_ClearExportedResources_Response_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::ClearExportedResources_Response& TransactionResponse::clear_exported_resources() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionResponse.clear_exported_resources)
  return _internal_clear_exported_resources();
}
inline void TransactionResponse::unsafe_arena_set_allocated_clear_exported_resources(
    ::Orthanc::DatabasePluginMessages::ClearExportedResources_Response* clear_exported_resources) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(clear_exported_resources_);
  }
  clear_exported_resources_ = clear_exported_resources;
  if (clear_exported_resources) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.clear_exported_resources)
}
inline ::Orthanc::DatabasePluginMessages::ClearExportedResources_Response* TransactionResponse::release_clear_exported_resources() {
  auto temp = unsafe_arena_release_clear_exported_resources();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::ClearExportedResources_Response* TransactionResponse::unsafe_arena_release_clear_exported_resources() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionResponse.clear_exported_resources)
  
  ::Orthanc::DatabasePluginMessages::ClearExportedResources_Response* temp = clear_exported_resources_;
  clear_exported_resources_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::ClearExportedResources_Response* TransactionResponse::_internal_mutable_clear_exported_resources() {
  
  if (clear_exported_resources_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::ClearExportedResources_Response>(GetArena());
    clear_exported_resources_ = p;
  }
  return clear_exported_resources_;
}
inline ::Orthanc::DatabasePluginMessages::ClearExportedResources_Response* TransactionResponse::mutable_clear_exported_resources() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionResponse.clear_exported_resources)
  return _internal_mutable_clear_exported_resources();
}
inline void TransactionResponse::set_allocated_clear_exported_resources(::Orthanc::DatabasePluginMessages::ClearExportedResources_Response* clear_exported_resources) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete clear_exported_resources_;
  }
  if (clear_exported_resources) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(clear_exported_resources);
    if (message_arena != submessage_arena) {
      clear_exported_resources = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clear_exported_resources, submessage_arena);
    }
    
  } else {
    
  }
  clear_exported_resources_ = clear_exported_resources;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.clear_exported_resources)
}

// .Orthanc.DatabasePluginMessages.DeleteAttachment.Response delete_attachment = 105;
inline bool TransactionResponse::_internal_has_delete_attachment() const {
  return this != internal_default_instance() && delete_attachment_ != nullptr;
}
inline bool TransactionResponse::has_delete_attachment() const {
  return _internal_has_delete_attachment();
}
inline void TransactionResponse::clear_delete_attachment() {
  if (GetArena() == nullptr && delete_attachment_ != nullptr) {
    delete delete_attachment_;
  }
  delete_attachment_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::DeleteAttachment_Response& TransactionResponse::_internal_delete_attachment() const {
  const ::Orthanc::DatabasePluginMessages::DeleteAttachment_Response* p = delete_attachment_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::DeleteAttachment_Response*>(
      &::Orthanc::DatabasePluginMessages::_DeleteAttachment_Response_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::DeleteAttachment_Response& TransactionResponse::delete_attachment() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionResponse.delete_attachment)
  return _internal_delete_attachment();
}
inline void TransactionResponse::unsafe_arena_set_allocated_delete_attachment(
    ::Orthanc::DatabasePluginMessages::DeleteAttachment_Response* delete_attachment) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(delete_attachment_);
  }
  delete_attachment_ = delete_attachment;
  if (delete_attachment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.delete_attachment)
}
inline ::Orthanc::DatabasePluginMessages::DeleteAttachment_Response* TransactionResponse::release_delete_attachment() {
  auto temp = unsafe_arena_release_delete_attachment();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::DeleteAttachment_Response* TransactionResponse::unsafe_arena_release_delete_attachment() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionResponse.delete_attachment)
  
  ::Orthanc::DatabasePluginMessages::DeleteAttachment_Response* temp = delete_attachment_;
  delete_attachment_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::DeleteAttachment_Response* TransactionResponse::_internal_mutable_delete_attachment() {
  
  if (delete_attachment_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::DeleteAttachment_Response>(GetArena());
    delete_attachment_ = p;
  }
  return delete_attachment_;
}
inline ::Orthanc::DatabasePluginMessages::DeleteAttachment_Response* TransactionResponse::mutable_delete_attachment() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionResponse.delete_attachment)
  return _internal_mutable_delete_attachment();
}
inline void TransactionResponse::set_allocated_delete_attachment(::Orthanc::DatabasePluginMessages::DeleteAttachment_Response* delete_attachment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete delete_attachment_;
  }
  if (delete_attachment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(delete_attachment);
    if (message_arena != submessage_arena) {
      delete_attachment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delete_attachment, submessage_arena);
    }
    
  } else {
    
  }
  delete_attachment_ = delete_attachment;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.delete_attachment)
}

// .Orthanc.DatabasePluginMessages.DeleteMetadata.Response delete_metadata = 106;
inline bool TransactionResponse::_internal_has_delete_metadata() const {
  return this != internal_default_instance() && delete_metadata_ != nullptr;
}
inline bool TransactionResponse::has_delete_metadata() const {
  return _internal_has_delete_metadata();
}
inline void TransactionResponse::clear_delete_metadata() {
  if (GetArena() == nullptr && delete_metadata_ != nullptr) {
    delete delete_metadata_;
  }
  delete_metadata_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::DeleteMetadata_Response& TransactionResponse::_internal_delete_metadata() const {
  const ::Orthanc::DatabasePluginMessages::DeleteMetadata_Response* p = delete_metadata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::DeleteMetadata_Response*>(
      &::Orthanc::DatabasePluginMessages::_DeleteMetadata_Response_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::DeleteMetadata_Response& TransactionResponse::delete_metadata() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionResponse.delete_metadata)
  return _internal_delete_metadata();
}
inline void TransactionResponse::unsafe_arena_set_allocated_delete_metadata(
    ::Orthanc::DatabasePluginMessages::DeleteMetadata_Response* delete_metadata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(delete_metadata_);
  }
  delete_metadata_ = delete_metadata;
  if (delete_metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.delete_metadata)
}
inline ::Orthanc::DatabasePluginMessages::DeleteMetadata_Response* TransactionResponse::release_delete_metadata() {
  auto temp = unsafe_arena_release_delete_metadata();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::DeleteMetadata_Response* TransactionResponse::unsafe_arena_release_delete_metadata() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionResponse.delete_metadata)
  
  ::Orthanc::DatabasePluginMessages::DeleteMetadata_Response* temp = delete_metadata_;
  delete_metadata_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::DeleteMetadata_Response* TransactionResponse::_internal_mutable_delete_metadata() {
  
  if (delete_metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::DeleteMetadata_Response>(GetArena());
    delete_metadata_ = p;
  }
  return delete_metadata_;
}
inline ::Orthanc::DatabasePluginMessages::DeleteMetadata_Response* TransactionResponse::mutable_delete_metadata() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionResponse.delete_metadata)
  return _internal_mutable_delete_metadata();
}
inline void TransactionResponse::set_allocated_delete_metadata(::Orthanc::DatabasePluginMessages::DeleteMetadata_Response* delete_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete delete_metadata_;
  }
  if (delete_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(delete_metadata);
    if (message_arena != submessage_arena) {
      delete_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delete_metadata, submessage_arena);
    }
    
  } else {
    
  }
  delete_metadata_ = delete_metadata;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.delete_metadata)
}

// .Orthanc.DatabasePluginMessages.DeleteResource.Response delete_resource = 107;
inline bool TransactionResponse::_internal_has_delete_resource() const {
  return this != internal_default_instance() && delete_resource_ != nullptr;
}
inline bool TransactionResponse::has_delete_resource() const {
  return _internal_has_delete_resource();
}
inline void TransactionResponse::clear_delete_resource() {
  if (GetArena() == nullptr && delete_resource_ != nullptr) {
    delete delete_resource_;
  }
  delete_resource_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::DeleteResource_Response& TransactionResponse::_internal_delete_resource() const {
  const ::Orthanc::DatabasePluginMessages::DeleteResource_Response* p = delete_resource_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::DeleteResource_Response*>(
      &::Orthanc::DatabasePluginMessages::_DeleteResource_Response_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::DeleteResource_Response& TransactionResponse::delete_resource() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionResponse.delete_resource)
  return _internal_delete_resource();
}
inline void TransactionResponse::unsafe_arena_set_allocated_delete_resource(
    ::Orthanc::DatabasePluginMessages::DeleteResource_Response* delete_resource) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(delete_resource_);
  }
  delete_resource_ = delete_resource;
  if (delete_resource) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.delete_resource)
}
inline ::Orthanc::DatabasePluginMessages::DeleteResource_Response* TransactionResponse::release_delete_resource() {
  auto temp = unsafe_arena_release_delete_resource();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::DeleteResource_Response* TransactionResponse::unsafe_arena_release_delete_resource() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionResponse.delete_resource)
  
  ::Orthanc::DatabasePluginMessages::DeleteResource_Response* temp = delete_resource_;
  delete_resource_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::DeleteResource_Response* TransactionResponse::_internal_mutable_delete_resource() {
  
  if (delete_resource_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::DeleteResource_Response>(GetArena());
    delete_resource_ = p;
  }
  return delete_resource_;
}
inline ::Orthanc::DatabasePluginMessages::DeleteResource_Response* TransactionResponse::mutable_delete_resource() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionResponse.delete_resource)
  return _internal_mutable_delete_resource();
}
inline void TransactionResponse::set_allocated_delete_resource(::Orthanc::DatabasePluginMessages::DeleteResource_Response* delete_resource) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete delete_resource_;
  }
  if (delete_resource) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(delete_resource);
    if (message_arena != submessage_arena) {
      delete_resource = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delete_resource, submessage_arena);
    }
    
  } else {
    
  }
  delete_resource_ = delete_resource;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.delete_resource)
}

// .Orthanc.DatabasePluginMessages.GetAllMetadata.Response get_all_metadata = 108;
inline bool TransactionResponse::_internal_has_get_all_metadata() const {
  return this != internal_default_instance() && get_all_metadata_ != nullptr;
}
inline bool TransactionResponse::has_get_all_metadata() const {
  return _internal_has_get_all_metadata();
}
inline void TransactionResponse::clear_get_all_metadata() {
  if (GetArena() == nullptr && get_all_metadata_ != nullptr) {
    delete get_all_metadata_;
  }
  get_all_metadata_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::GetAllMetadata_Response& TransactionResponse::_internal_get_all_metadata() const {
  const ::Orthanc::DatabasePluginMessages::GetAllMetadata_Response* p = get_all_metadata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::GetAllMetadata_Response*>(
      &::Orthanc::DatabasePluginMessages::_GetAllMetadata_Response_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::GetAllMetadata_Response& TransactionResponse::get_all_metadata() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionResponse.get_all_metadata)
  return _internal_get_all_metadata();
}
inline void TransactionResponse::unsafe_arena_set_allocated_get_all_metadata(
    ::Orthanc::DatabasePluginMessages::GetAllMetadata_Response* get_all_metadata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(get_all_metadata_);
  }
  get_all_metadata_ = get_all_metadata;
  if (get_all_metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.get_all_metadata)
}
inline ::Orthanc::DatabasePluginMessages::GetAllMetadata_Response* TransactionResponse::release_get_all_metadata() {
  auto temp = unsafe_arena_release_get_all_metadata();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::GetAllMetadata_Response* TransactionResponse::unsafe_arena_release_get_all_metadata() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionResponse.get_all_metadata)
  
  ::Orthanc::DatabasePluginMessages::GetAllMetadata_Response* temp = get_all_metadata_;
  get_all_metadata_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::GetAllMetadata_Response* TransactionResponse::_internal_mutable_get_all_metadata() {
  
  if (get_all_metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetAllMetadata_Response>(GetArena());
    get_all_metadata_ = p;
  }
  return get_all_metadata_;
}
inline ::Orthanc::DatabasePluginMessages::GetAllMetadata_Response* TransactionResponse::mutable_get_all_metadata() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionResponse.get_all_metadata)
  return _internal_mutable_get_all_metadata();
}
inline void TransactionResponse::set_allocated_get_all_metadata(::Orthanc::DatabasePluginMessages::GetAllMetadata_Response* get_all_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete get_all_metadata_;
  }
  if (get_all_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_all_metadata);
    if (message_arena != submessage_arena) {
      get_all_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_all_metadata, submessage_arena);
    }
    
  } else {
    
  }
  get_all_metadata_ = get_all_metadata;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.get_all_metadata)
}

// .Orthanc.DatabasePluginMessages.GetAllPublicIds.Response get_all_public_ids = 109;
inline bool TransactionResponse::_internal_has_get_all_public_ids() const {
  return this != internal_default_instance() && get_all_public_ids_ != nullptr;
}
inline bool TransactionResponse::has_get_all_public_ids() const {
  return _internal_has_get_all_public_ids();
}
inline void TransactionResponse::clear_get_all_public_ids() {
  if (GetArena() == nullptr && get_all_public_ids_ != nullptr) {
    delete get_all_public_ids_;
  }
  get_all_public_ids_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::GetAllPublicIds_Response& TransactionResponse::_internal_get_all_public_ids() const {
  const ::Orthanc::DatabasePluginMessages::GetAllPublicIds_Response* p = get_all_public_ids_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::GetAllPublicIds_Response*>(
      &::Orthanc::DatabasePluginMessages::_GetAllPublicIds_Response_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::GetAllPublicIds_Response& TransactionResponse::get_all_public_ids() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionResponse.get_all_public_ids)
  return _internal_get_all_public_ids();
}
inline void TransactionResponse::unsafe_arena_set_allocated_get_all_public_ids(
    ::Orthanc::DatabasePluginMessages::GetAllPublicIds_Response* get_all_public_ids) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(get_all_public_ids_);
  }
  get_all_public_ids_ = get_all_public_ids;
  if (get_all_public_ids) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.get_all_public_ids)
}
inline ::Orthanc::DatabasePluginMessages::GetAllPublicIds_Response* TransactionResponse::release_get_all_public_ids() {
  auto temp = unsafe_arena_release_get_all_public_ids();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::GetAllPublicIds_Response* TransactionResponse::unsafe_arena_release_get_all_public_ids() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionResponse.get_all_public_ids)
  
  ::Orthanc::DatabasePluginMessages::GetAllPublicIds_Response* temp = get_all_public_ids_;
  get_all_public_ids_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::GetAllPublicIds_Response* TransactionResponse::_internal_mutable_get_all_public_ids() {
  
  if (get_all_public_ids_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetAllPublicIds_Response>(GetArena());
    get_all_public_ids_ = p;
  }
  return get_all_public_ids_;
}
inline ::Orthanc::DatabasePluginMessages::GetAllPublicIds_Response* TransactionResponse::mutable_get_all_public_ids() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionResponse.get_all_public_ids)
  return _internal_mutable_get_all_public_ids();
}
inline void TransactionResponse::set_allocated_get_all_public_ids(::Orthanc::DatabasePluginMessages::GetAllPublicIds_Response* get_all_public_ids) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete get_all_public_ids_;
  }
  if (get_all_public_ids) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_all_public_ids);
    if (message_arena != submessage_arena) {
      get_all_public_ids = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_all_public_ids, submessage_arena);
    }
    
  } else {
    
  }
  get_all_public_ids_ = get_all_public_ids;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.get_all_public_ids)
}

// .Orthanc.DatabasePluginMessages.GetAllPublicIdsWithLimits.Response get_all_public_ids_with_limits = 110;
inline bool TransactionResponse::_internal_has_get_all_public_ids_with_limits() const {
  return this != internal_default_instance() && get_all_public_ids_with_limits_ != nullptr;
}
inline bool TransactionResponse::has_get_all_public_ids_with_limits() const {
  return _internal_has_get_all_public_ids_with_limits();
}
inline void TransactionResponse::clear_get_all_public_ids_with_limits() {
  if (GetArena() == nullptr && get_all_public_ids_with_limits_ != nullptr) {
    delete get_all_public_ids_with_limits_;
  }
  get_all_public_ids_with_limits_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits_Response& TransactionResponse::_internal_get_all_public_ids_with_limits() const {
  const ::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits_Response* p = get_all_public_ids_with_limits_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits_Response*>(
      &::Orthanc::DatabasePluginMessages::_GetAllPublicIdsWithLimits_Response_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits_Response& TransactionResponse::get_all_public_ids_with_limits() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionResponse.get_all_public_ids_with_limits)
  return _internal_get_all_public_ids_with_limits();
}
inline void TransactionResponse::unsafe_arena_set_allocated_get_all_public_ids_with_limits(
    ::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits_Response* get_all_public_ids_with_limits) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(get_all_public_ids_with_limits_);
  }
  get_all_public_ids_with_limits_ = get_all_public_ids_with_limits;
  if (get_all_public_ids_with_limits) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.get_all_public_ids_with_limits)
}
inline ::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits_Response* TransactionResponse::release_get_all_public_ids_with_limits() {
  auto temp = unsafe_arena_release_get_all_public_ids_with_limits();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits_Response* TransactionResponse::unsafe_arena_release_get_all_public_ids_with_limits() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionResponse.get_all_public_ids_with_limits)
  
  ::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits_Response* temp = get_all_public_ids_with_limits_;
  get_all_public_ids_with_limits_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits_Response* TransactionResponse::_internal_mutable_get_all_public_ids_with_limits() {
  
  if (get_all_public_ids_with_limits_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits_Response>(GetArena());
    get_all_public_ids_with_limits_ = p;
  }
  return get_all_public_ids_with_limits_;
}
inline ::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits_Response* TransactionResponse::mutable_get_all_public_ids_with_limits() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionResponse.get_all_public_ids_with_limits)
  return _internal_mutable_get_all_public_ids_with_limits();
}
inline void TransactionResponse::set_allocated_get_all_public_ids_with_limits(::Orthanc::DatabasePluginMessages::GetAllPublicIdsWithLimits_Response* get_all_public_ids_with_limits) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete get_all_public_ids_with_limits_;
  }
  if (get_all_public_ids_with_limits) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_all_public_ids_with_limits);
    if (message_arena != submessage_arena) {
      get_all_public_ids_with_limits = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_all_public_ids_with_limits, submessage_arena);
    }
    
  } else {
    
  }
  get_all_public_ids_with_limits_ = get_all_public_ids_with_limits;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.get_all_public_ids_with_limits)
}

// .Orthanc.DatabasePluginMessages.GetChanges.Response get_changes = 111;
inline bool TransactionResponse::_internal_has_get_changes() const {
  return this != internal_default_instance() && get_changes_ != nullptr;
}
inline bool TransactionResponse::has_get_changes() const {
  return _internal_has_get_changes();
}
inline void TransactionResponse::clear_get_changes() {
  if (GetArena() == nullptr && get_changes_ != nullptr) {
    delete get_changes_;
  }
  get_changes_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::GetChanges_Response& TransactionResponse::_internal_get_changes() const {
  const ::Orthanc::DatabasePluginMessages::GetChanges_Response* p = get_changes_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::GetChanges_Response*>(
      &::Orthanc::DatabasePluginMessages::_GetChanges_Response_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::GetChanges_Response& TransactionResponse::get_changes() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionResponse.get_changes)
  return _internal_get_changes();
}
inline void TransactionResponse::unsafe_arena_set_allocated_get_changes(
    ::Orthanc::DatabasePluginMessages::GetChanges_Response* get_changes) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(get_changes_);
  }
  get_changes_ = get_changes;
  if (get_changes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.get_changes)
}
inline ::Orthanc::DatabasePluginMessages::GetChanges_Response* TransactionResponse::release_get_changes() {
  auto temp = unsafe_arena_release_get_changes();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::GetChanges_Response* TransactionResponse::unsafe_arena_release_get_changes() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionResponse.get_changes)
  
  ::Orthanc::DatabasePluginMessages::GetChanges_Response* temp = get_changes_;
  get_changes_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::GetChanges_Response* TransactionResponse::_internal_mutable_get_changes() {
  
  if (get_changes_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetChanges_Response>(GetArena());
    get_changes_ = p;
  }
  return get_changes_;
}
inline ::Orthanc::DatabasePluginMessages::GetChanges_Response* TransactionResponse::mutable_get_changes() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionResponse.get_changes)
  return _internal_mutable_get_changes();
}
inline void TransactionResponse::set_allocated_get_changes(::Orthanc::DatabasePluginMessages::GetChanges_Response* get_changes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete get_changes_;
  }
  if (get_changes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_changes);
    if (message_arena != submessage_arena) {
      get_changes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_changes, submessage_arena);
    }
    
  } else {
    
  }
  get_changes_ = get_changes;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.get_changes)
}

// .Orthanc.DatabasePluginMessages.GetChildrenInternalId.Response get_children_internal_id = 112;
inline bool TransactionResponse::_internal_has_get_children_internal_id() const {
  return this != internal_default_instance() && get_children_internal_id_ != nullptr;
}
inline bool TransactionResponse::has_get_children_internal_id() const {
  return _internal_has_get_children_internal_id();
}
inline void TransactionResponse::clear_get_children_internal_id() {
  if (GetArena() == nullptr && get_children_internal_id_ != nullptr) {
    delete get_children_internal_id_;
  }
  get_children_internal_id_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::GetChildrenInternalId_Response& TransactionResponse::_internal_get_children_internal_id() const {
  const ::Orthanc::DatabasePluginMessages::GetChildrenInternalId_Response* p = get_children_internal_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::GetChildrenInternalId_Response*>(
      &::Orthanc::DatabasePluginMessages::_GetChildrenInternalId_Response_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::GetChildrenInternalId_Response& TransactionResponse::get_children_internal_id() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionResponse.get_children_internal_id)
  return _internal_get_children_internal_id();
}
inline void TransactionResponse::unsafe_arena_set_allocated_get_children_internal_id(
    ::Orthanc::DatabasePluginMessages::GetChildrenInternalId_Response* get_children_internal_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(get_children_internal_id_);
  }
  get_children_internal_id_ = get_children_internal_id;
  if (get_children_internal_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.get_children_internal_id)
}
inline ::Orthanc::DatabasePluginMessages::GetChildrenInternalId_Response* TransactionResponse::release_get_children_internal_id() {
  auto temp = unsafe_arena_release_get_children_internal_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::GetChildrenInternalId_Response* TransactionResponse::unsafe_arena_release_get_children_internal_id() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionResponse.get_children_internal_id)
  
  ::Orthanc::DatabasePluginMessages::GetChildrenInternalId_Response* temp = get_children_internal_id_;
  get_children_internal_id_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::GetChildrenInternalId_Response* TransactionResponse::_internal_mutable_get_children_internal_id() {
  
  if (get_children_internal_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetChildrenInternalId_Response>(GetArena());
    get_children_internal_id_ = p;
  }
  return get_children_internal_id_;
}
inline ::Orthanc::DatabasePluginMessages::GetChildrenInternalId_Response* TransactionResponse::mutable_get_children_internal_id() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionResponse.get_children_internal_id)
  return _internal_mutable_get_children_internal_id();
}
inline void TransactionResponse::set_allocated_get_children_internal_id(::Orthanc::DatabasePluginMessages::GetChildrenInternalId_Response* get_children_internal_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete get_children_internal_id_;
  }
  if (get_children_internal_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_children_internal_id);
    if (message_arena != submessage_arena) {
      get_children_internal_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_children_internal_id, submessage_arena);
    }
    
  } else {
    
  }
  get_children_internal_id_ = get_children_internal_id;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.get_children_internal_id)
}

// .Orthanc.DatabasePluginMessages.GetChildrenPublicId.Response get_children_public_id = 113;
inline bool TransactionResponse::_internal_has_get_children_public_id() const {
  return this != internal_default_instance() && get_children_public_id_ != nullptr;
}
inline bool TransactionResponse::has_get_children_public_id() const {
  return _internal_has_get_children_public_id();
}
inline void TransactionResponse::clear_get_children_public_id() {
  if (GetArena() == nullptr && get_children_public_id_ != nullptr) {
    delete get_children_public_id_;
  }
  get_children_public_id_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::GetChildrenPublicId_Response& TransactionResponse::_internal_get_children_public_id() const {
  const ::Orthanc::DatabasePluginMessages::GetChildrenPublicId_Response* p = get_children_public_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::GetChildrenPublicId_Response*>(
      &::Orthanc::DatabasePluginMessages::_GetChildrenPublicId_Response_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::GetChildrenPublicId_Response& TransactionResponse::get_children_public_id() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionResponse.get_children_public_id)
  return _internal_get_children_public_id();
}
inline void TransactionResponse::unsafe_arena_set_allocated_get_children_public_id(
    ::Orthanc::DatabasePluginMessages::GetChildrenPublicId_Response* get_children_public_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(get_children_public_id_);
  }
  get_children_public_id_ = get_children_public_id;
  if (get_children_public_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.get_children_public_id)
}
inline ::Orthanc::DatabasePluginMessages::GetChildrenPublicId_Response* TransactionResponse::release_get_children_public_id() {
  auto temp = unsafe_arena_release_get_children_public_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::GetChildrenPublicId_Response* TransactionResponse::unsafe_arena_release_get_children_public_id() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionResponse.get_children_public_id)
  
  ::Orthanc::DatabasePluginMessages::GetChildrenPublicId_Response* temp = get_children_public_id_;
  get_children_public_id_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::GetChildrenPublicId_Response* TransactionResponse::_internal_mutable_get_children_public_id() {
  
  if (get_children_public_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetChildrenPublicId_Response>(GetArena());
    get_children_public_id_ = p;
  }
  return get_children_public_id_;
}
inline ::Orthanc::DatabasePluginMessages::GetChildrenPublicId_Response* TransactionResponse::mutable_get_children_public_id() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionResponse.get_children_public_id)
  return _internal_mutable_get_children_public_id();
}
inline void TransactionResponse::set_allocated_get_children_public_id(::Orthanc::DatabasePluginMessages::GetChildrenPublicId_Response* get_children_public_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete get_children_public_id_;
  }
  if (get_children_public_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_children_public_id);
    if (message_arena != submessage_arena) {
      get_children_public_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_children_public_id, submessage_arena);
    }
    
  } else {
    
  }
  get_children_public_id_ = get_children_public_id;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.get_children_public_id)
}

// .Orthanc.DatabasePluginMessages.GetExportedResources.Response get_exported_resources = 114;
inline bool TransactionResponse::_internal_has_get_exported_resources() const {
  return this != internal_default_instance() && get_exported_resources_ != nullptr;
}
inline bool TransactionResponse::has_get_exported_resources() const {
  return _internal_has_get_exported_resources();
}
inline void TransactionResponse::clear_get_exported_resources() {
  if (GetArena() == nullptr && get_exported_resources_ != nullptr) {
    delete get_exported_resources_;
  }
  get_exported_resources_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::GetExportedResources_Response& TransactionResponse::_internal_get_exported_resources() const {
  const ::Orthanc::DatabasePluginMessages::GetExportedResources_Response* p = get_exported_resources_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::GetExportedResources_Response*>(
      &::Orthanc::DatabasePluginMessages::_GetExportedResources_Response_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::GetExportedResources_Response& TransactionResponse::get_exported_resources() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionResponse.get_exported_resources)
  return _internal_get_exported_resources();
}
inline void TransactionResponse::unsafe_arena_set_allocated_get_exported_resources(
    ::Orthanc::DatabasePluginMessages::GetExportedResources_Response* get_exported_resources) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(get_exported_resources_);
  }
  get_exported_resources_ = get_exported_resources;
  if (get_exported_resources) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.get_exported_resources)
}
inline ::Orthanc::DatabasePluginMessages::GetExportedResources_Response* TransactionResponse::release_get_exported_resources() {
  auto temp = unsafe_arena_release_get_exported_resources();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::GetExportedResources_Response* TransactionResponse::unsafe_arena_release_get_exported_resources() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionResponse.get_exported_resources)
  
  ::Orthanc::DatabasePluginMessages::GetExportedResources_Response* temp = get_exported_resources_;
  get_exported_resources_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::GetExportedResources_Response* TransactionResponse::_internal_mutable_get_exported_resources() {
  
  if (get_exported_resources_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetExportedResources_Response>(GetArena());
    get_exported_resources_ = p;
  }
  return get_exported_resources_;
}
inline ::Orthanc::DatabasePluginMessages::GetExportedResources_Response* TransactionResponse::mutable_get_exported_resources() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionResponse.get_exported_resources)
  return _internal_mutable_get_exported_resources();
}
inline void TransactionResponse::set_allocated_get_exported_resources(::Orthanc::DatabasePluginMessages::GetExportedResources_Response* get_exported_resources) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete get_exported_resources_;
  }
  if (get_exported_resources) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_exported_resources);
    if (message_arena != submessage_arena) {
      get_exported_resources = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_exported_resources, submessage_arena);
    }
    
  } else {
    
  }
  get_exported_resources_ = get_exported_resources;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.get_exported_resources)
}

// .Orthanc.DatabasePluginMessages.GetLastChange.Response get_last_change = 115;
inline bool TransactionResponse::_internal_has_get_last_change() const {
  return this != internal_default_instance() && get_last_change_ != nullptr;
}
inline bool TransactionResponse::has_get_last_change() const {
  return _internal_has_get_last_change();
}
inline void TransactionResponse::clear_get_last_change() {
  if (GetArena() == nullptr && get_last_change_ != nullptr) {
    delete get_last_change_;
  }
  get_last_change_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::GetLastChange_Response& TransactionResponse::_internal_get_last_change() const {
  const ::Orthanc::DatabasePluginMessages::GetLastChange_Response* p = get_last_change_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::GetLastChange_Response*>(
      &::Orthanc::DatabasePluginMessages::_GetLastChange_Response_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::GetLastChange_Response& TransactionResponse::get_last_change() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionResponse.get_last_change)
  return _internal_get_last_change();
}
inline void TransactionResponse::unsafe_arena_set_allocated_get_last_change(
    ::Orthanc::DatabasePluginMessages::GetLastChange_Response* get_last_change) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(get_last_change_);
  }
  get_last_change_ = get_last_change;
  if (get_last_change) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.get_last_change)
}
inline ::Orthanc::DatabasePluginMessages::GetLastChange_Response* TransactionResponse::release_get_last_change() {
  auto temp = unsafe_arena_release_get_last_change();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::GetLastChange_Response* TransactionResponse::unsafe_arena_release_get_last_change() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionResponse.get_last_change)
  
  ::Orthanc::DatabasePluginMessages::GetLastChange_Response* temp = get_last_change_;
  get_last_change_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::GetLastChange_Response* TransactionResponse::_internal_mutable_get_last_change() {
  
  if (get_last_change_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetLastChange_Response>(GetArena());
    get_last_change_ = p;
  }
  return get_last_change_;
}
inline ::Orthanc::DatabasePluginMessages::GetLastChange_Response* TransactionResponse::mutable_get_last_change() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionResponse.get_last_change)
  return _internal_mutable_get_last_change();
}
inline void TransactionResponse::set_allocated_get_last_change(::Orthanc::DatabasePluginMessages::GetLastChange_Response* get_last_change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete get_last_change_;
  }
  if (get_last_change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_last_change);
    if (message_arena != submessage_arena) {
      get_last_change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_last_change, submessage_arena);
    }
    
  } else {
    
  }
  get_last_change_ = get_last_change;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.get_last_change)
}

// .Orthanc.DatabasePluginMessages.GetLastExportedResource.Response get_last_exported_resource = 116;
inline bool TransactionResponse::_internal_has_get_last_exported_resource() const {
  return this != internal_default_instance() && get_last_exported_resource_ != nullptr;
}
inline bool TransactionResponse::has_get_last_exported_resource() const {
  return _internal_has_get_last_exported_resource();
}
inline void TransactionResponse::clear_get_last_exported_resource() {
  if (GetArena() == nullptr && get_last_exported_resource_ != nullptr) {
    delete get_last_exported_resource_;
  }
  get_last_exported_resource_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::GetLastExportedResource_Response& TransactionResponse::_internal_get_last_exported_resource() const {
  const ::Orthanc::DatabasePluginMessages::GetLastExportedResource_Response* p = get_last_exported_resource_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::GetLastExportedResource_Response*>(
      &::Orthanc::DatabasePluginMessages::_GetLastExportedResource_Response_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::GetLastExportedResource_Response& TransactionResponse::get_last_exported_resource() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionResponse.get_last_exported_resource)
  return _internal_get_last_exported_resource();
}
inline void TransactionResponse::unsafe_arena_set_allocated_get_last_exported_resource(
    ::Orthanc::DatabasePluginMessages::GetLastExportedResource_Response* get_last_exported_resource) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(get_last_exported_resource_);
  }
  get_last_exported_resource_ = get_last_exported_resource;
  if (get_last_exported_resource) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.get_last_exported_resource)
}
inline ::Orthanc::DatabasePluginMessages::GetLastExportedResource_Response* TransactionResponse::release_get_last_exported_resource() {
  auto temp = unsafe_arena_release_get_last_exported_resource();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::GetLastExportedResource_Response* TransactionResponse::unsafe_arena_release_get_last_exported_resource() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionResponse.get_last_exported_resource)
  
  ::Orthanc::DatabasePluginMessages::GetLastExportedResource_Response* temp = get_last_exported_resource_;
  get_last_exported_resource_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::GetLastExportedResource_Response* TransactionResponse::_internal_mutable_get_last_exported_resource() {
  
  if (get_last_exported_resource_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetLastExportedResource_Response>(GetArena());
    get_last_exported_resource_ = p;
  }
  return get_last_exported_resource_;
}
inline ::Orthanc::DatabasePluginMessages::GetLastExportedResource_Response* TransactionResponse::mutable_get_last_exported_resource() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionResponse.get_last_exported_resource)
  return _internal_mutable_get_last_exported_resource();
}
inline void TransactionResponse::set_allocated_get_last_exported_resource(::Orthanc::DatabasePluginMessages::GetLastExportedResource_Response* get_last_exported_resource) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete get_last_exported_resource_;
  }
  if (get_last_exported_resource) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_last_exported_resource);
    if (message_arena != submessage_arena) {
      get_last_exported_resource = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_last_exported_resource, submessage_arena);
    }
    
  } else {
    
  }
  get_last_exported_resource_ = get_last_exported_resource;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.get_last_exported_resource)
}

// .Orthanc.DatabasePluginMessages.GetMainDicomTags.Response get_main_dicom_tags = 117;
inline bool TransactionResponse::_internal_has_get_main_dicom_tags() const {
  return this != internal_default_instance() && get_main_dicom_tags_ != nullptr;
}
inline bool TransactionResponse::has_get_main_dicom_tags() const {
  return _internal_has_get_main_dicom_tags();
}
inline void TransactionResponse::clear_get_main_dicom_tags() {
  if (GetArena() == nullptr && get_main_dicom_tags_ != nullptr) {
    delete get_main_dicom_tags_;
  }
  get_main_dicom_tags_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Response& TransactionResponse::_internal_get_main_dicom_tags() const {
  const ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Response* p = get_main_dicom_tags_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Response*>(
      &::Orthanc::DatabasePluginMessages::_GetMainDicomTags_Response_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Response& TransactionResponse::get_main_dicom_tags() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionResponse.get_main_dicom_tags)
  return _internal_get_main_dicom_tags();
}
inline void TransactionResponse::unsafe_arena_set_allocated_get_main_dicom_tags(
    ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Response* get_main_dicom_tags) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(get_main_dicom_tags_);
  }
  get_main_dicom_tags_ = get_main_dicom_tags;
  if (get_main_dicom_tags) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.get_main_dicom_tags)
}
inline ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Response* TransactionResponse::release_get_main_dicom_tags() {
  auto temp = unsafe_arena_release_get_main_dicom_tags();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Response* TransactionResponse::unsafe_arena_release_get_main_dicom_tags() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionResponse.get_main_dicom_tags)
  
  ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Response* temp = get_main_dicom_tags_;
  get_main_dicom_tags_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Response* TransactionResponse::_internal_mutable_get_main_dicom_tags() {
  
  if (get_main_dicom_tags_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetMainDicomTags_Response>(GetArena());
    get_main_dicom_tags_ = p;
  }
  return get_main_dicom_tags_;
}
inline ::Orthanc::DatabasePluginMessages::GetMainDicomTags_Response* TransactionResponse::mutable_get_main_dicom_tags() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionResponse.get_main_dicom_tags)
  return _internal_mutable_get_main_dicom_tags();
}
inline void TransactionResponse::set_allocated_get_main_dicom_tags(::Orthanc::DatabasePluginMessages::GetMainDicomTags_Response* get_main_dicom_tags) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete get_main_dicom_tags_;
  }
  if (get_main_dicom_tags) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_main_dicom_tags);
    if (message_arena != submessage_arena) {
      get_main_dicom_tags = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_main_dicom_tags, submessage_arena);
    }
    
  } else {
    
  }
  get_main_dicom_tags_ = get_main_dicom_tags;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.get_main_dicom_tags)
}

// .Orthanc.DatabasePluginMessages.GetPublicId.Response get_public_id = 118;
inline bool TransactionResponse::_internal_has_get_public_id() const {
  return this != internal_default_instance() && get_public_id_ != nullptr;
}
inline bool TransactionResponse::has_get_public_id() const {
  return _internal_has_get_public_id();
}
inline void TransactionResponse::clear_get_public_id() {
  if (GetArena() == nullptr && get_public_id_ != nullptr) {
    delete get_public_id_;
  }
  get_public_id_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::GetPublicId_Response& TransactionResponse::_internal_get_public_id() const {
  const ::Orthanc::DatabasePluginMessages::GetPublicId_Response* p = get_public_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::GetPublicId_Response*>(
      &::Orthanc::DatabasePluginMessages::_GetPublicId_Response_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::GetPublicId_Response& TransactionResponse::get_public_id() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionResponse.get_public_id)
  return _internal_get_public_id();
}
inline void TransactionResponse::unsafe_arena_set_allocated_get_public_id(
    ::Orthanc::DatabasePluginMessages::GetPublicId_Response* get_public_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(get_public_id_);
  }
  get_public_id_ = get_public_id;
  if (get_public_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.get_public_id)
}
inline ::Orthanc::DatabasePluginMessages::GetPublicId_Response* TransactionResponse::release_get_public_id() {
  auto temp = unsafe_arena_release_get_public_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::GetPublicId_Response* TransactionResponse::unsafe_arena_release_get_public_id() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionResponse.get_public_id)
  
  ::Orthanc::DatabasePluginMessages::GetPublicId_Response* temp = get_public_id_;
  get_public_id_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::GetPublicId_Response* TransactionResponse::_internal_mutable_get_public_id() {
  
  if (get_public_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetPublicId_Response>(GetArena());
    get_public_id_ = p;
  }
  return get_public_id_;
}
inline ::Orthanc::DatabasePluginMessages::GetPublicId_Response* TransactionResponse::mutable_get_public_id() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionResponse.get_public_id)
  return _internal_mutable_get_public_id();
}
inline void TransactionResponse::set_allocated_get_public_id(::Orthanc::DatabasePluginMessages::GetPublicId_Response* get_public_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete get_public_id_;
  }
  if (get_public_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_public_id);
    if (message_arena != submessage_arena) {
      get_public_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_public_id, submessage_arena);
    }
    
  } else {
    
  }
  get_public_id_ = get_public_id;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.get_public_id)
}

// .Orthanc.DatabasePluginMessages.GetResourcesCount.Response get_resources_count = 119;
inline bool TransactionResponse::_internal_has_get_resources_count() const {
  return this != internal_default_instance() && get_resources_count_ != nullptr;
}
inline bool TransactionResponse::has_get_resources_count() const {
  return _internal_has_get_resources_count();
}
inline void TransactionResponse::clear_get_resources_count() {
  if (GetArena() == nullptr && get_resources_count_ != nullptr) {
    delete get_resources_count_;
  }
  get_resources_count_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::GetResourcesCount_Response& TransactionResponse::_internal_get_resources_count() const {
  const ::Orthanc::DatabasePluginMessages::GetResourcesCount_Response* p = get_resources_count_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::GetResourcesCount_Response*>(
      &::Orthanc::DatabasePluginMessages::_GetResourcesCount_Response_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::GetResourcesCount_Response& TransactionResponse::get_resources_count() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionResponse.get_resources_count)
  return _internal_get_resources_count();
}
inline void TransactionResponse::unsafe_arena_set_allocated_get_resources_count(
    ::Orthanc::DatabasePluginMessages::GetResourcesCount_Response* get_resources_count) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(get_resources_count_);
  }
  get_resources_count_ = get_resources_count;
  if (get_resources_count) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.get_resources_count)
}
inline ::Orthanc::DatabasePluginMessages::GetResourcesCount_Response* TransactionResponse::release_get_resources_count() {
  auto temp = unsafe_arena_release_get_resources_count();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::GetResourcesCount_Response* TransactionResponse::unsafe_arena_release_get_resources_count() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionResponse.get_resources_count)
  
  ::Orthanc::DatabasePluginMessages::GetResourcesCount_Response* temp = get_resources_count_;
  get_resources_count_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::GetResourcesCount_Response* TransactionResponse::_internal_mutable_get_resources_count() {
  
  if (get_resources_count_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetResourcesCount_Response>(GetArena());
    get_resources_count_ = p;
  }
  return get_resources_count_;
}
inline ::Orthanc::DatabasePluginMessages::GetResourcesCount_Response* TransactionResponse::mutable_get_resources_count() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionResponse.get_resources_count)
  return _internal_mutable_get_resources_count();
}
inline void TransactionResponse::set_allocated_get_resources_count(::Orthanc::DatabasePluginMessages::GetResourcesCount_Response* get_resources_count) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete get_resources_count_;
  }
  if (get_resources_count) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_resources_count);
    if (message_arena != submessage_arena) {
      get_resources_count = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_resources_count, submessage_arena);
    }
    
  } else {
    
  }
  get_resources_count_ = get_resources_count;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.get_resources_count)
}

// .Orthanc.DatabasePluginMessages.GetResourceType.Response get_resource_type = 120;
inline bool TransactionResponse::_internal_has_get_resource_type() const {
  return this != internal_default_instance() && get_resource_type_ != nullptr;
}
inline bool TransactionResponse::has_get_resource_type() const {
  return _internal_has_get_resource_type();
}
inline void TransactionResponse::clear_get_resource_type() {
  if (GetArena() == nullptr && get_resource_type_ != nullptr) {
    delete get_resource_type_;
  }
  get_resource_type_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::GetResourceType_Response& TransactionResponse::_internal_get_resource_type() const {
  const ::Orthanc::DatabasePluginMessages::GetResourceType_Response* p = get_resource_type_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::GetResourceType_Response*>(
      &::Orthanc::DatabasePluginMessages::_GetResourceType_Response_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::GetResourceType_Response& TransactionResponse::get_resource_type() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionResponse.get_resource_type)
  return _internal_get_resource_type();
}
inline void TransactionResponse::unsafe_arena_set_allocated_get_resource_type(
    ::Orthanc::DatabasePluginMessages::GetResourceType_Response* get_resource_type) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(get_resource_type_);
  }
  get_resource_type_ = get_resource_type;
  if (get_resource_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.get_resource_type)
}
inline ::Orthanc::DatabasePluginMessages::GetResourceType_Response* TransactionResponse::release_get_resource_type() {
  auto temp = unsafe_arena_release_get_resource_type();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::GetResourceType_Response* TransactionResponse::unsafe_arena_release_get_resource_type() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionResponse.get_resource_type)
  
  ::Orthanc::DatabasePluginMessages::GetResourceType_Response* temp = get_resource_type_;
  get_resource_type_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::GetResourceType_Response* TransactionResponse::_internal_mutable_get_resource_type() {
  
  if (get_resource_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetResourceType_Response>(GetArena());
    get_resource_type_ = p;
  }
  return get_resource_type_;
}
inline ::Orthanc::DatabasePluginMessages::GetResourceType_Response* TransactionResponse::mutable_get_resource_type() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionResponse.get_resource_type)
  return _internal_mutable_get_resource_type();
}
inline void TransactionResponse::set_allocated_get_resource_type(::Orthanc::DatabasePluginMessages::GetResourceType_Response* get_resource_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete get_resource_type_;
  }
  if (get_resource_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_resource_type);
    if (message_arena != submessage_arena) {
      get_resource_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_resource_type, submessage_arena);
    }
    
  } else {
    
  }
  get_resource_type_ = get_resource_type;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.get_resource_type)
}

// .Orthanc.DatabasePluginMessages.GetTotalCompressedSize.Response get_total_compressed_size = 121;
inline bool TransactionResponse::_internal_has_get_total_compressed_size() const {
  return this != internal_default_instance() && get_total_compressed_size_ != nullptr;
}
inline bool TransactionResponse::has_get_total_compressed_size() const {
  return _internal_has_get_total_compressed_size();
}
inline void TransactionResponse::clear_get_total_compressed_size() {
  if (GetArena() == nullptr && get_total_compressed_size_ != nullptr) {
    delete get_total_compressed_size_;
  }
  get_total_compressed_size_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::GetTotalCompressedSize_Response& TransactionResponse::_internal_get_total_compressed_size() const {
  const ::Orthanc::DatabasePluginMessages::GetTotalCompressedSize_Response* p = get_total_compressed_size_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::GetTotalCompressedSize_Response*>(
      &::Orthanc::DatabasePluginMessages::_GetTotalCompressedSize_Response_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::GetTotalCompressedSize_Response& TransactionResponse::get_total_compressed_size() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionResponse.get_total_compressed_size)
  return _internal_get_total_compressed_size();
}
inline void TransactionResponse::unsafe_arena_set_allocated_get_total_compressed_size(
    ::Orthanc::DatabasePluginMessages::GetTotalCompressedSize_Response* get_total_compressed_size) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(get_total_compressed_size_);
  }
  get_total_compressed_size_ = get_total_compressed_size;
  if (get_total_compressed_size) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.get_total_compressed_size)
}
inline ::Orthanc::DatabasePluginMessages::GetTotalCompressedSize_Response* TransactionResponse::release_get_total_compressed_size() {
  auto temp = unsafe_arena_release_get_total_compressed_size();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::GetTotalCompressedSize_Response* TransactionResponse::unsafe_arena_release_get_total_compressed_size() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionResponse.get_total_compressed_size)
  
  ::Orthanc::DatabasePluginMessages::GetTotalCompressedSize_Response* temp = get_total_compressed_size_;
  get_total_compressed_size_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::GetTotalCompressedSize_Response* TransactionResponse::_internal_mutable_get_total_compressed_size() {
  
  if (get_total_compressed_size_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetTotalCompressedSize_Response>(GetArena());
    get_total_compressed_size_ = p;
  }
  return get_total_compressed_size_;
}
inline ::Orthanc::DatabasePluginMessages::GetTotalCompressedSize_Response* TransactionResponse::mutable_get_total_compressed_size() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionResponse.get_total_compressed_size)
  return _internal_mutable_get_total_compressed_size();
}
inline void TransactionResponse::set_allocated_get_total_compressed_size(::Orthanc::DatabasePluginMessages::GetTotalCompressedSize_Response* get_total_compressed_size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete get_total_compressed_size_;
  }
  if (get_total_compressed_size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_total_compressed_size);
    if (message_arena != submessage_arena) {
      get_total_compressed_size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_total_compressed_size, submessage_arena);
    }
    
  } else {
    
  }
  get_total_compressed_size_ = get_total_compressed_size;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.get_total_compressed_size)
}

// .Orthanc.DatabasePluginMessages.GetTotalUncompressedSize.Response get_total_uncompressed_size = 122;
inline bool TransactionResponse::_internal_has_get_total_uncompressed_size() const {
  return this != internal_default_instance() && get_total_uncompressed_size_ != nullptr;
}
inline bool TransactionResponse::has_get_total_uncompressed_size() const {
  return _internal_has_get_total_uncompressed_size();
}
inline void TransactionResponse::clear_get_total_uncompressed_size() {
  if (GetArena() == nullptr && get_total_uncompressed_size_ != nullptr) {
    delete get_total_uncompressed_size_;
  }
  get_total_uncompressed_size_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize_Response& TransactionResponse::_internal_get_total_uncompressed_size() const {
  const ::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize_Response* p = get_total_uncompressed_size_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize_Response*>(
      &::Orthanc::DatabasePluginMessages::_GetTotalUncompressedSize_Response_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize_Response& TransactionResponse::get_total_uncompressed_size() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionResponse.get_total_uncompressed_size)
  return _internal_get_total_uncompressed_size();
}
inline void TransactionResponse::unsafe_arena_set_allocated_get_total_uncompressed_size(
    ::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize_Response* get_total_uncompressed_size) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(get_total_uncompressed_size_);
  }
  get_total_uncompressed_size_ = get_total_uncompressed_size;
  if (get_total_uncompressed_size) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.get_total_uncompressed_size)
}
inline ::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize_Response* TransactionResponse::release_get_total_uncompressed_size() {
  auto temp = unsafe_arena_release_get_total_uncompressed_size();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize_Response* TransactionResponse::unsafe_arena_release_get_total_uncompressed_size() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionResponse.get_total_uncompressed_size)
  
  ::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize_Response* temp = get_total_uncompressed_size_;
  get_total_uncompressed_size_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize_Response* TransactionResponse::_internal_mutable_get_total_uncompressed_size() {
  
  if (get_total_uncompressed_size_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize_Response>(GetArena());
    get_total_uncompressed_size_ = p;
  }
  return get_total_uncompressed_size_;
}
inline ::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize_Response* TransactionResponse::mutable_get_total_uncompressed_size() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionResponse.get_total_uncompressed_size)
  return _internal_mutable_get_total_uncompressed_size();
}
inline void TransactionResponse::set_allocated_get_total_uncompressed_size(::Orthanc::DatabasePluginMessages::GetTotalUncompressedSize_Response* get_total_uncompressed_size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete get_total_uncompressed_size_;
  }
  if (get_total_uncompressed_size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_total_uncompressed_size);
    if (message_arena != submessage_arena) {
      get_total_uncompressed_size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_total_uncompressed_size, submessage_arena);
    }
    
  } else {
    
  }
  get_total_uncompressed_size_ = get_total_uncompressed_size;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.get_total_uncompressed_size)
}

// .Orthanc.DatabasePluginMessages.IsProtectedPatient.Response is_protected_patient = 123;
inline bool TransactionResponse::_internal_has_is_protected_patient() const {
  return this != internal_default_instance() && is_protected_patient_ != nullptr;
}
inline bool TransactionResponse::has_is_protected_patient() const {
  return _internal_has_is_protected_patient();
}
inline void TransactionResponse::clear_is_protected_patient() {
  if (GetArena() == nullptr && is_protected_patient_ != nullptr) {
    delete is_protected_patient_;
  }
  is_protected_patient_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::IsProtectedPatient_Response& TransactionResponse::_internal_is_protected_patient() const {
  const ::Orthanc::DatabasePluginMessages::IsProtectedPatient_Response* p = is_protected_patient_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::IsProtectedPatient_Response*>(
      &::Orthanc::DatabasePluginMessages::_IsProtectedPatient_Response_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::IsProtectedPatient_Response& TransactionResponse::is_protected_patient() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionResponse.is_protected_patient)
  return _internal_is_protected_patient();
}
inline void TransactionResponse::unsafe_arena_set_allocated_is_protected_patient(
    ::Orthanc::DatabasePluginMessages::IsProtectedPatient_Response* is_protected_patient) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(is_protected_patient_);
  }
  is_protected_patient_ = is_protected_patient;
  if (is_protected_patient) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.is_protected_patient)
}
inline ::Orthanc::DatabasePluginMessages::IsProtectedPatient_Response* TransactionResponse::release_is_protected_patient() {
  auto temp = unsafe_arena_release_is_protected_patient();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::IsProtectedPatient_Response* TransactionResponse::unsafe_arena_release_is_protected_patient() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionResponse.is_protected_patient)
  
  ::Orthanc::DatabasePluginMessages::IsProtectedPatient_Response* temp = is_protected_patient_;
  is_protected_patient_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::IsProtectedPatient_Response* TransactionResponse::_internal_mutable_is_protected_patient() {
  
  if (is_protected_patient_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::IsProtectedPatient_Response>(GetArena());
    is_protected_patient_ = p;
  }
  return is_protected_patient_;
}
inline ::Orthanc::DatabasePluginMessages::IsProtectedPatient_Response* TransactionResponse::mutable_is_protected_patient() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionResponse.is_protected_patient)
  return _internal_mutable_is_protected_patient();
}
inline void TransactionResponse::set_allocated_is_protected_patient(::Orthanc::DatabasePluginMessages::IsProtectedPatient_Response* is_protected_patient) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete is_protected_patient_;
  }
  if (is_protected_patient) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(is_protected_patient);
    if (message_arena != submessage_arena) {
      is_protected_patient = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, is_protected_patient, submessage_arena);
    }
    
  } else {
    
  }
  is_protected_patient_ = is_protected_patient;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.is_protected_patient)
}

// .Orthanc.DatabasePluginMessages.ListAvailableAttachments.Response list_available_attachments = 124;
inline bool TransactionResponse::_internal_has_list_available_attachments() const {
  return this != internal_default_instance() && list_available_attachments_ != nullptr;
}
inline bool TransactionResponse::has_list_available_attachments() const {
  return _internal_has_list_available_attachments();
}
inline void TransactionResponse::clear_list_available_attachments() {
  if (GetArena() == nullptr && list_available_attachments_ != nullptr) {
    delete list_available_attachments_;
  }
  list_available_attachments_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::ListAvailableAttachments_Response& TransactionResponse::_internal_list_available_attachments() const {
  const ::Orthanc::DatabasePluginMessages::ListAvailableAttachments_Response* p = list_available_attachments_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::ListAvailableAttachments_Response*>(
      &::Orthanc::DatabasePluginMessages::_ListAvailableAttachments_Response_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::ListAvailableAttachments_Response& TransactionResponse::list_available_attachments() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionResponse.list_available_attachments)
  return _internal_list_available_attachments();
}
inline void TransactionResponse::unsafe_arena_set_allocated_list_available_attachments(
    ::Orthanc::DatabasePluginMessages::ListAvailableAttachments_Response* list_available_attachments) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(list_available_attachments_);
  }
  list_available_attachments_ = list_available_attachments;
  if (list_available_attachments) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.list_available_attachments)
}
inline ::Orthanc::DatabasePluginMessages::ListAvailableAttachments_Response* TransactionResponse::release_list_available_attachments() {
  auto temp = unsafe_arena_release_list_available_attachments();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::ListAvailableAttachments_Response* TransactionResponse::unsafe_arena_release_list_available_attachments() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionResponse.list_available_attachments)
  
  ::Orthanc::DatabasePluginMessages::ListAvailableAttachments_Response* temp = list_available_attachments_;
  list_available_attachments_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::ListAvailableAttachments_Response* TransactionResponse::_internal_mutable_list_available_attachments() {
  
  if (list_available_attachments_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::ListAvailableAttachments_Response>(GetArena());
    list_available_attachments_ = p;
  }
  return list_available_attachments_;
}
inline ::Orthanc::DatabasePluginMessages::ListAvailableAttachments_Response* TransactionResponse::mutable_list_available_attachments() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionResponse.list_available_attachments)
  return _internal_mutable_list_available_attachments();
}
inline void TransactionResponse::set_allocated_list_available_attachments(::Orthanc::DatabasePluginMessages::ListAvailableAttachments_Response* list_available_attachments) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete list_available_attachments_;
  }
  if (list_available_attachments) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(list_available_attachments);
    if (message_arena != submessage_arena) {
      list_available_attachments = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list_available_attachments, submessage_arena);
    }
    
  } else {
    
  }
  list_available_attachments_ = list_available_attachments;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.list_available_attachments)
}

// .Orthanc.DatabasePluginMessages.LogChange.Response log_change = 125;
inline bool TransactionResponse::_internal_has_log_change() const {
  return this != internal_default_instance() && log_change_ != nullptr;
}
inline bool TransactionResponse::has_log_change() const {
  return _internal_has_log_change();
}
inline void TransactionResponse::clear_log_change() {
  if (GetArena() == nullptr && log_change_ != nullptr) {
    delete log_change_;
  }
  log_change_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::LogChange_Response& TransactionResponse::_internal_log_change() const {
  const ::Orthanc::DatabasePluginMessages::LogChange_Response* p = log_change_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::LogChange_Response*>(
      &::Orthanc::DatabasePluginMessages::_LogChange_Response_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::LogChange_Response& TransactionResponse::log_change() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionResponse.log_change)
  return _internal_log_change();
}
inline void TransactionResponse::unsafe_arena_set_allocated_log_change(
    ::Orthanc::DatabasePluginMessages::LogChange_Response* log_change) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(log_change_);
  }
  log_change_ = log_change;
  if (log_change) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.log_change)
}
inline ::Orthanc::DatabasePluginMessages::LogChange_Response* TransactionResponse::release_log_change() {
  auto temp = unsafe_arena_release_log_change();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::LogChange_Response* TransactionResponse::unsafe_arena_release_log_change() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionResponse.log_change)
  
  ::Orthanc::DatabasePluginMessages::LogChange_Response* temp = log_change_;
  log_change_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::LogChange_Response* TransactionResponse::_internal_mutable_log_change() {
  
  if (log_change_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::LogChange_Response>(GetArena());
    log_change_ = p;
  }
  return log_change_;
}
inline ::Orthanc::DatabasePluginMessages::LogChange_Response* TransactionResponse::mutable_log_change() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionResponse.log_change)
  return _internal_mutable_log_change();
}
inline void TransactionResponse::set_allocated_log_change(::Orthanc::DatabasePluginMessages::LogChange_Response* log_change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete log_change_;
  }
  if (log_change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(log_change);
    if (message_arena != submessage_arena) {
      log_change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, log_change, submessage_arena);
    }
    
  } else {
    
  }
  log_change_ = log_change;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.log_change)
}

// .Orthanc.DatabasePluginMessages.LogExportedResource.Response log_exported_resource = 126;
inline bool TransactionResponse::_internal_has_log_exported_resource() const {
  return this != internal_default_instance() && log_exported_resource_ != nullptr;
}
inline bool TransactionResponse::has_log_exported_resource() const {
  return _internal_has_log_exported_resource();
}
inline void TransactionResponse::clear_log_exported_resource() {
  if (GetArena() == nullptr && log_exported_resource_ != nullptr) {
    delete log_exported_resource_;
  }
  log_exported_resource_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::LogExportedResource_Response& TransactionResponse::_internal_log_exported_resource() const {
  const ::Orthanc::DatabasePluginMessages::LogExportedResource_Response* p = log_exported_resource_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::LogExportedResource_Response*>(
      &::Orthanc::DatabasePluginMessages::_LogExportedResource_Response_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::LogExportedResource_Response& TransactionResponse::log_exported_resource() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionResponse.log_exported_resource)
  return _internal_log_exported_resource();
}
inline void TransactionResponse::unsafe_arena_set_allocated_log_exported_resource(
    ::Orthanc::DatabasePluginMessages::LogExportedResource_Response* log_exported_resource) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(log_exported_resource_);
  }
  log_exported_resource_ = log_exported_resource;
  if (log_exported_resource) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.log_exported_resource)
}
inline ::Orthanc::DatabasePluginMessages::LogExportedResource_Response* TransactionResponse::release_log_exported_resource() {
  auto temp = unsafe_arena_release_log_exported_resource();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::LogExportedResource_Response* TransactionResponse::unsafe_arena_release_log_exported_resource() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionResponse.log_exported_resource)
  
  ::Orthanc::DatabasePluginMessages::LogExportedResource_Response* temp = log_exported_resource_;
  log_exported_resource_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::LogExportedResource_Response* TransactionResponse::_internal_mutable_log_exported_resource() {
  
  if (log_exported_resource_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::LogExportedResource_Response>(GetArena());
    log_exported_resource_ = p;
  }
  return log_exported_resource_;
}
inline ::Orthanc::DatabasePluginMessages::LogExportedResource_Response* TransactionResponse::mutable_log_exported_resource() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionResponse.log_exported_resource)
  return _internal_mutable_log_exported_resource();
}
inline void TransactionResponse::set_allocated_log_exported_resource(::Orthanc::DatabasePluginMessages::LogExportedResource_Response* log_exported_resource) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete log_exported_resource_;
  }
  if (log_exported_resource) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(log_exported_resource);
    if (message_arena != submessage_arena) {
      log_exported_resource = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, log_exported_resource, submessage_arena);
    }
    
  } else {
    
  }
  log_exported_resource_ = log_exported_resource;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.log_exported_resource)
}

// .Orthanc.DatabasePluginMessages.LookupAttachment.Response lookup_attachment = 127;
inline bool TransactionResponse::_internal_has_lookup_attachment() const {
  return this != internal_default_instance() && lookup_attachment_ != nullptr;
}
inline bool TransactionResponse::has_lookup_attachment() const {
  return _internal_has_lookup_attachment();
}
inline void TransactionResponse::clear_lookup_attachment() {
  if (GetArena() == nullptr && lookup_attachment_ != nullptr) {
    delete lookup_attachment_;
  }
  lookup_attachment_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::LookupAttachment_Response& TransactionResponse::_internal_lookup_attachment() const {
  const ::Orthanc::DatabasePluginMessages::LookupAttachment_Response* p = lookup_attachment_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::LookupAttachment_Response*>(
      &::Orthanc::DatabasePluginMessages::_LookupAttachment_Response_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::LookupAttachment_Response& TransactionResponse::lookup_attachment() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionResponse.lookup_attachment)
  return _internal_lookup_attachment();
}
inline void TransactionResponse::unsafe_arena_set_allocated_lookup_attachment(
    ::Orthanc::DatabasePluginMessages::LookupAttachment_Response* lookup_attachment) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lookup_attachment_);
  }
  lookup_attachment_ = lookup_attachment;
  if (lookup_attachment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.lookup_attachment)
}
inline ::Orthanc::DatabasePluginMessages::LookupAttachment_Response* TransactionResponse::release_lookup_attachment() {
  auto temp = unsafe_arena_release_lookup_attachment();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::LookupAttachment_Response* TransactionResponse::unsafe_arena_release_lookup_attachment() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionResponse.lookup_attachment)
  
  ::Orthanc::DatabasePluginMessages::LookupAttachment_Response* temp = lookup_attachment_;
  lookup_attachment_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::LookupAttachment_Response* TransactionResponse::_internal_mutable_lookup_attachment() {
  
  if (lookup_attachment_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::LookupAttachment_Response>(GetArena());
    lookup_attachment_ = p;
  }
  return lookup_attachment_;
}
inline ::Orthanc::DatabasePluginMessages::LookupAttachment_Response* TransactionResponse::mutable_lookup_attachment() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionResponse.lookup_attachment)
  return _internal_mutable_lookup_attachment();
}
inline void TransactionResponse::set_allocated_lookup_attachment(::Orthanc::DatabasePluginMessages::LookupAttachment_Response* lookup_attachment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete lookup_attachment_;
  }
  if (lookup_attachment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lookup_attachment);
    if (message_arena != submessage_arena) {
      lookup_attachment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lookup_attachment, submessage_arena);
    }
    
  } else {
    
  }
  lookup_attachment_ = lookup_attachment;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.lookup_attachment)
}

// .Orthanc.DatabasePluginMessages.LookupGlobalProperty.Response lookup_global_property = 128;
inline bool TransactionResponse::_internal_has_lookup_global_property() const {
  return this != internal_default_instance() && lookup_global_property_ != nullptr;
}
inline bool TransactionResponse::has_lookup_global_property() const {
  return _internal_has_lookup_global_property();
}
inline void TransactionResponse::clear_lookup_global_property() {
  if (GetArena() == nullptr && lookup_global_property_ != nullptr) {
    delete lookup_global_property_;
  }
  lookup_global_property_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::LookupGlobalProperty_Response& TransactionResponse::_internal_lookup_global_property() const {
  const ::Orthanc::DatabasePluginMessages::LookupGlobalProperty_Response* p = lookup_global_property_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::LookupGlobalProperty_Response*>(
      &::Orthanc::DatabasePluginMessages::_LookupGlobalProperty_Response_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::LookupGlobalProperty_Response& TransactionResponse::lookup_global_property() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionResponse.lookup_global_property)
  return _internal_lookup_global_property();
}
inline void TransactionResponse::unsafe_arena_set_allocated_lookup_global_property(
    ::Orthanc::DatabasePluginMessages::LookupGlobalProperty_Response* lookup_global_property) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lookup_global_property_);
  }
  lookup_global_property_ = lookup_global_property;
  if (lookup_global_property) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.lookup_global_property)
}
inline ::Orthanc::DatabasePluginMessages::LookupGlobalProperty_Response* TransactionResponse::release_lookup_global_property() {
  auto temp = unsafe_arena_release_lookup_global_property();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::LookupGlobalProperty_Response* TransactionResponse::unsafe_arena_release_lookup_global_property() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionResponse.lookup_global_property)
  
  ::Orthanc::DatabasePluginMessages::LookupGlobalProperty_Response* temp = lookup_global_property_;
  lookup_global_property_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::LookupGlobalProperty_Response* TransactionResponse::_internal_mutable_lookup_global_property() {
  
  if (lookup_global_property_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::LookupGlobalProperty_Response>(GetArena());
    lookup_global_property_ = p;
  }
  return lookup_global_property_;
}
inline ::Orthanc::DatabasePluginMessages::LookupGlobalProperty_Response* TransactionResponse::mutable_lookup_global_property() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionResponse.lookup_global_property)
  return _internal_mutable_lookup_global_property();
}
inline void TransactionResponse::set_allocated_lookup_global_property(::Orthanc::DatabasePluginMessages::LookupGlobalProperty_Response* lookup_global_property) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete lookup_global_property_;
  }
  if (lookup_global_property) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lookup_global_property);
    if (message_arena != submessage_arena) {
      lookup_global_property = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lookup_global_property, submessage_arena);
    }
    
  } else {
    
  }
  lookup_global_property_ = lookup_global_property;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.lookup_global_property)
}

// .Orthanc.DatabasePluginMessages.LookupMetadata.Response lookup_metadata = 129;
inline bool TransactionResponse::_internal_has_lookup_metadata() const {
  return this != internal_default_instance() && lookup_metadata_ != nullptr;
}
inline bool TransactionResponse::has_lookup_metadata() const {
  return _internal_has_lookup_metadata();
}
inline void TransactionResponse::clear_lookup_metadata() {
  if (GetArena() == nullptr && lookup_metadata_ != nullptr) {
    delete lookup_metadata_;
  }
  lookup_metadata_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::LookupMetadata_Response& TransactionResponse::_internal_lookup_metadata() const {
  const ::Orthanc::DatabasePluginMessages::LookupMetadata_Response* p = lookup_metadata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::LookupMetadata_Response*>(
      &::Orthanc::DatabasePluginMessages::_LookupMetadata_Response_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::LookupMetadata_Response& TransactionResponse::lookup_metadata() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionResponse.lookup_metadata)
  return _internal_lookup_metadata();
}
inline void TransactionResponse::unsafe_arena_set_allocated_lookup_metadata(
    ::Orthanc::DatabasePluginMessages::LookupMetadata_Response* lookup_metadata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lookup_metadata_);
  }
  lookup_metadata_ = lookup_metadata;
  if (lookup_metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.lookup_metadata)
}
inline ::Orthanc::DatabasePluginMessages::LookupMetadata_Response* TransactionResponse::release_lookup_metadata() {
  auto temp = unsafe_arena_release_lookup_metadata();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::LookupMetadata_Response* TransactionResponse::unsafe_arena_release_lookup_metadata() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionResponse.lookup_metadata)
  
  ::Orthanc::DatabasePluginMessages::LookupMetadata_Response* temp = lookup_metadata_;
  lookup_metadata_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::LookupMetadata_Response* TransactionResponse::_internal_mutable_lookup_metadata() {
  
  if (lookup_metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::LookupMetadata_Response>(GetArena());
    lookup_metadata_ = p;
  }
  return lookup_metadata_;
}
inline ::Orthanc::DatabasePluginMessages::LookupMetadata_Response* TransactionResponse::mutable_lookup_metadata() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionResponse.lookup_metadata)
  return _internal_mutable_lookup_metadata();
}
inline void TransactionResponse::set_allocated_lookup_metadata(::Orthanc::DatabasePluginMessages::LookupMetadata_Response* lookup_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete lookup_metadata_;
  }
  if (lookup_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lookup_metadata);
    if (message_arena != submessage_arena) {
      lookup_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lookup_metadata, submessage_arena);
    }
    
  } else {
    
  }
  lookup_metadata_ = lookup_metadata;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.lookup_metadata)
}

// .Orthanc.DatabasePluginMessages.LookupParent.Response lookup_parent = 130;
inline bool TransactionResponse::_internal_has_lookup_parent() const {
  return this != internal_default_instance() && lookup_parent_ != nullptr;
}
inline bool TransactionResponse::has_lookup_parent() const {
  return _internal_has_lookup_parent();
}
inline void TransactionResponse::clear_lookup_parent() {
  if (GetArena() == nullptr && lookup_parent_ != nullptr) {
    delete lookup_parent_;
  }
  lookup_parent_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::LookupParent_Response& TransactionResponse::_internal_lookup_parent() const {
  const ::Orthanc::DatabasePluginMessages::LookupParent_Response* p = lookup_parent_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::LookupParent_Response*>(
      &::Orthanc::DatabasePluginMessages::_LookupParent_Response_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::LookupParent_Response& TransactionResponse::lookup_parent() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionResponse.lookup_parent)
  return _internal_lookup_parent();
}
inline void TransactionResponse::unsafe_arena_set_allocated_lookup_parent(
    ::Orthanc::DatabasePluginMessages::LookupParent_Response* lookup_parent) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lookup_parent_);
  }
  lookup_parent_ = lookup_parent;
  if (lookup_parent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.lookup_parent)
}
inline ::Orthanc::DatabasePluginMessages::LookupParent_Response* TransactionResponse::release_lookup_parent() {
  auto temp = unsafe_arena_release_lookup_parent();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::LookupParent_Response* TransactionResponse::unsafe_arena_release_lookup_parent() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionResponse.lookup_parent)
  
  ::Orthanc::DatabasePluginMessages::LookupParent_Response* temp = lookup_parent_;
  lookup_parent_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::LookupParent_Response* TransactionResponse::_internal_mutable_lookup_parent() {
  
  if (lookup_parent_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::LookupParent_Response>(GetArena());
    lookup_parent_ = p;
  }
  return lookup_parent_;
}
inline ::Orthanc::DatabasePluginMessages::LookupParent_Response* TransactionResponse::mutable_lookup_parent() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionResponse.lookup_parent)
  return _internal_mutable_lookup_parent();
}
inline void TransactionResponse::set_allocated_lookup_parent(::Orthanc::DatabasePluginMessages::LookupParent_Response* lookup_parent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete lookup_parent_;
  }
  if (lookup_parent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lookup_parent);
    if (message_arena != submessage_arena) {
      lookup_parent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lookup_parent, submessage_arena);
    }
    
  } else {
    
  }
  lookup_parent_ = lookup_parent;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.lookup_parent)
}

// .Orthanc.DatabasePluginMessages.LookupResource.Response lookup_resource = 131;
inline bool TransactionResponse::_internal_has_lookup_resource() const {
  return this != internal_default_instance() && lookup_resource_ != nullptr;
}
inline bool TransactionResponse::has_lookup_resource() const {
  return _internal_has_lookup_resource();
}
inline void TransactionResponse::clear_lookup_resource() {
  if (GetArena() == nullptr && lookup_resource_ != nullptr) {
    delete lookup_resource_;
  }
  lookup_resource_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::LookupResource_Response& TransactionResponse::_internal_lookup_resource() const {
  const ::Orthanc::DatabasePluginMessages::LookupResource_Response* p = lookup_resource_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::LookupResource_Response*>(
      &::Orthanc::DatabasePluginMessages::_LookupResource_Response_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::LookupResource_Response& TransactionResponse::lookup_resource() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionResponse.lookup_resource)
  return _internal_lookup_resource();
}
inline void TransactionResponse::unsafe_arena_set_allocated_lookup_resource(
    ::Orthanc::DatabasePluginMessages::LookupResource_Response* lookup_resource) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lookup_resource_);
  }
  lookup_resource_ = lookup_resource;
  if (lookup_resource) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.lookup_resource)
}
inline ::Orthanc::DatabasePluginMessages::LookupResource_Response* TransactionResponse::release_lookup_resource() {
  auto temp = unsafe_arena_release_lookup_resource();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::LookupResource_Response* TransactionResponse::unsafe_arena_release_lookup_resource() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionResponse.lookup_resource)
  
  ::Orthanc::DatabasePluginMessages::LookupResource_Response* temp = lookup_resource_;
  lookup_resource_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::LookupResource_Response* TransactionResponse::_internal_mutable_lookup_resource() {
  
  if (lookup_resource_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::LookupResource_Response>(GetArena());
    lookup_resource_ = p;
  }
  return lookup_resource_;
}
inline ::Orthanc::DatabasePluginMessages::LookupResource_Response* TransactionResponse::mutable_lookup_resource() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionResponse.lookup_resource)
  return _internal_mutable_lookup_resource();
}
inline void TransactionResponse::set_allocated_lookup_resource(::Orthanc::DatabasePluginMessages::LookupResource_Response* lookup_resource) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete lookup_resource_;
  }
  if (lookup_resource) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lookup_resource);
    if (message_arena != submessage_arena) {
      lookup_resource = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lookup_resource, submessage_arena);
    }
    
  } else {
    
  }
  lookup_resource_ = lookup_resource;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.lookup_resource)
}

// .Orthanc.DatabasePluginMessages.SelectPatientToRecycle.Response select_patient_to_recycle = 132;
inline bool TransactionResponse::_internal_has_select_patient_to_recycle() const {
  return this != internal_default_instance() && select_patient_to_recycle_ != nullptr;
}
inline bool TransactionResponse::has_select_patient_to_recycle() const {
  return _internal_has_select_patient_to_recycle();
}
inline void TransactionResponse::clear_select_patient_to_recycle() {
  if (GetArena() == nullptr && select_patient_to_recycle_ != nullptr) {
    delete select_patient_to_recycle_;
  }
  select_patient_to_recycle_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::SelectPatientToRecycle_Response& TransactionResponse::_internal_select_patient_to_recycle() const {
  const ::Orthanc::DatabasePluginMessages::SelectPatientToRecycle_Response* p = select_patient_to_recycle_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::SelectPatientToRecycle_Response*>(
      &::Orthanc::DatabasePluginMessages::_SelectPatientToRecycle_Response_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::SelectPatientToRecycle_Response& TransactionResponse::select_patient_to_recycle() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionResponse.select_patient_to_recycle)
  return _internal_select_patient_to_recycle();
}
inline void TransactionResponse::unsafe_arena_set_allocated_select_patient_to_recycle(
    ::Orthanc::DatabasePluginMessages::SelectPatientToRecycle_Response* select_patient_to_recycle) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(select_patient_to_recycle_);
  }
  select_patient_to_recycle_ = select_patient_to_recycle;
  if (select_patient_to_recycle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.select_patient_to_recycle)
}
inline ::Orthanc::DatabasePluginMessages::SelectPatientToRecycle_Response* TransactionResponse::release_select_patient_to_recycle() {
  auto temp = unsafe_arena_release_select_patient_to_recycle();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::SelectPatientToRecycle_Response* TransactionResponse::unsafe_arena_release_select_patient_to_recycle() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionResponse.select_patient_to_recycle)
  
  ::Orthanc::DatabasePluginMessages::SelectPatientToRecycle_Response* temp = select_patient_to_recycle_;
  select_patient_to_recycle_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::SelectPatientToRecycle_Response* TransactionResponse::_internal_mutable_select_patient_to_recycle() {
  
  if (select_patient_to_recycle_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::SelectPatientToRecycle_Response>(GetArena());
    select_patient_to_recycle_ = p;
  }
  return select_patient_to_recycle_;
}
inline ::Orthanc::DatabasePluginMessages::SelectPatientToRecycle_Response* TransactionResponse::mutable_select_patient_to_recycle() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionResponse.select_patient_to_recycle)
  return _internal_mutable_select_patient_to_recycle();
}
inline void TransactionResponse::set_allocated_select_patient_to_recycle(::Orthanc::DatabasePluginMessages::SelectPatientToRecycle_Response* select_patient_to_recycle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete select_patient_to_recycle_;
  }
  if (select_patient_to_recycle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(select_patient_to_recycle);
    if (message_arena != submessage_arena) {
      select_patient_to_recycle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, select_patient_to_recycle, submessage_arena);
    }
    
  } else {
    
  }
  select_patient_to_recycle_ = select_patient_to_recycle;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.select_patient_to_recycle)
}

// .Orthanc.DatabasePluginMessages.SelectPatientToRecycleWithAvoid.Response select_patient_to_recycle_with_avoid = 133;
inline bool TransactionResponse::_internal_has_select_patient_to_recycle_with_avoid() const {
  return this != internal_default_instance() && select_patient_to_recycle_with_avoid_ != nullptr;
}
inline bool TransactionResponse::has_select_patient_to_recycle_with_avoid() const {
  return _internal_has_select_patient_to_recycle_with_avoid();
}
inline void TransactionResponse::clear_select_patient_to_recycle_with_avoid() {
  if (GetArena() == nullptr && select_patient_to_recycle_with_avoid_ != nullptr) {
    delete select_patient_to_recycle_with_avoid_;
  }
  select_patient_to_recycle_with_avoid_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid_Response& TransactionResponse::_internal_select_patient_to_recycle_with_avoid() const {
  const ::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid_Response* p = select_patient_to_recycle_with_avoid_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid_Response*>(
      &::Orthanc::DatabasePluginMessages::_SelectPatientToRecycleWithAvoid_Response_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid_Response& TransactionResponse::select_patient_to_recycle_with_avoid() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionResponse.select_patient_to_recycle_with_avoid)
  return _internal_select_patient_to_recycle_with_avoid();
}
inline void TransactionResponse::unsafe_arena_set_allocated_select_patient_to_recycle_with_avoid(
    ::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid_Response* select_patient_to_recycle_with_avoid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(select_patient_to_recycle_with_avoid_);
  }
  select_patient_to_recycle_with_avoid_ = select_patient_to_recycle_with_avoid;
  if (select_patient_to_recycle_with_avoid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.select_patient_to_recycle_with_avoid)
}
inline ::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid_Response* TransactionResponse::release_select_patient_to_recycle_with_avoid() {
  auto temp = unsafe_arena_release_select_patient_to_recycle_with_avoid();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid_Response* TransactionResponse::unsafe_arena_release_select_patient_to_recycle_with_avoid() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionResponse.select_patient_to_recycle_with_avoid)
  
  ::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid_Response* temp = select_patient_to_recycle_with_avoid_;
  select_patient_to_recycle_with_avoid_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid_Response* TransactionResponse::_internal_mutable_select_patient_to_recycle_with_avoid() {
  
  if (select_patient_to_recycle_with_avoid_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid_Response>(GetArena());
    select_patient_to_recycle_with_avoid_ = p;
  }
  return select_patient_to_recycle_with_avoid_;
}
inline ::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid_Response* TransactionResponse::mutable_select_patient_to_recycle_with_avoid() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionResponse.select_patient_to_recycle_with_avoid)
  return _internal_mutable_select_patient_to_recycle_with_avoid();
}
inline void TransactionResponse::set_allocated_select_patient_to_recycle_with_avoid(::Orthanc::DatabasePluginMessages::SelectPatientToRecycleWithAvoid_Response* select_patient_to_recycle_with_avoid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete select_patient_to_recycle_with_avoid_;
  }
  if (select_patient_to_recycle_with_avoid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(select_patient_to_recycle_with_avoid);
    if (message_arena != submessage_arena) {
      select_patient_to_recycle_with_avoid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, select_patient_to_recycle_with_avoid, submessage_arena);
    }
    
  } else {
    
  }
  select_patient_to_recycle_with_avoid_ = select_patient_to_recycle_with_avoid;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.select_patient_to_recycle_with_avoid)
}

// .Orthanc.DatabasePluginMessages.SetGlobalProperty.Response set_global_property = 134;
inline bool TransactionResponse::_internal_has_set_global_property() const {
  return this != internal_default_instance() && set_global_property_ != nullptr;
}
inline bool TransactionResponse::has_set_global_property() const {
  return _internal_has_set_global_property();
}
inline void TransactionResponse::clear_set_global_property() {
  if (GetArena() == nullptr && set_global_property_ != nullptr) {
    delete set_global_property_;
  }
  set_global_property_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::SetGlobalProperty_Response& TransactionResponse::_internal_set_global_property() const {
  const ::Orthanc::DatabasePluginMessages::SetGlobalProperty_Response* p = set_global_property_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::SetGlobalProperty_Response*>(
      &::Orthanc::DatabasePluginMessages::_SetGlobalProperty_Response_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::SetGlobalProperty_Response& TransactionResponse::set_global_property() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionResponse.set_global_property)
  return _internal_set_global_property();
}
inline void TransactionResponse::unsafe_arena_set_allocated_set_global_property(
    ::Orthanc::DatabasePluginMessages::SetGlobalProperty_Response* set_global_property) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(set_global_property_);
  }
  set_global_property_ = set_global_property;
  if (set_global_property) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.set_global_property)
}
inline ::Orthanc::DatabasePluginMessages::SetGlobalProperty_Response* TransactionResponse::release_set_global_property() {
  auto temp = unsafe_arena_release_set_global_property();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::SetGlobalProperty_Response* TransactionResponse::unsafe_arena_release_set_global_property() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionResponse.set_global_property)
  
  ::Orthanc::DatabasePluginMessages::SetGlobalProperty_Response* temp = set_global_property_;
  set_global_property_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::SetGlobalProperty_Response* TransactionResponse::_internal_mutable_set_global_property() {
  
  if (set_global_property_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::SetGlobalProperty_Response>(GetArena());
    set_global_property_ = p;
  }
  return set_global_property_;
}
inline ::Orthanc::DatabasePluginMessages::SetGlobalProperty_Response* TransactionResponse::mutable_set_global_property() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionResponse.set_global_property)
  return _internal_mutable_set_global_property();
}
inline void TransactionResponse::set_allocated_set_global_property(::Orthanc::DatabasePluginMessages::SetGlobalProperty_Response* set_global_property) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete set_global_property_;
  }
  if (set_global_property) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(set_global_property);
    if (message_arena != submessage_arena) {
      set_global_property = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_global_property, submessage_arena);
    }
    
  } else {
    
  }
  set_global_property_ = set_global_property;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.set_global_property)
}

// .Orthanc.DatabasePluginMessages.ClearMainDicomTags.Response clear_main_dicom_tags = 135;
inline bool TransactionResponse::_internal_has_clear_main_dicom_tags() const {
  return this != internal_default_instance() && clear_main_dicom_tags_ != nullptr;
}
inline bool TransactionResponse::has_clear_main_dicom_tags() const {
  return _internal_has_clear_main_dicom_tags();
}
inline void TransactionResponse::clear_clear_main_dicom_tags() {
  if (GetArena() == nullptr && clear_main_dicom_tags_ != nullptr) {
    delete clear_main_dicom_tags_;
  }
  clear_main_dicom_tags_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::ClearMainDicomTags_Response& TransactionResponse::_internal_clear_main_dicom_tags() const {
  const ::Orthanc::DatabasePluginMessages::ClearMainDicomTags_Response* p = clear_main_dicom_tags_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::ClearMainDicomTags_Response*>(
      &::Orthanc::DatabasePluginMessages::_ClearMainDicomTags_Response_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::ClearMainDicomTags_Response& TransactionResponse::clear_main_dicom_tags() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionResponse.clear_main_dicom_tags)
  return _internal_clear_main_dicom_tags();
}
inline void TransactionResponse::unsafe_arena_set_allocated_clear_main_dicom_tags(
    ::Orthanc::DatabasePluginMessages::ClearMainDicomTags_Response* clear_main_dicom_tags) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(clear_main_dicom_tags_);
  }
  clear_main_dicom_tags_ = clear_main_dicom_tags;
  if (clear_main_dicom_tags) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.clear_main_dicom_tags)
}
inline ::Orthanc::DatabasePluginMessages::ClearMainDicomTags_Response* TransactionResponse::release_clear_main_dicom_tags() {
  auto temp = unsafe_arena_release_clear_main_dicom_tags();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::ClearMainDicomTags_Response* TransactionResponse::unsafe_arena_release_clear_main_dicom_tags() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionResponse.clear_main_dicom_tags)
  
  ::Orthanc::DatabasePluginMessages::ClearMainDicomTags_Response* temp = clear_main_dicom_tags_;
  clear_main_dicom_tags_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::ClearMainDicomTags_Response* TransactionResponse::_internal_mutable_clear_main_dicom_tags() {
  
  if (clear_main_dicom_tags_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::ClearMainDicomTags_Response>(GetArena());
    clear_main_dicom_tags_ = p;
  }
  return clear_main_dicom_tags_;
}
inline ::Orthanc::DatabasePluginMessages::ClearMainDicomTags_Response* TransactionResponse::mutable_clear_main_dicom_tags() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionResponse.clear_main_dicom_tags)
  return _internal_mutable_clear_main_dicom_tags();
}
inline void TransactionResponse::set_allocated_clear_main_dicom_tags(::Orthanc::DatabasePluginMessages::ClearMainDicomTags_Response* clear_main_dicom_tags) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete clear_main_dicom_tags_;
  }
  if (clear_main_dicom_tags) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(clear_main_dicom_tags);
    if (message_arena != submessage_arena) {
      clear_main_dicom_tags = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clear_main_dicom_tags, submessage_arena);
    }
    
  } else {
    
  }
  clear_main_dicom_tags_ = clear_main_dicom_tags;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.clear_main_dicom_tags)
}

// .Orthanc.DatabasePluginMessages.SetMetadata.Response set_metadata = 136;
inline bool TransactionResponse::_internal_has_set_metadata() const {
  return this != internal_default_instance() && set_metadata_ != nullptr;
}
inline bool TransactionResponse::has_set_metadata() const {
  return _internal_has_set_metadata();
}
inline void TransactionResponse::clear_set_metadata() {
  if (GetArena() == nullptr && set_metadata_ != nullptr) {
    delete set_metadata_;
  }
  set_metadata_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::SetMetadata_Response& TransactionResponse::_internal_set_metadata() const {
  const ::Orthanc::DatabasePluginMessages::SetMetadata_Response* p = set_metadata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::SetMetadata_Response*>(
      &::Orthanc::DatabasePluginMessages::_SetMetadata_Response_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::SetMetadata_Response& TransactionResponse::set_metadata() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionResponse.set_metadata)
  return _internal_set_metadata();
}
inline void TransactionResponse::unsafe_arena_set_allocated_set_metadata(
    ::Orthanc::DatabasePluginMessages::SetMetadata_Response* set_metadata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(set_metadata_);
  }
  set_metadata_ = set_metadata;
  if (set_metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.set_metadata)
}
inline ::Orthanc::DatabasePluginMessages::SetMetadata_Response* TransactionResponse::release_set_metadata() {
  auto temp = unsafe_arena_release_set_metadata();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::SetMetadata_Response* TransactionResponse::unsafe_arena_release_set_metadata() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionResponse.set_metadata)
  
  ::Orthanc::DatabasePluginMessages::SetMetadata_Response* temp = set_metadata_;
  set_metadata_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::SetMetadata_Response* TransactionResponse::_internal_mutable_set_metadata() {
  
  if (set_metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::SetMetadata_Response>(GetArena());
    set_metadata_ = p;
  }
  return set_metadata_;
}
inline ::Orthanc::DatabasePluginMessages::SetMetadata_Response* TransactionResponse::mutable_set_metadata() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionResponse.set_metadata)
  return _internal_mutable_set_metadata();
}
inline void TransactionResponse::set_allocated_set_metadata(::Orthanc::DatabasePluginMessages::SetMetadata_Response* set_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete set_metadata_;
  }
  if (set_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(set_metadata);
    if (message_arena != submessage_arena) {
      set_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_metadata, submessage_arena);
    }
    
  } else {
    
  }
  set_metadata_ = set_metadata;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.set_metadata)
}

// .Orthanc.DatabasePluginMessages.SetProtectedPatient.Response set_protected_patient = 137;
inline bool TransactionResponse::_internal_has_set_protected_patient() const {
  return this != internal_default_instance() && set_protected_patient_ != nullptr;
}
inline bool TransactionResponse::has_set_protected_patient() const {
  return _internal_has_set_protected_patient();
}
inline void TransactionResponse::clear_set_protected_patient() {
  if (GetArena() == nullptr && set_protected_patient_ != nullptr) {
    delete set_protected_patient_;
  }
  set_protected_patient_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::SetProtectedPatient_Response& TransactionResponse::_internal_set_protected_patient() const {
  const ::Orthanc::DatabasePluginMessages::SetProtectedPatient_Response* p = set_protected_patient_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::SetProtectedPatient_Response*>(
      &::Orthanc::DatabasePluginMessages::_SetProtectedPatient_Response_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::SetProtectedPatient_Response& TransactionResponse::set_protected_patient() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionResponse.set_protected_patient)
  return _internal_set_protected_patient();
}
inline void TransactionResponse::unsafe_arena_set_allocated_set_protected_patient(
    ::Orthanc::DatabasePluginMessages::SetProtectedPatient_Response* set_protected_patient) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(set_protected_patient_);
  }
  set_protected_patient_ = set_protected_patient;
  if (set_protected_patient) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.set_protected_patient)
}
inline ::Orthanc::DatabasePluginMessages::SetProtectedPatient_Response* TransactionResponse::release_set_protected_patient() {
  auto temp = unsafe_arena_release_set_protected_patient();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::SetProtectedPatient_Response* TransactionResponse::unsafe_arena_release_set_protected_patient() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionResponse.set_protected_patient)
  
  ::Orthanc::DatabasePluginMessages::SetProtectedPatient_Response* temp = set_protected_patient_;
  set_protected_patient_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::SetProtectedPatient_Response* TransactionResponse::_internal_mutable_set_protected_patient() {
  
  if (set_protected_patient_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::SetProtectedPatient_Response>(GetArena());
    set_protected_patient_ = p;
  }
  return set_protected_patient_;
}
inline ::Orthanc::DatabasePluginMessages::SetProtectedPatient_Response* TransactionResponse::mutable_set_protected_patient() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionResponse.set_protected_patient)
  return _internal_mutable_set_protected_patient();
}
inline void TransactionResponse::set_allocated_set_protected_patient(::Orthanc::DatabasePluginMessages::SetProtectedPatient_Response* set_protected_patient) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete set_protected_patient_;
  }
  if (set_protected_patient) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(set_protected_patient);
    if (message_arena != submessage_arena) {
      set_protected_patient = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_protected_patient, submessage_arena);
    }
    
  } else {
    
  }
  set_protected_patient_ = set_protected_patient;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.set_protected_patient)
}

// .Orthanc.DatabasePluginMessages.IsDiskSizeAbove.Response is_disk_size_above = 138;
inline bool TransactionResponse::_internal_has_is_disk_size_above() const {
  return this != internal_default_instance() && is_disk_size_above_ != nullptr;
}
inline bool TransactionResponse::has_is_disk_size_above() const {
  return _internal_has_is_disk_size_above();
}
inline void TransactionResponse::clear_is_disk_size_above() {
  if (GetArena() == nullptr && is_disk_size_above_ != nullptr) {
    delete is_disk_size_above_;
  }
  is_disk_size_above_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::IsDiskSizeAbove_Response& TransactionResponse::_internal_is_disk_size_above() const {
  const ::Orthanc::DatabasePluginMessages::IsDiskSizeAbove_Response* p = is_disk_size_above_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::IsDiskSizeAbove_Response*>(
      &::Orthanc::DatabasePluginMessages::_IsDiskSizeAbove_Response_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::IsDiskSizeAbove_Response& TransactionResponse::is_disk_size_above() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionResponse.is_disk_size_above)
  return _internal_is_disk_size_above();
}
inline void TransactionResponse::unsafe_arena_set_allocated_is_disk_size_above(
    ::Orthanc::DatabasePluginMessages::IsDiskSizeAbove_Response* is_disk_size_above) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(is_disk_size_above_);
  }
  is_disk_size_above_ = is_disk_size_above;
  if (is_disk_size_above) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.is_disk_size_above)
}
inline ::Orthanc::DatabasePluginMessages::IsDiskSizeAbove_Response* TransactionResponse::release_is_disk_size_above() {
  auto temp = unsafe_arena_release_is_disk_size_above();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::IsDiskSizeAbove_Response* TransactionResponse::unsafe_arena_release_is_disk_size_above() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionResponse.is_disk_size_above)
  
  ::Orthanc::DatabasePluginMessages::IsDiskSizeAbove_Response* temp = is_disk_size_above_;
  is_disk_size_above_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::IsDiskSizeAbove_Response* TransactionResponse::_internal_mutable_is_disk_size_above() {
  
  if (is_disk_size_above_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::IsDiskSizeAbove_Response>(GetArena());
    is_disk_size_above_ = p;
  }
  return is_disk_size_above_;
}
inline ::Orthanc::DatabasePluginMessages::IsDiskSizeAbove_Response* TransactionResponse::mutable_is_disk_size_above() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionResponse.is_disk_size_above)
  return _internal_mutable_is_disk_size_above();
}
inline void TransactionResponse::set_allocated_is_disk_size_above(::Orthanc::DatabasePluginMessages::IsDiskSizeAbove_Response* is_disk_size_above) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete is_disk_size_above_;
  }
  if (is_disk_size_above) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(is_disk_size_above);
    if (message_arena != submessage_arena) {
      is_disk_size_above = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, is_disk_size_above, submessage_arena);
    }
    
  } else {
    
  }
  is_disk_size_above_ = is_disk_size_above;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.is_disk_size_above)
}

// .Orthanc.DatabasePluginMessages.LookupResources.Response lookup_resources = 139;
inline bool TransactionResponse::_internal_has_lookup_resources() const {
  return this != internal_default_instance() && lookup_resources_ != nullptr;
}
inline bool TransactionResponse::has_lookup_resources() const {
  return _internal_has_lookup_resources();
}
inline void TransactionResponse::clear_lookup_resources() {
  if (GetArena() == nullptr && lookup_resources_ != nullptr) {
    delete lookup_resources_;
  }
  lookup_resources_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::LookupResources_Response& TransactionResponse::_internal_lookup_resources() const {
  const ::Orthanc::DatabasePluginMessages::LookupResources_Response* p = lookup_resources_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::LookupResources_Response*>(
      &::Orthanc::DatabasePluginMessages::_LookupResources_Response_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::LookupResources_Response& TransactionResponse::lookup_resources() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionResponse.lookup_resources)
  return _internal_lookup_resources();
}
inline void TransactionResponse::unsafe_arena_set_allocated_lookup_resources(
    ::Orthanc::DatabasePluginMessages::LookupResources_Response* lookup_resources) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lookup_resources_);
  }
  lookup_resources_ = lookup_resources;
  if (lookup_resources) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.lookup_resources)
}
inline ::Orthanc::DatabasePluginMessages::LookupResources_Response* TransactionResponse::release_lookup_resources() {
  auto temp = unsafe_arena_release_lookup_resources();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::LookupResources_Response* TransactionResponse::unsafe_arena_release_lookup_resources() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionResponse.lookup_resources)
  
  ::Orthanc::DatabasePluginMessages::LookupResources_Response* temp = lookup_resources_;
  lookup_resources_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::LookupResources_Response* TransactionResponse::_internal_mutable_lookup_resources() {
  
  if (lookup_resources_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::LookupResources_Response>(GetArena());
    lookup_resources_ = p;
  }
  return lookup_resources_;
}
inline ::Orthanc::DatabasePluginMessages::LookupResources_Response* TransactionResponse::mutable_lookup_resources() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionResponse.lookup_resources)
  return _internal_mutable_lookup_resources();
}
inline void TransactionResponse::set_allocated_lookup_resources(::Orthanc::DatabasePluginMessages::LookupResources_Response* lookup_resources) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete lookup_resources_;
  }
  if (lookup_resources) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lookup_resources);
    if (message_arena != submessage_arena) {
      lookup_resources = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lookup_resources, submessage_arena);
    }
    
  } else {
    
  }
  lookup_resources_ = lookup_resources;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.lookup_resources)
}

// .Orthanc.DatabasePluginMessages.CreateInstance.Response create_instance = 140;
inline bool TransactionResponse::_internal_has_create_instance() const {
  return this != internal_default_instance() && create_instance_ != nullptr;
}
inline bool TransactionResponse::has_create_instance() const {
  return _internal_has_create_instance();
}
inline void TransactionResponse::clear_create_instance() {
  if (GetArena() == nullptr && create_instance_ != nullptr) {
    delete create_instance_;
  }
  create_instance_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::CreateInstance_Response& TransactionResponse::_internal_create_instance() const {
  const ::Orthanc::DatabasePluginMessages::CreateInstance_Response* p = create_instance_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::CreateInstance_Response*>(
      &::Orthanc::DatabasePluginMessages::_CreateInstance_Response_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::CreateInstance_Response& TransactionResponse::create_instance() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionResponse.create_instance)
  return _internal_create_instance();
}
inline void TransactionResponse::unsafe_arena_set_allocated_create_instance(
    ::Orthanc::DatabasePluginMessages::CreateInstance_Response* create_instance) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_instance_);
  }
  create_instance_ = create_instance;
  if (create_instance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.create_instance)
}
inline ::Orthanc::DatabasePluginMessages::CreateInstance_Response* TransactionResponse::release_create_instance() {
  auto temp = unsafe_arena_release_create_instance();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::CreateInstance_Response* TransactionResponse::unsafe_arena_release_create_instance() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionResponse.create_instance)
  
  ::Orthanc::DatabasePluginMessages::CreateInstance_Response* temp = create_instance_;
  create_instance_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::CreateInstance_Response* TransactionResponse::_internal_mutable_create_instance() {
  
  if (create_instance_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::CreateInstance_Response>(GetArena());
    create_instance_ = p;
  }
  return create_instance_;
}
inline ::Orthanc::DatabasePluginMessages::CreateInstance_Response* TransactionResponse::mutable_create_instance() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionResponse.create_instance)
  return _internal_mutable_create_instance();
}
inline void TransactionResponse::set_allocated_create_instance(::Orthanc::DatabasePluginMessages::CreateInstance_Response* create_instance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete create_instance_;
  }
  if (create_instance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(create_instance);
    if (message_arena != submessage_arena) {
      create_instance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_instance, submessage_arena);
    }
    
  } else {
    
  }
  create_instance_ = create_instance;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.create_instance)
}

// .Orthanc.DatabasePluginMessages.SetResourcesContent.Response set_resources_content = 141;
inline bool TransactionResponse::_internal_has_set_resources_content() const {
  return this != internal_default_instance() && set_resources_content_ != nullptr;
}
inline bool TransactionResponse::has_set_resources_content() const {
  return _internal_has_set_resources_content();
}
inline void TransactionResponse::clear_set_resources_content() {
  if (GetArena() == nullptr && set_resources_content_ != nullptr) {
    delete set_resources_content_;
  }
  set_resources_content_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::SetResourcesContent_Response& TransactionResponse::_internal_set_resources_content() const {
  const ::Orthanc::DatabasePluginMessages::SetResourcesContent_Response* p = set_resources_content_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::SetResourcesContent_Response*>(
      &::Orthanc::DatabasePluginMessages::_SetResourcesContent_Response_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::SetResourcesContent_Response& TransactionResponse::set_resources_content() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionResponse.set_resources_content)
  return _internal_set_resources_content();
}
inline void TransactionResponse::unsafe_arena_set_allocated_set_resources_content(
    ::Orthanc::DatabasePluginMessages::SetResourcesContent_Response* set_resources_content) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(set_resources_content_);
  }
  set_resources_content_ = set_resources_content;
  if (set_resources_content) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.set_resources_content)
}
inline ::Orthanc::DatabasePluginMessages::SetResourcesContent_Response* TransactionResponse::release_set_resources_content() {
  auto temp = unsafe_arena_release_set_resources_content();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::SetResourcesContent_Response* TransactionResponse::unsafe_arena_release_set_resources_content() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionResponse.set_resources_content)
  
  ::Orthanc::DatabasePluginMessages::SetResourcesContent_Response* temp = set_resources_content_;
  set_resources_content_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::SetResourcesContent_Response* TransactionResponse::_internal_mutable_set_resources_content() {
  
  if (set_resources_content_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::SetResourcesContent_Response>(GetArena());
    set_resources_content_ = p;
  }
  return set_resources_content_;
}
inline ::Orthanc::DatabasePluginMessages::SetResourcesContent_Response* TransactionResponse::mutable_set_resources_content() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionResponse.set_resources_content)
  return _internal_mutable_set_resources_content();
}
inline void TransactionResponse::set_allocated_set_resources_content(::Orthanc::DatabasePluginMessages::SetResourcesContent_Response* set_resources_content) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete set_resources_content_;
  }
  if (set_resources_content) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(set_resources_content);
    if (message_arena != submessage_arena) {
      set_resources_content = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_resources_content, submessage_arena);
    }
    
  } else {
    
  }
  set_resources_content_ = set_resources_content;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.set_resources_content)
}

// .Orthanc.DatabasePluginMessages.GetChildrenMetadata.Response get_children_metadata = 142;
inline bool TransactionResponse::_internal_has_get_children_metadata() const {
  return this != internal_default_instance() && get_children_metadata_ != nullptr;
}
inline bool TransactionResponse::has_get_children_metadata() const {
  return _internal_has_get_children_metadata();
}
inline void TransactionResponse::clear_get_children_metadata() {
  if (GetArena() == nullptr && get_children_metadata_ != nullptr) {
    delete get_children_metadata_;
  }
  get_children_metadata_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::GetChildrenMetadata_Response& TransactionResponse::_internal_get_children_metadata() const {
  const ::Orthanc::DatabasePluginMessages::GetChildrenMetadata_Response* p = get_children_metadata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::GetChildrenMetadata_Response*>(
      &::Orthanc::DatabasePluginMessages::_GetChildrenMetadata_Response_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::GetChildrenMetadata_Response& TransactionResponse::get_children_metadata() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionResponse.get_children_metadata)
  return _internal_get_children_metadata();
}
inline void TransactionResponse::unsafe_arena_set_allocated_get_children_metadata(
    ::Orthanc::DatabasePluginMessages::GetChildrenMetadata_Response* get_children_metadata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(get_children_metadata_);
  }
  get_children_metadata_ = get_children_metadata;
  if (get_children_metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.get_children_metadata)
}
inline ::Orthanc::DatabasePluginMessages::GetChildrenMetadata_Response* TransactionResponse::release_get_children_metadata() {
  auto temp = unsafe_arena_release_get_children_metadata();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::GetChildrenMetadata_Response* TransactionResponse::unsafe_arena_release_get_children_metadata() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionResponse.get_children_metadata)
  
  ::Orthanc::DatabasePluginMessages::GetChildrenMetadata_Response* temp = get_children_metadata_;
  get_children_metadata_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::GetChildrenMetadata_Response* TransactionResponse::_internal_mutable_get_children_metadata() {
  
  if (get_children_metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetChildrenMetadata_Response>(GetArena());
    get_children_metadata_ = p;
  }
  return get_children_metadata_;
}
inline ::Orthanc::DatabasePluginMessages::GetChildrenMetadata_Response* TransactionResponse::mutable_get_children_metadata() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionResponse.get_children_metadata)
  return _internal_mutable_get_children_metadata();
}
inline void TransactionResponse::set_allocated_get_children_metadata(::Orthanc::DatabasePluginMessages::GetChildrenMetadata_Response* get_children_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete get_children_metadata_;
  }
  if (get_children_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_children_metadata);
    if (message_arena != submessage_arena) {
      get_children_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_children_metadata, submessage_arena);
    }
    
  } else {
    
  }
  get_children_metadata_ = get_children_metadata;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.get_children_metadata)
}

// .Orthanc.DatabasePluginMessages.GetLastChangeIndex.Response get_last_change_index = 143;
inline bool TransactionResponse::_internal_has_get_last_change_index() const {
  return this != internal_default_instance() && get_last_change_index_ != nullptr;
}
inline bool TransactionResponse::has_get_last_change_index() const {
  return _internal_has_get_last_change_index();
}
inline void TransactionResponse::clear_get_last_change_index() {
  if (GetArena() == nullptr && get_last_change_index_ != nullptr) {
    delete get_last_change_index_;
  }
  get_last_change_index_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::GetLastChangeIndex_Response& TransactionResponse::_internal_get_last_change_index() const {
  const ::Orthanc::DatabasePluginMessages::GetLastChangeIndex_Response* p = get_last_change_index_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::GetLastChangeIndex_Response*>(
      &::Orthanc::DatabasePluginMessages::_GetLastChangeIndex_Response_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::GetLastChangeIndex_Response& TransactionResponse::get_last_change_index() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionResponse.get_last_change_index)
  return _internal_get_last_change_index();
}
inline void TransactionResponse::unsafe_arena_set_allocated_get_last_change_index(
    ::Orthanc::DatabasePluginMessages::GetLastChangeIndex_Response* get_last_change_index) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(get_last_change_index_);
  }
  get_last_change_index_ = get_last_change_index;
  if (get_last_change_index) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.get_last_change_index)
}
inline ::Orthanc::DatabasePluginMessages::GetLastChangeIndex_Response* TransactionResponse::release_get_last_change_index() {
  auto temp = unsafe_arena_release_get_last_change_index();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::GetLastChangeIndex_Response* TransactionResponse::unsafe_arena_release_get_last_change_index() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionResponse.get_last_change_index)
  
  ::Orthanc::DatabasePluginMessages::GetLastChangeIndex_Response* temp = get_last_change_index_;
  get_last_change_index_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::GetLastChangeIndex_Response* TransactionResponse::_internal_mutable_get_last_change_index() {
  
  if (get_last_change_index_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::GetLastChangeIndex_Response>(GetArena());
    get_last_change_index_ = p;
  }
  return get_last_change_index_;
}
inline ::Orthanc::DatabasePluginMessages::GetLastChangeIndex_Response* TransactionResponse::mutable_get_last_change_index() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionResponse.get_last_change_index)
  return _internal_mutable_get_last_change_index();
}
inline void TransactionResponse::set_allocated_get_last_change_index(::Orthanc::DatabasePluginMessages::GetLastChangeIndex_Response* get_last_change_index) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete get_last_change_index_;
  }
  if (get_last_change_index) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_last_change_index);
    if (message_arena != submessage_arena) {
      get_last_change_index = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_last_change_index, submessage_arena);
    }
    
  } else {
    
  }
  get_last_change_index_ = get_last_change_index;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.get_last_change_index)
}

// .Orthanc.DatabasePluginMessages.LookupResourceAndParent.Response lookup_resource_and_parent = 144;
inline bool TransactionResponse::_internal_has_lookup_resource_and_parent() const {
  return this != internal_default_instance() && lookup_resource_and_parent_ != nullptr;
}
inline bool TransactionResponse::has_lookup_resource_and_parent() const {
  return _internal_has_lookup_resource_and_parent();
}
inline void TransactionResponse::clear_lookup_resource_and_parent() {
  if (GetArena() == nullptr && lookup_resource_and_parent_ != nullptr) {
    delete lookup_resource_and_parent_;
  }
  lookup_resource_and_parent_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::LookupResourceAndParent_Response& TransactionResponse::_internal_lookup_resource_and_parent() const {
  const ::Orthanc::DatabasePluginMessages::LookupResourceAndParent_Response* p = lookup_resource_and_parent_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::LookupResourceAndParent_Response*>(
      &::Orthanc::DatabasePluginMessages::_LookupResourceAndParent_Response_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::LookupResourceAndParent_Response& TransactionResponse::lookup_resource_and_parent() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionResponse.lookup_resource_and_parent)
  return _internal_lookup_resource_and_parent();
}
inline void TransactionResponse::unsafe_arena_set_allocated_lookup_resource_and_parent(
    ::Orthanc::DatabasePluginMessages::LookupResourceAndParent_Response* lookup_resource_and_parent) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lookup_resource_and_parent_);
  }
  lookup_resource_and_parent_ = lookup_resource_and_parent;
  if (lookup_resource_and_parent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.lookup_resource_and_parent)
}
inline ::Orthanc::DatabasePluginMessages::LookupResourceAndParent_Response* TransactionResponse::release_lookup_resource_and_parent() {
  auto temp = unsafe_arena_release_lookup_resource_and_parent();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::LookupResourceAndParent_Response* TransactionResponse::unsafe_arena_release_lookup_resource_and_parent() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionResponse.lookup_resource_and_parent)
  
  ::Orthanc::DatabasePluginMessages::LookupResourceAndParent_Response* temp = lookup_resource_and_parent_;
  lookup_resource_and_parent_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::LookupResourceAndParent_Response* TransactionResponse::_internal_mutable_lookup_resource_and_parent() {
  
  if (lookup_resource_and_parent_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::LookupResourceAndParent_Response>(GetArena());
    lookup_resource_and_parent_ = p;
  }
  return lookup_resource_and_parent_;
}
inline ::Orthanc::DatabasePluginMessages::LookupResourceAndParent_Response* TransactionResponse::mutable_lookup_resource_and_parent() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionResponse.lookup_resource_and_parent)
  return _internal_mutable_lookup_resource_and_parent();
}
inline void TransactionResponse::set_allocated_lookup_resource_and_parent(::Orthanc::DatabasePluginMessages::LookupResourceAndParent_Response* lookup_resource_and_parent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete lookup_resource_and_parent_;
  }
  if (lookup_resource_and_parent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lookup_resource_and_parent);
    if (message_arena != submessage_arena) {
      lookup_resource_and_parent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lookup_resource_and_parent, submessage_arena);
    }
    
  } else {
    
  }
  lookup_resource_and_parent_ = lookup_resource_and_parent;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.lookup_resource_and_parent)
}

// .Orthanc.DatabasePluginMessages.AddLabel.Response add_label = 145;
inline bool TransactionResponse::_internal_has_add_label() const {
  return this != internal_default_instance() && add_label_ != nullptr;
}
inline bool TransactionResponse::has_add_label() const {
  return _internal_has_add_label();
}
inline void TransactionResponse::clear_add_label() {
  if (GetArena() == nullptr && add_label_ != nullptr) {
    delete add_label_;
  }
  add_label_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::AddLabel_Response& TransactionResponse::_internal_add_label() const {
  const ::Orthanc::DatabasePluginMessages::AddLabel_Response* p = add_label_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::AddLabel_Response*>(
      &::Orthanc::DatabasePluginMessages::_AddLabel_Response_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::AddLabel_Response& TransactionResponse::add_label() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionResponse.add_label)
  return _internal_add_label();
}
inline void TransactionResponse::unsafe_arena_set_allocated_add_label(
    ::Orthanc::DatabasePluginMessages::AddLabel_Response* add_label) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(add_label_);
  }
  add_label_ = add_label;
  if (add_label) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.add_label)
}
inline ::Orthanc::DatabasePluginMessages::AddLabel_Response* TransactionResponse::release_add_label() {
  auto temp = unsafe_arena_release_add_label();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::AddLabel_Response* TransactionResponse::unsafe_arena_release_add_label() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionResponse.add_label)
  
  ::Orthanc::DatabasePluginMessages::AddLabel_Response* temp = add_label_;
  add_label_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::AddLabel_Response* TransactionResponse::_internal_mutable_add_label() {
  
  if (add_label_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::AddLabel_Response>(GetArena());
    add_label_ = p;
  }
  return add_label_;
}
inline ::Orthanc::DatabasePluginMessages::AddLabel_Response* TransactionResponse::mutable_add_label() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionResponse.add_label)
  return _internal_mutable_add_label();
}
inline void TransactionResponse::set_allocated_add_label(::Orthanc::DatabasePluginMessages::AddLabel_Response* add_label) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete add_label_;
  }
  if (add_label) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(add_label);
    if (message_arena != submessage_arena) {
      add_label = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, add_label, submessage_arena);
    }
    
  } else {
    
  }
  add_label_ = add_label;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.add_label)
}

// .Orthanc.DatabasePluginMessages.RemoveLabel.Response remove_label = 146;
inline bool TransactionResponse::_internal_has_remove_label() const {
  return this != internal_default_instance() && remove_label_ != nullptr;
}
inline bool TransactionResponse::has_remove_label() const {
  return _internal_has_remove_label();
}
inline void TransactionResponse::clear_remove_label() {
  if (GetArena() == nullptr && remove_label_ != nullptr) {
    delete remove_label_;
  }
  remove_label_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::RemoveLabel_Response& TransactionResponse::_internal_remove_label() const {
  const ::Orthanc::DatabasePluginMessages::RemoveLabel_Response* p = remove_label_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::RemoveLabel_Response*>(
      &::Orthanc::DatabasePluginMessages::_RemoveLabel_Response_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::RemoveLabel_Response& TransactionResponse::remove_label() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionResponse.remove_label)
  return _internal_remove_label();
}
inline void TransactionResponse::unsafe_arena_set_allocated_remove_label(
    ::Orthanc::DatabasePluginMessages::RemoveLabel_Response* remove_label) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(remove_label_);
  }
  remove_label_ = remove_label;
  if (remove_label) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.remove_label)
}
inline ::Orthanc::DatabasePluginMessages::RemoveLabel_Response* TransactionResponse::release_remove_label() {
  auto temp = unsafe_arena_release_remove_label();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::RemoveLabel_Response* TransactionResponse::unsafe_arena_release_remove_label() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionResponse.remove_label)
  
  ::Orthanc::DatabasePluginMessages::RemoveLabel_Response* temp = remove_label_;
  remove_label_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::RemoveLabel_Response* TransactionResponse::_internal_mutable_remove_label() {
  
  if (remove_label_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::RemoveLabel_Response>(GetArena());
    remove_label_ = p;
  }
  return remove_label_;
}
inline ::Orthanc::DatabasePluginMessages::RemoveLabel_Response* TransactionResponse::mutable_remove_label() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionResponse.remove_label)
  return _internal_mutable_remove_label();
}
inline void TransactionResponse::set_allocated_remove_label(::Orthanc::DatabasePluginMessages::RemoveLabel_Response* remove_label) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete remove_label_;
  }
  if (remove_label) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(remove_label);
    if (message_arena != submessage_arena) {
      remove_label = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, remove_label, submessage_arena);
    }
    
  } else {
    
  }
  remove_label_ = remove_label;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.remove_label)
}

// .Orthanc.DatabasePluginMessages.ListLabels.Response list_labels = 147;
inline bool TransactionResponse::_internal_has_list_labels() const {
  return this != internal_default_instance() && list_labels_ != nullptr;
}
inline bool TransactionResponse::has_list_labels() const {
  return _internal_has_list_labels();
}
inline void TransactionResponse::clear_list_labels() {
  if (GetArena() == nullptr && list_labels_ != nullptr) {
    delete list_labels_;
  }
  list_labels_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::ListLabels_Response& TransactionResponse::_internal_list_labels() const {
  const ::Orthanc::DatabasePluginMessages::ListLabels_Response* p = list_labels_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::ListLabels_Response*>(
      &::Orthanc::DatabasePluginMessages::_ListLabels_Response_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::ListLabels_Response& TransactionResponse::list_labels() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionResponse.list_labels)
  return _internal_list_labels();
}
inline void TransactionResponse::unsafe_arena_set_allocated_list_labels(
    ::Orthanc::DatabasePluginMessages::ListLabels_Response* list_labels) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(list_labels_);
  }
  list_labels_ = list_labels;
  if (list_labels) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.list_labels)
}
inline ::Orthanc::DatabasePluginMessages::ListLabels_Response* TransactionResponse::release_list_labels() {
  auto temp = unsafe_arena_release_list_labels();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::ListLabels_Response* TransactionResponse::unsafe_arena_release_list_labels() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionResponse.list_labels)
  
  ::Orthanc::DatabasePluginMessages::ListLabels_Response* temp = list_labels_;
  list_labels_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::ListLabels_Response* TransactionResponse::_internal_mutable_list_labels() {
  
  if (list_labels_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::ListLabels_Response>(GetArena());
    list_labels_ = p;
  }
  return list_labels_;
}
inline ::Orthanc::DatabasePluginMessages::ListLabels_Response* TransactionResponse::mutable_list_labels() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionResponse.list_labels)
  return _internal_mutable_list_labels();
}
inline void TransactionResponse::set_allocated_list_labels(::Orthanc::DatabasePluginMessages::ListLabels_Response* list_labels) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete list_labels_;
  }
  if (list_labels) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(list_labels);
    if (message_arena != submessage_arena) {
      list_labels = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list_labels, submessage_arena);
    }
    
  } else {
    
  }
  list_labels_ = list_labels;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.list_labels)
}

// .Orthanc.DatabasePluginMessages.IncrementGlobalProperty.Response increment_global_property = 148;
inline bool TransactionResponse::_internal_has_increment_global_property() const {
  return this != internal_default_instance() && increment_global_property_ != nullptr;
}
inline bool TransactionResponse::has_increment_global_property() const {
  return _internal_has_increment_global_property();
}
inline void TransactionResponse::clear_increment_global_property() {
  if (GetArena() == nullptr && increment_global_property_ != nullptr) {
    delete increment_global_property_;
  }
  increment_global_property_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::IncrementGlobalProperty_Response& TransactionResponse::_internal_increment_global_property() const {
  const ::Orthanc::DatabasePluginMessages::IncrementGlobalProperty_Response* p = increment_global_property_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::IncrementGlobalProperty_Response*>(
      &::Orthanc::DatabasePluginMessages::_IncrementGlobalProperty_Response_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::IncrementGlobalProperty_Response& TransactionResponse::increment_global_property() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionResponse.increment_global_property)
  return _internal_increment_global_property();
}
inline void TransactionResponse::unsafe_arena_set_allocated_increment_global_property(
    ::Orthanc::DatabasePluginMessages::IncrementGlobalProperty_Response* increment_global_property) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(increment_global_property_);
  }
  increment_global_property_ = increment_global_property;
  if (increment_global_property) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.increment_global_property)
}
inline ::Orthanc::DatabasePluginMessages::IncrementGlobalProperty_Response* TransactionResponse::release_increment_global_property() {
  auto temp = unsafe_arena_release_increment_global_property();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::IncrementGlobalProperty_Response* TransactionResponse::unsafe_arena_release_increment_global_property() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionResponse.increment_global_property)
  
  ::Orthanc::DatabasePluginMessages::IncrementGlobalProperty_Response* temp = increment_global_property_;
  increment_global_property_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::IncrementGlobalProperty_Response* TransactionResponse::_internal_mutable_increment_global_property() {
  
  if (increment_global_property_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::IncrementGlobalProperty_Response>(GetArena());
    increment_global_property_ = p;
  }
  return increment_global_property_;
}
inline ::Orthanc::DatabasePluginMessages::IncrementGlobalProperty_Response* TransactionResponse::mutable_increment_global_property() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionResponse.increment_global_property)
  return _internal_mutable_increment_global_property();
}
inline void TransactionResponse::set_allocated_increment_global_property(::Orthanc::DatabasePluginMessages::IncrementGlobalProperty_Response* increment_global_property) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete increment_global_property_;
  }
  if (increment_global_property) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(increment_global_property);
    if (message_arena != submessage_arena) {
      increment_global_property = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, increment_global_property, submessage_arena);
    }
    
  } else {
    
  }
  increment_global_property_ = increment_global_property;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.increment_global_property)
}

// .Orthanc.DatabasePluginMessages.UpdateAndGetStatistics.Response update_and_get_statistics = 149;
inline bool TransactionResponse::_internal_has_update_and_get_statistics() const {
  return this != internal_default_instance() && update_and_get_statistics_ != nullptr;
}
inline bool TransactionResponse::has_update_and_get_statistics() const {
  return _internal_has_update_and_get_statistics();
}
inline void TransactionResponse::clear_update_and_get_statistics() {
  if (GetArena() == nullptr && update_and_get_statistics_ != nullptr) {
    delete update_and_get_statistics_;
  }
  update_and_get_statistics_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics_Response& TransactionResponse::_internal_update_and_get_statistics() const {
  const ::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics_Response* p = update_and_get_statistics_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics_Response*>(
      &::Orthanc::DatabasePluginMessages::_UpdateAndGetStatistics_Response_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics_Response& TransactionResponse::update_and_get_statistics() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.TransactionResponse.update_and_get_statistics)
  return _internal_update_and_get_statistics();
}
inline void TransactionResponse::unsafe_arena_set_allocated_update_and_get_statistics(
    ::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics_Response* update_and_get_statistics) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_and_get_statistics_);
  }
  update_and_get_statistics_ = update_and_get_statistics;
  if (update_and_get_statistics) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.update_and_get_statistics)
}
inline ::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics_Response* TransactionResponse::release_update_and_get_statistics() {
  auto temp = unsafe_arena_release_update_and_get_statistics();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics_Response* TransactionResponse::unsafe_arena_release_update_and_get_statistics() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.TransactionResponse.update_and_get_statistics)
  
  ::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics_Response* temp = update_and_get_statistics_;
  update_and_get_statistics_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics_Response* TransactionResponse::_internal_mutable_update_and_get_statistics() {
  
  if (update_and_get_statistics_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics_Response>(GetArena());
    update_and_get_statistics_ = p;
  }
  return update_and_get_statistics_;
}
inline ::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics_Response* TransactionResponse::mutable_update_and_get_statistics() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.TransactionResponse.update_and_get_statistics)
  return _internal_mutable_update_and_get_statistics();
}
inline void TransactionResponse::set_allocated_update_and_get_statistics(::Orthanc::DatabasePluginMessages::UpdateAndGetStatistics_Response* update_and_get_statistics) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete update_and_get_statistics_;
  }
  if (update_and_get_statistics) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(update_and_get_statistics);
    if (message_arena != submessage_arena) {
      update_and_get_statistics = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_and_get_statistics, submessage_arena);
    }
    
  } else {
    
  }
  update_and_get_statistics_ = update_and_get_statistics;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.TransactionResponse.update_and_get_statistics)
}

// -------------------------------------------------------------------

// Request

// .Orthanc.DatabasePluginMessages.RequestType type = 1;
inline void Request::clear_type() {
  type_ = 0;
}
inline ::Orthanc::DatabasePluginMessages::RequestType Request::_internal_type() const {
  return static_cast< ::Orthanc::DatabasePluginMessages::RequestType >(type_);
}
inline ::Orthanc::DatabasePluginMessages::RequestType Request::type() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.Request.type)
  return _internal_type();
}
inline void Request::_internal_set_type(::Orthanc::DatabasePluginMessages::RequestType value) {
  
  type_ = value;
}
inline void Request::set_type(::Orthanc::DatabasePluginMessages::RequestType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Orthanc.DatabasePluginMessages.Request.type)
}

// .Orthanc.DatabasePluginMessages.DatabaseRequest database_request = 2;
inline bool Request::_internal_has_database_request() const {
  return this != internal_default_instance() && database_request_ != nullptr;
}
inline bool Request::has_database_request() const {
  return _internal_has_database_request();
}
inline void Request::clear_database_request() {
  if (GetArena() == nullptr && database_request_ != nullptr) {
    delete database_request_;
  }
  database_request_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::DatabaseRequest& Request::_internal_database_request() const {
  const ::Orthanc::DatabasePluginMessages::DatabaseRequest* p = database_request_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::DatabaseRequest*>(
      &::Orthanc::DatabasePluginMessages::_DatabaseRequest_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::DatabaseRequest& Request::database_request() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.Request.database_request)
  return _internal_database_request();
}
inline void Request::unsafe_arena_set_allocated_database_request(
    ::Orthanc::DatabasePluginMessages::DatabaseRequest* database_request) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(database_request_);
  }
  database_request_ = database_request;
  if (database_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.Request.database_request)
}
inline ::Orthanc::DatabasePluginMessages::DatabaseRequest* Request::release_database_request() {
  auto temp = unsafe_arena_release_database_request();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::DatabaseRequest* Request::unsafe_arena_release_database_request() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.Request.database_request)
  
  ::Orthanc::DatabasePluginMessages::DatabaseRequest* temp = database_request_;
  database_request_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::DatabaseRequest* Request::_internal_mutable_database_request() {
  
  if (database_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::DatabaseRequest>(GetArena());
    database_request_ = p;
  }
  return database_request_;
}
inline ::Orthanc::DatabasePluginMessages::DatabaseRequest* Request::mutable_database_request() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.Request.database_request)
  return _internal_mutable_database_request();
}
inline void Request::set_allocated_database_request(::Orthanc::DatabasePluginMessages::DatabaseRequest* database_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete database_request_;
  }
  if (database_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(database_request);
    if (message_arena != submessage_arena) {
      database_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, database_request, submessage_arena);
    }
    
  } else {
    
  }
  database_request_ = database_request;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.Request.database_request)
}

// .Orthanc.DatabasePluginMessages.TransactionRequest transaction_request = 3;
inline bool Request::_internal_has_transaction_request() const {
  return this != internal_default_instance() && transaction_request_ != nullptr;
}
inline bool Request::has_transaction_request() const {
  return _internal_has_transaction_request();
}
inline void Request::clear_transaction_request() {
  if (GetArena() == nullptr && transaction_request_ != nullptr) {
    delete transaction_request_;
  }
  transaction_request_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::TransactionRequest& Request::_internal_transaction_request() const {
  const ::Orthanc::DatabasePluginMessages::TransactionRequest* p = transaction_request_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::TransactionRequest*>(
      &::Orthanc::DatabasePluginMessages::_TransactionRequest_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::TransactionRequest& Request::transaction_request() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.Request.transaction_request)
  return _internal_transaction_request();
}
inline void Request::unsafe_arena_set_allocated_transaction_request(
    ::Orthanc::DatabasePluginMessages::TransactionRequest* transaction_request) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transaction_request_);
  }
  transaction_request_ = transaction_request;
  if (transaction_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.Request.transaction_request)
}
inline ::Orthanc::DatabasePluginMessages::TransactionRequest* Request::release_transaction_request() {
  auto temp = unsafe_arena_release_transaction_request();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::TransactionRequest* Request::unsafe_arena_release_transaction_request() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.Request.transaction_request)
  
  ::Orthanc::DatabasePluginMessages::TransactionRequest* temp = transaction_request_;
  transaction_request_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::TransactionRequest* Request::_internal_mutable_transaction_request() {
  
  if (transaction_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::TransactionRequest>(GetArena());
    transaction_request_ = p;
  }
  return transaction_request_;
}
inline ::Orthanc::DatabasePluginMessages::TransactionRequest* Request::mutable_transaction_request() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.Request.transaction_request)
  return _internal_mutable_transaction_request();
}
inline void Request::set_allocated_transaction_request(::Orthanc::DatabasePluginMessages::TransactionRequest* transaction_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete transaction_request_;
  }
  if (transaction_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(transaction_request);
    if (message_arena != submessage_arena) {
      transaction_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transaction_request, submessage_arena);
    }
    
  } else {
    
  }
  transaction_request_ = transaction_request;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.Request.transaction_request)
}

// -------------------------------------------------------------------

// Response

// .Orthanc.DatabasePluginMessages.DatabaseResponse database_response = 2;
inline bool Response::_internal_has_database_response() const {
  return this != internal_default_instance() && database_response_ != nullptr;
}
inline bool Response::has_database_response() const {
  return _internal_has_database_response();
}
inline void Response::clear_database_response() {
  if (GetArena() == nullptr && database_response_ != nullptr) {
    delete database_response_;
  }
  database_response_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::DatabaseResponse& Response::_internal_database_response() const {
  const ::Orthanc::DatabasePluginMessages::DatabaseResponse* p = database_response_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::DatabaseResponse*>(
      &::Orthanc::DatabasePluginMessages::_DatabaseResponse_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::DatabaseResponse& Response::database_response() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.Response.database_response)
  return _internal_database_response();
}
inline void Response::unsafe_arena_set_allocated_database_response(
    ::Orthanc::DatabasePluginMessages::DatabaseResponse* database_response) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(database_response_);
  }
  database_response_ = database_response;
  if (database_response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.Response.database_response)
}
inline ::Orthanc::DatabasePluginMessages::DatabaseResponse* Response::release_database_response() {
  auto temp = unsafe_arena_release_database_response();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::DatabaseResponse* Response::unsafe_arena_release_database_response() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.Response.database_response)
  
  ::Orthanc::DatabasePluginMessages::DatabaseResponse* temp = database_response_;
  database_response_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::DatabaseResponse* Response::_internal_mutable_database_response() {
  
  if (database_response_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::DatabaseResponse>(GetArena());
    database_response_ = p;
  }
  return database_response_;
}
inline ::Orthanc::DatabasePluginMessages::DatabaseResponse* Response::mutable_database_response() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.Response.database_response)
  return _internal_mutable_database_response();
}
inline void Response::set_allocated_database_response(::Orthanc::DatabasePluginMessages::DatabaseResponse* database_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete database_response_;
  }
  if (database_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(database_response);
    if (message_arena != submessage_arena) {
      database_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, database_response, submessage_arena);
    }
    
  } else {
    
  }
  database_response_ = database_response;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.Response.database_response)
}

// .Orthanc.DatabasePluginMessages.TransactionResponse transaction_response = 3;
inline bool Response::_internal_has_transaction_response() const {
  return this != internal_default_instance() && transaction_response_ != nullptr;
}
inline bool Response::has_transaction_response() const {
  return _internal_has_transaction_response();
}
inline void Response::clear_transaction_response() {
  if (GetArena() == nullptr && transaction_response_ != nullptr) {
    delete transaction_response_;
  }
  transaction_response_ = nullptr;
}
inline const ::Orthanc::DatabasePluginMessages::TransactionResponse& Response::_internal_transaction_response() const {
  const ::Orthanc::DatabasePluginMessages::TransactionResponse* p = transaction_response_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Orthanc::DatabasePluginMessages::TransactionResponse*>(
      &::Orthanc::DatabasePluginMessages::_TransactionResponse_default_instance_);
}
inline const ::Orthanc::DatabasePluginMessages::TransactionResponse& Response::transaction_response() const {
  // @@protoc_insertion_point(field_get:Orthanc.DatabasePluginMessages.Response.transaction_response)
  return _internal_transaction_response();
}
inline void Response::unsafe_arena_set_allocated_transaction_response(
    ::Orthanc::DatabasePluginMessages::TransactionResponse* transaction_response) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transaction_response_);
  }
  transaction_response_ = transaction_response;
  if (transaction_response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Orthanc.DatabasePluginMessages.Response.transaction_response)
}
inline ::Orthanc::DatabasePluginMessages::TransactionResponse* Response::release_transaction_response() {
  auto temp = unsafe_arena_release_transaction_response();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::TransactionResponse* Response::unsafe_arena_release_transaction_response() {
  // @@protoc_insertion_point(field_release:Orthanc.DatabasePluginMessages.Response.transaction_response)
  
  ::Orthanc::DatabasePluginMessages::TransactionResponse* temp = transaction_response_;
  transaction_response_ = nullptr;
  return temp;
}
inline ::Orthanc::DatabasePluginMessages::TransactionResponse* Response::_internal_mutable_transaction_response() {
  
  if (transaction_response_ == nullptr) {
    auto* p = CreateMaybeMessage<::Orthanc::DatabasePluginMessages::TransactionResponse>(GetArena());
    transaction_response_ = p;
  }
  return transaction_response_;
}
inline ::Orthanc::DatabasePluginMessages::TransactionResponse* Response::mutable_transaction_response() {
  // @@protoc_insertion_point(field_mutable:Orthanc.DatabasePluginMessages.Response.transaction_response)
  return _internal_mutable_transaction_response();
}
inline void Response::set_allocated_transaction_response(::Orthanc::DatabasePluginMessages::TransactionResponse* transaction_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete transaction_response_;
  }
  if (transaction_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(transaction_response);
    if (message_arena != submessage_arena) {
      transaction_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transaction_response, submessage_arena);
    }
    
  } else {
    
  }
  transaction_response_ = transaction_response;
  // @@protoc_insertion_point(field_set_allocated:Orthanc.DatabasePluginMessages.Response.transaction_response)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace DatabasePluginMessages
}  // namespace Orthanc

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Orthanc::DatabasePluginMessages::ResourceType> : ::std::true_type {};
template <> struct is_proto_enum< ::Orthanc::DatabasePluginMessages::ConstraintType> : ::std::true_type {};
template <> struct is_proto_enum< ::Orthanc::DatabasePluginMessages::LabelsConstraintType> : ::std::true_type {};
template <> struct is_proto_enum< ::Orthanc::DatabasePluginMessages::DatabaseOperation> : ::std::true_type {};
template <> struct is_proto_enum< ::Orthanc::DatabasePluginMessages::TransactionType> : ::std::true_type {};
template <> struct is_proto_enum< ::Orthanc::DatabasePluginMessages::TransactionOperation> : ::std::true_type {};
template <> struct is_proto_enum< ::Orthanc::DatabasePluginMessages::RequestType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_OrthancDatabasePlugin_2eproto
